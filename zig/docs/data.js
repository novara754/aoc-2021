zigAnalysis={"typeKinds": ["Type","Void","Bool","NoReturn","Int","Float","Pointer","Array","Struct","ComptimeFloat","ComptimeInt","Undefined","Null","Optional","ErrorUnion","ErrorSet","Enum","Union","Fn","BoundFn","Opaque","Frame","AnyFrame","Vector","EnumLiteral"],"params": {"zigVersion": "0.9.0-dev.1815+20e19e75f","builds": [{"target": "x86_64-linux-gnu"}],"rootName": "aoc2021-zig"},"rootPkg": 0,"calls": [{"fn": 845,"result": {"type": 709,"value": 710},"args": [{"type": 709,"value": 711}]},{"fn": 846,"result": {"type": 709,"value": 713},"args": [{"type": 714,"value": null},{"type": 715,"value": 320}]},{"fn": 846,"result": {"type": 709,"value": 716},"args": [{"type": 714,"value": null},{"type": 715,"value": 9}]},{"fn": 847,"result": {"type": 709,"value": 716},"args": [{"type": 709,"value": 713}]},{"fn": 846,"result": {"type": 709,"value": 718},"args": [{"type": 714,"value": null},{"type": 715,"value": 6}]},{"fn": 847,"result": {"type": 709,"value": 718},"args": [{"type": 709,"value": 719}]},{"fn": 4,"result": {"type": 720,"value": "false"},"args": [{"type": 721,"value": null}]},{"fn": 5,"result": {"type": 720,"value": "false"},"args": [{"type": 721,"value": null}]},{"fn": 848,"result": {"type": 709,"value": 723},"args": [{"type": 709,"value": 724},{"type": 709,"value": 725},{"type": 11,"value": 12}]},{"fn": 23,"result": {"type": 720,"value": "false"},"args": [{"type": 721,"value": null}]},{"fn": 28,"result": {"type": 720,"value": "false"},"args": [{"type": 721,"value": null}]},{"fn": 36,"result": {"type": 726,"value": "undefined"},"args": [{"type": 720,"value": "true"}]},{"fn": 849,"result": {"type": 709,"value": 728},"args": [{"type": 709,"value": 719}]},{"fn": 850,"result": {"type": 34,"value": 41},"args": [{"type": 709,"value": 719},{"type": 709,"value": 728}]},{"fn": 851,"result": {"type": 35,"value": 42},"args": [{"type": 709,"value": 719},{"type": 709,"value": 728}]},{"fn": 852,"result": {"type": 726,"value": "undefined"},"args": [{"type": 709,"value": 728},{"type": 709,"value": 719},{"type": 709,"value": 719},{"type": 709,"value": 732}]},{"fn": 853,"result": {"type": 709,"value": 734},"args": [{"type": 709,"value": 719},{"type": 709,"value": 735},{"type": 709,"value": 728},{"type": 732,"value": 80}]},{"fn": 854,"result": {"type": 709,"value": 734},"args": [{"type": 709,"value": 719},{"type": 709,"value": 735}]},{"fn": 855,"result": {"type": 709,"value": 738},"args": [{"type": 709,"value": 719},{"type": 709,"value": 735},{"type": 709,"value": 728},{"type": 732,"value": 80}]},{"fn": 856,"result": {"type": 709,"value": 719},"args": [{"type": 709,"value": 719},{"type": 709,"value": 719}]},{"fn": 857,"result": {"type": 709,"value": 741},"args": [{"type": 709,"value": 742},{"type": 743,"value": "null"}]},{"fn": 858,"result": {"type": 709,"value": 741},"args": [{"type": 709,"value": 742}]},{"fn": 857,"result": {"type": 709,"value": 745},"args": [{"type": 709,"value": 746},{"type": 743,"value": "null"}]},{"fn": 858,"result": {"type": 709,"value": 745},"args": [{"type": 709,"value": 746}]},{"fn": 857,"result": {"type": 709,"value": 747},"args": [{"type": 709,"value": 748},{"type": 743,"value": "null"}]},{"fn": 858,"result": {"type": 709,"value": 747},"args": [{"type": 709,"value": 748}]},{"fn": 857,"result": {"type": 709,"value": 749},"args": [{"type": 709,"value": 750},{"type": 743,"value": "null"}]},{"fn": 858,"result": {"type": 709,"value": 749},"args": [{"type": 709,"value": 750}]},{"fn": 857,"result": {"type": 709,"value": 751},"args": [{"type": 709,"value": 752},{"type": 743,"value": "null"}]},{"fn": 858,"result": {"type": 709,"value": 751},"args": [{"type": 709,"value": 752}]},{"fn": 857,"result": {"type": 709,"value": 753},"args": [{"type": 709,"value": 754},{"type": 743,"value": "null"}]},{"fn": 858,"result": {"type": 709,"value": 753},"args": [{"type": 709,"value": 754}]},{"fn": 53,"result": {"type": 720,"value": "false"},"args": [{"type": 755,"value": null}]},{"fn": 52,"result": {"type": 720,"value": "false"},"args": [{"type": 756,"value": null}]},{"fn": 70,"result": {"type": 757,"value": null},"args": [{"type": 721,"value": null}]},{"fn": 859,"result": {"type": 709,"value": 759},"args": [{"type": 709,"value": 760}]},{"fn": 860,"result": {"type": 709,"value": 762},"args": [{"type": 709,"value": 760},{"type": 759,"value": 0}]},{"fn": 861,"result": {"type": 709,"value": 764},"args": [{"type": 709,"value": 762}]},{"fn": 861,"result": {"type": 709,"value": 765},"args": [{"type": 709,"value": 765}]},{"fn": 862,"result": {"type": 709,"value": 765},"args": [{"type": 709,"value": 765}]},{"fn": 863,"result": {"type": 709,"value": 768},"args": [{"type": 709,"value": 765}]},{"fn": 864,"result": {"type": 709,"value": 770},"args": [{"type": 709,"value": 771},{"type": 709,"value": 772},{"type": 73,"value": 80}]},{"fn": 865,"result": {"type": 709,"value": 774},"args": [{"type": 709,"value": 771},{"type": 709,"value": 775},{"type": 709,"value": 776},{"type": 75,"value": 82},{"type": 76,"value": 83},{"type": 77,"value": 84},{"type": 77,"value": 85}]},{"fn": 847,"result": {"type": 709,"value": 718},"args": [{"type": 709,"value": 732}]},{"fn": 866,"result": {"type": 778,"value": null},"args": [{"type": 778,"value": null},{"type": 778,"value": null}]},{"fn": 866,"result": {"type": 778,"value": null},"args": [{"type": 778,"value": null},{"type": 778,"value": null}]},{"fn": 867,"result": {"type": 778,"value": null},"args": [{"type": 778,"value": null},{"type": 778,"value": null},{"type": 778,"value": null}]},{"fn": 868,"result": {"type": 778,"value": null},"args": [{"type": 709,"value": 719}]},{"fn": 857,"result": {"type": 709,"value": 781},"args": [{"type": 709,"value": 765},{"type": 743,"value": "null"}]},{"fn": 858,"result": {"type": 709,"value": 781},"args": [{"type": 709,"value": 765}]},{"fn": 857,"result": {"type": 709,"value": 782},"args": [{"type": 709,"value": 759},{"type": 743,"value": "null"}]},{"fn": 858,"result": {"type": 709,"value": 782},"args": [{"type": 709,"value": 759}]},{"fn": 857,"result": {"type": 709,"value": 783},"args": [{"type": 709,"value": 784},{"type": 743,"value": "null"}]},{"fn": 858,"result": {"type": 709,"value": 783},"args": [{"type": 709,"value": 784}]},{"fn": 846,"result": {"type": 709,"value": 732},"args": [{"type": 714,"value": null},{"type": 715,"value": 64}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 870,"result": {"type": 787,"value": 871},"args": [{"type": 765,"value": null}]},{"fn": 872,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 732}]},{"fn": 871,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 732}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 866,"result": {"type": 778,"value": null},"args": [{"type": 778,"value": null},{"type": 778,"value": null}]},{"fn": 866,"result": {"type": 778,"value": null},"args": [{"type": 778,"value": null},{"type": 778,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 872,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 765}]},{"fn": 871,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 765}]},{"fn": 873,"result": {"type": 791,"value": null},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 719,"value": 0},{"type": 759,"value": 115}]},{"fn": 874,"result": {"type": 791,"value": null},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 759,"value": 115}]},{"fn": 869,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 875,"result": {"type": 720,"value": "true"},"args": [{"type": 778,"value": null}]},{"fn": 876,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 719}]},{"fn": 877,"result": {"type": 709,"value": 796},"args": [{"type": 709,"value": 797}]},{"fn": 878,"result": {"type": 799,"value": 879},"args": [{"type": 796,"value": null}]},{"fn": 879,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 801}]},{"fn": 880,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 801}]},{"fn": 881,"result": {"type": 709,"value": 719},"args": [{"type": 709,"value": 801}]},{"fn": 882,"result": {"type": 709,"value": 805},"args": [{"type": 709,"value": 801},{"type": 806,"value": null},{"type": 709,"value": 807}]},{"fn": 883,"result": {"type": 709,"value": 805},"args": [{"type": 709,"value": 801}]},{"fn": 884,"result": {"type": 709,"value": 810},"args": [{"type": 709,"value": 811}]},{"fn": 280,"result": {"type": 720,"value": "false"},"args": [{"type": 756,"value": null}]},{"fn": 861,"result": {"type": 709,"value": 812},"args": [{"type": 709,"value": 813}]},{"fn": 861,"result": {"type": 709,"value": 814},"args": [{"type": 709,"value": 815}]},{"fn": 868,"result": {"type": 778,"value": null},"args": [{"type": 709,"value": 732}]},{"fn": 885,"result": {"type": 778,"value": null},"args": [{"type": 709,"value": 732}]},{"fn": 885,"result": {"type": 778,"value": null},"args": [{"type": 709,"value": 719}]},{"fn": 879,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 811}]},{"fn": 886,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 811}]},{"fn": 882,"result": {"type": 709,"value": 811},"args": [{"type": 709,"value": 811},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 887,"result": {"type": 709,"value": 811},"args": [{"type": 709,"value": 811}]},{"fn": 868,"result": {"type": 778,"value": null},"args": [{"type": 709,"value": 819}]},{"fn": 885,"result": {"type": 778,"value": null},"args": [{"type": 709,"value": 819}]},{"fn": 888,"result": {"type": 709,"value": 821},"args": [{"type": 709,"value": 822}]},{"fn": 889,"result": {"type": 709,"value": 824},"args": [{"type": 709,"value": 822}]},{"fn": 890,"result": {"type": 709,"value": 826},"args": [{"type": 709,"value": 827}]},{"fn": 890,"result": {"type": 709,"value": 828},"args": [{"type": 709,"value": 829}]},{"fn": 888,"result": {"type": 709,"value": 830},"args": [{"type": 709,"value": 831}]},{"fn": 889,"result": {"type": 709,"value": 832},"args": [{"type": 709,"value": 831}]},{"fn": 891,"result": {"type": 709,"value": 834},"args": [{"type": 709,"value": 835}]},{"fn": 856,"result": {"type": 709,"value": 759},"args": [{"type": 709,"value": 778},{"type": 709,"value": 759}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 872,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 812}]},{"fn": 871,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 812}]},{"fn": 873,"result": {"type": 791,"value": null},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 719,"value": 0},{"type": 759,"value": 115}]},{"fn": 874,"result": {"type": 791,"value": null},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 759,"value": 115}]},{"fn": 869,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 868,"result": {"type": 778,"value": null},"args": [{"type": 709,"value": 836}]},{"fn": 885,"result": {"type": 778,"value": null},"args": [{"type": 709,"value": 836}]},{"fn": 879,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 837}]},{"fn": 886,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 837}]},{"fn": 882,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 837},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 887,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 837}]},{"fn": 879,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 838}]},{"fn": 886,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 838}]},{"fn": 859,"result": {"type": 709,"value": 759},"args": [{"type": 709,"value": 838}]},{"fn": 892,"result": {"type": 840,"value": 893},"args": [{"type": 796,"value": null}]},{"fn": 880,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 838}]},{"fn": 893,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 838}]},{"fn": 882,"result": {"type": 709,"value": 837},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 746}]},{"fn": 894,"result": {"type": 709,"value": 837},"args": [{"type": 709,"value": 746},{"type": 709,"value": 838}]},{"fn": 879,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 843}]},{"fn": 886,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 843}]},{"fn": 882,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 843},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 887,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 843}]},{"fn": 882,"result": {"type": 709,"value": 843},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 748}]},{"fn": 894,"result": {"type": 709,"value": 843},"args": [{"type": 709,"value": 748},{"type": 709,"value": 838}]},{"fn": 879,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 844}]},{"fn": 886,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 844}]},{"fn": 882,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 844},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 887,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 844}]},{"fn": 882,"result": {"type": 709,"value": 844},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 742}]},{"fn": 894,"result": {"type": 709,"value": 844},"args": [{"type": 709,"value": 742},{"type": 709,"value": 838}]},{"fn": 879,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 845}]},{"fn": 886,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 845}]},{"fn": 882,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 845},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 887,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 845}]},{"fn": 882,"result": {"type": 709,"value": 845},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 752}]},{"fn": 894,"result": {"type": 709,"value": 845},"args": [{"type": 709,"value": 752},{"type": 709,"value": 838}]},{"fn": 879,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 846}]},{"fn": 886,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 846}]},{"fn": 882,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 846},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 887,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 846}]},{"fn": 882,"result": {"type": 709,"value": 846},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 754}]},{"fn": 894,"result": {"type": 709,"value": 846},"args": [{"type": 709,"value": 754},{"type": 709,"value": 838}]},{"fn": 879,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 847}]},{"fn": 886,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 847}]},{"fn": 882,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 847},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 887,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 847}]},{"fn": 882,"result": {"type": 709,"value": 847},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 750}]},{"fn": 894,"result": {"type": 709,"value": 847},"args": [{"type": 709,"value": 750},{"type": 709,"value": 838}]},{"fn": 846,"result": {"type": 709,"value": 848},"args": [{"type": 714,"value": null},{"type": 715,"value": 33}]},{"fn": 882,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 894,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 759},{"type": 709,"value": 838}]},{"fn": 859,"result": {"type": 709,"value": 759},"args": [{"type": 709,"value": 811}]},{"fn": 895,"result": {"type": 850,"value": "null"},"args": [{"type": 709,"value": 811}]},{"fn": 882,"result": {"type": 709,"value": 851},"args": [{"type": 709,"value": 811},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 879,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 852}]},{"fn": 886,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 852}]},{"fn": 882,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 852},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 887,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 852}]},{"fn": 882,"result": {"type": 709,"value": 852},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 765}]},{"fn": 894,"result": {"type": 709,"value": 852},"args": [{"type": 709,"value": 765},{"type": 709,"value": 838}]},{"fn": 880,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 811}]},{"fn": 893,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 811}]},{"fn": 894,"result": {"type": 709,"value": 811},"args": [{"type": 709,"value": 759},{"type": 709,"value": 811}]},{"fn": 879,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 853}]},{"fn": 886,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 853}]},{"fn": 882,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 853},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 887,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 853}]},{"fn": 882,"result": {"type": 709,"value": 853},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 784}]},{"fn": 894,"result": {"type": 709,"value": 853},"args": [{"type": 709,"value": 784},{"type": 709,"value": 838}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 873,"result": {"type": 791,"value": null},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 719,"value": 0},{"type": 759,"value": 115}]},{"fn": 874,"result": {"type": 791,"value": null},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 759,"value": 115}]},{"fn": 869,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 468,"result": {"type": 720,"value": "false"},"args": [{"type": 721,"value": null}]},{"fn": 896,"result": {"type": 709,"value": 855},"args": [{"type": 856,"value": null}]},{"fn": 859,"result": {"type": 709,"value": 746},"args": [{"type": 709,"value": 837}]},{"fn": 882,"result": {"type": 709,"value": 857},"args": [{"type": 709,"value": 837},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 882,"result": {"type": 709,"value": 858},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 746}]},{"fn": 859,"result": {"type": 709,"value": 748},"args": [{"type": 709,"value": 843}]},{"fn": 882,"result": {"type": 709,"value": 857},"args": [{"type": 709,"value": 843},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 882,"result": {"type": 709,"value": 859},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 748}]},{"fn": 859,"result": {"type": 709,"value": 742},"args": [{"type": 709,"value": 844}]},{"fn": 882,"result": {"type": 709,"value": 857},"args": [{"type": 709,"value": 844},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 882,"result": {"type": 709,"value": 860},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 742}]},{"fn": 859,"result": {"type": 709,"value": 752},"args": [{"type": 709,"value": 845}]},{"fn": 882,"result": {"type": 709,"value": 857},"args": [{"type": 709,"value": 845},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 882,"result": {"type": 709,"value": 861},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 752}]},{"fn": 859,"result": {"type": 709,"value": 754},"args": [{"type": 709,"value": 846}]},{"fn": 882,"result": {"type": 709,"value": 857},"args": [{"type": 709,"value": 846},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 882,"result": {"type": 709,"value": 862},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 754}]},{"fn": 859,"result": {"type": 709,"value": 750},"args": [{"type": 709,"value": 847}]},{"fn": 882,"result": {"type": 709,"value": 857},"args": [{"type": 709,"value": 847},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 882,"result": {"type": 709,"value": 863},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 750}]},{"fn": 847,"result": {"type": 709,"value": 718},"args": [{"type": 709,"value": 848}]},{"fn": 882,"result": {"type": 709,"value": 857},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 887,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 838}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 873,"result": {"type": 791,"value": null},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 719,"value": 0},{"type": 759,"value": 115}]},{"fn": 874,"result": {"type": 791,"value": null},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 759,"value": 115}]},{"fn": 869,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 872,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 719}]},{"fn": 871,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 719}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 873,"result": {"type": 791,"value": null},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 719,"value": 0},{"type": 759,"value": 115}]},{"fn": 874,"result": {"type": 791,"value": null},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 759,"value": 115}]},{"fn": 869,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 873,"result": {"type": 791,"value": null},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 719,"value": 0},{"type": 759,"value": 115}]},{"fn": 874,"result": {"type": 791,"value": null},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 759,"value": 115}]},{"fn": 869,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 859,"result": {"type": 709,"value": 765},"args": [{"type": 709,"value": 852}]},{"fn": 882,"result": {"type": 709,"value": 857},"args": [{"type": 709,"value": 852},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 882,"result": {"type": 709,"value": 864},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 765}]},{"fn": 859,"result": {"type": 709,"value": 784},"args": [{"type": 709,"value": 853}]},{"fn": 882,"result": {"type": 709,"value": 857},"args": [{"type": 709,"value": 853},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 882,"result": {"type": 709,"value": 865},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 784}]},{"fn": 879,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 765}]},{"fn": 886,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 765}]},{"fn": 882,"result": {"type": 709,"value": 765},"args": [{"type": 709,"value": 765},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 887,"result": {"type": 709,"value": 765},"args": [{"type": 709,"value": 765}]},{"fn": 857,"result": {"type": 709,"value": 782},"args": [{"type": 709,"value": 759},{"type": 743,"value": null}]},{"fn": 864,"result": {"type": 709,"value": 866},"args": [{"type": 709,"value": 724},{"type": 709,"value": 867},{"type": 323,"value": 349}]},{"fn": 856,"result": {"type": 709,"value": 719},"args": [{"type": 709,"value": 719},{"type": 709,"value": 778}]},{"fn": 568,"result": {"type": 720,"value": "false"},"args": [{"type": 721,"value": null}]},{"fn": 897,"result": {"type": 869,"value": null},"args": [{"type": 709,"value": 870}]},{"fn": 879,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 871}]},{"fn": 880,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 871}]},{"fn": 881,"result": {"type": 709,"value": 870},"args": [{"type": 709,"value": 871}]},{"fn": 882,"result": {"type": 709,"value": 872},"args": [{"type": 709,"value": 871},{"type": 806,"value": null},{"type": 709,"value": 873}]},{"fn": 883,"result": {"type": 709,"value": 872},"args": [{"type": 709,"value": 871}]},{"fn": 895,"result": {"type": 850,"value": "null"},"args": [{"type": 709,"value": 838}]},{"fn": 859,"result": {"type": 709,"value": 759},"args": [{"type": 709,"value": 765}]},{"fn": 895,"result": {"type": 850,"value": "null"},"args": [{"type": 709,"value": 765}]},{"fn": 882,"result": {"type": 709,"value": 874},"args": [{"type": 709,"value": 765},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 898,"result": {"type": 709,"value": 876},"args": [{"type": 709,"value": 759}]},{"fn": 899,"result": {"type": 709,"value": 878},"args": [{"type": 709,"value": 876},{"type": 709,"value": 765}]},{"fn": 900,"result": {"type": 709,"value": 880},"args": [{"type": 709,"value": 759}]},{"fn": 857,"result": {"type": 709,"value": 881},"args": [{"type": 709,"value": 882},{"type": 743,"value": "null"}]},{"fn": 858,"result": {"type": 709,"value": 881},"args": [{"type": 709,"value": 882}]},{"fn": 849,"result": {"type": 709,"value": 883},"args": [{"type": 709,"value": 884}]},{"fn": 850,"result": {"type": 519,"value": 598},"args": [{"type": 709,"value": 884},{"type": 709,"value": 883}]},{"fn": 851,"result": {"type": 520,"value": 599},"args": [{"type": 709,"value": 884},{"type": 709,"value": 883}]},{"fn": 852,"result": {"type": 726,"value": "undefined"},"args": [{"type": 709,"value": 883},{"type": 709,"value": 884},{"type": 709,"value": 884},{"type": 709,"value": 732}]},{"fn": 853,"result": {"type": 709,"value": 885},"args": [{"type": 709,"value": 884},{"type": 709,"value": 829},{"type": 709,"value": 883},{"type": 732,"value": 80}]},{"fn": 854,"result": {"type": 709,"value": 885},"args": [{"type": 709,"value": 884},{"type": 709,"value": 829}]},{"fn": 855,"result": {"type": 709,"value": 886},"args": [{"type": 709,"value": 884},{"type": 709,"value": 829},{"type": 709,"value": 883},{"type": 732,"value": 80}]},{"fn": 856,"result": {"type": 709,"value": 829},"args": [{"type": 709,"value": 829},{"type": 709,"value": 829}]},{"fn": 866,"result": {"type": 778,"value": null},"args": [{"type": 778,"value": null},{"type": 778,"value": null}]},{"fn": 866,"result": {"type": 778,"value": null},"args": [{"type": 778,"value": null},{"type": 778,"value": null}]},{"fn": 867,"result": {"type": 778,"value": null},"args": [{"type": 778,"value": null},{"type": 778,"value": null},{"type": 778,"value": null}]},{"fn": 849,"result": {"type": 709,"value": 887},"args": [{"type": 709,"value": 888}]},{"fn": 850,"result": {"type": 545,"value": 628},"args": [{"type": 709,"value": 888},{"type": 709,"value": 887}]},{"fn": 851,"result": {"type": 546,"value": 629},"args": [{"type": 709,"value": 888},{"type": 709,"value": 887}]},{"fn": 852,"result": {"type": 726,"value": "undefined"},"args": [{"type": 709,"value": 887},{"type": 709,"value": 888},{"type": 709,"value": 888},{"type": 709,"value": 732}]},{"fn": 853,"result": {"type": 709,"value": 889},"args": [{"type": 709,"value": 888},{"type": 709,"value": 732},{"type": 709,"value": 887},{"type": 732,"value": 80}]},{"fn": 854,"result": {"type": 709,"value": 889},"args": [{"type": 709,"value": 888},{"type": 709,"value": 732}]},{"fn": 855,"result": {"type": 709,"value": 890},"args": [{"type": 709,"value": 888},{"type": 709,"value": 732},{"type": 709,"value": 887},{"type": 732,"value": 80}]},{"fn": 857,"result": {"type": 709,"value": 891},"args": [{"type": 709,"value": 829},{"type": 743,"value": "null"}]},{"fn": 858,"result": {"type": 709,"value": 891},"args": [{"type": 709,"value": 829}]},{"fn": 901,"result": {"type": 577,"value": 662},"args": [{"type": 709,"value": 829}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 872,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 715}]},{"fn": 871,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 715}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 866,"result": {"type": 778,"value": null},"args": [{"type": 778,"value": null},{"type": 778,"value": null}]},{"fn": 846,"result": {"type": 709,"value": 715},"args": [{"type": 714,"value": null},{"type": 715,"value": 16}]},{"fn": 866,"result": {"type": 778,"value": null},"args": [{"type": 778,"value": null},{"type": 778,"value": null}]},{"fn": 846,"result": {"type": 709,"value": 759},"args": [{"type": 714,"value": null},{"type": 715,"value": 8}]},{"fn": 846,"result": {"type": 709,"value": 893},"args": [{"type": 714,"value": null},{"type": 715,"value": 32}]},{"fn": 846,"result": {"type": 709,"value": 894},"args": [{"type": 714,"value": null},{"type": 715,"value": 128}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 875,"result": {"type": 720,"value": "true"},"args": [{"type": 778,"value": null}]},{"fn": 876,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 829}]},{"fn": 876,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 884}]},{"fn": 879,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 895}]},{"fn": 880,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 895}]},{"fn": 881,"result": {"type": 709,"value": 884},"args": [{"type": 709,"value": 895}]},{"fn": 882,"result": {"type": 709,"value": 896},"args": [{"type": 709,"value": 895},{"type": 806,"value": null},{"type": 709,"value": 807}]},{"fn": 883,"result": {"type": 709,"value": 896},"args": [{"type": 709,"value": 895}]},{"fn": 902,"result": {"type": 709,"value": 898},"args": [{"type": 709,"value": 829}]},{"fn": 876,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 888}]},{"fn": 903,"result": {"type": 709,"value": 893},"args": [{"type": 709,"value": 719}]},{"fn": 848,"result": {"type": 709,"value": 900},"args": [{"type": 709,"value": 726},{"type": 709,"value": 901},{"type": 902,"value": 748}]},{"fn": 904,"result": {"type": 709,"value": 904},"args": [{"type": 709,"value": 900}]},{"fn": 848,"result": {"type": 709,"value": 905},"args": [{"type": 709,"value": 906},{"type": 709,"value": 901},{"type": 642,"value": 750}]},{"fn": 861,"result": {"type": 709,"value": 811},"args": [{"type": 709,"value": 811}]},{"fn": 862,"result": {"type": 709,"value": 811},"args": [{"type": 709,"value": 811}]},{"fn": 863,"result": {"type": 709,"value": 907},"args": [{"type": 709,"value": 811}]},{"fn": 848,"result": {"type": 709,"value": 908},"args": [{"type": 709,"value": 909},{"type": 709,"value": 910},{"type": 648,"value": 756}]},{"fn": 905,"result": {"type": 912,"value": null},"args": [{"type": 913,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 873,"result": {"type": 791,"value": null},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 719,"value": 0},{"type": 759,"value": 115}]},{"fn": 874,"result": {"type": 791,"value": null},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 759,"value": 115}]},{"fn": 869,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 906,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 720}]},{"fn": 879,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 915}]},{"fn": 886,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 915}]},{"fn": 882,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 915},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 887,"result": {"type": 709,"value": 838},"args": [{"type": 709,"value": 915}]},{"fn": 882,"result": {"type": 709,"value": 915},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 882}]},{"fn": 894,"result": {"type": 709,"value": 915},"args": [{"type": 709,"value": 882},{"type": 709,"value": 838}]},{"fn": 879,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 916}]},{"fn": 886,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 916}]},{"fn": 859,"result": {"type": 709,"value": 759},"args": [{"type": 709,"value": 916}]},{"fn": 880,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 916}]},{"fn": 893,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 916}]},{"fn": 882,"result": {"type": 709,"value": 916},"args": [{"type": 709,"value": 916},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 894,"result": {"type": 709,"value": 916},"args": [{"type": 709,"value": 759},{"type": 709,"value": 916}]},{"fn": 879,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 888}]},{"fn": 886,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 888}]},{"fn": 878,"result": {"type": 917,"value": 907},"args": [{"type": 796,"value": null}]},{"fn": 907,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 888}]},{"fn": 879,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 829}]},{"fn": 886,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 829}]},{"fn": 907,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 829}]},{"fn": 878,"result": {"type": 919,"value": 908},"args": [{"type": 796,"value": null}]},{"fn": 908,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 829}]},{"fn": 909,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 829}]},{"fn": 879,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 719}]},{"fn": 886,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 719}]},{"fn": 907,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 719}]},{"fn": 908,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 719}]},{"fn": 909,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 719}]},{"fn": 908,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 888}]},{"fn": 909,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 888}]},{"fn": 879,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 922}]},{"fn": 886,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 922}]},{"fn": 882,"result": {"type": 709,"value": 916},"args": [{"type": 709,"value": 922},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 887,"result": {"type": 709,"value": 916},"args": [{"type": 709,"value": 922}]},{"fn": 882,"result": {"type": 709,"value": 922},"args": [{"type": 709,"value": 916},{"type": 806,"value": null},{"type": 709,"value": 829}]},{"fn": 894,"result": {"type": 709,"value": 922},"args": [{"type": 709,"value": 829},{"type": 709,"value": 916}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 905,"result": {"type": 923,"value": null},"args": [{"type": 913,"value": null}]},{"fn": 859,"result": {"type": 709,"value": 882},"args": [{"type": 709,"value": 915}]},{"fn": 882,"result": {"type": 709,"value": 857},"args": [{"type": 709,"value": 915},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 882,"result": {"type": 709,"value": 924},"args": [{"type": 709,"value": 838},{"type": 806,"value": null},{"type": 709,"value": 882}]},{"fn": 882,"result": {"type": 709,"value": 925},"args": [{"type": 709,"value": 916},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 887,"result": {"type": 709,"value": 916},"args": [{"type": 709,"value": 916}]},{"fn": 859,"result": {"type": 709,"value": 829},"args": [{"type": 709,"value": 922}]},{"fn": 895,"result": {"type": 926,"value": "null"},"args": [{"type": 709,"value": 922}]},{"fn": 882,"result": {"type": 709,"value": 925},"args": [{"type": 709,"value": 922},{"type": 806,"value": null},{"type": 709,"value": 759}]},{"fn": 882,"result": {"type": 709,"value": 927},"args": [{"type": 709,"value": 916},{"type": 806,"value": null},{"type": 709,"value": 829}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 873,"result": {"type": 791,"value": null},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 719,"value": 0},{"type": 759,"value": 115}]},{"fn": 874,"result": {"type": 791,"value": null},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 759,"value": 115}]},{"fn": 869,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 868,"result": {"type": 778,"value": null},"args": [{"type": 709,"value": 759}]},{"fn": 868,"result": {"type": 778,"value": null},"args": [{"type": 709,"value": 829}]},{"fn": 885,"result": {"type": 778,"value": null},"args": [{"type": 709,"value": 759}]},{"fn": 885,"result": {"type": 778,"value": null},"args": [{"type": 709,"value": 829}]},{"fn": 895,"result": {"type": 850,"value": "null"},"args": [{"type": 709,"value": 916}]},{"fn": 879,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 928}]},{"fn": 880,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 928}]},{"fn": 881,"result": {"type": 709,"value": 829},"args": [{"type": 709,"value": 928}]},{"fn": 882,"result": {"type": 709,"value": 929},"args": [{"type": 709,"value": 928},{"type": 806,"value": null},{"type": 709,"value": 930}]},{"fn": 883,"result": {"type": 709,"value": 929},"args": [{"type": 709,"value": 928}]},{"fn": 869,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 759},{"type": 765,"value": null},{"type": 765,"value": null}]},{"fn": 852,"result": {"type": 726,"value": "undefined"},"args": [{"type": 709,"value": 931},{"type": 709,"value": 765},{"type": 709,"value": 765},{"type": 709,"value": 732}]},{"fn": 853,"result": {"type": 709,"value": 932},"args": [{"type": 709,"value": 765},{"type": 709,"value": 933},{"type": 709,"value": 931},{"type": 732,"value": 80}]},{"fn": 910,"result": {"type": 709,"value": 932},"args": [{"type": 709,"value": 933}]},{"fn": 855,"result": {"type": 709,"value": 935},"args": [{"type": 709,"value": 765},{"type": 709,"value": 933},{"type": 709,"value": 931},{"type": 732,"value": 80}]},{"fn": 857,"result": {"type": 709,"value": 936},"args": [{"type": 709,"value": 937},{"type": 743,"value": "null"}]},{"fn": 858,"result": {"type": 709,"value": 936},"args": [{"type": 709,"value": 937}]},{"fn": 911,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 827}]},{"fn": 912,"result": {"type": 709,"value": 940},"args": [{"type": 720,"value": "false"},{"type": 709,"value": 941}]},{"fn": 913,"result": {"type": 720,"value": "false"},"args": [{"type": 709,"value": 827}]},{"fn": 912,"result": {"type": 709,"value": 943},"args": [{"type": 720,"value": "false"},{"type": 709,"value": 944}]},{"fn": 911,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 829}]},{"fn": 914,"result": {"type": 709,"value": 946},"args": [{"type": 720,"value": "true"},{"type": 709,"value": 946}]},{"fn": 913,"result": {"type": 720,"value": "true"},"args": [{"type": 709,"value": 829}]},{"fn": 914,"result": {"type": 709,"value": 947},"args": [{"type": 720,"value": "true"},{"type": 709,"value": 947}]}],"packages": [{"name": "","file": 0,"main": 948,"table": {"std": 1,"builtin": 2,"root": 0,"root": 0}},{"name": "std","file": 1,"main": 949,"table": {"builtin": 2,"std": 1,"root": 0}},{"name": "builtin","file": 2,"main": 950,"table": {"std": 1}}],"types": [{"kind": 18,"name": "fn([]const u8, ?*std.builtin.StackTrace) noreturn","generic": false,"ret": 951,"args": [765,952]},{"kind": 18,"name": "fn([]const std.target.x86.Feature) std.target.Set","generic": false,"ret": 953,"args": [954]},{"kind": 18,"name": "fn() std.target.Set","generic": false,"ret": 953},{"kind": 18,"name": "fn(*std.target.Set, u9) void","generic": false,"ret": 726,"args": [955,716]},{"kind": 18,"name": "fn(std.target.Arch) bool","generic": false,"ret": 720,"args": [721]},{"kind": 18,"name": "fn() callconv(.Naked) noreturn","generic": false,"ret": 951},{"kind": 18,"name": "fn(?*const std.builtin.StackTrace, ?usize, []const u8) noreturn","generic": false,"ret": 951,"args": [956,791,765]},{"kind": 18,"name": "fn() noreturn","generic": false,"ret": 951},{"kind": 18,"name": "fn() void","generic": false,"ret": 726},{"kind": 18,"name": "fn(*std.Thread.Mutex) void","generic": false,"ret": 726,"args": [957]},{"kind": 18,"name": "fn() std.fs.file.File","generic": false,"ret": 724},{"kind": 18,"name": "fn(std.fs.file.File, []const u8) std.os.WriteError!usize","generic": false,"ret": 958,"args": [724,765]},{"kind": 18,"name": "fn(std.fs.file.File) std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)","generic": false,"ret": 723,"args": [724]},{"kind": 18,"name": "fn() u64","generic": false,"ret": 732},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:297:56) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,960]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:299:40) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,961]},{"kind": 18,"name": "fn(std.builtin.StackTrace) void","generic": false,"ret": 726,"args": [962]},{"kind": 18,"name": "fn(?usize) void","generic": false,"ret": 726,"args": [791]},{"kind": 18,"name": "fn(*std.Thread.StaticResetEvent) void","generic": false,"ret": 726,"args": [963]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:323:67) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,964]},{"kind": 18,"name": "fn([]std.elf.Elf64_Phdr) void","generic": false,"ret": 726,"args": [965]},{"kind": 18,"name": "fn(u8) noreturn","generic": false,"ret": 951,"args": [759]},{"kind": 18,"name": "fn(usize, [*][*:0]u8, [][*:0]u8) u8","generic": false,"ret": 759,"args": [719,966,967]},{"kind": 18,"name": "fn(u6, ?*const std.os.linux.Sigaction, ?*std.os.linux.Sigaction) void","generic": false,"ret": 726,"args": [718,968,969]},{"kind": 18,"name": "fn(*std.Thread.Mutex.AtomicMutex) void","generic": false,"ret": 726,"args": [970]},{"kind": 18,"name": "fn() i32","generic": false,"ret": 829},{"kind": 18,"name": "fn(i32, []const u8) std.os.WriteError!usize","generic": false,"ret": 958,"args": [829,765]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:297:56) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 971,"args": [723,960]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), []const u8) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,765]},{"kind": 18,"name": "fn(bool) void","generic": false,"ret": 726,"args": [720]},{"kind": 18,"name": "fn(u64, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), usize) std.os.WriteError!void","generic": false,"ret": 959,"args": [732,972,723,719]},{"kind": 18,"name": "fn(u8) std.os.UnexpectedError!void","generic": false,"ret": 973,"args": [759]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:299:40) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 974,"args": [723,961]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), usize) std.os.WriteError!void","generic": false,"ret": 959,"args": [765,972,723,719]},{"kind": 18,"name": "fn(std.hash_map.AutoContext(usize), usize) u64","generic": false,"ret": 732,"args": [728,719]},{"kind": 18,"name": "fn(std.hash_map.AutoContext(usize), usize, usize) bool","generic": false,"ret": 720,"args": [728,719,719]},{"kind": 18,"name": "fn() @typeInfo(@typeInfo(@TypeOf(std.debug.getSelfDebugInfo)).Fn.return_type.?).ErrorUnion.error_set!*std.debug.DebugInfo","generic": false,"ret": 975},{"kind": 18,"name": "fn(*std.mem.Allocator) anyerror!std.debug.DebugInfo","generic": false,"ret": 976,"args": [977]},{"kind": 18,"name": "fn() *std.mem.Allocator","generic": false,"ret": 977},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:205:91) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,978]},{"kind": 18,"name": "fn() std.debug.Config","generic": false,"ret": 979},{"kind": 18,"name": "fn(std.builtin.StackTrace, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), *std.mem.Allocator, *std.debug.DebugInfo, std.debug.Config) @typeInfo(@typeInfo(@TypeOf(std.debug.writeStackTrace)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 980,"args": [962,723,977,981,979]},{"kind": 18,"name": "fn(usize, usize) usize","generic": false,"ret": 719,"args": [719,719]},{"kind": 18,"name": "fn(*std.debug.DebugInfo, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), usize, std.debug.Config) @typeInfo(@typeInfo(@TypeOf(std.debug.printSourceAtAddress)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 982,"args": [981,723,719,979]},{"kind": 18,"name": "fn(*std.debug.DebugInfo, usize) @typeInfo(@typeInfo(@TypeOf(std.debug.DebugInfo.getModuleForAddress)).Fn.return_type.?).ErrorUnion.error_set!*std.debug.ModuleDebugInfo","generic": false,"ret": 983,"args": [981,719]},{"kind": 18,"name": "fn(std.target.Target) bool","generic": false,"ret": 720,"args": [756]},{"kind": 18,"name": "fn(std.target.Tag) bool","generic": false,"ret": 720,"args": [755]},{"kind": 18,"name": "fn(*std.debug.DebugInfo, usize) @typeInfo(@typeInfo(@TypeOf(std.debug.DebugInfo.lookupModuleDl)).Fn.return_type.?).ErrorUnion.error_set!*std.debug.ModuleDebugInfo","generic": false,"ret": 984,"args": [981,719]},{"kind": 18,"name": "fn(*std.os.linux.dl_phdr_info, usize, *std.debug.struct:1155:18) @typeInfo(@typeInfo(@TypeOf(std.debug.struct:1164:48.callback)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 985,"args": [986,719,987]},{"kind": 18,"name": "fn(*std.debug.struct:1155:18) anyerror!void","generic": false,"ret": 988,"args": [987]},{"kind": 18,"name": "fn(std.hash_map.HashMap(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), usize) ?*std.debug.ModuleDebugInfo","generic": false,"ret": 989,"args": [734,719]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.mem.Allocator.Error!*std.debug.ModuleDebugInfo","generic": false,"ret": 990,"args": [977]},{"kind": 18,"name": "fn() std.fs.Dir","generic": false,"ret": 991},{"kind": 18,"name": "fn(std.fs.Dir, []const u8, std.fs.file.OpenFlags) std.fs.file.OpenError!std.fs.file.File","generic": false,"ret": 992,"args": [991,765,993]},{"kind": 18,"name": "fn(std.fs.file.OpenFlags) std.fs.OpenSelfExeError!std.fs.file.File","generic": false,"ret": 994,"args": [993]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.debug.ModuleDebugInfo) void","generic": false,"ret": 726,"args": [977,735]},{"kind": 18,"name": "fn(*std.mem.Allocator, std.fs.file.File) @typeInfo(@typeInfo(@TypeOf(std.debug.readElfDebugInfo)).Fn.return_type.?).ErrorUnion.error_set!std.debug.ModuleDebugInfo","generic": false,"ret": 995,"args": [977,724]},{"kind": 18,"name": "fn(std.fs.file.File) @typeInfo(@typeInfo(@TypeOf(std.debug.mapWholeFile)).Fn.return_type.?).ErrorUnion.error_set![]align(4096) const u8","generic": false,"ret": 996,"args": [724]},{"kind": 18,"name": "fn(std.fs.file.File) std.fs.file.GetSeekPosError!u64","generic": false,"ret": 997,"args": [724]},{"kind": 18,"name": "fn(std.fs.file.File) void","generic": false,"ret": 726,"args": [724]},{"kind": 18,"name": "fn(u64) std.math.error:993:44!usize","generic": false,"ret": 998,"args": [732]},{"kind": 18,"name": "fn(?[*]align(4096) u8, usize, u32, u32, i32, u64) std.os.MMapError![]align(4096) u8","generic": false,"ret": 999,"args": [1000,719,893,893,829,732]},{"kind": 18,"name": "fn([]const u8, []const u8) bool","generic": false,"ret": 720,"args": [765,765]},{"kind": 18,"name": "fn(std.target.Arch) std.builtin.Endian","generic": false,"ret": 757,"args": [721]},{"kind": 18,"name": "fn([*]align(4096) const u8) [*:0]align(4096) const u8","generic": false,"ret": 762,"args": [760]},{"kind": 18,"name": "fn([*:0]align(4096) const u8) [:0]align(4096) const u8","generic": false,"ret": 764,"args": [762]},{"kind": 18,"name": "fn([]const u8, u64, u64) @typeInfo(@typeInfo(@TypeOf(std.debug.chopSlice)).Fn.return_type.?).ErrorUnion.error_set![]const u8","generic": false,"ret": 1001,"args": [765,732,732]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo, *std.mem.Allocator) @typeInfo(@typeInfo(@TypeOf(std.dwarf.openDwarfDebugInfo)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1002,"args": [1003,977]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null)","generic": false,"ret": 741,"args": [977]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null)","generic": false,"ret": 749,"args": [977]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.ArrayListAligned(std.dwarf.Func,null)","generic": false,"ret": 753,"args": [977]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo) @typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.scanAllFunctions)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1004,"args": [1003]},{"kind": 18,"name": "fn([]const u8) std.io.fixed_buffer_stream.FixedBufferStream([]const u8)","generic": false,"ret": 768,"args": [765]},{"kind": 18,"name": "fn(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8), []u8) std.io.fixed_buffer_stream.ReadError!usize","generic": false,"ret": 1005,"args": [771,811]},{"kind": 18,"name": "fn(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8)) std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)","generic": false,"ret": 770,"args": [771]},{"kind": 18,"name": "fn(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8), u64) std.io.fixed_buffer_stream.SeekError!void","generic": false,"ret": 1006,"args": [771,732]},{"kind": 18,"name": "fn(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8), i64) std.io.fixed_buffer_stream.SeekError!void","generic": false,"ret": 1006,"args": [771,836]},{"kind": 18,"name": "fn(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8)) std.io.fixed_buffer_stream.GetSeekPosError!u64","generic": false,"ret": 1007,"args": [771]},{"kind": 18,"name": "fn(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8)) std.io.seekable_stream.SeekableStream(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.SeekError,std.io.fixed_buffer_stream.GetSeekPosError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekTo,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekBy,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getPos,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getEndPos)","generic": false,"ret": 774,"args": [771]},{"kind": 18,"name": "fn(std.io.seekable_stream.SeekableStream(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.SeekError,std.io.fixed_buffer_stream.GetSeekPosError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekTo,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekBy,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getPos,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getEndPos)) std.io.fixed_buffer_stream.GetSeekPosError!u64","generic": false,"ret": 1007,"args": [774]},{"kind": 18,"name": "fn(std.io.seekable_stream.SeekableStream(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.SeekError,std.io.fixed_buffer_stream.GetSeekPosError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekTo,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekBy,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getPos,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getEndPos), u64) std.io.fixed_buffer_stream.SeekError!void","generic": false,"ret": 1006,"args": [774,732]},{"kind": 18,"name": "fn(*std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian, *bool) @typeInfo(@typeInfo(@TypeOf(std.dwarf.readUnitLength)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1008,"args": [1009,757,1010]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set!u32","generic": false,"ret": 1011,"args": [770,757]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readBytesNoEof)).Fn.return_type.?).ErrorUnion.error_set![4]u8","generic": false,"ret": 1012,"args": [770]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), []u8) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readNoEof)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1013,"args": [770,811]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), []u8) std.io.fixed_buffer_stream.ReadError!usize","generic": false,"ret": 1005,"args": [770,811]},{"kind": 18,"name": "fn(*const [4]u8, std.builtin.Endian) u32","generic": false,"ret": 893,"args": [1014,757]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1015,"args": [770,757]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readBytesNoEof)).Fn.return_type.?).ErrorUnion.error_set![8]u8","generic": false,"ret": 1016,"args": [770]},{"kind": 18,"name": "fn(*const [8]u8, std.builtin.Endian) u64","generic": false,"ret": 732,"args": [1017,757]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set!u16","generic": false,"ret": 1018,"args": [770,757]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readBytesNoEof)).Fn.return_type.?).ErrorUnion.error_set![2]u8","generic": false,"ret": 1019,"args": [770]},{"kind": 18,"name": "fn(*const [2]u8, std.builtin.Endian) u16","generic": false,"ret": 715,"args": [1020,757]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readByte)).Fn.return_type.?).ErrorUnion.error_set!u8","generic": false,"ret": 1021,"args": [770]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo, u64) @typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.getAbbrevTable)).Fn.return_type.?).ErrorUnion.error_set!*const std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null)","generic": false,"ret": 1022,"args": [1003,732]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null), std.dwarf.AbbrevTableHeader) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1023,"args": [1024,742]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo, u64) @typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.parseAbbrevTable)).Fn.return_type.?).ErrorUnion.error_set!std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null)","generic": false,"ret": 1025,"args": [1003,732]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null)","generic": false,"ret": 745,"args": [977]},{"kind": 18,"name": "fn(std.dwarf.DwarfInfo) *std.mem.Allocator","generic": false,"ret": 977,"args": [933]},{"kind": 18,"name": "fn(*std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)) @typeInfo(@typeInfo(@TypeOf(std.leb128.readULEB128)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1026,"args": [1009]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null)) void","generic": false,"ret": 726,"args": [745]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null), std.dwarf.AbbrevTableEntry) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1027,"args": [1028,746]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null)","generic": false,"ret": 747,"args": [977]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null)) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*std.dwarf.AbbrevTableEntry","generic": false,"ret": 1029,"args": [1028]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1030,"args": [1028,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1031,"args": [1028,719]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null)) []std.dwarf.AbbrevTableEntry","generic": false,"ret": 837,"args": [745]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.AbbrevTableEntry, usize) std.mem.Allocator.Error![]std.dwarf.AbbrevTableEntry","generic": false,"ret": 1032,"args": [977,837,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null)) *std.dwarf.AbbrevTableEntry","generic": false,"ret": 1033,"args": [1028]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null), std.dwarf.AbbrevAttr) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1034,"args": [1035,748]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null)) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*std.dwarf.AbbrevAttr","generic": false,"ret": 1036,"args": [1035]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1037,"args": [1035,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1038,"args": [1035,719]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null)) []std.dwarf.AbbrevAttr","generic": false,"ret": 843,"args": [747]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.AbbrevAttr, usize) std.mem.Allocator.Error![]std.dwarf.AbbrevAttr","generic": false,"ret": 1039,"args": [977,843,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null)) *std.dwarf.AbbrevAttr","generic": false,"ret": 1040,"args": [1035]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null)) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*std.dwarf.AbbrevTableHeader","generic": false,"ret": 1041,"args": [1024]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1042,"args": [1024,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1043,"args": [1024,719]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null)) []std.dwarf.AbbrevTableHeader","generic": false,"ret": 844,"args": [741]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.AbbrevTableHeader, usize) std.mem.Allocator.Error![]std.dwarf.AbbrevTableHeader","generic": false,"ret": 1044,"args": [977,844,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null)) *std.dwarf.AbbrevTableHeader","generic": false,"ret": 1045,"args": [1024]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), *const std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null), bool) @typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.parseDie)).Fn.return_type.?).ErrorUnion.error_set!?std.dwarf.Die","generic": false,"ret": 1046,"args": [1003,1009,1047,720]},{"kind": 18,"name": "fn(*const std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null), u64) ?*const std.dwarf.AbbrevTableEntry","generic": false,"ret": 1048,"args": [1047,732]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.ArrayListAligned(std.dwarf.Attr,null)","generic": false,"ret": 751,"args": [977]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.Attr,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Attr,null).resize)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1049,"args": [1050,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.Attr,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Attr,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1051,"args": [1050,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.Attr,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Attr,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1052,"args": [1050,719]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(std.dwarf.Attr,null)) []std.dwarf.Attr","generic": false,"ret": 845,"args": [751]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.Attr, usize) std.mem.Allocator.Error![]std.dwarf.Attr","generic": false,"ret": 1053,"args": [977,845,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), u64, std.builtin.Endian, bool) anyerror!std.dwarf.FormValue","generic": false,"ret": 1054,"args": [977,1009,732,757,720]},{"kind": 18,"name": "fn(*const std.dwarf.Die, u64) ?*const std.dwarf.FormValue","generic": false,"ret": 1055,"args": [1056,732]},{"kind": 18,"name": "fn(*const std.dwarf.Die, *std.dwarf.DwarfInfo, u64) @typeInfo(@typeInfo(@TypeOf(std.dwarf.Die.getAttrString)).Fn.return_type.?).ErrorUnion.error_set![]const u8","generic": false,"ret": 1057,"args": [1056,1003,732]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo, u64) @typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.getString)).Fn.return_type.?).ErrorUnion.error_set![]const u8","generic": false,"ret": 1058,"args": [1003,732]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(std.dwarf.Attr,null)) void","generic": false,"ret": 726,"args": [751]},{"kind": 18,"name": "fn(*const std.dwarf.Die, u64) @typeInfo(@typeInfo(@TypeOf(std.dwarf.Die.getAttrRef)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1059,"args": [1056,732]},{"kind": 18,"name": "fn(*const std.dwarf.Die, u64) @typeInfo(@typeInfo(@TypeOf(std.dwarf.Die.getAttrAddr)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1060,"args": [1056,732]},{"kind": 18,"name": "fn(*const std.dwarf.Constant) @typeInfo(@typeInfo(@TypeOf(std.dwarf.Constant.asUnsignedLe)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1061,"args": [1062]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.Func,null), std.dwarf.Func) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Func,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1063,"args": [1064,754]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.Func,null)) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Func,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*std.dwarf.Func","generic": false,"ret": 1065,"args": [1064]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.Func,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Func,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1066,"args": [1064,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.Func,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Func,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1067,"args": [1064,719]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(std.dwarf.Func,null)) []std.dwarf.Func","generic": false,"ret": 846,"args": [753]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.Func, usize) std.mem.Allocator.Error![]std.dwarf.Func","generic": false,"ret": 1068,"args": [977,846,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.Func,null)) *std.dwarf.Func","generic": false,"ret": 1069,"args": [1064]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo) @typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.scanAllCompileUnits)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1070,"args": [1003]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.mem.Allocator.Error!*std.dwarf.Die","generic": false,"ret": 1071,"args": [977]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null), std.dwarf.CompileUnit) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1072,"args": [1073,750]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null)) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*std.dwarf.CompileUnit","generic": false,"ret": 1074,"args": [1073]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1075,"args": [1073,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1076,"args": [1073,719]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null)) []std.dwarf.CompileUnit","generic": false,"ret": 847,"args": [749]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.CompileUnit, usize) std.mem.Allocator.Error![]std.dwarf.CompileUnit","generic": false,"ret": 1077,"args": [977,847,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null)) *std.dwarf.CompileUnit","generic": false,"ret": 1078,"args": [1073]},{"kind": 18,"name": "fn(*std.hash_map.HashMap(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), usize, *std.debug.ModuleDebugInfo) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMap(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).putNoClobber)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1079,"args": [1080,719,735]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), *std.mem.Allocator, usize, *std.debug.ModuleDebugInfo, std.hash_map.AutoContext(usize)) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).putNoClobberContext)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1081,"args": [1082,977,719,735,728]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), usize, std.hash_map.AutoContext(usize)) bool","generic": false,"ret": 720,"args": [1083,719,728]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), *std.mem.Allocator, u32, std.hash_map.AutoContext(usize)) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).growIfNeeded)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1084,"args": [1082,977,893,728]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), *std.mem.Allocator, u32, std.hash_map.AutoContext(usize)) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).grow)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1085,"args": [1082,977,893,728]},{"kind": 18,"name": "fn(u32) u32","generic": false,"ret": 893,"args": [893]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80)) u32","generic": false,"ret": 893,"args": [1083]},{"kind": 18,"name": "fn(u32) bool","generic": false,"ret": 720,"args": [893]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), *std.mem.Allocator, u32) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).allocate)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1086,"args": [1082,977,893]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Allocator.Error![]align(8) u8","generic": false,"ret": 1087,"args": [977,719]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), *std.mem.Allocator) void","generic": false,"ret": 726,"args": [1082,977]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80)) void","generic": false,"ret": 726,"args": [1082]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80)) [*]usize","generic": false,"ret": 1088,"args": [1083]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80)) [*]*std.debug.ModuleDebugInfo","generic": false,"ret": 1089,"args": [1083]},{"kind": 18,"name": "fn(std.hash_map.Metadata) bool","generic": false,"ret": 720,"args": [1090]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), usize, *std.debug.ModuleDebugInfo, std.hash_map.AutoContext(usize)) void","generic": false,"ret": 726,"args": [1082,719,735,728]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), *std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80)) void","generic": false,"ret": 726,"args": [1082,1082]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), ?std.debug.LineInfo, usize, []const u8, []const u8, std.debug.Config) @typeInfo(@typeInfo(@TypeOf(std.debug.printLineInfo)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1091,"args": [723,1092,719,765,765,979]},{"kind": 18,"name": "fn(*std.debug.ModuleDebugInfo, usize) @typeInfo(@typeInfo(@TypeOf(std.debug.ModuleDebugInfo.getSymbolAtAddress)).Fn.return_type.?).ErrorUnion.error_set!std.debug.SymbolInfo","generic": false,"ret": 1093,"args": [735,719]},{"kind": 18,"name": "fn(u64, *std.dwarf.DwarfInfo) @typeInfo(@typeInfo(@TypeOf(std.debug.getSymbolFromDwarf)).Fn.return_type.?).ErrorUnion.error_set!std.debug.SymbolInfo","generic": false,"ret": 1094,"args": [732,1003]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo, u64) @typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.findCompileUnit)).Fn.return_type.?).ErrorUnion.error_set!*const std.dwarf.CompileUnit","generic": false,"ret": 1095,"args": [1003,732]},{"kind": 18,"name": "fn(*const std.dwarf.Die, u64) @typeInfo(@typeInfo(@TypeOf(std.dwarf.Die.getAttrSecOffset)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1096,"args": [1056,732]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set!usize","generic": false,"ret": 1097,"args": [770,757]},{"kind": 18,"name": "fn(*const [8]u8, std.builtin.Endian) usize","generic": false,"ret": 719,"args": [1017,757]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo, u64) ?[]const u8","generic": false,"ret": 1098,"args": [1003,732]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo, std.dwarf.CompileUnit, u64) @typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.getLineNumberInfo)).Fn.return_type.?).ErrorUnion.error_set!std.debug.LineInfo","generic": false,"ret": 1099,"args": [1003,750,732]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readByteSigned)).Fn.return_type.?).ErrorUnion.error_set!i8","generic": false,"ret": 1100,"args": [770]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Allocator.Error![]u8","generic": false,"ret": 1101,"args": [977,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8) void","generic": false,"ret": 726,"args": [977,811]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.ArrayListAligned([]const u8,null)","generic": false,"ret": 781,"args": [977]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned([]const u8,null), []const u8) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1102,"args": [1103,765]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned([]const u8,null)) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*[]const u8","generic": false,"ret": 1104,"args": [1103]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned([]const u8,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1105,"args": [1103,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned([]const u8,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1106,"args": [1103,719]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned([]const u8,null)) [][]const u8","generic": false,"ret": 852,"args": [781]},{"kind": 18,"name": "fn(*std.mem.Allocator, [][]const u8, usize) std.mem.Allocator.Error![][]const u8","generic": false,"ret": 1107,"args": [977,852,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned([]const u8,null)) *[]const u8","generic": false,"ret": 1108,"args": [1103]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), *std.mem.Allocator, u8, usize) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readUntilDelimiterAlloc)).Fn.return_type.?).ErrorUnion.error_set![]u8","generic": false,"ret": 1109,"args": [770,977,759,719]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.ArrayListAligned(u8,null)","generic": false,"ret": 782,"args": [977]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), *std.array_list.ArrayListAligned(u8,null), u8, usize) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readUntilDelimiterArrayList)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1110,"args": [770,1111,759,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(u8,null), usize) void","generic": false,"ret": 726,"args": [1111,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(u8,null), u8) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1112,"args": [1111,759]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(u8,null)) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*u8","generic": false,"ret": 1113,"args": [1111]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(u8,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1114,"args": [1111,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(u8,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1115,"args": [1111,719]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(u8,null)) []u8","generic": false,"ret": 811,"args": [782]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, usize) std.mem.Allocator.Error![]u8","generic": false,"ret": 1101,"args": [977,811,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(u8,null)) *u8","generic": false,"ret": 1116,"args": [1111]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(u8,null)) void","generic": false,"ret": 726,"args": [782]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(u8,null)) []u8","generic": false,"ret": 811,"args": [1111]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.ArrayListAligned(std.dwarf.FileEntry,null)","generic": false,"ret": 783,"args": [977]},{"kind": 18,"name": "fn(bool, []const []const u8, *std.array_list.ArrayListAligned(std.dwarf.FileEntry,null), u64) std.dwarf.LineNumberProgram","generic": false,"ret": 1117,"args": [720,1118,1119,732]},{"kind": 18,"name": "fn(*std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)) @typeInfo(@typeInfo(@TypeOf(std.leb128.readULEB128)).Fn.return_type.?).ErrorUnion.error_set!usize","generic": false,"ret": 1120,"args": [1009]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.FileEntry,null), std.dwarf.FileEntry) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.FileEntry,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1121,"args": [1119,784]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.FileEntry,null)) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.FileEntry,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*std.dwarf.FileEntry","generic": false,"ret": 1122,"args": [1119]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.FileEntry,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.FileEntry,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1123,"args": [1119,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.FileEntry,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.FileEntry,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1124,"args": [1119,719]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(std.dwarf.FileEntry,null)) []std.dwarf.FileEntry","generic": false,"ret": 853,"args": [783]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.FileEntry, usize) std.mem.Allocator.Error![]std.dwarf.FileEntry","generic": false,"ret": 1125,"args": [977,853,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.FileEntry,null)) *std.dwarf.FileEntry","generic": false,"ret": 1126,"args": [1119]},{"kind": 18,"name": "fn(u64) std.math.error:993:44!isize","generic": false,"ret": 1127,"args": [732]},{"kind": 18,"name": "fn(std.io.seekable_stream.SeekableStream(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.SeekError,std.io.fixed_buffer_stream.GetSeekPosError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekTo,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekBy,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getPos,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getEndPos), i64) std.io.fixed_buffer_stream.SeekError!void","generic": false,"ret": 1006,"args": [774,836]},{"kind": 18,"name": "fn(*std.dwarf.LineNumberProgram) @typeInfo(@typeInfo(@TypeOf(std.dwarf.LineNumberProgram.checkLineMatch)).Fn.return_type.?).ErrorUnion.error_set!?std.debug.LineInfo","generic": false,"ret": 1128,"args": [1129]},{"kind": 18,"name": "fn(*std.mem.Allocator, []const []const u8) @typeInfo(@typeInfo(@TypeOf(std.fs.path.join)).Fn.return_type.?).ErrorUnion.error_set![]u8","generic": false,"ret": 1130,"args": [977,1118]},{"kind": 18,"name": "fn(*std.mem.Allocator, u8, fn(u8) bool, []const []const u8, bool) @typeInfo(@typeInfo(@TypeOf(std.fs.path.joinSepMaybeZ)).Fn.return_type.?).ErrorUnion.error_set![]u8","generic": false,"ret": 1131,"args": [977,759,219,1118,720]},{"kind": 18,"name": "fn(u8) bool","generic": false,"ret": 720,"args": [759]},{"kind": 18,"name": "fn(*std.mem.Allocator, []const u8) @typeInfo(@typeInfo(@TypeOf(std.mem.Allocator.dupe)).Fn.return_type.?).ErrorUnion.error_set![]u8","generic": false,"ret": 1132,"args": [977,765]},{"kind": 18,"name": "fn([]u8, []const u8) void","generic": false,"ret": 726,"args": [811,765]},{"kind": 18,"name": "fn(*std.dwarf.LineNumberProgram) void","generic": false,"ret": 726,"args": [1129]},{"kind": 18,"name": "fn(*std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)) @typeInfo(@typeInfo(@TypeOf(std.leb128.readILEB128)).Fn.return_type.?).ErrorUnion.error_set!i64","generic": false,"ret": 1133,"args": [1009]},{"kind": 18,"name": "fn(std.debug.SymbolInfo) void","generic": false,"ret": 726,"args": [1134]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:209:64) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,1135]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:114:91) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,1136]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), *std.debug.DebugInfo, std.debug.Config, ?usize) @typeInfo(@typeInfo(@TypeOf(std.debug.writeCurrentStackTrace)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1137,"args": [723,981,979,791]},{"kind": 18,"name": "fn(?usize, ?usize) std.debug.StackIterator","generic": false,"ret": 1138,"args": [791,791]},{"kind": 18,"name": "fn(*std.debug.StackIterator) ?usize","generic": false,"ret": 791,"args": [1139]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:118:64) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,1140]},{"kind": 18,"name": "fn(*std.Thread.StaticResetEvent.AtomicEvent) void","generic": false,"ret": 726,"args": [1141]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:323:67) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1142,"args": [723,964]},{"kind": 18,"name": "fn([]u8) usize","generic": false,"ret": 719,"args": [811]},{"kind": 18,"name": "fn(usize) void","generic": false,"ret": 726,"args": [719]},{"kind": 18,"name": "fn(std.os.linux.rlimit_resource, std.os.linux.rlimit) std.os.SetrlimitError!void","generic": false,"ret": 1143,"args": [1144,1145]},{"kind": 18,"name": "fn(i32) noreturn","generic": false,"ret": 951,"args": [829]},{"kind": 18,"name": "fn() callconv(.Inline) u8","generic": false,"ret": 759},{"kind": 18,"name": "fn(usize) std.os.linux.errno.generic.E","generic": false,"ret": 1146,"args": [719]},{"kind": 18,"name": "fn(u6, noalias ?*const std.os.linux.Sigaction, noalias ?*std.os.linux.Sigaction) usize","generic": false,"ret": 719,"args": [718,968,969]},{"kind": 18,"name": "fn(*std.Thread.Mutex.AtomicMutex, std.Thread.Mutex.State) void","generic": false,"ret": 726,"args": [970,1147]},{"kind": 18,"name": "fn(i32, [*]const u8, usize) usize","generic": false,"ret": 719,"args": [829,874,719]},{"kind": 18,"name": "fn(std.os.linux.errno.generic.E) std.os.UnexpectedError","generic": false,"ret": 1148,"args": [1146]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), []const u8) std.os.WriteError!usize","generic": false,"ret": 958,"args": [723,765]},{"kind": 18,"name": "fn(u64, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1149,"args": [732,972,723]},{"kind": 18,"name": "fn(u64, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1150,"args": [732,972,723]},{"kind": 18,"name": "fn(u64, u8, std.fmt.Case, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatInt)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1151,"args": [732,759,1152,972,723]},{"kind": 18,"name": "fn(u64) u64","generic": false,"ret": 732,"args": [732]},{"kind": 18,"name": "fn(u8, std.fmt.Case) u8","generic": false,"ret": 759,"args": [759,1152]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatBuf)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1153,"args": [765,972,723]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(std.unicode.utf8CountCodepoints)).Fn.return_type.?).ErrorUnion.error_set!usize","generic": false,"ret": 1154,"args": [765]},{"kind": 18,"name": "fn(*const [8]u8) usize","generic": false,"ret": 719,"args": [1017]},{"kind": 18,"name": "fn(u8) @typeInfo(@typeInfo(@TypeOf(std.unicode.utf8ByteSequenceLength)).Fn.return_type.?).ErrorUnion.error_set!u3","generic": false,"ret": 1155,"args": [759]},{"kind": 18,"name": "fn([]const u8) std.unicode.Utf8DecodeError!u21","generic": false,"ret": 1156,"args": [765]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), u8, usize) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,759,719]},{"kind": 18,"name": "fn(u32, noalias ?*const [32]u32, noalias ?*[32]u32) usize","generic": false,"ret": 719,"args": [893,1157,1158]},{"kind": 18,"name": "fn(i32, i32) usize","generic": false,"ret": 719,"args": [829,829]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatText)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1159,"args": [765,972,723]},{"kind": 18,"name": "fn(u64, []const u8) u64","generic": false,"ret": 732,"args": [732,765]},{"kind": 18,"name": "fn(*const usize) *align(8) const [8]u8","generic": false,"ret": 805,"args": [801]},{"kind": 18,"name": "fn(usize, usize) bool","generic": false,"ret": 720,"args": [719,719]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.debug.DebugInfo","generic": false,"ret": 1160,"args": [977]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.heap.arena_allocator.ArenaAllocator","generic": false,"ret": 1161,"args": [977]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, u29, u29, usize) std.heap.error:239:90![]u8","generic": false,"ret": 1162,"args": [977,719,1163,1163,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29, usize) std.mem.Allocator.Error!usize","generic": false,"ret": 1164,"args": [977,811,1163,719,1163,719]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:205:91) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1165,"args": [723,978]},{"kind": 18,"name": "fn([:0]const u8, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), usize) std.os.WriteError!void","generic": false,"ret": 959,"args": [812,972,723,719]},{"kind": 18,"name": "fn() bool","generic": false,"ret": 720},{"kind": 18,"name": "fn(std.fs.file.File) bool","generic": false,"ret": 720,"args": [724]},{"kind": 18,"name": "fn(?[*:0]const u8) ?[:0]const u8","generic": false,"ret": 814,"args": [815]},{"kind": 18,"name": "fn() usize","generic": false,"ret": 719},{"kind": 18,"name": "fn([]std.elf.Elf64_Phdr) @typeInfo(@typeInfo(@TypeOf(std.dynamic_library.linkmap_iterator)).Fn.return_type.?).ErrorUnion.error_set!std.dynamic_library.Iterator","generic": false,"ret": 1166,"args": [965]},{"kind": 18,"name": "fn(*std.dynamic_library.Iterator) bool","generic": false,"ret": 720,"args": [1167]},{"kind": 18,"name": "fn(*std.dynamic_library.Iterator) ?*std.dynamic_library.LinkMap","generic": false,"ret": 1168,"args": [1167]},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), usize, std.hash_map.AutoContext(usize)) ?*std.debug.ModuleDebugInfo","generic": false,"ret": 989,"args": [738,719,728]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.debug.ModuleDebugInfo","generic": false,"ret": 1169,"args": [977,719,1170,719]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(std.os.toPosixPath)).Fn.return_type.?).ErrorUnion.error_set![4095:0]u8","generic": false,"ret": 1171,"args": [765]},{"kind": 18,"name": "fn([]const u8, u8) ?usize","generic": false,"ret": 791,"args": [765,759]},{"kind": 18,"name": "fn(std.fs.Dir, [*:0]const u8, std.fs.file.OpenFlags) std.fs.file.OpenError!std.fs.file.File","generic": false,"ret": 992,"args": [991,813,993]},{"kind": 18,"name": "fn([*:0]const u8, std.fs.file.OpenFlags) std.fs.file.OpenError!std.fs.file.File","generic": false,"ret": 992,"args": [813,993]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29, usize) usize","generic": false,"ret": 719,"args": [977,811,1163,719,1163,719]},{"kind": 18,"name": "fn(std.fs.file.File) std.os.FStatError!std.fs.file.Stat","generic": false,"ret": 1172,"args": [724]},{"kind": 18,"name": "fn(i32) void","generic": false,"ret": 726,"args": [829]},{"kind": 18,"name": "fn(?[*]u8, usize, usize, u32, i32, i64) usize","generic": false,"ret": 719,"args": [1173,719,719,893,829,836]},{"kind": 18,"name": "fn([*:0]align(4096) const u8) usize","generic": false,"ret": 719,"args": [762]},{"kind": 18,"name": "fn([]const u8) []const u8","generic": false,"ret": 765,"args": [765]},{"kind": 18,"name": "fn(i64) u64","generic": false,"ret": 732,"args": [836]},{"kind": 18,"name": "fn(i64) std.math.error:993:44!usize","generic": false,"ret": 1174,"args": [836]},{"kind": 18,"name": "fn(usize, usize) std.math.error:455:43!usize","generic": false,"ret": 1175,"args": [719,719]},{"kind": 18,"name": "fn(*const [4]u8) u32","generic": false,"ret": 893,"args": [1014]},{"kind": 18,"name": "fn(*const [8]u8) u64","generic": false,"ret": 732,"args": [1017]},{"kind": 18,"name": "fn(*const [2]u8) u16","generic": false,"ret": 715,"args": [1020]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.AbbrevTableEntry) void","generic": false,"ret": 726,"args": [977,837]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.AbbrevTableEntry, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.AbbrevTableEntry","generic": false,"ret": 1032,"args": [977,837,719,1170,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.AbbrevAttr, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.AbbrevAttr","generic": false,"ret": 1039,"args": [977,843,719,1170,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.AbbrevTableHeader, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.AbbrevTableHeader","generic": false,"ret": 1044,"args": [977,844,719,1170,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.Attr, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.Attr","generic": false,"ret": 1053,"args": [977,845,719,1170,719]},{"kind": 18,"name": "fn(*std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian, bool) @typeInfo(@typeInfo(@TypeOf(std.dwarf.readAddress)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1176,"args": [1009,757,720]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian, usize) @typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueBlock)).Fn.return_type.?).ErrorUnion.error_set!std.dwarf.FormValue","generic": false,"ret": 1177,"args": [977,1009,757,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), usize) @typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueBlockLen)).Fn.return_type.?).ErrorUnion.error_set!std.dwarf.FormValue","generic": false,"ret": 1178,"args": [977,1009,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), bool, std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set!std.dwarf.FormValue","generic": false,"ret": 1179,"args": [977,1009,720,757]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), bool, std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set!std.dwarf.FormValue","generic": false,"ret": 1180,"args": [977,1009,720,757]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), bool, std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set!std.dwarf.FormValue","generic": false,"ret": 1181,"args": [977,1009,720,757]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), bool, std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set!std.dwarf.FormValue","generic": false,"ret": 1182,"args": [977,1009,720,757]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), bool, std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set!std.dwarf.FormValue","generic": false,"ret": 1183,"args": [977,1009,720,757]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), usize) @typeInfo(@typeInfo(@TypeOf(std.dwarf.readAllocBytes)).Fn.return_type.?).ErrorUnion.error_set![]u8","generic": false,"ret": 1184,"args": [977,1009,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian, i32) @typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueRef)).Fn.return_type.?).ErrorUnion.error_set!std.dwarf.FormValue","generic": false,"ret": 1185,"args": [977,1009,757,829]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.mem.Allocator.Error!*@Frame(std.dwarf.parseFormValue)","generic": false,"ret": 1186,"args": [977]},{"kind": 18,"name": "fn(*std.mem.Allocator, *@Frame(std.dwarf.parseFormValue)) void","generic": false,"ret": 726,"args": [977,1187]},{"kind": 18,"name": "fn([]const u8, usize, u8) ?usize","generic": false,"ret": 791,"args": [765,719,759]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.Attr) void","generic": false,"ret": 726,"args": [977,845]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.Func, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.Func","generic": false,"ret": 1068,"args": [977,846,719,1170,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.Die","generic": false,"ret": 1188,"args": [977,719,1170,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.CompileUnit, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.CompileUnit","generic": false,"ret": 1077,"args": [977,847,719,1170,719]},{"kind": 18,"name": "fn(u32) std.math.error:1073:52!u32","generic": false,"ret": 1189,"args": [893]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80)) *std.hash_map.Header","generic": false,"ret": 1190,"args": [1083]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]align(8) u8","generic": false,"ret": 1087,"args": [977,719,1170,719]},{"kind": 18,"name": "fn(u64) u7","generic": false,"ret": 1191,"args": [732]},{"kind": 18,"name": "fn(*std.hash_map.Metadata, u7) void","generic": false,"ret": 726,"args": [1192,1191]},{"kind": 18,"name": "fn(std.debug.Config, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.Color) void","generic": false,"ret": 726,"args": [979,723,1193]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:624:50) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,1194]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:632:53) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,1195]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.LineInfo) @typeInfo(@typeInfo(@TypeOf(std.debug.printLineFromFileAnyOs)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1196,"args": [723,1197]},{"kind": 18,"name": "fn(std.fs.file.File, []u8) std.os.ReadError!usize","generic": false,"ret": 1198,"args": [724,811]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), u8) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,759]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]u8","generic": false,"ret": 1101,"args": [977,719,1170,719]},{"kind": 18,"name": "fn([]u8) []u8","generic": false,"ret": 811,"args": [811]},{"kind": 18,"name": "fn(*std.mem.Allocator, [][]const u8, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![][]const u8","generic": false,"ret": 1107,"args": [977,852,719,1170,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]u8","generic": false,"ret": 1101,"args": [977,811,719,1170,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, usize) []u8","generic": false,"ret": 811,"args": [977,811,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.FileEntry, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.FileEntry","generic": false,"ret": 1125,"args": [977,853,719,1170,719]},{"kind": 18,"name": "fn(std.debug.LineInfo) void","generic": false,"ret": 726,"args": [1197]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:209:64) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1199,"args": [723,1135]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:114:91) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1200,"args": [723,1136]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:118:64) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1201,"args": [723,1140]},{"kind": 18,"name": "fn(*std.Thread.StaticResetEvent.AtomicEvent, ?u64) std.Thread.ResetEvent.TimedWaitResult","generic": false,"ret": 1202,"args": [1141,1203]},{"kind": 18,"name": "fn([]u8, u8) void","generic": false,"ret": 726,"args": [811,759]},{"kind": 18,"name": "fn([*]u8) callconv(.Inline) *std.os.linux.tls.DTV","generic": false,"ret": 1204,"args": [851]},{"kind": 18,"name": "fn([*]u8) callconv(.Inline) *[*]u8","generic": false,"ret": 1205,"args": [851]},{"kind": 18,"name": "fn(std.os.linux.x86_64.SYS, usize, usize) usize","generic": false,"ret": 719,"args": [1206,719,719]},{"kind": 18,"name": "fn(std.os.linux.rlimit_resource, *const std.os.linux.rlimit) usize","generic": false,"ret": 719,"args": [1144,1207]},{"kind": 18,"name": "fn(std.os.linux.x86_64.SYS, usize) usize","generic": false,"ret": 719,"args": [1206,719]},{"kind": 18,"name": "fn() u8","generic": false,"ret": 759},{"kind": 18,"name": "fn() callconv(.Naked) void","generic": false,"ret": 726},{"kind": 18,"name": "fn(std.os.linux.x86_64.SYS, usize, usize, usize, usize) usize","generic": false,"ret": 719,"args": [1206,719,719,719,719]},{"kind": 18,"name": "fn(u8) u8","generic": false,"ret": 759,"args": [759]},{"kind": 18,"name": "fn() callconv(.Inline) void","generic": false,"ret": 726},{"kind": 18,"name": "fn(*const i32, u32, i32, ?*const std.os.linux.timespec) usize","generic": false,"ret": 719,"args": [928,893,829,1208]},{"kind": 18,"name": "fn(std.os.linux.x86_64.SYS, usize, usize, usize) usize","generic": false,"ret": 719,"args": [1206,719,719,719]},{"kind": 18,"name": "fn(std.os.struct:5000:52) void","generic": false,"ret": 726,"args": [1209]},{"kind": 18,"name": "fn(std.os.linux.x86_64.SYS) usize","generic": false,"ret": 719,"args": [1206]},{"kind": 18,"name": "fn([]const u8) std.unicode.Utf8Decode2Error!u21","generic": false,"ret": 1210,"args": [765]},{"kind": 18,"name": "fn([]const u8) std.unicode.Utf8Decode3Error!u21","generic": false,"ret": 1211,"args": [765]},{"kind": 18,"name": "fn([]const u8) std.unicode.Utf8Decode4Error!u21","generic": false,"ret": 1212,"args": [765]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.hash_map.HashMap(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80)","generic": false,"ret": 734,"args": [977]},{"kind": 18,"name": "fn(std.heap.arena_allocator.State, *std.mem.Allocator) std.heap.arena_allocator.ArenaAllocator","generic": false,"ret": 1161,"args": [1213,977]},{"kind": 18,"name": "fn([*]align(4096) u8, u29) ?[*]align(4096) u8","generic": false,"ret": 1000,"args": [1214,1163]},{"kind": 18,"name": "fn([]align(4096) const u8) void","generic": false,"ret": 726,"args": [1215]},{"kind": 18,"name": "fn(usize, usize, u29) usize","generic": false,"ret": 719,"args": [719,719,1163]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatText)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1216,"args": [765,972,723]},{"kind": 18,"name": "fn([]const u8) ?[]const u8","generic": false,"ret": 1098,"args": [765]},{"kind": 18,"name": "fn([*:0]const u8) ?[]const u8","generic": false,"ret": 1098,"args": [813]},{"kind": 18,"name": "fn([*:0]const u8) [:0]const u8","generic": false,"ret": 812,"args": [813]},{"kind": 18,"name": "fn(usize) usize","generic": false,"ret": 719,"args": [719]},{"kind": 18,"name": "fn() ?[*]std.elf.Elf64_Dyn","generic": false,"ret": 1217},{"kind": 18,"name": "fn(usize, usize) std.math.error:449:43!usize","generic": false,"ret": 1218,"args": [719,719]},{"kind": 18,"name": "fn(i32, [*:0]const u8, u32, usize) std.os.OpenError!i32","generic": false,"ret": 1219,"args": [829,813,893,719]},{"kind": 18,"name": "fn(i32, i32) std.os.FlockError!void","generic": false,"ret": 1220,"args": [829,829]},{"kind": 18,"name": "fn([*:0]const u8) bool","generic": false,"ret": 720,"args": [813]},{"kind": 18,"name": "fn(i32) std.os.FStatError!std.os.linux.x86_64.Stat","generic": false,"ret": 1221,"args": [829]},{"kind": 18,"name": "fn(std.os.linux.x86_64.Stat) std.os.linux.timespec","generic": false,"ret": 1222,"args": [870]},{"kind": 18,"name": "fn(i32) usize","generic": false,"ret": 719,"args": [829]},{"kind": 18,"name": "fn(std.os.linux.x86_64.SYS, usize, usize, usize, usize, usize, usize) usize","generic": false,"ret": 719,"args": [1206,719,719,719,719,719,719]},{"kind": 18,"name": "fn([*:0]const u8) usize","generic": false,"ret": 719,"args": [813]},{"kind": 18,"name": "fn([]const u8) usize","generic": false,"ret": 719,"args": [765]},{"kind": 18,"name": "fn([]std.dwarf.AbbrevTableEntry) []align(8) u8","generic": false,"ret": 838,"args": [837]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.AbbrevTableEntry","generic": false,"ret": 1032,"args": [977,719,1170,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29, u29, usize) std.mem.Allocator.Error![]u8","generic": false,"ret": 1101,"args": [977,811,1163,719,1163,1163,719]},{"kind": 18,"name": "fn([]align(8) u8) []std.dwarf.AbbrevTableEntry","generic": false,"ret": 837,"args": [838]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.AbbrevAttr","generic": false,"ret": 1039,"args": [977,719,1170,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.AbbrevAttr) void","generic": false,"ret": 726,"args": [977,843]},{"kind": 18,"name": "fn([]std.dwarf.AbbrevAttr) []align(8) u8","generic": false,"ret": 838,"args": [843]},{"kind": 18,"name": "fn([]align(8) u8) []std.dwarf.AbbrevAttr","generic": false,"ret": 843,"args": [838]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.AbbrevTableHeader","generic": false,"ret": 1044,"args": [977,719,1170,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.AbbrevTableHeader) void","generic": false,"ret": 726,"args": [977,844]},{"kind": 18,"name": "fn([]std.dwarf.AbbrevTableHeader) []align(8) u8","generic": false,"ret": 838,"args": [844]},{"kind": 18,"name": "fn([]align(8) u8) []std.dwarf.AbbrevTableHeader","generic": false,"ret": 844,"args": [838]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.Attr","generic": false,"ret": 1053,"args": [977,719,1170,719]},{"kind": 18,"name": "fn([]std.dwarf.Attr) []align(8) u8","generic": false,"ret": 838,"args": [845]},{"kind": 18,"name": "fn([]align(8) u8) []std.dwarf.Attr","generic": false,"ret": 845,"args": [838]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian, usize) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readVarInt)).Fn.return_type.?).ErrorUnion.error_set!usize","generic": false,"ret": 1223,"args": [770,757,719]},{"kind": 18,"name": "fn([]const u8, std.builtin.Endian) usize","generic": false,"ret": 719,"args": [765,757]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set!u8","generic": false,"ret": 1224,"args": [770,757]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readBytesNoEof)).Fn.return_type.?).ErrorUnion.error_set![1]u8","generic": false,"ret": 1225,"args": [770]},{"kind": 18,"name": "fn(*const [1]u8, std.builtin.Endian) u8","generic": false,"ret": 759,"args": [1226,757]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]@Frame(std.dwarf.parseFormValue)","generic": false,"ret": 1227,"args": [977,719,1170,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.Func","generic": false,"ret": 1068,"args": [977,719,1170,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.Func) void","generic": false,"ret": 726,"args": [977,846]},{"kind": 18,"name": "fn([]std.dwarf.Func) []align(8) u8","generic": false,"ret": 838,"args": [846]},{"kind": 18,"name": "fn([]align(8) u8) []std.dwarf.Func","generic": false,"ret": 846,"args": [838]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.CompileUnit","generic": false,"ret": 1077,"args": [977,719,1170,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.CompileUnit) void","generic": false,"ret": 726,"args": [977,847]},{"kind": 18,"name": "fn([]std.dwarf.CompileUnit) []align(8) u8","generic": false,"ret": 838,"args": [847]},{"kind": 18,"name": "fn([]align(8) u8) []std.dwarf.CompileUnit","generic": false,"ret": 847,"args": [838]},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), usize, std.hash_map.AutoContext(usize)) callconv(.Inline) ?usize","generic": false,"ret": 791,"args": [738,719,728]},{"kind": 18,"name": "fn(u32) u33","generic": false,"ret": 848,"args": [893]},{"kind": 18,"name": "fn([]align(8) u8) []align(8) u8","generic": false,"ret": 838,"args": [838]},{"kind": 18,"name": "fn(*std.mem.Allocator, []align(8) u8) void","generic": false,"ret": 726,"args": [977,838]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:624:50) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1228,"args": [723,1194]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:632:53) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1229,"args": [723,1195]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), usize) std.os.WriteError!void","generic": false,"ret": 959,"args": [719,972,723,719]},{"kind": 18,"name": "fn(i32, []u8) std.os.ReadError!usize","generic": false,"ret": 1198,"args": [829,811]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![][]const u8","generic": false,"ret": 1107,"args": [977,719,1170,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, [][]const u8) void","generic": false,"ret": 726,"args": [977,852]},{"kind": 18,"name": "fn([][]const u8) []align(8) u8","generic": false,"ret": 838,"args": [852]},{"kind": 18,"name": "fn([]align(8) u8) [][]const u8","generic": false,"ret": 852,"args": [838]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, usize, usize) []u8","generic": false,"ret": 811,"args": [977,811,719,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.FileEntry","generic": false,"ret": 1125,"args": [977,719,1170,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.dwarf.FileEntry) void","generic": false,"ret": 726,"args": [977,853]},{"kind": 18,"name": "fn([]std.dwarf.FileEntry) []align(8) u8","generic": false,"ret": 838,"args": [853]},{"kind": 18,"name": "fn([]align(8) u8) []std.dwarf.FileEntry","generic": false,"ret": 853,"args": [838]},{"kind": 18,"name": "fn(*std.mem.Allocator, []const u8) void","generic": false,"ret": 726,"args": [977,765]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatText)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1230,"args": [765,972,723]},{"kind": 18,"name": "fn(usize, usize) std.math.error:462:43!usize","generic": false,"ret": 1231,"args": [719,719]},{"kind": 18,"name": "fn(*const i32, u32, i32) usize","generic": false,"ret": 719,"args": [928,893,829]},{"kind": 18,"name": "fn(*u32, ?u64) @typeInfo(@typeInfo(@TypeOf(std.Thread.StaticResetEvent.LinuxFutex.wait)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1232,"args": [1233,1203]},{"kind": 18,"name": "fn(i32, std.os.linux.rlimit_resource, ?*const std.os.linux.rlimit, ?*std.os.linux.rlimit) usize","generic": false,"ret": 719,"args": [829,1144,1234,1235]},{"kind": 18,"name": "fn(i32, *const std.os.linux.siginfo_t, ?*const c_void) callconv(.C) noreturn","generic": false,"ret": 951,"args": [829,1236,1237]},{"kind": 18,"name": "fn() anyerror!void","generic": false,"ret": 988},{"kind": 18,"name": "fn(std.start.struct:554:37) void","generic": false,"ret": 726,"args": [1238]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.os.struct:5000:52) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,1209]},{"kind": 18,"name": "fn(u64) std.hash.wyhash.WyhashStateless","generic": false,"ret": 1239,"args": [732]},{"kind": 18,"name": "fn(*std.hash.wyhash.WyhashStateless, []const u8) void","generic": false,"ret": 726,"args": [1240,765]},{"kind": 18,"name": "fn(*std.hash.wyhash.WyhashStateless, []const u8) u64","generic": false,"ret": 732,"args": [1240,765]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, u29, u29, usize) @typeInfo(@typeInfo(@TypeOf(std.heap.arena_allocator.ArenaAllocator.alloc)).Fn.return_type.?).ErrorUnion.error_set![]u8","generic": false,"ret": 1241,"args": [977,719,1163,1163,719]},{"kind": 18,"name": "fn(*std.heap.arena_allocator.ArenaAllocator, usize, usize) @typeInfo(@typeInfo(@TypeOf(std.heap.arena_allocator.ArenaAllocator.createNode)).Fn.return_type.?).ErrorUnion.error_set!*std.linked_list.Node","generic": false,"ret": 1242,"args": [1243,719,719]},{"kind": 18,"name": "fn(*std.linked_list.SinglyLinkedList([]u8), *std.linked_list.Node) void","generic": false,"ret": 726,"args": [1244,1245]},{"kind": 18,"name": "fn(u64, u64) bool","generic": false,"ret": 720,"args": [732,732]},{"kind": 18,"name": "fn([*]align(4096) u8, u29) ?usize","generic": false,"ret": 791,"args": [1214,1163]},{"kind": 18,"name": "fn([*]const u8, usize) usize","generic": false,"ret": 719,"args": [874,719]},{"kind": 18,"name": "fn(i32) bool","generic": false,"ret": 720,"args": [829]},{"kind": 18,"name": "fn(i32, [*:0]const u8, u32, usize) usize","generic": false,"ret": 719,"args": [829,813,893,719]},{"kind": 18,"name": "fn(i32, *std.os.linux.x86_64.Stat) usize","generic": false,"ret": 719,"args": [829,871]},{"kind": 18,"name": "fn() std.os.linux.x86_64.Stat","generic": false,"ret": 870},{"kind": 18,"name": "fn(*const [1]u8) u8","generic": false,"ret": 759,"args": [1226]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatText)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1246,"args": [765,972,723]},{"kind": 18,"name": "fn(u64, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1247,"args": [732,972,723]},{"kind": 18,"name": "fn(u64, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1248,"args": [732,972,723]},{"kind": 18,"name": "fn(u64, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1249,"args": [732,972,723]},{"kind": 18,"name": "fn(u64, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1250,"args": [732,972,723]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1251,"args": [719,972,723]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1252,"args": [719,972,723]},{"kind": 18,"name": "fn(usize, u8, std.fmt.Case, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatInt)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1253,"args": [719,759,1152,972,723]},{"kind": 18,"name": "fn(usize) u64","generic": false,"ret": 732,"args": [719]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatText)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1254,"args": [765,972,723]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatText)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1255,"args": [765,972,723]},{"kind": 18,"name": "fn(i32, [*]u8, usize) usize","generic": false,"ret": 719,"args": [829,851,719]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:1572:83) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,1256]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:1573:83) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,1257]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:1574:73) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,1258]},{"kind": 18,"name": "fn(usize, usize) void","generic": false,"ret": 726,"args": [719,719]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(day1.part1)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1259,"args": [765]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(day1.part2)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1260,"args": [765]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(day2.part1)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1261,"args": [765]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(day2.part2)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1262,"args": [765]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(day3.part1)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1263,"args": [765]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(day3.part2)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1264,"args": [765]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(day4.part1)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1265,"args": [765]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(day4.part2)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1266,"args": [765]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(day5.part1)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1267,"args": [765]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(day5.part2)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1268,"args": [765]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(day6.part1)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1269,"args": [765]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(day6.part2)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1270,"args": [765]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(day7.part1)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1271,"args": [765]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(day7.part2)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1272,"args": [765]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(day8.part1)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1273,"args": [765]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(day8.part2)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1274,"args": [765]},{"kind": 18,"name": "fn(*std.mem.Allocator, struct:20:91) std.fmt.AllocPrintError![]u8","generic": false,"ret": 1275,"args": [977,1276]},{"kind": 18,"name": "fn(std.fs.Dir, *std.mem.Allocator, []const u8, usize) @typeInfo(@typeInfo(@TypeOf(std.fs.Dir.readFileAlloc)).Fn.return_type.?).ErrorUnion.error_set![]u8","generic": false,"ret": 1277,"args": [991,977,765,719]},{"kind": 18,"name": "fn(std.fs.Dir, *std.mem.Allocator, []const u8, usize, ?usize) @typeInfo(@typeInfo(@TypeOf(std.fs.Dir.readFileAllocOptions)).Fn.return_type.?).ErrorUnion.error_set![]u8","generic": false,"ret": 1278,"args": [991,977,765,719,791]},{"kind": 18,"name": "fn(std.fs.file.File, *std.mem.Allocator, usize, ?usize) @typeInfo(@typeInfo(@TypeOf(std.fs.file.File.readToEndAllocOptions)).Fn.return_type.?).ErrorUnion.error_set![]u8","generic": false,"ret": 1279,"args": [724,977,719,791]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).initCapacity)).Fn.return_type.?).ErrorUnion.error_set!std.array_list.ArrayListAligned(u8,null)","generic": false,"ret": 1280,"args": [977,719]},{"kind": 18,"name": "fn(std.fs.file.File) std.io.reader.Reader(std.fs.file.File,std.os.ReadError,std.fs.file.File.read)","generic": false,"ret": 866,"args": [724]},{"kind": 18,"name": "fn(std.io.reader.Reader(std.fs.file.File,std.os.ReadError,std.fs.file.File.read), *std.array_list.ArrayListAligned(u8,null), usize) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(std.fs.file.File,std.os.ReadError,std.fs.file.File.read).readAllArrayListAligned)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1281,"args": [866,1111,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(u8,null)) void","generic": false,"ret": 726,"args": [1111]},{"kind": 18,"name": "fn(std.io.reader.Reader(std.fs.file.File,std.os.ReadError,std.fs.file.File.read), []u8) std.os.ReadError!usize","generic": false,"ret": 1198,"args": [866,811]},{"kind": 18,"name": "fn(struct:26:33) void","generic": false,"ret": 726,"args": [1282]},{"kind": 18,"name": "fn(struct:27:39) void","generic": false,"ret": 726,"args": [1283]},{"kind": 18,"name": "fn(struct:28:39) void","generic": false,"ret": 726,"args": [1284]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.os.struct:5000:52) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1285,"args": [723,1209]},{"kind": 18,"name": "fn(u16, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), usize) std.os.WriteError!void","generic": false,"ret": 959,"args": [715,972,723,719]},{"kind": 18,"name": "fn(u64, u64, u64) u64","generic": false,"ret": 732,"args": [732,732,732]},{"kind": 18,"name": "fn([]const u8) u64","generic": false,"ret": 732,"args": [765]},{"kind": 18,"name": "fn(u64, u64) u64","generic": false,"ret": 732,"args": [732,732]},{"kind": 18,"name": "fn([]const u8) bool","generic": false,"ret": 720,"args": [765]},{"kind": 18,"name": "fn(*std.os.linux.x86_64.Stat) *align(8) [144]u8","generic": false,"ret": 872,"args": [871]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:1572:83) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1286,"args": [723,1256]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:1573:83) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1287,"args": [723,1257]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:1574:73) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1288,"args": [723,1258]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:135:91) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,1289]},{"kind": 18,"name": "fn([]const u8, []const u8) std.mem.SplitIterator(u8)","generic": false,"ret": 876,"args": [765,765]},{"kind": 18,"name": "fn(*std.mem.SplitIterator(u8)) ?[]const u8","generic": false,"ret": 1098,"args": [1290]},{"kind": 18,"name": "fn([]const u8) i32","generic": false,"ret": 829,"args": [765]},{"kind": 18,"name": "fn(std.mem.SplitIterator(u8)) util.EnumerateIterator(std.mem.SplitIterator(u8),[]const u8)","generic": false,"ret": 878,"args": [876]},{"kind": 18,"name": "fn(*util.EnumerateIterator(std.mem.SplitIterator(u8),[]const u8)) ?util.Item","generic": false,"ret": 1291,"args": [1292]},{"kind": 18,"name": "fn([]const u8, []const u8) []const u8","generic": false,"ret": 765,"args": [765,765]},{"kind": 18,"name": "fn([]const u8, []const u8) std.mem.TokenIterator(u8)","generic": false,"ret": 880,"args": [765,765]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.ArrayListAligned(day4.Board,null)","generic": false,"ret": 881,"args": [977]},{"kind": 18,"name": "fn() day4.Board","generic": false,"ret": 882},{"kind": 18,"name": "fn(*std.mem.TokenIterator(u8)) ?[]const u8","generic": false,"ret": 1098,"args": [1293]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(day4.Board,null), day4.Board) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(day4.Board,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1294,"args": [1295,882]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(day4.Board,null)) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(day4.Board,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*day4.Board","generic": false,"ret": 1296,"args": [1295]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(day4.Board,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(day4.Board,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1297,"args": [1295,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(day4.Board,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(day4.Board,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1298,"args": [1295,719]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(day4.Board,null)) []day4.Board","generic": false,"ret": 915,"args": [881]},{"kind": 18,"name": "fn(*std.mem.Allocator, []day4.Board, usize) std.mem.Allocator.Error![]day4.Board","generic": false,"ret": 1299,"args": [977,915,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(day4.Board,null)) *day4.Board","generic": false,"ret": 1300,"args": [1295]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(day4.Board,null)) void","generic": false,"ret": 726,"args": [881]},{"kind": 18,"name": "fn(*day4.Board, u64) ?u64","generic": false,"ret": 1203,"args": [1300,732]},{"kind": 18,"name": "fn(std.hash_map.AutoContext(day5.Point), day5.Point) u64","generic": false,"ret": 732,"args": [883,884]},{"kind": 18,"name": "fn(std.hash_map.AutoContext(day5.Point), day5.Point, day5.Point) bool","generic": false,"ret": 720,"args": [883,884,884]},{"kind": 18,"name": "fn() day5.Map","generic": false,"ret": 1301},{"kind": 18,"name": "fn(i32, i32) i32","generic": false,"ret": 829,"args": [829,829]},{"kind": 18,"name": "fn(*day5.Map, i32, i32) @typeInfo(@typeInfo(@TypeOf(day5.Map.mark)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1302,"args": [1303,829,829]},{"kind": 18,"name": "fn(*std.hash_map.HashMap(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80), day5.Point) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMap(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80).getOrPut)).Fn.return_type.?).ErrorUnion.error_set!std.hash_map.GetOrPutResult","generic": false,"ret": 1304,"args": [1305,884]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80), *std.mem.Allocator, day5.Point, std.hash_map.AutoContext(day5.Point)) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80).getOrPutContext)).Fn.return_type.?).ErrorUnion.error_set!std.hash_map.GetOrPutResult","generic": false,"ret": 1306,"args": [1307,977,884,883]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80), *std.mem.Allocator, day5.Point, std.hash_map.AutoContext(day5.Point), std.hash_map.AutoContext(day5.Point)) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80).getOrPutContextAdapted)).Fn.return_type.?).ErrorUnion.error_set!std.hash_map.GetOrPutResult","generic": false,"ret": 1308,"args": [1307,977,884,883,883]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80), *std.mem.Allocator, u32, std.hash_map.AutoContext(day5.Point)) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80).growIfNeeded)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1309,"args": [1307,977,893,883]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80), *std.mem.Allocator, u32, std.hash_map.AutoContext(day5.Point)) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80).grow)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1310,"args": [1307,977,893,883]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80)) u32","generic": false,"ret": 893,"args": [1311]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80), *std.mem.Allocator, u32) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80).allocate)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1312,"args": [1307,977,893]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Allocator.Error![]align(4) u8","generic": false,"ret": 1313,"args": [977,719]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80), *std.mem.Allocator) void","generic": false,"ret": 726,"args": [1307,977]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80)) void","generic": false,"ret": 726,"args": [1307]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80)) [*]day5.Point","generic": false,"ret": 1314,"args": [1311]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80)) [*]i32","generic": false,"ret": 927,"args": [1311]},{"kind": 18,"name": "fn(std.hash_map.Metadata) bool","generic": false,"ret": 720,"args": [1315]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80), day5.Point, i32, std.hash_map.AutoContext(day5.Point)) void","generic": false,"ret": 726,"args": [1307,884,829,883]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80), *std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80)) void","generic": false,"ret": 726,"args": [1307,1307]},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80), day5.Point, std.hash_map.AutoContext(day5.Point)) callconv(.Inline) ?usize","generic": false,"ret": 791,"args": [886,884,883]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80), day5.Point, std.hash_map.AutoContext(day5.Point)) std.hash_map.GetOrPutResult","generic": false,"ret": 1316,"args": [1307,884,883]},{"kind": 18,"name": "fn(*day5.Map) void","generic": false,"ret": 726,"args": [1303]},{"kind": 18,"name": "fn(*const day5.Map) u64","generic": false,"ret": 732,"args": [1317]},{"kind": 18,"name": "fn(i32) i32","generic": false,"ret": 829,"args": [829]},{"kind": 18,"name": "fn([]const u8, usize) @typeInfo(@typeInfo(@TypeOf(day6.simulate)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1318,"args": [765,719]},{"kind": 18,"name": "fn(std.hash_map.AutoContext(day6.Key), day6.Key) u64","generic": false,"ret": 732,"args": [887,888]},{"kind": 18,"name": "fn(std.hash_map.AutoContext(day6.Key), day6.Key, day6.Key) bool","generic": false,"ret": 720,"args": [887,888,888]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.hash_map.HashMap(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80)","generic": false,"ret": 889,"args": [977]},{"kind": 18,"name": "fn(std.hash_map.HashMap(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80), day6.Key) ?u64","generic": false,"ret": 1203,"args": [889,888]},{"kind": 18,"name": "fn(i32, usize, *std.hash_map.HashMap(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80)) anyerror!u64","generic": false,"ret": 1319,"args": [829,719,1320]},{"kind": 18,"name": "fn(*std.hash_map.HashMap(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80)) void","generic": false,"ret": 726,"args": [1320]},{"kind": 18,"name": "fn(*std.hash_map.HashMap(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80), day6.Key, u64) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMap(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80).put)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1321,"args": [1320,888,732]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80), *std.mem.Allocator, day6.Key, u64, std.hash_map.AutoContext(day6.Key)) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80).putContext)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1322,"args": [1323,977,888,732,887]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80), *std.mem.Allocator, day6.Key, std.hash_map.AutoContext(day6.Key)) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80).getOrPutContext)).Fn.return_type.?).ErrorUnion.error_set!std.hash_map.GetOrPutResult","generic": false,"ret": 1324,"args": [1323,977,888,887]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80), *std.mem.Allocator, day6.Key, std.hash_map.AutoContext(day6.Key), std.hash_map.AutoContext(day6.Key)) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80).getOrPutContextAdapted)).Fn.return_type.?).ErrorUnion.error_set!std.hash_map.GetOrPutResult","generic": false,"ret": 1325,"args": [1323,977,888,887,887]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80), *std.mem.Allocator, u32, std.hash_map.AutoContext(day6.Key)) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80).growIfNeeded)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1326,"args": [1323,977,893,887]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80), *std.mem.Allocator, u32, std.hash_map.AutoContext(day6.Key)) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80).grow)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1327,"args": [1323,977,893,887]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80)) u32","generic": false,"ret": 893,"args": [1328]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80), *std.mem.Allocator, u32) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80).allocate)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1329,"args": [1323,977,893]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80), *std.mem.Allocator) void","generic": false,"ret": 726,"args": [1323,977]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80)) void","generic": false,"ret": 726,"args": [1323]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80)) [*]day6.Key","generic": false,"ret": 1330,"args": [1328]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80)) [*]u64","generic": false,"ret": 1331,"args": [1328]},{"kind": 18,"name": "fn(std.hash_map.Metadata) bool","generic": false,"ret": 720,"args": [1332]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80), day6.Key, u64, std.hash_map.AutoContext(day6.Key)) void","generic": false,"ret": 726,"args": [1323,888,732,887]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80), *std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80)) void","generic": false,"ret": 726,"args": [1323,1323]},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80), day6.Key, std.hash_map.AutoContext(day6.Key)) callconv(.Inline) ?usize","generic": false,"ret": 791,"args": [890,888,887]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80), day6.Key, std.hash_map.AutoContext(day6.Key)) std.hash_map.GetOrPutResult","generic": false,"ret": 1333,"args": [1323,888,887]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.ArrayListAligned(i32,null)","generic": false,"ret": 891,"args": [977]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(i32,null), i32) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(i32,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1334,"args": [1335,829]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(i32,null)) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(i32,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*i32","generic": false,"ret": 1336,"args": [1335]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(i32,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(i32,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1337,"args": [1335,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(i32,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(i32,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1338,"args": [1335,719]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(i32,null)) []i32","generic": false,"ret": 922,"args": [891]},{"kind": 18,"name": "fn(*std.mem.Allocator, []i32, usize) std.mem.Allocator.Error![]i32","generic": false,"ret": 1339,"args": [977,922,719]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(i32,null)) *i32","generic": false,"ret": 1340,"args": [1335]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(i32,null)) void","generic": false,"ret": 726,"args": [891]},{"kind": 18,"name": "fn(void, i32, i32) bool","generic": false,"ret": 720,"args": [726,829,829]},{"kind": 18,"name": "fn([]i32, void) void","generic": false,"ret": 726,"args": [922,726]},{"kind": 18,"name": "fn(struct:20:91) u64","generic": false,"ret": 732,"args": [1276]},{"kind": 18,"name": "fn([]u8, struct:20:91) std.fmt.BufPrintError![]u8","generic": false,"ret": 1341,"args": [811,1276]},{"kind": 18,"name": "fn(u16, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1342,"args": [715,972,723]},{"kind": 18,"name": "fn(u16, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1343,"args": [715,972,723]},{"kind": 18,"name": "fn(u16, u8, std.fmt.Case, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatInt)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1344,"args": [715,759,1152,972,723]},{"kind": 18,"name": "fn(u16) u16","generic": false,"ret": 715,"args": [715]},{"kind": 18,"name": "fn(u64, u64) u128","generic": false,"ret": 894,"args": [732,732]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1345,"args": [719,972,723]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1346,"args": [719,972,723]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1347,"args": [719,972,723]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1348,"args": [719,972,723]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1349,"args": [719,972,723]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1350,"args": [719,972,723]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:135:91) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1351,"args": [723,1289]},{"kind": 18,"name": "fn([]const u8, usize, []const u8) ?usize","generic": false,"ret": 791,"args": [765,719,765]},{"kind": 18,"name": "fn([]const u8, u8) std.fmt.ParseIntError!i32","generic": false,"ret": 1352,"args": [765,759]},{"kind": 18,"name": "fn([]const u8, u8) std.fmt.ParseIntError!u64","generic": false,"ret": 1353,"args": [765,759]},{"kind": 18,"name": "fn() [5][5]bool","generic": false,"ret": 1354},{"kind": 18,"name": "fn(std.mem.TokenIterator(u8), u8) bool","generic": false,"ret": 720,"args": [880,759]},{"kind": 18,"name": "fn(*std.mem.Allocator, []day4.Board, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]day4.Board","generic": false,"ret": 1299,"args": [977,915,719,1170,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, []day4.Board) void","generic": false,"ret": 726,"args": [977,915]},{"kind": 18,"name": "fn(*const day4.Board, usize) bool","generic": false,"ret": 720,"args": [1355,719]},{"kind": 18,"name": "fn(*const day4.Board) u64","generic": false,"ret": 732,"args": [1355]},{"kind": 18,"name": "fn(*const day5.Point) *align(4) const [8]u8","generic": false,"ret": 896,"args": [895]},{"kind": 18,"name": "fn(day5.Point, day5.Point) bool","generic": false,"ret": 720,"args": [884,884]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.hash_map.HashMap(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80)","generic": false,"ret": 885,"args": [977]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80)) *std.hash_map.Header","generic": false,"ret": 1356,"args": [1311]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]align(4) u8","generic": false,"ret": 1313,"args": [977,719,1170,719]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80), day5.Point, std.hash_map.AutoContext(day5.Point)) bool","generic": false,"ret": 720,"args": [1311,884,883]},{"kind": 18,"name": "fn(*std.hash_map.Metadata, u7) void","generic": false,"ret": 726,"args": [1357,1191]},{"kind": 18,"name": "fn(*std.hash_map.HashMap(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80)) void","generic": false,"ret": 726,"args": [1305]},{"kind": 18,"name": "fn(*const std.hash_map.HashMap(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80)) std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80).FieldIterator(i32)","generic": false,"ret": 898,"args": [1358]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80).FieldIterator(i32)) ?*i32","generic": false,"ret": 1359,"args": [1360]},{"kind": 18,"name": "fn(u64) std.hash.wyhash.Wyhash","generic": false,"ret": 1361,"args": [732]},{"kind": 18,"name": "fn(*std.hash.wyhash.Wyhash, day6.Key) void","generic": false,"ret": 726,"args": [1362,888]},{"kind": 18,"name": "fn(*std.hash.wyhash.Wyhash) u64","generic": false,"ret": 732,"args": [1362]},{"kind": 18,"name": "fn(day6.Key, day6.Key) bool","generic": false,"ret": 720,"args": [888,888]},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80), day6.Key, std.hash_map.AutoContext(day6.Key)) ?u64","generic": false,"ret": 1203,"args": [890,888,887]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80)) *std.hash_map.Header","generic": false,"ret": 1363,"args": [1328]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80), day6.Key, std.hash_map.AutoContext(day6.Key)) bool","generic": false,"ret": 720,"args": [1328,888,887]},{"kind": 18,"name": "fn(*std.hash_map.Metadata, u7) void","generic": false,"ret": 726,"args": [1364,1191]},{"kind": 18,"name": "fn(*std.mem.Allocator, []i32, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]i32","generic": false,"ret": 1339,"args": [977,922,719,1170,719]},{"kind": 18,"name": "fn(*std.mem.Allocator, []i32) void","generic": false,"ret": 726,"args": [977,922]},{"kind": 18,"name": "fn(*i32, *i32) void","generic": false,"ret": 726,"args": [1340,1340]},{"kind": 18,"name": "fn(usize, usize) std.sort.Iterator","generic": false,"ret": 1365,"args": [719,719]},{"kind": 18,"name": "fn(*std.sort.Iterator) bool","generic": false,"ret": 720,"args": [1366]},{"kind": 18,"name": "fn(*std.sort.Iterator) std.sort.Range","generic": false,"ret": 1367,"args": [1366]},{"kind": 18,"name": "fn(std.sort.Range) usize","generic": false,"ret": 719,"args": [1367]},{"kind": 18,"name": "fn([]i32, void, *[8]u8, usize, usize) void","generic": false,"ret": 726,"args": [922,726,1368,719,719]},{"kind": 18,"name": "fn(*std.sort.Iterator) usize","generic": false,"ret": 719,"args": [1366]},{"kind": 18,"name": "fn(*std.sort.Iterator) void","generic": false,"ret": 726,"args": [1366]},{"kind": 18,"name": "fn([]i32, []const i32) void","generic": false,"ret": 726,"args": [922,1369]},{"kind": 18,"name": "fn([]i32, std.sort.Range, std.sort.Range, void, []i32) void","generic": false,"ret": 726,"args": [922,1367,1367,726,922]},{"kind": 18,"name": "fn(usize, usize) std.sort.Range","generic": false,"ret": 1367,"args": [719,719]},{"kind": 18,"name": "fn([]i32, usize) void","generic": false,"ret": 726,"args": [922,719]},{"kind": 18,"name": "fn(usize) u32","generic": false,"ret": 893,"args": [719]},{"kind": 18,"name": "fn([]i32, i32, std.sort.Range, void, usize) usize","generic": false,"ret": 719,"args": [922,829,1367,726,719]},{"kind": 18,"name": "fn([]i32, usize, usize, usize) void","generic": false,"ret": 726,"args": [922,719,719,719]},{"kind": 18,"name": "fn([]i32, i32, std.sort.Range, void) usize","generic": false,"ret": 719,"args": [922,829,1367,726]},{"kind": 18,"name": "fn([]i32, std.sort.Range, std.sort.Range, void, std.sort.Range) void","generic": false,"ret": 726,"args": [922,1367,1367,726,1367]},{"kind": 18,"name": "fn([]i32, std.sort.Range, std.sort.Range, void) void","generic": false,"ret": 726,"args": [922,1367,1367,726]},{"kind": 18,"name": "fn(void, []const u8) std.io.error:158:48!usize","generic": false,"ret": 1370,"args": [726,765]},{"kind": 18,"name": "fn(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)) std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite))","generic": false,"ret": 904,"args": [900]},{"kind": 18,"name": "fn(*std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)), []const u8) std.io.NullWriter!usize","generic": false,"ret": 1371,"args": [906,765]},{"kind": 18,"name": "fn(*std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite))) std.io.writer.Writer(*std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)),std.io.NullWriter,std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)).write)","generic": false,"ret": 905,"args": [906]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)),std.io.NullWriter,std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)).write), struct:20:91) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1372,"args": [905,1276]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)),std.io.NullWriter,std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)).write), []const u8) std.io.NullWriter!void","generic": false,"ret": 1373,"args": [905,765]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)),std.io.NullWriter,std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)).write), usize) std.io.NullWriter!void","generic": false,"ret": 1373,"args": [719,972,905,719]},{"kind": 18,"name": "fn([]u8) std.io.fixed_buffer_stream.FixedBufferStream([]u8)","generic": false,"ret": 907,"args": [811]},{"kind": 18,"name": "fn(*std.io.fixed_buffer_stream.FixedBufferStream([]u8), []const u8) std.io.fixed_buffer_stream.WriteError!usize","generic": false,"ret": 1374,"args": [909,765]},{"kind": 18,"name": "fn(*std.io.fixed_buffer_stream.FixedBufferStream([]u8)) std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write)","generic": false,"ret": 908,"args": [909]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write), struct:20:91) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1375,"args": [908,1276]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write), []const u8) std.io.fixed_buffer_stream.WriteError!void","generic": false,"ret": 1376,"args": [908,765]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write), usize) std.io.fixed_buffer_stream.WriteError!void","generic": false,"ret": 1376,"args": [719,972,908,719]},{"kind": 18,"name": "fn(std.io.fixed_buffer_stream.FixedBufferStream([]u8)) []u8","generic": false,"ret": 811,"args": [907]},{"kind": 18,"name": "fn() *std.Thread.Mutex","generic": false,"ret": 957},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.start.struct:554:37) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,1238]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatText)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1377,"args": [765,972,723]},{"kind": 18,"name": "fn([]const u8, *[256]usize) void","generic": false,"ret": 726,"args": [765,1378]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]day4.Board","generic": false,"ret": 1299,"args": [977,719,1170,719]},{"kind": 18,"name": "fn([]day4.Board) []align(8) u8","generic": false,"ret": 838,"args": [915]},{"kind": 18,"name": "fn([]align(8) u8) []day4.Board","generic": false,"ret": 915,"args": [838]},{"kind": 18,"name": "fn(i32, i32) bool","generic": false,"ret": 720,"args": [829,829]},{"kind": 18,"name": "fn([]align(4) u8) []align(4) u8","generic": false,"ret": 916,"args": [916]},{"kind": 18,"name": "fn(*std.mem.Allocator, []align(4) u8) void","generic": false,"ret": 726,"args": [977,916]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80)) std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80).FieldIterator(i32)","generic": false,"ret": 898,"args": [1311]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]i32","generic": false,"ret": 1339,"args": [977,719,1170,719]},{"kind": 18,"name": "fn([]i32) []align(4) u8","generic": false,"ret": 916,"args": [922]},{"kind": 18,"name": "fn([]align(4) u8) []i32","generic": false,"ret": 922,"args": [916]},{"kind": 18,"name": "fn(*u8, *u8) void","generic": false,"ret": 726,"args": [1116,1116]},{"kind": 18,"name": "fn([]i32) void","generic": false,"ret": 726,"args": [922]},{"kind": 18,"name": "fn(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite), []const u8) std.io.NullWriter!usize","generic": false,"ret": 1371,"args": [900,765]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)),std.io.NullWriter,std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)).write), []const u8) std.io.NullWriter!usize","generic": false,"ret": 1371,"args": [905,765]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)),std.io.NullWriter,std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)).write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1379,"args": [719,972,905]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)),std.io.NullWriter,std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)).write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1380,"args": [719,972,905]},{"kind": 18,"name": "fn(usize, u8, std.fmt.Case, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)),std.io.NullWriter,std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)).write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatInt)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1381,"args": [719,759,1152,972,905]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)),std.io.NullWriter,std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)).write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatBuf)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1382,"args": [765,972,905]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)),std.io.NullWriter,std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)).write), u8, usize) std.io.NullWriter!void","generic": false,"ret": 1373,"args": [905,759,719]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write), []const u8) std.io.fixed_buffer_stream.WriteError!usize","generic": false,"ret": 1374,"args": [908,765]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1383,"args": [719,972,908]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1384,"args": [719,972,908]},{"kind": 18,"name": "fn(usize, u8, std.fmt.Case, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatInt)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1385,"args": [719,759,1152,972,908]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatBuf)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1386,"args": [765,972,908]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write), u8, usize) std.io.fixed_buffer_stream.WriteError!void","generic": false,"ret": 1376,"args": [908,759,719]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), struct:26:33) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,1282]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), struct:27:39) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,1283]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), struct:28:39) std.os.WriteError!void","generic": false,"ret": 959,"args": [723,1284]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.start.struct:554:37) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1387,"args": [723,1238]},{"kind": 18,"name": "fn(u8, u8) std.fmt.error:1761:39!u8","generic": false,"ret": 1388,"args": [759,759]},{"kind": 18,"name": "fn(u8) std.math.error:993:44!i32","generic": false,"ret": 1389,"args": [759]},{"kind": 18,"name": "fn(i32, i32) std.math.error:449:43!i32","generic": false,"ret": 1390,"args": [829,829]},{"kind": 18,"name": "fn(i32, i32) std.math.error:455:43!i32","generic": false,"ret": 1391,"args": [829,829]},{"kind": 18,"name": "fn(i32, i32) std.math.error:462:43!i32","generic": false,"ret": 1392,"args": [829,829]},{"kind": 18,"name": "fn(u8) std.math.error:993:44!u64","generic": false,"ret": 1393,"args": [759]},{"kind": 18,"name": "fn(u64, u64) std.math.error:449:43!u64","generic": false,"ret": 1394,"args": [732,732]},{"kind": 18,"name": "fn(u64, u64) std.math.error:455:43!u64","generic": false,"ret": 1395,"args": [732,732]},{"kind": 18,"name": "fn(u64, u64) std.math.error:462:43!u64","generic": false,"ret": 1396,"args": [732,732]},{"kind": 18,"name": "fn(*std.hash.wyhash.Wyhash, i32) void","generic": false,"ret": 726,"args": [1362,829]},{"kind": 18,"name": "fn(*std.hash.wyhash.Wyhash, usize) void","generic": false,"ret": 726,"args": [1362,719]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), struct:26:33) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1397,"args": [723,1282]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), struct:27:39) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1398,"args": [723,1283]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), struct:28:39) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1399,"args": [723,1284]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatText)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1400,"args": [765,972,723]},{"kind": 18,"name": "fn(*std.hash.wyhash.Wyhash, []const u8) void","generic": false,"ret": 726,"args": [1362,765]},{"kind": 18,"name": "fn(*const i32) *align(4) const [4]u8","generic": false,"ret": 929,"args": [928]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1401,"args": [719,972,723]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1402,"args": [719,972,723]},{"kind": 18,"name": "fn(std.hash_map.StringContext, []const u8) u64","generic": false,"ret": 732,"args": [931,765]},{"kind": 18,"name": "fn(std.hash_map.StringContext, []const u8, []const u8) bool","generic": false,"ret": 720,"args": [931,765,765]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 0},{"kind": 8,"name": "std.target.Feature.feature_set_fns(std.target.x86.Feature)","src": 513,"pubDecls": [0,1,2,3],"privDecls": []},{"kind": 16,"name": "std.target.x86.Feature","src": 514,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141]},{"kind": 18,"name": "fn(std.builtin.Signedness,anytype) anytype","generic": true,"args": [714,null]},{"kind": 4,"u": 320},{"kind": 16,"name": "std.builtin.Signedness","src": 515,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 4,"u": 16},{"kind": 4,"u": 9},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 4,"u": 6},{"kind": 4,"u": 64},{"kind": 2},{"kind": 16,"name": "std.target.Arch","src": 516,"pubDecls": [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"privDecls": [24],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 8,"name": "std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)","src": 517,"pubDecls": [25,26,27,28,29,30,31,32,33,34,35,36],"privDecls": [37],"fields": [724]},{"kind": 8,"name": "std.fs.file.File","src": 518,"pubDecls": [38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111],"privDecls": [112,113,114],"fields": [829,1414,1414]},{"kind": 15,"name": "std.os.WriteError","errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 1,"name": "void"},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 8,"name": "std.hash_map.AutoContext(usize)","src": 519,"pubDecls": [115,116],"privDecls": []},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null]},{"kind": 4,"u": 64},{"kind": 18,"name": "fn(type,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null]},{"kind": 8,"name": "std.hash_map.HashMap(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80)","src": 520,"pubDecls": [117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169],"privDecls": [170],"fields": [738,977,728]},{"kind": 6,"elem": 1416},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null]},{"kind": 8,"name": "std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80)","src": 521,"pubDecls": [171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241],"privDecls": [242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258],"fields": [1421,893,893]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 8,"name": "std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null)","src": 522,"pubDecls": [259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306],"privDecls": [307,308],"fields": [844,719,977]},{"kind": 8,"name": "std.dwarf.AbbrevTableHeader","src": 523,"pubDecls": [],"privDecls": [],"fields": [732,745]},{"kind": 13,"child": 1163},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 8,"name": "std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null)","src": 522,"pubDecls": [309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356],"privDecls": [357,358],"fields": [837,719,977]},{"kind": 8,"name": "std.dwarf.AbbrevTableEntry","src": 524,"pubDecls": [],"privDecls": [],"fields": [720,732,732,747]},{"kind": 8,"name": "std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null)","src": 522,"pubDecls": [359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406],"privDecls": [407,408],"fields": [843,719,977]},{"kind": 8,"name": "std.dwarf.AbbrevAttr","src": 525,"pubDecls": [],"privDecls": [],"fields": [732,732]},{"kind": 8,"name": "std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null)","src": 522,"pubDecls": [409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456],"privDecls": [457,458],"fields": [847,719,977]},{"kind": 8,"name": "std.dwarf.CompileUnit","src": 526,"pubDecls": [],"privDecls": [],"fields": [715,720,1423,1424]},{"kind": 8,"name": "std.array_list.ArrayListAligned(std.dwarf.Attr,null)","src": 522,"pubDecls": [459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506],"privDecls": [507,508],"fields": [845,719,977]},{"kind": 8,"name": "std.dwarf.Attr","src": 527,"pubDecls": [],"privDecls": [],"fields": [732,1425]},{"kind": 8,"name": "std.array_list.ArrayListAligned(std.dwarf.Func,null)","src": 522,"pubDecls": [509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556],"privDecls": [557,558],"fields": [846,719,977]},{"kind": 8,"name": "std.dwarf.Func","src": 528,"pubDecls": [],"privDecls": [],"fields": [1424,1098]},{"kind": 16,"name": "std.target.Tag","src": 529,"pubDecls": [559,560,561,562],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]},{"kind": 8,"name": "std.target.Target","src": 530,"pubDecls": [563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618],"privDecls": [],"fields": [1430,1426,1428]},{"kind": 16,"name": "std.builtin.Endian","src": 531,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 4,"u": 8},{"kind": 6,"len": 1,"align": 4096,"const": true,"elem": 759},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 6,"len": 1,"align": 4096,"const": true,"elem": 759},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 6,"len": 2,"align": 4096,"const": true,"elem": 759},{"kind": 6,"len": 2,"const": true,"elem": 759},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 8,"name": "std.io.fixed_buffer_stream.FixedBufferStream([]const u8)","src": 532,"pubDecls": [619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636],"privDecls": [637],"fields": [765,719]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 8,"name": "std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)","src": 533,"pubDecls": [638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665],"privDecls": [666],"fields": [771]},{"kind": 6,"elem": 768},{"kind": 15,"name": "std.io.fixed_buffer_stream.ReadError","errors": []},{"kind": 18,"name": "fn(type,anytype,anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null,null,null,null]},{"kind": 8,"name": "std.io.seekable_stream.SeekableStream(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.SeekError,std.io.fixed_buffer_stream.GetSeekPosError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekTo,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekBy,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getPos,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getEndPos)","src": 534,"pubDecls": [667,668,669,670,671,672],"privDecls": [673],"fields": [771]},{"kind": 15,"name": "std.io.fixed_buffer_stream.SeekError","errors": []},{"kind": 15,"name": "std.io.fixed_buffer_stream.GetSeekPosError","errors": []},{"kind": 18,"name": "fn(anytype,anytype) anytype","generic": true,"args": [null,null]},{"kind": 10,"name": "comptime_int"},{"kind": 18,"name": "fn(anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 8,"name": "std.array_list.ArrayListAligned([]const u8,null)","src": 522,"pubDecls": [674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721],"privDecls": [722,723],"fields": [852,719,977]},{"kind": 8,"name": "std.array_list.ArrayListAligned(u8,null)","src": 522,"pubDecls": [724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771],"privDecls": [772,773],"fields": [811,719,977]},{"kind": 8,"name": "std.array_list.ArrayListAligned(std.dwarf.FileEntry,null)","src": 522,"pubDecls": [774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821],"privDecls": [822,823],"fields": [853,719,977]},{"kind": 8,"name": "std.dwarf.FileEntry","src": 535,"pubDecls": [],"privDecls": [],"fields": [765,719,719,719]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn([]const u8) anytype","generic": true,"args": [765]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null]},{"kind": 13,"child": 719},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 16,"name": "@typeInfo(std.builtin.TypeInfo).Union.tag_type.?","src": 536,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]},{"kind": 17,"name": "std.builtin.TypeInfo","src": 536,"pubDecls": [824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845],"privDecls": [],"fields": [726,726,726,726,1438,1439,1440,1441,1443,726,726,726,726,1444,1445,1447,1449,1451,1453,1453,1454,1455,1456,1457,726]},{"kind": 18,"name": "fn(@typeInfo(std.builtin.TypeInfo).Union.tag_type.?) anytype","generic": true,"args": [796]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 6,"const": true,"elem": 719},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 6,"align": 8,"const": true,"elem": 807},{"kind": 16,"name": "std.builtin.Size","src": 537,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 7,"len": 8,"elem": 759},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 8,"name": "std.linked_list.SinglyLinkedList([]u8)","src": 538,"pubDecls": [846,847,848,849,850],"privDecls": [851],"fields": [1461]},{"kind": 6,"len": 2,"elem": 759},{"kind": 6,"len": 2,"const": true,"elem": 759},{"kind": 6,"len": 1,"const": true,"elem": 759},{"kind": 13,"child": 812},{"kind": 13,"child": 813},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 4,"i": 64},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 8,"name": "std.atomic.queue.Queue(anyframe)","src": 539,"pubDecls": [852,853,854,855,856,857,858,859,860,861],"privDecls": [],"fields": [1464,1464,1465]},{"kind": 22},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 8,"name": "std.linked_list.TailQueue(anyframe)","src": 540,"pubDecls": [862,863,864,865,866,867,868,869,870],"privDecls": [871],"fields": [1464,1464,719]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 8,"name": "std.atomic.Atomic.Atomic(std.Thread.enum:320:27)","src": 541,"pubDecls": [872,873,874,875,876,877,878,879],"privDecls": [880,881,882,883],"fields": [827]},{"kind": 16,"name": "std.Thread.enum:320:27","src": 542,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 8,"name": "std.atomic.Atomic.Atomic(i32)","src": 541,"pubDecls": [884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902],"privDecls": [903,904,905,906],"fields": [829]},{"kind": 4,"i": 32},{"kind": 8,"name": "std.atomic.queue.Queue(std.event.loop.Request)","src": 539,"pubDecls": [907,908,909,910,911,912,913,914,915,916],"privDecls": [],"fields": [1468,1468,1465]},{"kind": 8,"name": "std.event.loop.Request","src": 543,"pubDecls": [917,918,919],"privDecls": [],"fields": [1471,1470]},{"kind": 8,"name": "std.linked_list.TailQueue(std.event.loop.Request)","src": 540,"pubDecls": [920,921,922,923,924,925,926,927,928],"privDecls": [929],"fields": [1468,1468,719]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 8,"name": "std.atomic.stack.Stack(std.event.loop.EventFd)","src": 544,"pubDecls": [930,931,932,933,934,935,936],"privDecls": [937],"fields": [1474,720]},{"kind": 8,"name": "std.event.loop.EventFd","src": 545,"pubDecls": [],"privDecls": [],"fields": [1475,893,829]},{"kind": 4,"i": 64},{"kind": 6,"len": 2,"elem": 746},{"kind": 6,"len": 2,"align": 8,"elem": 759},{"kind": 18,"name": "fn(@typeInfo(std.builtin.TypeInfo).Union.tag_type.?) anytype","generic": true,"args": [796]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 6,"len": 2,"elem": 748},{"kind": 6,"len": 2,"elem": 742},{"kind": 6,"len": 2,"elem": 752},{"kind": 6,"len": 2,"elem": 754},{"kind": 6,"len": 2,"elem": 750},{"kind": 4,"u": 33},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 13,"child": 759},{"kind": 6,"len": 1,"elem": 759},{"kind": 6,"len": 2,"elem": 765},{"kind": 6,"len": 2,"elem": 784},{"kind": 18,"name": "fn(@Type(.EnumLiteral)) anytype","generic": true,"args": [856]},{"kind": 8,"name": "std.log.scoped(default)","src": 546,"pubDecls": [938,939,940,941,942,943,944,945],"privDecls": []},{"kind": 24},{"kind": 6,"len": 1,"align": 8,"elem": 759},{"kind": 6,"len": 1,"elem": 746},{"kind": 6,"len": 1,"elem": 748},{"kind": 6,"len": 1,"elem": 742},{"kind": 6,"len": 1,"elem": 752},{"kind": 6,"len": 1,"elem": 754},{"kind": 6,"len": 1,"elem": 750},{"kind": 6,"len": 1,"elem": 765},{"kind": 6,"len": 1,"elem": 784},{"kind": 8,"name": "std.io.reader.Reader(std.fs.file.File,std.os.ReadError,std.fs.file.File.read)","src": 533,"pubDecls": [946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973],"privDecls": [974],"fields": [724]},{"kind": 15,"name": "std.os.ReadError","errors": [12,13,14,15,16,17,18,19,20,21,11]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 16,"name": "std.builtin.ContainerLayout","src": 547,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 8,"name": "std.os.linux.x86_64.Stat","src": 548,"pubDecls": [975,976,977],"privDecls": [],"fields": [732,732,719,893,893,893,893,732,836,819,836,1222,1222,1222,1481]},{"kind": 6,"elem": 870},{"kind": 6,"align": 8,"elem": 873},{"kind": 7,"len": 144,"elem": 759},{"kind": 6,"len": 1,"const": true,"elem": 759},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 8,"name": "std.mem.SplitIterator(u8)","src": 549,"pubDecls": [978,979],"privDecls": [980],"fields": [765,791,765]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 8,"name": "util.EnumerateIterator(std.mem.SplitIterator(u8),[]const u8)","src": 550,"pubDecls": [981],"privDecls": [982,983],"fields": [876,719]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 8,"name": "std.mem.TokenIterator(u8)","src": 551,"pubDecls": [984,985,986],"privDecls": [987,988],"fields": [765,765,719]},{"kind": 8,"name": "std.array_list.ArrayListAligned(day4.Board,null)","src": 522,"pubDecls": [989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036],"privDecls": [1037,1038],"fields": [915,719,977]},{"kind": 8,"name": "day4.Board","src": 552,"pubDecls": [],"privDecls": [1039,1040,1041,1042,1043,1044],"fields": [1486,1354,720]},{"kind": 8,"name": "std.hash_map.AutoContext(day5.Point)","src": 519,"pubDecls": [1045,1046],"privDecls": []},{"kind": 8,"name": "day5.Point","src": 553,"pubDecls": [],"privDecls": [],"fields": [829,829]},{"kind": 8,"name": "std.hash_map.HashMap(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80)","src": 520,"pubDecls": [1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099],"privDecls": [1100],"fields": [886,977,883]},{"kind": 8,"name": "std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80)","src": 521,"pubDecls": [1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171],"privDecls": [1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188],"fields": [1492,893,893]},{"kind": 8,"name": "std.hash_map.AutoContext(day6.Key)","src": 519,"pubDecls": [1189,1190],"privDecls": []},{"kind": 8,"name": "day6.Key","src": 554,"pubDecls": [],"privDecls": [],"fields": [829,719]},{"kind": 8,"name": "std.hash_map.HashMap(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80)","src": 520,"pubDecls": [1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243],"privDecls": [1244],"fields": [890,977,887]},{"kind": 8,"name": "std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80)","src": 521,"pubDecls": [1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315],"privDecls": [1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332],"fields": [1499,893,893]},{"kind": 8,"name": "std.array_list.ArrayListAligned(i32,null)","src": 522,"pubDecls": [1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380],"privDecls": [1381,1382],"fields": [922,719,977]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 4,"u": 32},{"kind": 4,"u": 128},{"kind": 6,"const": true,"elem": 884},{"kind": 6,"align": 4,"const": true,"elem": 807},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 8,"name": "std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80).FieldIterator(i32)","src": 555,"pubDecls": [1383],"privDecls": [],"fields": [719,1500,927]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 8,"name": "std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)","src": 517,"pubDecls": [1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395],"privDecls": [1396],"fields": [726]},{"kind": 15,"name": "std.io.NullWriter","errors": []},{"kind": 18,"name": "fn(void, []const u8) std.io.NullWriter!usize","generic": false,"ret": 1371,"args": [726,765]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 8,"name": "std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite))","src": 556,"pubDecls": [1397,1398,1399,1400],"privDecls": [1401],"fields": [732,900]},{"kind": 8,"name": "std.io.writer.Writer(*std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)),std.io.NullWriter,std.io.counting_writer.CountingWriter(std.io.writer.Writer(void,std.io.NullWriter,std.io.dummyWrite)).write)","src": 517,"pubDecls": [1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413],"privDecls": [1414],"fields": [906]},{"kind": 6,"elem": 904},{"kind": 8,"name": "std.io.fixed_buffer_stream.FixedBufferStream([]u8)","src": 532,"pubDecls": [1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432],"privDecls": [1433],"fields": [811,719]},{"kind": 8,"name": "std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write)","src": 517,"pubDecls": [1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445],"privDecls": [1446],"fields": [909]},{"kind": 6,"elem": 907},{"kind": 15,"name": "std.io.fixed_buffer_stream.WriteError","errors": [22]},{"kind": 18,"name": "fn(std.log.Level) anytype","generic": true,"args": [913]},{"kind": 6,"const": true,"elem": 1502},{"kind": 16,"name": "std.log.Level","src": 557,"pubDecls": [1447],"privDecls": [],"fields": [0,1,2,3]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 6,"len": 2,"elem": 882},{"kind": 6,"len": 2,"align": 4,"elem": 759},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 6,"len": 2,"elem": 829},{"kind": 6,"const": true,"elem": 1503},{"kind": 6,"len": 1,"elem": 882},{"kind": 6,"len": 1,"align": 4,"elem": 759},{"kind": 13,"child": 829},{"kind": 6,"len": 1,"elem": 829},{"kind": 6,"const": true,"elem": 829},{"kind": 6,"align": 4,"const": true,"elem": 930},{"kind": 7,"len": 4,"elem": 759},{"kind": 8,"name": "std.hash_map.StringContext","src": 558,"pubDecls": [1448,1449],"privDecls": []},{"kind": 8,"name": "std.hash_map.HashMap([]const u8,std.dwarf.DwarfInfo,std.hash_map.StringContext,80)","src": 520,"pubDecls": [1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502],"privDecls": [1503],"fields": [935,977,931]},{"kind": 8,"name": "std.dwarf.DwarfInfo","src": 559,"pubDecls": [1504,1505,1506,1507],"privDecls": [1508,1509,1510,1511,1512,1513],"fields": [757,765,765,765,765,1098,741,749,753]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 8,"name": "std.hash_map.HashMapUnmanaged([]const u8,std.dwarf.DwarfInfo,std.hash_map.StringContext,80)","src": 521,"pubDecls": [1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584],"privDecls": [1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601],"fields": [1507,893,893]},{"kind": 8,"name": "std.array_list.ArrayListAligned(std.coff.Section,null)","src": 522,"pubDecls": [1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649],"privDecls": [1650,1651],"fields": [1508,719,977]},{"kind": 8,"name": "std.coff.Section","src": 560,"pubDecls": [],"privDecls": [],"fields": [1509]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 18,"name": "fn(bool,anytype) anytype","generic": true,"args": [720,null]},{"kind": 8,"name": "std.atomic.Atomic.Atomic(std.Thread.enum:320:27).exportWhen(false,std.atomic.Atomic.struct:131:69)","src": 561,"pubDecls": [],"privDecls": []},{"kind": 8,"name": "std.atomic.Atomic.struct:131:69","src": 562,"pubDecls": [1652,1653,1654,1655,1656,1657,1658],"privDecls": [1659,1660,1661]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 8,"name": "std.atomic.Atomic.Atomic(std.Thread.enum:320:27).exportWhen(false,std.atomic.Atomic.struct:113:67)","src": 561,"pubDecls": [],"privDecls": []},{"kind": 8,"name": "std.atomic.Atomic.struct:113:67","src": 563,"pubDecls": [1662,1663,1664,1665],"privDecls": []},{"kind": 18,"name": "fn(bool,anytype) anytype","generic": true,"args": [720,null]},{"kind": 8,"name": "std.atomic.Atomic.struct:131:69","src": 562,"pubDecls": [892,893,894,895,896,897,898],"privDecls": [1666,1667,1668]},{"kind": 8,"name": "std.atomic.Atomic.struct:113:67","src": 563,"pubDecls": [899,900,901,902],"privDecls": []},{"kind": 8,"name": "(root)","src": 564,"pubDecls": [1669],"privDecls": [1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680],"file": 0},{"kind": 8,"name": "std","src": 565,"pubDecls": [1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768],"privDecls": [],"file": 1},{"kind": 8,"name": "builtin","src": 566,"pubDecls": [1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790],"privDecls": [1791],"file": 2},{"kind": 3,"name": "noreturn"},{"kind": 13,"child": 1542},{"kind": 8,"name": "std.target.Set","src": 567,"pubDecls": [1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808],"privDecls": [],"fields": [1543]},{"kind": 6,"len": 2,"const": true,"elem": 711},{"kind": 6,"elem": 953},{"kind": 13,"child": 1544},{"kind": 6,"elem": 1465},{"kind": 14,"err": 725,"payload": 719},{"kind": 14,"err": 725,"payload": 726},{"kind": 8,"name": "std.debug.struct:297:56","src": 568,"pubDecls": [],"privDecls": [],"fields": [732]},{"kind": 8,"name": "std.debug.struct:299:40","src": 569,"pubDecls": [],"privDecls": [],"fields": [765]},{"kind": 8,"name": "std.builtin.StackTrace","src": 570,"pubDecls": [1809],"privDecls": [],"fields": [719,1545]},{"kind": 6,"elem": 1546},{"kind": 8,"name": "std.debug.struct:323:67","src": 571,"pubDecls": [],"privDecls": []},{"kind": 6,"len": 2,"elem": 1547},{"kind": 6,"len": 1,"elem": 1548},{"kind": 6,"len": 2,"elem": 1548},{"kind": 13,"child": 1549},{"kind": 13,"child": 1550},{"kind": 6,"elem": 1551},{"kind": 14,"err": 1552,"payload": 726},{"kind": 8,"name": "std.fmt.FormatOptions","src": 572,"pubDecls": [],"privDecls": [],"fields": [791,791,1553,759]},{"kind": 14,"err": 1148,"payload": 726},{"kind": 14,"err": 1554,"payload": 726},{"kind": 14,"err": 1555,"payload": 981},{"kind": 14,"err": 1556,"payload": 1160},{"kind": 6,"elem": 1557},{"kind": 8,"name": "std.debug.struct:205:91","src": 573,"pubDecls": [],"privDecls": [],"fields": [812]},{"kind": 16,"name": "std.debug.Config","src": 574,"pubDecls": [1810],"privDecls": [],"fields": [0,1,2]},{"kind": 14,"err": 1559,"payload": 726},{"kind": 6,"elem": 1160},{"kind": 14,"err": 1560,"payload": 726},{"kind": 14,"err": 1561,"payload": 735},{"kind": 14,"err": 1562,"payload": 735},{"kind": 14,"err": 1563,"payload": 726},{"kind": 6,"elem": 1564},{"kind": 6,"elem": 1565},{"kind": 14,"err": 1556,"payload": 726},{"kind": 13,"child": 735},{"kind": 14,"err": 1566,"payload": 735},{"kind": 8,"name": "std.fs.Dir","src": 575,"pubDecls": [1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889],"privDecls": [1890,1891,1892],"fields": [829]},{"kind": 14,"err": 1408,"payload": 724},{"kind": 8,"name": "std.fs.file.OpenFlags","src": 576,"pubDecls": [],"privDecls": [],"fields": [720,720,1409,720,1414,720]},{"kind": 14,"err": 1568,"payload": 724},{"kind": 14,"err": 1569,"payload": 1416},{"kind": 14,"err": 1570,"payload": 1215},{"kind": 14,"err": 1410,"payload": 732},{"kind": 14,"err": 1571,"payload": 719},{"kind": 14,"err": 1572,"payload": 1573},{"kind": 13,"child": 1214},{"kind": 14,"err": 1574,"payload": 765},{"kind": 14,"err": 1575,"payload": 726},{"kind": 6,"elem": 933},{"kind": 14,"err": 1576,"payload": 726},{"kind": 14,"err": 772,"payload": 719},{"kind": 14,"err": 775,"payload": 726},{"kind": 14,"err": 776,"payload": 732},{"kind": 14,"err": 1577,"payload": 732},{"kind": 6,"elem": 770},{"kind": 6,"elem": 720},{"kind": 14,"err": 1578,"payload": 893},{"kind": 14,"err": 1579,"payload": 930},{"kind": 14,"err": 1580,"payload": 726},{"kind": 6,"const": true,"elem": 930},{"kind": 14,"err": 1581,"payload": 732},{"kind": 14,"err": 1582,"payload": 807},{"kind": 6,"const": true,"elem": 807},{"kind": 14,"err": 1583,"payload": 715},{"kind": 14,"err": 1584,"payload": 1585},{"kind": 6,"const": true,"elem": 1585},{"kind": 14,"err": 1586,"payload": 759},{"kind": 14,"err": 1587,"payload": 1047},{"kind": 14,"err": 1588,"payload": 726},{"kind": 6,"elem": 741},{"kind": 14,"err": 1589,"payload": 745},{"kind": 14,"err": 1590,"payload": 732},{"kind": 14,"err": 1591,"payload": 726},{"kind": 6,"elem": 745},{"kind": 14,"err": 1592,"payload": 1033},{"kind": 14,"err": 1593,"payload": 726},{"kind": 14,"err": 1594,"payload": 726},{"kind": 14,"err": 1566,"payload": 837},{"kind": 6,"elem": 746},{"kind": 14,"err": 1595,"payload": 726},{"kind": 6,"elem": 747},{"kind": 14,"err": 1596,"payload": 1040},{"kind": 14,"err": 1597,"payload": 726},{"kind": 14,"err": 1598,"payload": 726},{"kind": 14,"err": 1566,"payload": 843},{"kind": 6,"elem": 748},{"kind": 14,"err": 1599,"payload": 1045},{"kind": 14,"err": 1600,"payload": 726},{"kind": 14,"err": 1601,"payload": 726},{"kind": 14,"err": 1566,"payload": 844},{"kind": 6,"elem": 742},{"kind": 14,"err": 1602,"payload": 1603},{"kind": 6,"const": true,"elem": 745},{"kind": 13,"child": 1604},{"kind": 14,"err": 1605,"payload": 726},{"kind": 6,"elem": 751},{"kind": 14,"err": 1606,"payload": 726},{"kind": 14,"err": 1607,"payload": 726},{"kind": 14,"err": 1566,"payload": 845},{"kind": 14,"err": 1556,"payload": 1425},{"kind": 13,"child": 1608},{"kind": 6,"const": true,"elem": 1609},{"kind": 14,"err": 1610,"payload": 765},{"kind": 14,"err": 1611,"payload": 765},{"kind": 14,"err": 1612,"payload": 732},{"kind": 14,"err": 1613,"payload": 732},{"kind": 14,"err": 1614,"payload": 732},{"kind": 6,"const": true,"elem": 1615},{"kind": 14,"err": 1616,"payload": 726},{"kind": 6,"elem": 753},{"kind": 14,"err": 1617,"payload": 1069},{"kind": 14,"err": 1618,"payload": 726},{"kind": 14,"err": 1619,"payload": 726},{"kind": 14,"err": 1566,"payload": 846},{"kind": 6,"elem": 754},{"kind": 14,"err": 1620,"payload": 726},{"kind": 14,"err": 1566,"payload": 1423},{"kind": 14,"err": 1621,"payload": 726},{"kind": 6,"elem": 749},{"kind": 14,"err": 1622,"payload": 1078},{"kind": 14,"err": 1623,"payload": 726},{"kind": 14,"err": 1624,"payload": 726},{"kind": 14,"err": 1566,"payload": 847},{"kind": 6,"elem": 750},{"kind": 14,"err": 1625,"payload": 726},{"kind": 6,"elem": 734},{"kind": 14,"err": 1626,"payload": 726},{"kind": 6,"elem": 738},{"kind": 6,"const": true,"elem": 738},{"kind": 14,"err": 1627,"payload": 726},{"kind": 14,"err": 1628,"payload": 726},{"kind": 14,"err": 1629,"payload": 726},{"kind": 14,"err": 1566,"payload": 838},{"kind": 6,"len": 1,"elem": 719},{"kind": 6,"len": 1,"elem": 735},{"kind": 8,"name": "std.hash_map.Metadata","src": 577,"pubDecls": [1893,1894,1895,1896,1897],"privDecls": [1898,1899,1900],"fields": [1191,1630]},{"kind": 14,"err": 1631,"payload": 726},{"kind": 13,"child": 1197},{"kind": 14,"err": 1632,"payload": 1134},{"kind": 14,"err": 1633,"payload": 1134},{"kind": 14,"err": 1634,"payload": 1635},{"kind": 14,"err": 1636,"payload": 732},{"kind": 14,"err": 1637,"payload": 719},{"kind": 13,"child": 765},{"kind": 14,"err": 1638,"payload": 1197},{"kind": 14,"err": 1639,"payload": 1640},{"kind": 14,"err": 1566,"payload": 811},{"kind": 14,"err": 1641,"payload": 726},{"kind": 6,"elem": 781},{"kind": 14,"err": 1642,"payload": 1108},{"kind": 14,"err": 1643,"payload": 726},{"kind": 14,"err": 1644,"payload": 726},{"kind": 14,"err": 1566,"payload": 852},{"kind": 6,"elem": 765},{"kind": 14,"err": 1645,"payload": 811},{"kind": 14,"err": 1646,"payload": 726},{"kind": 6,"elem": 782},{"kind": 14,"err": 1647,"payload": 726},{"kind": 14,"err": 1648,"payload": 1116},{"kind": 14,"err": 1649,"payload": 726},{"kind": 14,"err": 1650,"payload": 726},{"kind": 6,"elem": 759},{"kind": 8,"name": "std.dwarf.LineNumberProgram","src": 578,"pubDecls": [1901,1902,1903],"privDecls": [],"fields": [732,719,836,732,720,720,720,720,732,1118,1119,720,732,719,836,732,720,720,720]},{"kind": 6,"len": 2,"const": true,"elem": 765},{"kind": 6,"elem": 783},{"kind": 14,"err": 1651,"payload": 719},{"kind": 14,"err": 1652,"payload": 726},{"kind": 14,"err": 1653,"payload": 1126},{"kind": 14,"err": 1654,"payload": 726},{"kind": 14,"err": 1655,"payload": 726},{"kind": 14,"err": 1566,"payload": 853},{"kind": 6,"elem": 784},{"kind": 14,"err": 1656,"payload": 819},{"kind": 14,"err": 1657,"payload": 1092},{"kind": 6,"elem": 1117},{"kind": 14,"err": 1658,"payload": 811},{"kind": 14,"err": 1659,"payload": 811},{"kind": 14,"err": 1660,"payload": 811},{"kind": 14,"err": 1661,"payload": 836},{"kind": 8,"name": "std.debug.SymbolInfo","src": 579,"pubDecls": [1904],"privDecls": [],"fields": [765,765,1092]},{"kind": 8,"name": "std.debug.struct:209:64","src": 580,"pubDecls": [],"privDecls": [],"fields": [812]},{"kind": 8,"name": "std.debug.struct:114:91","src": 581,"pubDecls": [],"privDecls": [],"fields": [812]},{"kind": 14,"err": 1662,"payload": 726},{"kind": 8,"name": "std.debug.StackIterator","src": 582,"pubDecls": [1905,1906],"privDecls": [1907,1908,1909,1910],"fields": [791,719]},{"kind": 6,"elem": 1138},{"kind": 8,"name": "std.debug.struct:118:64","src": 583,"pubDecls": [],"privDecls": [],"fields": [812]},{"kind": 6,"elem": 1663},{"kind": 14,"err": 1664,"payload": 726},{"kind": 14,"err": 1665,"payload": 726},{"kind": 16,"name": "std.os.linux.rlimit_resource","src": 584,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]},{"kind": 8,"name": "std.os.linux.rlimit","src": 585,"pubDecls": [],"privDecls": [],"fields": [732,732]},{"kind": 16,"name": "std.os.linux.errno.generic.E","src": 586,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177]},{"kind": 16,"name": "std.Thread.Mutex.State","src": 587,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 15,"name": "std.os.UnexpectedError","errors": [11]},{"kind": 14,"err": 1666,"payload": 726},{"kind": 14,"err": 1667,"payload": 726},{"kind": 14,"err": 1668,"payload": 726},{"kind": 16,"name": "std.fmt.Case","src": 588,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 14,"err": 1669,"payload": 726},{"kind": 14,"err": 1670,"payload": 719},{"kind": 14,"err": 1671,"payload": 1672},{"kind": 14,"err": 1673,"payload": 1674},{"kind": 13,"child": 1675},{"kind": 13,"child": 1676},{"kind": 14,"err": 1677,"payload": 726},{"kind": 8,"name": "std.debug.DebugInfo","src": 589,"pubDecls": [1911,1912,1913],"privDecls": [1914,1915,1916,1917],"fields": [977,734]},{"kind": 8,"name": "std.heap.arena_allocator.ArenaAllocator","src": 590,"pubDecls": [1918,1919,1920],"privDecls": [1921,1922,1923,1924],"fields": [1557,977,1213]},{"kind": 14,"err": 1679,"payload": 811},{"kind": 4,"u": 29},{"kind": 14,"err": 1566,"payload": 719},{"kind": 14,"err": 1680,"payload": 726},{"kind": 14,"err": 1681,"payload": 1682},{"kind": 6,"elem": 1682},{"kind": 13,"child": 1683},{"kind": 14,"err": 1566,"payload": 1684},{"kind": 16,"name": "std.mem.Allocator.Exact","src": 591,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 14,"err": 1685,"payload": 1686},{"kind": 14,"err": 1412,"payload": 1411},{"kind": 13,"child": 851},{"kind": 14,"err": 1687,"payload": 719},{"kind": 14,"err": 1688,"payload": 719},{"kind": 14,"err": 1689,"payload": 732},{"kind": 14,"err": 1690,"payload": 1425},{"kind": 14,"err": 1691,"payload": 1425},{"kind": 14,"err": 1692,"payload": 1425},{"kind": 14,"err": 1693,"payload": 1425},{"kind": 14,"err": 1694,"payload": 1425},{"kind": 14,"err": 1695,"payload": 1425},{"kind": 14,"err": 1696,"payload": 1425},{"kind": 14,"err": 1697,"payload": 811},{"kind": 14,"err": 1698,"payload": 1425},{"kind": 14,"err": 1566,"payload": 1187},{"kind": 6,"elem": 1699},{"kind": 14,"err": 1566,"payload": 1700},{"kind": 14,"err": 1701,"payload": 893},{"kind": 6,"elem": 1419},{"kind": 4,"u": 7},{"kind": 6,"elem": 1090},{"kind": 16,"name": "std.debug.Color","src": 592,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6]},{"kind": 8,"name": "std.debug.struct:624:50","src": 593,"pubDecls": [],"privDecls": [],"fields": [765,732,732]},{"kind": 8,"name": "std.debug.struct:632:53","src": 594,"pubDecls": [],"privDecls": [],"fields": [719,765,765]},{"kind": 14,"err": 1702,"payload": 726},{"kind": 8,"name": "std.debug.LineInfo","src": 595,"pubDecls": [1925],"privDecls": [],"fields": [732,732,765,1703]},{"kind": 14,"err": 867,"payload": 719},{"kind": 14,"err": 1704,"payload": 726},{"kind": 14,"err": 1705,"payload": 726},{"kind": 14,"err": 1706,"payload": 726},{"kind": 16,"name": "std.Thread.ResetEvent.TimedWaitResult","src": 596,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 13,"child": 732},{"kind": 6,"elem": 1707},{"kind": 6,"elem": 851},{"kind": 16,"name": "std.os.linux.x86_64.SYS","src": 597,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,444,445,446,447]},{"kind": 6,"const": true,"elem": 1145},{"kind": 13,"child": 1708},{"kind": 8,"name": "std.os.struct:5000:52","src": 598,"pubDecls": [],"privDecls": [],"fields": [715]},{"kind": 14,"err": 1709,"payload": 1674},{"kind": 14,"err": 1710,"payload": 1674},{"kind": 14,"err": 1711,"payload": 1674},{"kind": 8,"name": "std.heap.arena_allocator.State","src": 599,"pubDecls": [1926],"privDecls": [],"fields": [810,719]},{"kind": 6,"len": 1,"align": 4096,"elem": 759},{"kind": 6,"len": 2,"align": 4096,"const": true,"elem": 759},{"kind": 14,"err": 1712,"payload": 726},{"kind": 13,"child": 1713},{"kind": 14,"err": 1714,"payload": 719},{"kind": 14,"err": 1715,"payload": 829},{"kind": 14,"err": 1716,"payload": 726},{"kind": 14,"err": 1412,"payload": 870},{"kind": 8,"name": "std.os.linux.timespec","src": 600,"pubDecls": [],"privDecls": [],"fields": [819,819]},{"kind": 14,"err": 1717,"payload": 719},{"kind": 14,"err": 1718,"payload": 759},{"kind": 14,"err": 1719,"payload": 1720},{"kind": 6,"const": true,"elem": 1720},{"kind": 14,"err": 1566,"payload": 1721},{"kind": 14,"err": 1722,"payload": 726},{"kind": 14,"err": 1723,"payload": 726},{"kind": 14,"err": 1724,"payload": 726},{"kind": 14,"err": 1725,"payload": 719},{"kind": 14,"err": 1726,"payload": 726},{"kind": 6,"elem": 893},{"kind": 13,"child": 1207},{"kind": 13,"child": 1727},{"kind": 6,"const": true,"elem": 1728},{"kind": 13,"child": 1729},{"kind": 8,"name": "std.start.struct:554:37","src": 601,"pubDecls": [],"privDecls": [],"fields": [812]},{"kind": 8,"name": "std.hash.wyhash.WyhashStateless","src": 602,"pubDecls": [1927,1928,1929,1930],"privDecls": [1931],"fields": [732,719]},{"kind": 6,"elem": 1239},{"kind": 14,"err": 1731,"payload": 811},{"kind": 14,"err": 1732,"payload": 1245},{"kind": 6,"elem": 1161},{"kind": 6,"elem": 810},{"kind": 6,"elem": 1460},{"kind": 14,"err": 1733,"payload": 726},{"kind": 14,"err": 1734,"payload": 726},{"kind": 14,"err": 1735,"payload": 726},{"kind": 14,"err": 1736,"payload": 726},{"kind": 14,"err": 1737,"payload": 726},{"kind": 14,"err": 1738,"payload": 726},{"kind": 14,"err": 1739,"payload": 726},{"kind": 14,"err": 1740,"payload": 726},{"kind": 14,"err": 1741,"payload": 726},{"kind": 14,"err": 1742,"payload": 726},{"kind": 8,"name": "std.debug.struct:1572:83","src": 603,"pubDecls": [],"privDecls": [],"fields": [719]},{"kind": 8,"name": "std.debug.struct:1573:83","src": 604,"pubDecls": [],"privDecls": [],"fields": [719]},{"kind": 8,"name": "std.debug.struct:1574:73","src": 605,"pubDecls": [],"privDecls": [],"fields": [719]},{"kind": 14,"err": 1743,"payload": 732},{"kind": 14,"err": 1744,"payload": 732},{"kind": 14,"err": 1745,"payload": 732},{"kind": 14,"err": 1746,"payload": 732},{"kind": 14,"err": 1747,"payload": 732},{"kind": 14,"err": 1748,"payload": 732},{"kind": 14,"err": 1749,"payload": 732},{"kind": 14,"err": 1750,"payload": 732},{"kind": 14,"err": 1751,"payload": 732},{"kind": 14,"err": 1752,"payload": 732},{"kind": 14,"err": 1753,"payload": 732},{"kind": 14,"err": 1754,"payload": 732},{"kind": 14,"err": 1755,"payload": 732},{"kind": 14,"err": 1756,"payload": 732},{"kind": 14,"err": 1757,"payload": 732},{"kind": 14,"err": 1758,"payload": 732},{"kind": 14,"err": 1759,"payload": 811},{"kind": 8,"name": "struct:20:91","src": 606,"pubDecls": [],"privDecls": [],"fields": [719]},{"kind": 14,"err": 1760,"payload": 811},{"kind": 14,"err": 1761,"payload": 811},{"kind": 14,"err": 1762,"payload": 811},{"kind": 14,"err": 1763,"payload": 782},{"kind": 14,"err": 1764,"payload": 726},{"kind": 8,"name": "struct:26:33","src": 607,"pubDecls": [],"privDecls": [],"fields": [719]},{"kind": 8,"name": "struct:27:39","src": 608,"pubDecls": [],"privDecls": [],"fields": [732]},{"kind": 8,"name": "struct:28:39","src": 609,"pubDecls": [],"privDecls": [],"fields": [732]},{"kind": 14,"err": 1765,"payload": 726},{"kind": 14,"err": 1766,"payload": 726},{"kind": 14,"err": 1767,"payload": 726},{"kind": 14,"err": 1768,"payload": 726},{"kind": 8,"name": "std.debug.struct:135:91","src": 610,"pubDecls": [],"privDecls": [],"fields": [812]},{"kind": 6,"elem": 876},{"kind": 13,"child": 1484},{"kind": 6,"elem": 878},{"kind": 6,"elem": 880},{"kind": 14,"err": 1769,"payload": 726},{"kind": 6,"elem": 881},{"kind": 14,"err": 1770,"payload": 1300},{"kind": 14,"err": 1771,"payload": 726},{"kind": 14,"err": 1772,"payload": 726},{"kind": 14,"err": 1566,"payload": 915},{"kind": 6,"elem": 882},{"kind": 8,"name": "day5.Map","src": 611,"pubDecls": [],"privDecls": [1932,1933,1934,1935,1936,1937,1938],"fields": [885]},{"kind": 14,"err": 1773,"payload": 726},{"kind": 6,"elem": 1301},{"kind": 14,"err": 1774,"payload": 1316},{"kind": 6,"elem": 885},{"kind": 14,"err": 1775,"payload": 1316},{"kind": 6,"elem": 886},{"kind": 14,"err": 1776,"payload": 1316},{"kind": 14,"err": 1777,"payload": 726},{"kind": 14,"err": 1778,"payload": 726},{"kind": 6,"const": true,"elem": 886},{"kind": 14,"err": 1779,"payload": 726},{"kind": 14,"err": 1566,"payload": 916},{"kind": 6,"len": 1,"elem": 884},{"kind": 8,"name": "std.hash_map.Metadata","src": 577,"pubDecls": [1939,1940,1941,1942,1943],"privDecls": [1944,1945,1946],"fields": [1191,1630]},{"kind": 8,"name": "std.hash_map.GetOrPutResult","src": 612,"pubDecls": [],"privDecls": [],"fields": [1780,1340,720]},{"kind": 6,"const": true,"elem": 1301},{"kind": 14,"err": 1781,"payload": 732},{"kind": 14,"err": 1556,"payload": 732},{"kind": 6,"elem": 889},{"kind": 14,"err": 1782,"payload": 726},{"kind": 14,"err": 1783,"payload": 726},{"kind": 6,"elem": 890},{"kind": 14,"err": 1784,"payload": 1333},{"kind": 14,"err": 1785,"payload": 1333},{"kind": 14,"err": 1786,"payload": 726},{"kind": 14,"err": 1787,"payload": 726},{"kind": 6,"const": true,"elem": 890},{"kind": 14,"err": 1788,"payload": 726},{"kind": 6,"len": 1,"elem": 888},{"kind": 6,"len": 1,"elem": 732},{"kind": 8,"name": "std.hash_map.Metadata","src": 577,"pubDecls": [1947,1948,1949,1950,1951],"privDecls": [1952,1953,1954],"fields": [1191,1630]},{"kind": 8,"name": "std.hash_map.GetOrPutResult","src": 612,"pubDecls": [],"privDecls": [],"fields": [1789,1790,720]},{"kind": 14,"err": 1791,"payload": 726},{"kind": 6,"elem": 891},{"kind": 14,"err": 1792,"payload": 1340},{"kind": 14,"err": 1793,"payload": 726},{"kind": 14,"err": 1794,"payload": 726},{"kind": 14,"err": 1566,"payload": 922},{"kind": 6,"elem": 829},{"kind": 14,"err": 1795,"payload": 811},{"kind": 14,"err": 1796,"payload": 726},{"kind": 14,"err": 1797,"payload": 726},{"kind": 14,"err": 1798,"payload": 726},{"kind": 14,"err": 1799,"payload": 726},{"kind": 14,"err": 1800,"payload": 726},{"kind": 14,"err": 1801,"payload": 726},{"kind": 14,"err": 1802,"payload": 726},{"kind": 14,"err": 1803,"payload": 726},{"kind": 14,"err": 1804,"payload": 726},{"kind": 14,"err": 1805,"payload": 726},{"kind": 14,"err": 1806,"payload": 829},{"kind": 14,"err": 1806,"payload": 732},{"kind": 7,"len": 5,"elem": 1807},{"kind": 6,"const": true,"elem": 882},{"kind": 6,"elem": 1490},{"kind": 6,"elem": 1315},{"kind": 6,"const": true,"elem": 885},{"kind": 13,"child": 1340},{"kind": 6,"elem": 898},{"kind": 8,"name": "std.hash.wyhash.Wyhash","src": 613,"pubDecls": [1955,1956,1957,1958],"privDecls": [],"fields": [1239,1808,719]},{"kind": 6,"elem": 1361},{"kind": 6,"elem": 1497},{"kind": 6,"elem": 1332},{"kind": 8,"name": "std.sort.Iterator","src": 614,"pubDecls": [],"privDecls": [1959,1960,1961,1962,1963,1964],"fields": [719,719,719,719,719,719,719]},{"kind": 6,"elem": 1365},{"kind": 8,"name": "std.sort.Range","src": 615,"pubDecls": [],"privDecls": [1965,1966],"fields": [719,719]},{"kind": 6,"elem": 807},{"kind": 6,"len": 2,"const": true,"elem": 829},{"kind": 14,"err": 1809,"payload": 719},{"kind": 14,"err": 901,"payload": 719},{"kind": 14,"err": 1810,"payload": 726},{"kind": 14,"err": 901,"payload": 726},{"kind": 14,"err": 910,"payload": 719},{"kind": 14,"err": 1811,"payload": 726},{"kind": 14,"err": 910,"payload": 726},{"kind": 14,"err": 1812,"payload": 726},{"kind": 6,"elem": 1813},{"kind": 14,"err": 1814,"payload": 726},{"kind": 14,"err": 1815,"payload": 726},{"kind": 14,"err": 1816,"payload": 726},{"kind": 14,"err": 1817,"payload": 726},{"kind": 14,"err": 1818,"payload": 726},{"kind": 14,"err": 1819,"payload": 726},{"kind": 14,"err": 1820,"payload": 726},{"kind": 14,"err": 1821,"payload": 726},{"kind": 14,"err": 1822,"payload": 726},{"kind": 14,"err": 1823,"payload": 759},{"kind": 14,"err": 1824,"payload": 829},{"kind": 14,"err": 1825,"payload": 829},{"kind": 14,"err": 1826,"payload": 829},{"kind": 14,"err": 1827,"payload": 829},{"kind": 14,"err": 1828,"payload": 732},{"kind": 14,"err": 1829,"payload": 732},{"kind": 14,"err": 1830,"payload": 732},{"kind": 14,"err": 1831,"payload": 732},{"kind": 14,"err": 1832,"payload": 726},{"kind": 14,"err": 1833,"payload": 726},{"kind": 14,"err": 1834,"payload": 726},{"kind": 14,"err": 1835,"payload": 726},{"kind": 14,"err": 1836,"payload": 726},{"kind": 14,"err": 1837,"payload": 726},{"kind": 8,"name": "std.target","src": 616,"pubDecls": [1967],"privDecls": [1968,1969,1970],"file": 3},{"kind": 8,"name": "std.io.writer","src": 617,"pubDecls": [1971],"privDecls": [1972,1973,1974],"file": 4},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write),[]const u8,anytype) anytype","generic": true,"args": [723,765,null]},{"kind": 8,"name": "std.fs.file","src": 618,"pubDecls": [1975],"privDecls": [1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986],"file": 5},{"kind": 16,"name": "std.fs.file.Kind","src": 619,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10]},{"kind": 15,"name": "std.fs.file.OpenError","errors": [23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]},{"kind": 16,"name": "std.fs.file.Lock","src": 620,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 15,"name": "std.fs.file.GetSeekPosError","errors": [44,45,11,46]},{"kind": 8,"name": "std.fs.file.Stat","src": 621,"pubDecls": [],"privDecls": [],"fields": [732,732,719,1407,1839,1839,1839]},{"kind": 15,"name": "std.os.FStatError","errors": [46,47,11]},{"kind": 18,"name": "fn(std.fs.file.File,*std.mem.Allocator,usize,?usize,u29,anytype) anytype","generic": true,"args": [724,977,719,791,1163,null]},{"kind": 16,"name": "std.io.ModeOverride","src": 622,"pubDecls": [],"privDecls": [],"fields": [0]},{"kind": 8,"name": "std.hash_map","src": 623,"pubDecls": [1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003],"privDecls": [2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017],"file": 6},{"kind": 8,"name": "std.debug.ModuleDebugInfo","src": 624,"pubDecls": [2018],"privDecls": [],"fields": [719,933,765]},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80),anytype,anytype) anytype","generic": true,"args": [738,null,null]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80),anytype,anytype) anytype","generic": true,"args": [1083,null,null]},{"kind": 8,"name": "std.hash_map.Header","src": 625,"pubDecls": [],"privDecls": [],"fields": [1089,1088,893]},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80),anytype,anytype) callconv(.Inline) anytype","generic": true,"args": [738,null,null]},{"kind": 13,"child": 1842},{"kind": 8,"name": "std.array_list","src": 626,"pubDecls": [2019,2020,2021,2022],"privDecls": [2023,2024,2025,2026,2027,2028,2029,2030],"file": 7},{"kind": 6,"elem": 1609},{"kind": 13,"child": 1843},{"kind": 17,"name": "std.dwarf.FormValue","src": 627,"pubDecls": [],"privDecls": [],"fields": [732,811,1615,811,720,732,732,732,765,732]},{"kind": 8,"name": "std.target.Os","src": 628,"pubDecls": [2031,2032,2033,2034,2035,2036,2037,2038],"privDecls": [],"fields": [755,1846]},{"kind": 8,"name": "std.target.x86","src": 629,"pubDecls": [2039,2040,2041,2042,2043,2044,2045],"privDecls": [2046,2047,2048],"file": 8},{"kind": 16,"name": "std.target.Abi","src": 630,"pubDecls": [2049,2050,2051,2052],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]},{"kind": 16,"name": "std.target.ObjectFormat","src": 631,"pubDecls": [2053],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8]},{"kind": 8,"name": "std.target.Cpu","src": 632,"pubDecls": [2054,2055,2056,2057],"privDecls": [],"fields": [721,1850,953]},{"kind": 8,"name": "std.io.fixed_buffer_stream","src": 633,"pubDecls": [2058,2059],"privDecls": [2060,2061,2062,2063,2064,2065],"file": 9},{"kind": 8,"name": "std.io.reader","src": 634,"pubDecls": [2066],"privDecls": [2067,2068,2069,2070,2071],"file": 10},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read),usize) anytype","generic": true,"args": [770,719]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read),type,anytype) anytype","generic": true,"args": [770,709,null]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read),type,anytype,anytype) anytype","generic": true,"args": [770,709,null,null]},{"kind": 8,"name": "std.io.seekable_stream","src": 635,"pubDecls": [2072],"privDecls": [2073],"file": 11},{"kind": 8,"name": "std.builtin","src": 636,"pubDecls": [2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121],"privDecls": [2122,2123,2124],"file": 12},{"kind": 8,"name": "std.builtin.Int","src": 637,"pubDecls": [],"privDecls": [],"fields": [714,778]},{"kind": 8,"name": "std.builtin.Float","src": 638,"pubDecls": [],"privDecls": [],"fields": [778]},{"kind": 8,"name": "std.builtin.Pointer","src": 639,"pubDecls": [2125],"privDecls": [],"fields": [806,720,720,778,1856,709,720,1860]},{"kind": 8,"name": "std.builtin.Array","src": 640,"pubDecls": [],"privDecls": [],"fields": [778,709,1860]},{"kind": 8,"name": "std.builtin.StructField","src": 641,"pubDecls": [],"privDecls": [],"fields": [765,709,1860,720,778]},{"kind": 8,"name": "std.builtin.Struct","src": 642,"pubDecls": [],"privDecls": [],"fields": [869,1861,1862,720]},{"kind": 8,"name": "std.builtin.Optional","src": 643,"pubDecls": [],"privDecls": [],"fields": [709]},{"kind": 8,"name": "std.builtin.ErrorUnion","src": 644,"pubDecls": [],"privDecls": [],"fields": [709,709]},{"kind": 8,"name": "std.builtin.Error","src": 645,"pubDecls": [],"privDecls": [],"fields": [765]},{"kind": 13,"child": 1863},{"kind": 8,"name": "std.builtin.EnumField","src": 646,"pubDecls": [],"privDecls": [],"fields": [765,778]},{"kind": 8,"name": "std.builtin.Enum","src": 647,"pubDecls": [],"privDecls": [],"fields": [869,709,1864,1862,720]},{"kind": 8,"name": "std.builtin.UnionField","src": 648,"pubDecls": [],"privDecls": [],"fields": [765,709,778]},{"kind": 8,"name": "std.builtin.Union","src": 649,"pubDecls": [],"privDecls": [],"fields": [869,1865,1866,1862]},{"kind": 8,"name": "std.builtin.FnArg","src": 650,"pubDecls": [],"privDecls": [],"fields": [720,720,1865]},{"kind": 8,"name": "std.builtin.Fn","src": 651,"pubDecls": [],"privDecls": [],"fields": [1855,778,720,720,1865,1867]},{"kind": 8,"name": "std.builtin.Opaque","src": 652,"pubDecls": [],"privDecls": [],"fields": [1862]},{"kind": 8,"name": "std.builtin.Frame","src": 653,"pubDecls": [],"privDecls": [],"fields": [1860]},{"kind": 8,"name": "std.builtin.AnyFrame","src": 654,"pubDecls": [],"privDecls": [],"fields": [1865]},{"kind": 8,"name": "std.builtin.Vector","src": 655,"pubDecls": [],"privDecls": [],"fields": [778,709]},{"kind": 8,"name": "std.builtin.Declaration","src": 656,"pubDecls": [2126],"privDecls": [],"fields": [765,720,1868]},{"kind": 8,"name": "std.linked_list","src": 657,"pubDecls": [2127,2128],"privDecls": [2129,2130,2131,2132,2133,2134],"file": 13},{"kind": 8,"name": "std.linked_list.Node","src": 658,"pubDecls": [2135,2136,2137,2138,2139],"privDecls": [],"fields": [1461,811]},{"kind": 13,"child": 1245},{"kind": 8,"name": "std.atomic.queue","src": 659,"pubDecls": [2140],"privDecls": [2141,2142,2143,2144,2145,2146,2147,2148,2149],"file": 14},{"kind": 8,"name": "std.linked_list.Node","src": 660,"pubDecls": [],"privDecls": [],"fields": [1464,1464,822]},{"kind": 13,"child": 1869},{"kind": 8,"name": "std.Thread.Mutex","src": 661,"pubDecls": [2150,2151,2152,2153,2154,2155,2156],"privDecls": [2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168],"fields": [1551],"file": 15},{"kind": 8,"name": "std.atomic.Atomic","src": 662,"pubDecls": [2169],"privDecls": [2170,2171,2172,2173,2174,2175,2176],"file": 16},{"kind": 8,"name": "std.linked_list.Node","src": 660,"pubDecls": [],"privDecls": [],"fields": [1468,1468,831]},{"kind": 13,"child": 1871},{"kind": 8,"name": "std.event.loop","src": 663,"pubDecls": [2177],"privDecls": [2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193],"file": 17},{"kind": 17,"name": "std.event.loop.Finish","src": 664,"pubDecls": [],"privDecls": [],"fields": [1463,726]},{"kind": 17,"name": "std.event.loop.Msg","src": 665,"pubDecls": [2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205],"privDecls": [],"fields": [1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,726]},{"kind": 8,"name": "std.atomic.stack","src": 666,"pubDecls": [2206],"privDecls": [2207,2208,2209,2210,2211,2212,2213,2214,2215],"file": 18},{"kind": 8,"name": "std.atomic.stack.Node","src": 667,"pubDecls": [],"privDecls": [],"fields": [1474,835]},{"kind": 13,"child": 1886},{"kind": 8,"name": "std.event.loop.ResumeNode","src": 668,"pubDecls": [2216,2217,2218,2219,2220],"privDecls": [2221,2222],"fields": [1887,822,726]},{"kind": 8,"name": "std.log","src": 669,"pubDecls": [2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237],"privDecls": [2238,2239,2240,2241,2242],"file": 19},{"kind": 18,"name": "fn([]const u8,anytype) anytype","generic": true,"args": [765,null]},{"kind": 18,"name": "fn([]const u8,anytype) anytype","generic": true,"args": [765,null]},{"kind": 18,"name": "fn(std.io.reader.Reader(std.fs.file.File,std.os.ReadError,std.fs.file.File.read),?u29,anytype,anytype) anytype","generic": true,"args": [866,743,null,null]},{"kind": 8,"name": "std.os.linux.x86_64","src": 670,"pubDecls": [2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282],"privDecls": [2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296],"file": 20},{"kind": 7,"len": 3,"elem": 819},{"kind": 8,"name": "std.mem","src": 671,"pubDecls": [2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408],"privDecls": [2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435],"file": 21},{"kind": 8,"name": "util","src": 672,"pubDecls": [2436,2437,2438],"privDecls": [2439],"file": 22},{"kind": 8,"name": "util.Item","src": 673,"pubDecls": [],"privDecls": [],"fields": [719,765]},{"kind": 8,"name": "day4","src": 674,"pubDecls": [2440,2441],"privDecls": [2442,2443,2444],"file": 23},{"kind": 7,"len": 5,"elem": 1933},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80),*std.mem.Allocator,anytype,anytype,anytype) anytype","generic": true,"args": [1307,977,null,null,null]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80),anytype,anytype) anytype","generic": true,"args": [1307,null,null]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80),anytype,anytype) anytype","generic": true,"args": [1311,null,null]},{"kind": 8,"name": "std.hash_map.Header","src": 625,"pubDecls": [],"privDecls": [],"fields": [927,1314,893]},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80),anytype,anytype) callconv(.Inline) anytype","generic": true,"args": [886,null,null]},{"kind": 13,"child": 1934},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80),anytype,anytype) anytype","generic": true,"args": [890,null,null]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80),*std.mem.Allocator,anytype,anytype,anytype) anytype","generic": true,"args": [1323,977,null,null,null]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80),anytype,anytype) anytype","generic": true,"args": [1323,null,null]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80),anytype,anytype) anytype","generic": true,"args": [1328,null,null]},{"kind": 8,"name": "std.hash_map.Header","src": 625,"pubDecls": [],"privDecls": [],"fields": [1331,1330,893]},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80),anytype,anytype) callconv(.Inline) anytype","generic": true,"args": [890,null,null]},{"kind": 13,"child": 1935},{"kind": 6,"len": 1,"const": true,"elem": 1315},{"kind": 8,"name": "std.io.counting_writer","src": 675,"pubDecls": [2445,2446],"privDecls": [2447,2448,2449],"file": 24},{"kind": 7,"len": 5,"elem": 759},{"kind": 7,"len": 4,"elem": 759},{"kind": 8,"name": "std.dwarf","src": 676,"pubDecls": [2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463],"privDecls": [2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492],"file": 25},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo,anytype,anytype,anytype) anytype","generic": true,"args": [1003,null,null,null]},{"kind": 8,"name": "std.hash_map.Metadata","src": 577,"pubDecls": [2493,2494,2495,2496,2497],"privDecls": [2498,2499,2500],"fields": [1191,1630]},{"kind": 13,"child": 1952},{"kind": 6,"len": 2,"elem": 937},{"kind": 8,"name": "std.coff.SectionHeader","src": 677,"pubDecls": [],"privDecls": [2501],"fields": [1808,1953,893,893,893,893,893,715,715,893]},{"kind": 8,"name": "day1","src": 678,"pubDecls": [2502,2503],"privDecls": [2504,2505],"file": 26},{"kind": 8,"name": "day2","src": 679,"pubDecls": [2506,2507],"privDecls": [2508,2509],"file": 27},{"kind": 8,"name": "day3","src": 680,"pubDecls": [2510,2511],"privDecls": [2512,2513],"file": 28},{"kind": 8,"name": "day5","src": 681,"pubDecls": [2514,2515],"privDecls": [2516,2517,2518,2519,2520,2521],"file": 29},{"kind": 8,"name": "day6","src": 682,"pubDecls": [2522,2523],"privDecls": [2524,2525,2526,2527,2528],"file": 30},{"kind": 8,"name": "day7","src": 683,"pubDecls": [2529,2530],"privDecls": [2531,2532,2533],"file": 31},{"kind": 8,"name": "day8","src": 684,"pubDecls": [2534,2535],"privDecls": [2536,2537,2538,2539],"file": 32},{"kind": 18,"name": "fn([]const u8) anyerror!u64","generic": false,"ret": 1319,"args": [765]},{"kind": 8,"name": "Solution","src": 685,"pubDecls": [],"privDecls": [],"fields": [1517,1517]},{"kind": 8,"name": "std.Thread","src": 686,"pubDecls": [2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561,2562,2563,2564],"privDecls": [2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581],"fields": [1956],"file": 33},{"kind": 8,"name": "std.atomic","src": 687,"pubDecls": [2582,2583,2584,2585,2586,2587,2588],"privDecls": [2589,2590],"file": 34},{"kind": 8,"name": "std.coff","src": 688,"pubDecls": [2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604],"privDecls": [2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622],"file": 35},{"kind": 8,"name": "std.debug","src": 689,"pubDecls": [2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651,2652,2653,2654],"privDecls": [2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705],"file": 36},{"kind": 8,"name": "std.elf","src": 690,"pubDecls": [2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922,2923,2924,2925,2926,2927,2928,2929,2930,2931,2932,2933,2934,2935,2936,2937,2938,2939,2940,2941,2942,2943,2944,2945,2946,2947,2948,2949,2950,2951,2952,2953,2954,2955,2956,2957,2958,2959,2960,2961,2962,2963,2964,2965,2966,2967,2968,2969,2970,2971,2972,2973,2974,2975,2976,2977,2978,2979,2980,2981,2982,2983,2984,2985,2986,2987,2988,2989,2990,2991,2992,2993,2994,2995,2996,2997,2998,2999,3000,3001,3002,3003,3004,3005,3006,3007,3008,3009,3010,3011,3012,3013,3014,3015,3016,3017,3018,3019,3020,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,3031,3032,3033,3034,3035,3036,3037,3038,3039,3040,3041,3042,3043,3044,3045,3046,3047,3048,3049,3050,3051,3052,3053,3054,3055,3056,3057,3058,3059,3060,3061,3062,3063,3064,3065,3066,3067,3068,3069,3070,3071,3072,3073,3074,3075,3076,3077,3078,3079,3080,3081,3082,3083,3084,3085,3086,3087,3088,3089,3090,3091,3092,3093,3094,3095,3096,3097,3098,3099,3100,3101,3102,3103,3104,3105,3106,3107,3108,3109,3110,3111,3112,3113,3114,3115,3116,3117,3118,3119,3120,3121,3122,3123,3124,3125,3126,3127,3128,3129,3130,3131,3132,3133,3134,3135],"privDecls": [3136,3137,3138,3139,3140,3141,3142,3143],"file": 37},{"kind": 8,"name": "std.event","src": 691,"pubDecls": [3144,3145,3146,3147,3148,3149,3150,3151,3152,3153],"privDecls": [],"file": 38},{"kind": 8,"name": "std.fmt","src": 692,"pubDecls": [3154,3155,3156,3157,3158,3159,3160,3161,3162,3163,3164,3165,3166,3167,3168,3169,3170,3171,3172,3173,3174,3175,3176,3177,3178,3179,3180,3181,3182,3183,3184,3185,3186,3187,3188,3189,3190,3191,3192,3193,3194,3195,3196,3197,3198,3199,3200],"privDecls": [3201,3202,3203,3204,3205,3206,3207,3208,3209,3210,3211,3212,3213,3214,3215,3216,3217,3218,3219,3220,3221,3222,3223,3224,3225,3226],"file": 39},{"kind": 8,"name": "std.fs","src": 693,"pubDecls": [3227,3228,3229,3230,3231,3232,3233,3234,3235,3236,3237,3238,3239,3240,3241,3242,3243,3244,3245,3246,3247,3248,3249,3250,3251,3252,3253,3254,3255,3256,3257,3258,3259,3260,3261,3262,3263,3264,3265,3266,3267,3268,3269,3270,3271,3272,3273,3274,3275,3276,3277,3278,3279,3280,3281,3282,3283,3284,3285,3286,3287,3288,3289,3290,3291,3292,3293,3294,3295,3296,3297,3298,3299,3300,3301,3302,3303,3304,3305],"privDecls": [3306,3307,3308,3309,3310,3311,3312,3313,3314,3315,3316,3317,3318,3319],"file": 40},{"kind": 8,"name": "std.hash","src": 694,"pubDecls": [3320,3321,3322,3323,3324,3325,3326,3327,3328,3329,3330,3331,3332,3333,3334,3335,3336,3337,3338],"privDecls": [3339,3340,3341,3342,3343],"file": 41},{"kind": 8,"name": "std.heap","src": 695,"pubDecls": [3344,3345,3346,3347,3348,3349,3350,3351,3352,3353,3354,3355,3356,3357,3358,3359,3360,3361,3362,3363,3364],"privDecls": [3365,3366,3367,3368,3369,3370,3371,3372,3373,3374,3375,3376,3377,3378,3379,3380,3381,3382,3383,3384,3385,3386,3387],"file": 42},{"kind": 8,"name": "std.io","src": 696,"pubDecls": [3388,3389,3390,3391,3392,3393,3394,3395,3396,3397,3398,3399,3400,3401,3402,3403,3404,3405,3406,3407,3408,3409,3410,3411,3412,3413,3414,3415,3416,3417,3418,3419,3420,3421,3422,3423,3424,3425,3426,3427,3428,3429,3430,3431],"privDecls": [3432,3433,3434,3435,3436,3437,3438,3439,3440,3441,3442,3443,3444,3445,3446,3447,3448],"file": 43},{"kind": 8,"name": "std.macho","src": 697,"pubDecls": [3449,3450,3451,3452,3453,3454,3455,3456,3457,3458,3459,3460,3461,3462,3463,3464,3465,3466,3467,3468,3469,3470,3471,3472,3473,3474,3475,3476,3477,3478,3479,3480,3481,3482,3483,3484,3485,3486,3487,3488,3489,3490,3491,3492,3493,3494,3495,3496,3497,3498,3499,3500,3501,3502,3503,3504,3505,3506,3507,3508,3509,3510,3511,3512,3513,3514,3515,3516,3517,3518,3519,3520,3521,3522,3523,3524,3525,3526,3527,3528,3529,3530,3531,3532,3533,3534,3535,3536,3537,3538,3539,3540,3541,3542,3543,3544,3545,3546,3547,3548,3549,3550,3551,3552,3553,3554,3555,3556,3557,3558,3559,3560,3561,3562,3563,3564,3565,3566,3567,3568,3569,3570,3571,3572,3573,3574,3575,3576,3577,3578,3579,3580,3581,3582,3583,3584,3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,3643,3644,3645,3646,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,3676,3677,3678,3679,3680,3681,3682,3683,3684,3685,3686,3687,3688,3689,3690,3691,3692,3693,3694,3695,3696,3697,3698,3699,3700,3701,3702,3703,3704,3705,3706,3707,3708,3709,3710,3711,3712,3713,3714,3715,3716,3717,3718,3719,3720,3721,3722,3723,3724,3725,3726,3727,3728,3729,3730,3731,3732,3733,3734,3735,3736,3737,3738,3739,3740,3741,3742,3743,3744,3745,3746,3747,3748,3749,3750,3751,3752,3753,3754,3755,3756,3757,3758,3759,3760,3761,3762,3763,3764,3765,3766,3767,3768,3769,3770,3771,3772,3773,3774,3775],"privDecls": [],"file": 44},{"kind": 8,"name": "std.math","src": 698,"pubDecls": [3776,3777,3778,3779,3780,3781,3782,3783,3784,3785,3786,3787,3788,3789,3790,3791,3792,3793,3794,3795,3796,3797,3798,3799,3800,3801,3802,3803,3804,3805,3806,3807,3808,3809,3810,3811,3812,3813,3814,3815,3816,3817,3818,3819,3820,3821,3822,3823,3824,3825,3826,3827,3828,3829,3830,3831,3832,3833,3834,3835,3836,3837,3838,3839,3840,3841,3842,3843,3844,3845,3846,3847,3848,3849,3850,3851,3852,3853,3854,3855,3856,3857,3858,3859,3860,3861,3862,3863,3864,3865,3866,3867,3868,3869,3870,3871,3872,3873,3874,3875,3876,3877,3878,3879,3880,3881,3882,3883,3884,3885,3886,3887,3888,3889,3890,3891,3892,3893,3894,3895,3896,3897,3898,3899,3900,3901,3902,3903,3904,3905,3906,3907,3908,3909,3910,3911,3912,3913,3914,3915,3916,3917,3918,3919,3920,3921,3922,3923,3924,3925,3926,3927,3928,3929,3930,3931,3932,3933,3934,3935,3936,3937,3938,3939,3940,3941,3942,3943,3944,3945],"privDecls": [3946,3947,3948,3949,3950,3951,3952,3953,3954,3955,3956,3957,3958,3959,3960,3961],"file": 45},{"kind": 8,"name": "std.meta","src": 699,"pubDecls": [3962,3963,3964,3965,3966,3967,3968,3969,3970,3971,3972,3973,3974,3975,3976,3977,3978,3979,3980,3981,3982,3983,3984,3985,3986,3987,3988,3989,3990,3991,3992,3993,3994,3995,3996,3997],"privDecls": [3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4008],"file": 46},{"kind": 8,"name": "std.os","src": 700,"pubDecls": [4009,4010,4011,4012,4013,4014,4015,4016,4017,4018,4019,4020,4021,4022,4023,4024,4025,4026,4027,4028,4029,4030,4031,4032,4033,4034,4035,4036,4037,4038,4039,4040,4041,4042,4043,4044,4045,4046,4047,4048,4049,4050,4051,4052,4053,4054,4055,4056,4057,4058,4059,4060,4061,4062,4063,4064,4065,4066,4067,4068,4069,4070,4071,4072,4073,4074,4075,4076,4077,4078,4079,4080,4081,4082,4083,4084,4085,4086,4087,4088,4089,4090,4091,4092,4093,4094,4095,4096,4097,4098,4099,4100,4101,4102,4103,4104,4105,4106,4107,4108,4109,4110,4111,4112,4113,4114,4115,4116,4117,4118,4119,4120,4121,4122,4123,4124,4125,4126,4127,4128,4129,4130,4131,4132,4133,4134,4135,4136,4137,4138,4139,4140,4141,4142,4143,4144,4145,4146,4147,4148,4149,4150,4151,4152,4153,4154,4155,4156,4157,4158,4159,4160,4161,4162,4163,4164,4165,4166,4167,4168,4169,4170,4171,4172,4173,4174,4175,4176,4177,4178,4179,4180,4181,4182,4183,4184,4185,4186,4187,4188,4189,4190,4191,4192,4193,4194,4195,4196,4197,4198,4199,4200,4201,4202,4203,4204,4205,4206,4207,4208,4209,4210,4211,4212,4213,4214,4215,4216,4217,4218,4219,4220,4221,4222,4223,4224,4225,4226,4227,4228,4229,4230,4231,4232,4233,4234,4235,4236,4237,4238,4239,4240,4241,4242,4243,4244,4245,4246,4247,4248,4249,4250,4251,4252,4253,4254,4255,4256,4257,4258,4259,4260,4261,4262,4263,4264,4265,4266,4267,4268,4269,4270,4271,4272,4273,4274,4275,4276,4277,4278,4279,4280,4281,4282,4283,4284,4285,4286,4287,4288,4289,4290,4291,4292,4293,4294,4295,4296,4297,4298,4299,4300,4301,4302,4303,4304,4305,4306,4307,4308,4309,4310,4311,4312,4313,4314,4315,4316,4317,4318,4319,4320,4321,4322,4323,4324,4325,4326,4327,4328,4329,4330,4331,4332,4333,4334,4335,4336,4337,4338,4339,4340,4341,4342,4343,4344,4345,4346,4347,4348,4349,4350,4351,4352,4353,4354,4355,4356,4357,4358,4359,4360,4361,4362,4363,4364,4365,4366,4367,4368,4369,4370,4371,4372,4373,4374,4375,4376,4377,4378,4379,4380,4381,4382,4383,4384,4385,4386,4387,4388,4389,4390,4391,4392,4393,4394,4395,4396,4397,4398,4399,4400,4401,4402,4403,4404,4405,4406,4407,4408,4409,4410,4411,4412,4413,4414,4415,4416,4417,4418,4419,4420,4421,4422],"privDecls": [4423,4424,4425,4426,4427,4428,4429,4430,4431,4432,4433,4434,4435,4436,4437,4438],"file": 47},{"kind": 8,"name": "std.pdb","src": 701,"pubDecls": [4439,4440,4441,4442,4443,4444,4445,4446,4447,4448,4449,4450,4451,4452,4453,4454,4455,4456,4457,4458,4459,4460],"privDecls": [4461,4462,4463,4464,4465,4466,4467,4468,4469,4470,4471,4472,4473,4474,4475,4476],"file": 48},{"kind": 8,"name": "std.process","src": 702,"pubDecls": [4477,4478,4479,4480,4481,4482,4483,4484,4485,4486,4487,4488,4489,4490,4491,4492,4493,4494,4495,4496,4497,4498,4499,4500,4501,4502,4503,4504],"privDecls": [4505,4506,4507,4508,4509,4510,4511,4512,4513,4514,4515,4516],"file": 49},{"kind": 8,"name": "std.sort","src": 703,"pubDecls": [4517,4518,4519,4520,4521,4522,4523,4524,4525,4526],"privDecls": [4527,4528,4529,4530,4531,4532,4533,4534,4535,4536,4537,4538,4539,4540,4541,4542,4543,4544,4545,4546,4547,4548,4549,4550,4551,4552,4553,4554,4555],"file": 50},{"kind": 8,"name": "std.time","src": 704,"pubDecls": [4556,4557,4558,4559,4560,4561,4562,4563,4564,4565,4566,4567,4568,4569,4570,4571,4572,4573,4574,4575,4576,4577,4578,4579,4580,4581,4582,4583],"privDecls": [4584,4585,4586,4587,4588,4589,4590,4591],"file": 51},{"kind": 8,"name": "std.unicode","src": 705,"pubDecls": [4592,4593,4594,4595,4596,4597,4598,4599,4600,4601,4602,4603,4604,4605,4606,4607,4608,4609,4610,4611],"privDecls": [4612,4613,4614,4615,4616,4617,4618,4619,4620,4621,4622,4623,4624,4625,4626,4627,4628,4629,4630,4631,4632,4633,4634,4635,4636,4637,4638],"file": 52},{"kind": 8,"name": "std.start","src": 706,"pubDecls": [4639,4640],"privDecls": [4641,4642,4643,4644,4645,4646,4647,4648,4649,4650,4651,4652,4653,4654,4655,4656,4657,4658,4659,4660,4661,4662,4663,4664,4665,4666,4667,4668,4669,4670,4671,4672,4673,4674],"file": 53},{"kind": 16,"name": "std.builtin.OutputMode","src": 707,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 16,"name": "std.builtin.Mode","src": 708,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 6,"elem": 962},{"kind": 7,"len": 5,"elem": 719},{"kind": 6,"const": true,"elem": 962},{"kind": 6,"len": 2,"elem": 719},{"kind": 8,"name": "std.Thread.StaticResetEvent","src": 709,"pubDecls": [4675,4676,4677,4678,4679,4680,4681,4682],"privDecls": [4683,4684,4685,4686,4687,4688,4689,4690,4691],"fields": [1663],"file": 54},{"kind": 8,"name": "std.elf.Elf64_Phdr","src": 710,"pubDecls": [],"privDecls": [],"fields": [893,893,732,732,732,732,732,732]},{"kind": 6,"len": 1,"elem": 759},{"kind": 6,"const": true,"elem": 2020},{"kind": 6,"elem": 2020},{"kind": 8,"name": "std.Thread.Mutex.AtomicMutex","src": 711,"pubDecls": [4692,4693,4694],"privDecls": [4695,4696,4697],"fields": [1147]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 34,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 16,"name": "std.fmt.Alignment","src": 712,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 39,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15},{"kind": 15},{"kind": 8,"name": "std.mem.Allocator","src": 713,"pubDecls": [4698,4699,4700,4701,4702,4703,4704,4705,4706,4707,4708,4709,4710,4711,4712,4713,4714,4715,4716,4717,4718,4719,4720,4721,4722],"privDecls": [4723,4724,4725,4726,4727,4728,4729],"fields": [2068,264],"file": 55},{"kind": 18,"name": "fn(std.debug.Config,anytype,anytype) anytype","generic": true,"args": [979,null,null]},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.debug.struct:1164:48.callback)).Fn.return_type.?).ErrorUnion.error_set","fn": 55,"errors": [48]},{"kind": 8,"name": "std.os.linux.dl_phdr_info","src": 714,"pubDecls": [],"privDecls": [],"fields": [719,815,2069,715]},{"kind": 8,"name": "std.debug.struct:1155:18","src": 715,"pubDecls": [],"privDecls": [],"fields": [719,719,765]},{"kind": 15,"name": "std.mem.Allocator.Error","errors": [49]},{"kind": 18,"name": "fn(std.fs.Dir,*std.mem.Allocator,[]const u8,usize,?usize,u29,anytype) anytype","generic": true,"args": [991,977,765,719,791,1163,null]},{"kind": 15,"name": "std.fs.OpenSelfExeError","errors": [50,51,52,53,54,55,56,57,58,32,33,34,35,36,37,38,39,40,41,42,43,59,60,61,62,63,64,65]},{"kind": 15},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.debug.mapWholeFile)).Fn.return_type.?).ErrorUnion.error_set","fn": 64,"errors": [66,67,68,69,70,11,71,44,46]},{"kind": 15,"name": "std.math.error:993:44","errors": [71]},{"kind": 15,"name": "std.os.MMapError","errors": [66,67,68,69,70,11]},{"kind": 6,"len": 2,"align": 4096,"elem": 759},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.debug.chopSlice)).Fn.return_type.?).ErrorUnion.error_set","fn": 73,"errors": [71]},{"kind": 15},{"kind": 15},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.readUnitLength)).Fn.return_type.?).ErrorUnion.error_set","fn": 89,"errors": [72,73]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 90,"errors": [72]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readBytesNoEof)).Fn.return_type.?).ErrorUnion.error_set","fn": 91,"errors": [72]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readNoEof)).Fn.return_type.?).ErrorUnion.error_set","fn": 92,"errors": [72]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 95,"errors": [72]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readBytesNoEof)).Fn.return_type.?).ErrorUnion.error_set","fn": 96,"errors": [72]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 98,"errors": [72]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readBytesNoEof)).Fn.return_type.?).ErrorUnion.error_set","fn": 99,"errors": [72]},{"kind": 7,"len": 2,"elem": 759},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readByte)).Fn.return_type.?).ErrorUnion.error_set","fn": 101,"errors": [72]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.getAbbrevTable)).Fn.return_type.?).ErrorUnion.error_set","fn": 104,"errors": [71,72,49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 105,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.parseAbbrevTable)).Fn.return_type.?).ErrorUnion.error_set","fn": 106,"errors": [71,72,49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.leb128.readULEB128)).Fn.return_type.?).ErrorUnion.error_set","fn": 109,"errors": [71,72]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 111,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 113,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 114,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 115,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 119,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 120,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 121,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 122,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 126,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 127,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 128,"errors": [49]},{"kind": 15},{"kind": 13,"child": 1609},{"kind": 6,"const": true,"elem": 746},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Attr,null).resize)).Fn.return_type.?).ErrorUnion.error_set","fn": 135,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Attr,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 136,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Attr,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 137,"errors": [49]},{"kind": 6,"const": true,"elem": 1425},{"kind": 8,"name": "std.dwarf.Die","src": 716,"pubDecls": [4730],"privDecls": [4731,4732,4733,4734,4735,4736],"fields": [732,720,751]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.Die.getAttrString)).Fn.return_type.?).ErrorUnion.error_set","fn": 142,"errors": [73,74]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.getString)).Fn.return_type.?).ErrorUnion.error_set","fn": 143,"errors": [73]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.Die.getAttrRef)).Fn.return_type.?).ErrorUnion.error_set","fn": 145,"errors": [73,74]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.Die.getAttrAddr)).Fn.return_type.?).ErrorUnion.error_set","fn": 146,"errors": [73,74]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.Constant.asUnsignedLe)).Fn.return_type.?).ErrorUnion.error_set","fn": 147,"errors": [73]},{"kind": 8,"name": "std.dwarf.Constant","src": 717,"pubDecls": [],"privDecls": [4737],"fields": [732,720]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Func,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 148,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Func,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 149,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Func,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 150,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Func,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 151,"errors": [49]},{"kind": 15},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 157,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 158,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 159,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 160,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMap(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).putNoClobber)).Fn.return_type.?).ErrorUnion.error_set","fn": 164,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).putNoClobberContext)).Fn.return_type.?).ErrorUnion.error_set","fn": 165,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).growIfNeeded)).Fn.return_type.?).ErrorUnion.error_set","fn": 167,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).grow)).Fn.return_type.?).ErrorUnion.error_set","fn": 168,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).allocate)).Fn.return_type.?).ErrorUnion.error_set","fn": 174,"errors": [49]},{"kind": 4,"u": 1},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.debug.printLineInfo)).Fn.return_type.?).ErrorUnion.error_set","fn": 184,"errors": [0,1,2,3,4,5,6,7,8,9,10,11,14,18,19,23,24,25,27,28,29,30,32,33,34,35,40,41,42,75]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.debug.ModuleDebugInfo.getSymbolAtAddress)).Fn.return_type.?).ErrorUnion.error_set","fn": 185,"errors": [71,72,76,49,73,74]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.debug.getSymbolFromDwarf)).Fn.return_type.?).ErrorUnion.error_set","fn": 186,"errors": [71,72,76,49,73,74]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.findCompileUnit)).Fn.return_type.?).ErrorUnion.error_set","fn": 187,"errors": [73,74,72]},{"kind": 6,"const": true,"elem": 750},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.Die.getAttrSecOffset)).Fn.return_type.?).ErrorUnion.error_set","fn": 188,"errors": [73,74]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 189,"errors": [72]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.getLineNumberInfo)).Fn.return_type.?).ErrorUnion.error_set","fn": 192,"errors": [71,72,76,49,73,74]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readByteSigned)).Fn.return_type.?).ErrorUnion.error_set","fn": 193,"errors": [72]},{"kind": 4,"i": 8},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 197,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 198,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 199,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 200,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readUntilDelimiterAlloc)).Fn.return_type.?).ErrorUnion.error_set","fn": 204,"errors": [72,76,49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readUntilDelimiterArrayList)).Fn.return_type.?).ErrorUnion.error_set","fn": 206,"errors": [72,76,49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 208,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 209,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 210,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 211,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.leb128.readULEB128)).Fn.return_type.?).ErrorUnion.error_set","fn": 219,"errors": [71,72]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.FileEntry,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 220,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.FileEntry,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 221,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.FileEntry,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 222,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.FileEntry,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 223,"errors": [49]},{"kind": 15,"name": "std.math.error:993:44","errors": [77]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.LineNumberProgram.checkLineMatch)).Fn.return_type.?).ErrorUnion.error_set","fn": 229,"errors": [49,73,74]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fs.path.join)).Fn.return_type.?).ErrorUnion.error_set","fn": 230,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fs.path.joinSepMaybeZ)).Fn.return_type.?).ErrorUnion.error_set","fn": 231,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.mem.Allocator.dupe)).Fn.return_type.?).ErrorUnion.error_set","fn": 233,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.leb128.readILEB128)).Fn.return_type.?).ErrorUnion.error_set","fn": 236,"errors": [71,72]},{"kind": 15},{"kind": 8,"name": "std.Thread.StaticResetEvent.AtomicEvent","src": 718,"pubDecls": [4738,4739,4740,4741,4742,4743,4744,4745,4746,4747],"privDecls": [4748,4749],"fields": [893]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 246,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "std.os.SetrlimitError","errors": [78,79,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 261,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 262,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 263,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatBuf)).Fn.return_type.?).ErrorUnion.error_set","fn": 266,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.unicode.utf8CountCodepoints)).Fn.return_type.?).ErrorUnion.error_set","fn": 267,"errors": [80,81,82,83,84,85]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.unicode.utf8ByteSequenceLength)).Fn.return_type.?).ErrorUnion.error_set","fn": 269,"errors": [85]},{"kind": 4,"u": 3},{"kind": 15,"name": "std.unicode.Utf8DecodeError","errors": [80,81,82,83]},{"kind": 4,"u": 21},{"kind": 6,"const": true,"elem": 1903},{"kind": 6,"elem": 1903},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatText)).Fn.return_type.?).ErrorUnion.error_set","fn": 274,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 8,"name": "std.heap.arena_allocator","src": 719,"pubDecls": [4750],"privDecls": [4751,4752,4753,4754],"file": 56},{"kind": 15,"name": "std.heap.error:239:90","errors": [86]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 283,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dynamic_library.linkmap_iterator)).Fn.return_type.?).ErrorUnion.error_set","fn": 290,"errors": [87]},{"kind": 8,"name": "std.dynamic_library.Iterator","src": 720,"pubDecls": [4755,4756],"privDecls": [],"fields": [1168]},{"kind": 6,"elem": 2071},{"kind": 6,"len": 2,"elem": 1416},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.os.toPosixPath)).Fn.return_type.?).ErrorUnion.error_set","fn": 295,"errors": [28]},{"kind": 7,"len": 4095,"elem": 759},{"kind": 15,"name": "std.math.error:993:44","errors": [88]},{"kind": 15,"name": "std.math.error:455:43","errors": [89]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.readAddress)).Fn.return_type.?).ErrorUnion.error_set","fn": 319,"errors": [72]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueBlock)).Fn.return_type.?).ErrorUnion.error_set","fn": 320,"errors": [75,49,72]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueBlockLen)).Fn.return_type.?).ErrorUnion.error_set","fn": 321,"errors": [75,49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set","fn": 322,"errors": [72]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set","fn": 323,"errors": [72]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set","fn": 324,"errors": [72]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set","fn": 325,"errors": [72]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set","fn": 326,"errors": [71,72]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.readAllocBytes)).Fn.return_type.?).ErrorUnion.error_set","fn": 327,"errors": [75,49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueRef)).Fn.return_type.?).ErrorUnion.error_set","fn": 328,"errors": [71,72]},{"kind": 21,"fnName": "std.dwarf.parseFormValue","fn": 140},{"kind": 6,"len": 2,"elem": 1609},{"kind": 15,"name": "std.math.error:1073:52","errors": [90]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.debug.printLineFromFileAnyOs)).Fn.return_type.?).ErrorUnion.error_set","fn": 348,"errors": [0,1,2,3,4,5,6,7,8,9,10,11,14,18,19,23,24,25,27,28,29,30,32,33,34,35,40,41,42,75]},{"kind": 13,"child": 977},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 359,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 361,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 363,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 8,"name": "std.os.linux.tls.DTV","src": 721,"pubDecls": [],"privDecls": [],"fields": [719,2072]},{"kind": 6,"const": true,"elem": 1222},{"kind": 15,"name": "std.unicode.Utf8Decode2Error","errors": [80,81]},{"kind": 15,"name": "std.unicode.Utf8Decode3Error","errors": [91,92,82]},{"kind": 15,"name": "std.unicode.Utf8Decode4Error","errors": [93,94,83]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatText)).Fn.return_type.?).ErrorUnion.error_set","fn": 392,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 6,"len": 1,"elem": 1977},{"kind": 15,"name": "std.math.error:449:43","errors": [95]},{"kind": 15,"name": "std.os.OpenError","errors": [96,32,33,34,35,97,98,36,37,38,39,40,99,41,42,100,101,43,11]},{"kind": 15,"name": "std.os.FlockError","errors": [102,103,104,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readVarInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 427,"errors": [72]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 429,"errors": [72]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readBytesNoEof)).Fn.return_type.?).ErrorUnion.error_set","fn": 430,"errors": [72]},{"kind": 7,"len": 1,"elem": 759},{"kind": 6,"len": 2,"elem": 1699},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 446,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 450,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatText)).Fn.return_type.?).ErrorUnion.error_set","fn": 467,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "std.math.error:462:43","errors": [105]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.Thread.StaticResetEvent.LinuxFutex.wait)).Fn.return_type.?).ErrorUnion.error_set","fn": 471,"errors": [106]},{"kind": 6,"elem": 1145},{"kind": 8,"name": "std.os.linux.siginfo_t","src": 722,"pubDecls": [],"privDecls": [],"fields": [829,829,829,2073]},{"kind": 6,"const": true,"elem": 2074},{"kind": 8,"name": "std.hash.wyhash","src": 723,"pubDecls": [4757],"privDecls": [4758,4759,4760,4761,4762,4763,4764,4765,4766,4767],"file": 57},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.heap.arena_allocator.ArenaAllocator.alloc)).Fn.return_type.?).ErrorUnion.error_set","fn": 480,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.heap.arena_allocator.ArenaAllocator.createNode)).Fn.return_type.?).ErrorUnion.error_set","fn": 481,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatText)).Fn.return_type.?).ErrorUnion.error_set","fn": 506,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 507,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 508,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 509,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 510,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 511,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 512,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 513,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatText)).Fn.return_type.?).ErrorUnion.error_set","fn": 515,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatText)).Fn.return_type.?).ErrorUnion.error_set","fn": 516,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(day1.part1)).Fn.return_type.?).ErrorUnion.error_set","fn": 525,"errors": []},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(day1.part2)).Fn.return_type.?).ErrorUnion.error_set","fn": 526,"errors": []},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(day2.part1)).Fn.return_type.?).ErrorUnion.error_set","fn": 527,"errors": []},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(day2.part2)).Fn.return_type.?).ErrorUnion.error_set","fn": 528,"errors": []},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(day3.part1)).Fn.return_type.?).ErrorUnion.error_set","fn": 529,"errors": []},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(day3.part2)).Fn.return_type.?).ErrorUnion.error_set","fn": 530,"errors": []},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(day4.part1)).Fn.return_type.?).ErrorUnion.error_set","fn": 531,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(day4.part2)).Fn.return_type.?).ErrorUnion.error_set","fn": 532,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(day5.part1)).Fn.return_type.?).ErrorUnion.error_set","fn": 533,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(day5.part2)).Fn.return_type.?).ErrorUnion.error_set","fn": 534,"errors": [49]},{"kind": 15},{"kind": 15},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(day7.part1)).Fn.return_type.?).ErrorUnion.error_set","fn": 537,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(day7.part2)).Fn.return_type.?).ErrorUnion.error_set","fn": 538,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(day8.part1)).Fn.return_type.?).ErrorUnion.error_set","fn": 539,"errors": []},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(day8.part2)).Fn.return_type.?).ErrorUnion.error_set","fn": 540,"errors": []},{"kind": 15,"name": "std.fmt.AllocPrintError","errors": [107]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fs.Dir.readFileAlloc)).Fn.return_type.?).ErrorUnion.error_set","fn": 542,"errors": [1,12,13,14,15,16,17,18,19,20,21,11,49,44,23,24,25,27,28,29,30,32,33,34,35,39,40,41,42]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fs.Dir.readFileAllocOptions)).Fn.return_type.?).ErrorUnion.error_set","fn": 543,"errors": [1,12,13,14,15,16,17,18,19,20,21,11,49,44,23,24,25,27,28,29,30,32,33,34,35,39,40,41,42]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fs.file.File.readToEndAllocOptions)).Fn.return_type.?).ErrorUnion.error_set","fn": 544,"errors": [1,12,13,14,15,16,17,18,19,20,21,11,49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).initCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 545,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(std.fs.file.File,std.os.ReadError,std.fs.file.File.read).readAllArrayListAligned)).Fn.return_type.?).ErrorUnion.error_set","fn": 547,"errors": [76,12,13,14,15,16,17,18,19,20,21,11,49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 556,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 571,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 573,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 575,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(day4.Board,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 589,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(day4.Board,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 590,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(day4.Board,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 591,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(day4.Board,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 592,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(day5.Map.mark)).Fn.return_type.?).ErrorUnion.error_set","fn": 603,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMap(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80).getOrPut)).Fn.return_type.?).ErrorUnion.error_set","fn": 604,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80).getOrPutContext)).Fn.return_type.?).ErrorUnion.error_set","fn": 605,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80).getOrPutContextAdapted)).Fn.return_type.?).ErrorUnion.error_set","fn": 606,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80).growIfNeeded)).Fn.return_type.?).ErrorUnion.error_set","fn": 607,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80).grow)).Fn.return_type.?).ErrorUnion.error_set","fn": 608,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day5.Point,i32,std.hash_map.AutoContext(day5.Point),80).allocate)).Fn.return_type.?).ErrorUnion.error_set","fn": 612,"errors": [49]},{"kind": 6,"elem": 884},{"kind": 15},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMap(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80).put)).Fn.return_type.?).ErrorUnion.error_set","fn": 634,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80).putContext)).Fn.return_type.?).ErrorUnion.error_set","fn": 635,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80).getOrPutContext)).Fn.return_type.?).ErrorUnion.error_set","fn": 636,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80).getOrPutContextAdapted)).Fn.return_type.?).ErrorUnion.error_set","fn": 637,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80).growIfNeeded)).Fn.return_type.?).ErrorUnion.error_set","fn": 638,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80).grow)).Fn.return_type.?).ErrorUnion.error_set","fn": 639,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(day6.Key,u64,std.hash_map.AutoContext(day6.Key),80).allocate)).Fn.return_type.?).ErrorUnion.error_set","fn": 643,"errors": [49]},{"kind": 6,"elem": 888},{"kind": 6,"elem": 732},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(i32,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 654,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(i32,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 655,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(i32,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 656,"errors": [49]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(i32,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 657,"errors": [49]},{"kind": 15,"name": "std.fmt.BufPrintError","errors": [108]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 673,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 674,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 675,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 680,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 681,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 682,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 683,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 684,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 685,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 686,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "std.fmt.ParseIntError","errors": [109,110]},{"kind": 7,"len": 5,"elem": 720},{"kind": 7,"len": 32,"elem": 759},{"kind": 15,"name": "std.io.error:158:48","errors": []},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 752,"errors": []},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 758,"errors": [22]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatText)).Fn.return_type.?).ErrorUnion.error_set","fn": 767,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 7,"len": 256,"elem": 719},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 799,"errors": []},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 800,"errors": []},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 801,"errors": []},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatBuf)).Fn.return_type.?).ErrorUnion.error_set","fn": 802,"errors": []},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 806,"errors": [22]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 807,"errors": [22]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 808,"errors": [22]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatBuf)).Fn.return_type.?).ErrorUnion.error_set","fn": 809,"errors": [22]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 814,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "std.fmt.error:1761:39","errors": [111]},{"kind": 15,"name": "std.math.error:993:44","errors": [112]},{"kind": 15,"name": "std.math.error:449:43","errors": [113]},{"kind": 15,"name": "std.math.error:455:43","errors": [114]},{"kind": 15,"name": "std.math.error:462:43","errors": [115]},{"kind": 15,"name": "std.math.error:993:44","errors": [116]},{"kind": 15,"name": "std.math.error:449:43","errors": [117]},{"kind": 15,"name": "std.math.error:455:43","errors": [118]},{"kind": 15,"name": "std.math.error:462:43","errors": [119]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 832,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 834,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 835,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatText)).Fn.return_type.?).ErrorUnion.error_set","fn": 836,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 839,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 840,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 8,"name": "std.builtin.Version","src": 724,"pubDecls": [4768,4769,4770,4771],"privDecls": [],"fields": [893,893,893]},{"kind": 4,"i": 128},{"kind": 18,"name": "fn(anytype,anytype) anytype","generic": true,"args": [null,null]},{"kind": 8,"name": "std.meta.trait","src": 725,"pubDecls": [4772,4773,4774,4775,4776,4777,4778,4779,4780,4781,4782,4783,4784,4785,4786,4787,4788,4789,4790,4791,4792,4793,4794,4795,4796,4797],"privDecls": [4798,4799,4800,4801,4802,4803],"file": 58},{"kind": 6,"len": 1,"elem": 1090},{"kind": 8,"name": "std.dwarf.PcRange","src": 726,"pubDecls": [],"privDecls": [],"fields": [732,732]},{"kind": 16,"name": "std.target.WindowsVersion","src": 727,"pubDecls": [4804,4805,4806,4807,4808],"privDecls": [],"fields": [67108864,83886080,83951616,84017152,100663296,100728832,100794368,100859904,167772160,167772161,167772162,167772163,167772164,167772165,167772166,167772167,167772168,167772169,167772170]},{"kind": 8,"name": "std.target.LinuxVersionRange","src": 728,"pubDecls": [4809,4810],"privDecls": [],"fields": [2076,1838]},{"kind": 17,"name": "std.target.VersionRange","src": 729,"pubDecls": [4811],"privDecls": [],"fields": [726,2076,1845,2078]},{"kind": 8,"name": "std.target.x86.cpu","src": 730,"pubDecls": [4812,4813,4814,4815,4816,4817,4818,4819,4820,4821,4822,4823,4824,4825,4826,4827,4828,4829,4830,4831,4832,4833,4834,4835,4836,4837,4838,4839,4840,4841,4842,4843,4844,4845,4846,4847,4848,4849,4850,4851,4852,4853,4854,4855,4856,4857,4858,4859,4860,4861,4862,4863,4864,4865,4866,4867,4868,4869,4870,4871,4872,4873,4874,4875,4876,4877,4878,4879,4880,4881,4882,4883,4884,4885,4886,4887,4888,4889,4890,4891,4892,4893,4894,4895,4896,4897],"privDecls": []},{"kind": 8,"name": "std.target.Feature","src": 731,"pubDecls": [4898,4899],"privDecls": [],"fields": [716,765,814,765,953]},{"kind": 8,"name": "std.target.Model","src": 732,"pubDecls": [4900,4901,4902],"privDecls": [],"fields": [765,814,953]},{"kind": 6,"const": true,"elem": 1849},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 16,"name": "std.builtin.GlobalLinkage","src": 733,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 16,"name": "std.builtin.AtomicOrder","src": 734,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5]},{"kind": 16,"name": "std.builtin.AtomicRmwOp","src": 735,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8]},{"kind": 16,"name": "std.builtin.CallingConvention","src": 736,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]},{"kind": 16,"name": "std.builtin.AddressSpace","src": 737,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 8,"name": "std.builtin.CallOptions","src": 738,"pubDecls": [4903],"privDecls": [],"fields": [2079,2080]},{"kind": 8,"name": "std.builtin.ExportOptions","src": 739,"pubDecls": [],"privDecls": [],"fields": [765,1852,1098]},{"kind": 8,"name": "std.builtin.ExternOptions","src": 740,"pubDecls": [],"privDecls": [],"fields": [765,1098,1852,720]},{"kind": 20,"name": "(anytype)"},{"kind": 6,"len": 2,"const": true,"elem": 1442},{"kind": 6,"len": 2,"const": true,"elem": 1458},{"kind": 6,"len": 2,"const": true,"elem": 1446},{"kind": 6,"len": 2,"const": true,"elem": 1448},{"kind": 13,"child": 709},{"kind": 6,"len": 2,"const": true,"elem": 1450},{"kind": 6,"len": 2,"const": true,"elem": 1452},{"kind": 17,"name": "std.builtin.Data","src": 741,"pubDecls": [4904],"privDecls": [],"fields": [709,709,2081]},{"kind": 6,"elem": 1463},{"kind": 8,"name": "std.os.linux","src": 742,"pubDecls": [4905,4906,4907,4908,4909,4910,4911,4912,4913,4914,4915,4916,4917,4918,4919,4920,4921,4922,4923,4924,4925,4926,4927,4928,4929,4930,4931,4932,4933,4934,4935,4936,4937,4938,4939,4940,4941,4942,4943,4944,4945,4946,4947,4948,4949,4950,4951,4952,4953,4954,4955,4956,4957,4958,4959,4960,4961,4962,4963,4964,4965,4966,4967,4968,4969,4970,4971,4972,4973,4974,4975,4976,4977,4978,4979,4980,4981,4982,4983,4984,4985,4986,4987,4988,4989,4990,4991,4992,4993,4994,4995,4996,4997,4998,4999,5000,5001,5002,5003,5004,5005,5006,5007,5008,5009,5010,5011,5012,5013,5014,5015,5016,5017,5018,5019,5020,5021,5022,5023,5024,5025,5026,5027,5028,5029,5030,5031,5032,5033,5034,5035,5036,5037,5038,5039,5040,5041,5042,5043,5044,5045,5046,5047,5048,5049,5050,5051,5052,5053,5054,5055,5056,5057,5058,5059,5060,5061,5062,5063,5064,5065,5066,5067,5068,5069,5070,5071,5072,5073,5074,5075,5076,5077,5078,5079,5080,5081,5082,5083,5084,5085,5086,5087,5088,5089,5090,5091,5092,5093,5094,5095,5096,5097,5098,5099,5100,5101,5102,5103,5104,5105,5106,5107,5108,5109,5110,5111,5112,5113,5114,5115,5116,5117,5118,5119,5120,5121,5122,5123,5124,5125,5126,5127,5128,5129,5130,5131,5132,5133,5134,5135,5136,5137,5138,5139,5140,5141,5142,5143,5144,5145,5146,5147,5148,5149,5150,5151,5152,5153,5154,5155,5156,5157,5158,5159,5160,5161,5162,5163,5164,5165,5166,5167,5168,5169,5170,5171,5172,5173,5174,5175,5176,5177,5178,5179,5180,5181,5182,5183,5184,5185,5186,5187,5188,5189,5190,5191,5192,5193,5194,5195,5196,5197,5198,5199,5200,5201,5202,5203,5204,5205,5206,5207,5208,5209,5210,5211,5212,5213,5214,5215,5216,5217,5218,5219,5220,5221,5222,5223,5224,5225,5226,5227,5228,5229,5230,5231,5232,5233,5234,5235,5236,5237,5238,5239,5240,5241,5242,5243,5244,5245,5246,5247,5248,5249,5250,5251,5252,5253,5254,5255,5256,5257,5258,5259,5260,5261,5262,5263,5264,5265,5266,5267,5268,5269,5270,5271,5272,5273,5274,5275,5276,5277,5278,5279,5280,5281,5282,5283,5284,5285,5286,5287,5288,5289,5290,5291,5292,5293,5294,5295,5296,5297,5298,5299,5300,5301,5302,5303,5304,5305,5306,5307,5308,5309,5310,5311,5312,5313,5314,5315,5316,5317,5318,5319,5320,5321,5322,5323,5324,5325,5326,5327,5328,5329,5330,5331,5332,5333,5334,5335,5336,5337,5338,5339,5340,5341,5342,5343,5344,5345,5346,5347,5348,5349,5350,5351,5352,5353,5354,5355,5356,5357,5358,5359,5360,5361,5362,5363,5364,5365,5366,5367,5368,5369,5370,5371,5372,5373,5374,5375,5376,5377,5378,5379,5380,5381,5382,5383,5384,5385,5386,5387,5388,5389,5390,5391,5392,5393,5394,5395,5396,5397,5398,5399,5400,5401,5402,5403,5404,5405,5406,5407,5408,5409,5410,5411,5412,5413,5414,5415,5416,5417,5418,5419,5420,5421,5422,5423,5424,5425,5426,5427,5428,5429,5430,5431,5432,5433,5434,5435,5436,5437,5438,5439,5440,5441,5442,5443,5444,5445,5446,5447,5448,5449,5450,5451,5452,5453,5454,5455,5456,5457,5458,5459,5460,5461,5462,5463,5464,5465,5466,5467,5468,5469,5470,5471,5472,5473,5474,5475,5476,5477,5478,5479,5480,5481,5482,5483,5484,5485,5486,5487,5488,5489,5490,5491,5492,5493,5494,5495,5496,5497,5498,5499,5500,5501,5502,5503,5504,5505,5506,5507,5508,5509,5510,5511,5512,5513,5514,5515,5516,5517,5518,5519,5520,5521,5522,5523,5524,5525,5526,5527,5528,5529,5530,5531,5532,5533,5534,5535,5536,5537,5538,5539,5540,5541,5542,5543,5544,5545,5546,5547],"privDecls": [5548,5549,5550,5551,5552,5553,5554,5555,5556,5557,5558,5559,5560,5561,5562,5563,5564,5565,5566,5567,5568,5569,5570,5571,5572,5573,5574],"file": 59},{"kind": 6,"elem": 1467},{"kind": 8,"name": "std.event.loop.Loop","src": 743,"pubDecls": [5575,5576,5577,5578,5579,5580,5581,5582,5583,5584,5585,5586,5587,5588,5589,5590,5591,5592,5593,5594,5595,5596,5597,5598,5599,5600,5601,5602,5603,5604,5605,5606,5607,5608,5609,5610,5611,5612,5613,5614,5615,5616,5617,5618],"privDecls": [5619,5620,5621,5622,5623,5624,5625,5626,5627,5628,5629,5630,5631,5632,5633],"fields": [821,2094,1475,719,2095,1519,830,1467,1955,1161,2093,834,2096]},{"kind": 8,"name": "std.os.windows","src": 744,"pubDecls": [5634,5635,5636,5637,5638,5639,5640,5641,5642,5643,5644,5645,5646,5647,5648,5649,5650,5651,5652,5653,5654,5655,5656,5657,5658,5659,5660,5661,5662,5663,5664,5665,5666,5667,5668,5669,5670,5671,5672,5673,5674,5675,5676,5677,5678,5679,5680,5681,5682,5683,5684,5685,5686,5687,5688,5689,5690,5691,5692,5693,5694,5695,5696,5697,5698,5699,5700,5701,5702,5703,5704,5705,5706,5707,5708,5709,5710,5711,5712,5713,5714,5715,5716,5717,5718,5719,5720,5721,5722,5723,5724,5725,5726,5727,5728,5729,5730,5731,5732,5733,5734,5735,5736,5737,5738,5739,5740,5741,5742,5743,5744,5745,5746,5747,5748,5749,5750,5751,5752,5753,5754,5755,5756,5757,5758,5759,5760,5761,5762,5763,5764,5765,5766,5767,5768,5769,5770,5771,5772,5773,5774,5775,5776,5777,5778,5779,5780,5781,5782,5783,5784,5785,5786,5787,5788,5789,5790,5791,5792,5793,5794,5795,5796,5797,5798,5799,5800,5801,5802,5803,5804,5805,5806,5807,5808,5809,5810,5811,5812,5813,5814,5815,5816,5817,5818,5819,5820,5821,5822,5823,5824,5825,5826,5827,5828,5829,5830,5831,5832,5833,5834,5835,5836,5837,5838,5839,5840,5841,5842,5843,5844,5845,5846,5847,5848,5849,5850,5851,5852,5853,5854,5855,5856,5857,5858,5859,5860,5861,5862,5863,5864,5865,5866,5867,5868,5869,5870,5871,5872,5873,5874,5875,5876,5877,5878,5879,5880,5881,5882,5883,5884,5885,5886,5887,5888,5889,5890,5891,5892,5893,5894,5895,5896,5897,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5908,5909,5910,5911,5912,5913,5914,5915,5916,5917,5918,5919,5920,5921,5922,5923,5924,5925,5926,5927,5928,5929,5930,5931,5932,5933,5934,5935,5936,5937,5938,5939,5940,5941,5942,5943,5944,5945,5946,5947,5948,5949,5950,5951,5952,5953,5954,5955,5956,5957,5958,5959,5960,5961,5962,5963,5964,5965,5966,5967,5968,5969,5970,5971,5972,5973,5974,5975,5976,5977,5978,5979,5980,5981,5982,5983,5984,5985,5986,5987,5988,5989,5990,5991,5992,5993,5994,5995,5996,5997,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6012,6013,6014,6015,6016,6017,6018,6019,6020,6021,6022,6023,6024,6025,6026,6027,6028,6029,6030,6031,6032,6033,6034,6035,6036,6037,6038,6039,6040,6041,6042,6043,6044,6045,6046,6047,6048,6049,6050,6051,6052,6053,6054,6055,6056,6057,6058,6059,6060,6061,6062,6063,6064,6065,6066,6067,6068,6069,6070,6071,6072,6073,6074,6075,6076,6077,6078,6079,6080,6081,6082,6083,6084,6085,6086,6087,6088,6089,6090,6091,6092,6093,6094,6095,6096,6097,6098,6099,6100,6101,6102,6103,6104,6105,6106,6107,6108,6109,6110,6111,6112,6113,6114,6115,6116,6117,6118,6119,6120,6121,6122,6123,6124,6125,6126,6127,6128,6129,6130,6131,6132,6133,6134,6135,6136,6137,6138,6139,6140,6141,6142,6143,6144,6145,6146,6147,6148,6149,6150,6151,6152,6153,6154,6155,6156,6157,6158,6159,6160,6161,6162,6163,6164,6165,6166,6167,6168,6169,6170,6171,6172,6173,6174,6175,6176,6177,6178,6179,6180,6181,6182,6183,6184,6185,6186,6187,6188,6189,6190,6191,6192,6193,6194,6195,6196,6197,6198,6199,6200,6201,6202,6203,6204,6205,6206,6207,6208,6209,6210,6211,6212,6213,6214,6215,6216,6217,6218,6219,6220,6221,6222,6223,6224,6225,6226,6227,6228,6229,6230,6231,6232,6233,6234,6235,6236,6237,6238,6239,6240,6241,6242,6243,6244,6245,6246,6247,6248,6249,6250,6251,6252,6253,6254,6255,6256,6257,6258,6259,6260,6261,6262,6263,6264,6265,6266,6267,6268,6269,6270,6271,6272,6273,6274,6275,6276,6277,6278,6279,6280,6281,6282,6283,6284,6285,6286,6287,6288,6289,6290,6291,6292,6293,6294,6295,6296,6297,6298,6299,6300,6301,6302,6303,6304,6305,6306,6307,6308,6309],"privDecls": [6310,6311,6312,6313,6314,6315,6316,6317,6318,6319,6320,6321],"file": 60},{"kind": 8,"name": "std.event.loop.Read","src": 745,"pubDecls": [6322],"privDecls": [],"fields": [829,811,1198]},{"kind": 8,"name": "std.event.loop.ReadV","src": 746,"pubDecls": [6323],"privDecls": [],"fields": [829,2098,1198]},{"kind": 8,"name": "std.event.loop.Write","src": 747,"pubDecls": [6324],"privDecls": [],"fields": [829,765,958]},{"kind": 8,"name": "std.event.loop.WriteV","src": 748,"pubDecls": [6325],"privDecls": [],"fields": [829,2099,958]},{"kind": 8,"name": "std.event.loop.PWrite","src": 749,"pubDecls": [6326],"privDecls": [],"fields": [829,765,719,2100]},{"kind": 8,"name": "std.event.loop.PWriteV","src": 750,"pubDecls": [6327],"privDecls": [],"fields": [829,2099,719,2100]},{"kind": 8,"name": "std.event.loop.PRead","src": 751,"pubDecls": [6328],"privDecls": [],"fields": [829,811,719,2101]},{"kind": 8,"name": "std.event.loop.PReadV","src": 752,"pubDecls": [6329],"privDecls": [],"fields": [829,2098,719,2101]},{"kind": 8,"name": "std.event.loop.Open","src": 753,"pubDecls": [6330],"privDecls": [],"fields": [813,893,719,1219]},{"kind": 8,"name": "std.event.loop.OpenAt","src": 754,"pubDecls": [6331],"privDecls": [],"fields": [829,813,893,719,1219]},{"kind": 8,"name": "std.event.loop.Close","src": 755,"pubDecls": [],"privDecls": [],"fields": [829]},{"kind": 8,"name": "std.event.loop.FAccessAt","src": 756,"pubDecls": [6332],"privDecls": [],"fields": [829,813,893,893,2102]},{"kind": 6,"elem": 1473},{"kind": 16,"name": "std.event.loop.Id","src": 757,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 8,"name": "std.log.ScopeLevel","src": 758,"pubDecls": [],"privDecls": [],"fields": [856,913]},{"kind": 18,"name": "fn(std.log.Level,anytype,anytype,anytype) anytype","generic": true,"args": [913,null,null,null]},{"kind": 7,"len": 0,"elem": 1888},{"kind": 18,"name": "fn(std.log.Level,anytype,anytype,anytype) anytype","generic": true,"args": [913,null,null,null]},{"kind": 8,"name": "std.os.linux.x86_64.O","src": 759,"pubDecls": [6333,6334,6335,6336,6337,6338,6339,6340,6341,6342,6343,6344,6345,6346,6347,6348,6349,6350,6351],"privDecls": []},{"kind": 8,"name": "std.os.linux.x86_64.MAP","src": 760,"pubDecls": [6352,6353,6354,6355,6356,6357],"privDecls": []},{"kind": 8,"name": "std.os.linux.x86_64.ARCH","src": 761,"pubDecls": [6358,6359,6360,6361],"privDecls": []},{"kind": 8,"name": "std.os.linux.x86_64.REG","src": 762,"pubDecls": [6362,6363,6364,6365,6366,6367,6368,6369,6370,6371,6372,6373,6374,6375,6376,6377,6378,6379,6380,6381,6382,6383,6384],"privDecls": []},{"kind": 8,"name": "std.os.linux.x86_64.LOCK","src": 763,"pubDecls": [6385,6386,6387,6388],"privDecls": []},{"kind": 7,"len": 23,"elem": 719},{"kind": 8,"name": "std.os.linux.x86_64.fpstate","src": 764,"pubDecls": [],"privDecls": [],"fields": [715,715,715,715,719,719,893,893,2103,2104,2105]},{"kind": 6,"elem": 1898},{"kind": 8,"name": "std.os.linux.x86_64.mcontext_t","src": 765,"pubDecls": [],"privDecls": [],"fields": [1897,1899,2106]},{"kind": 8,"name": "std.os.linux.x86_64.ucontext_t","src": 766,"pubDecls": [],"privDecls": [],"fields": [719,2107,1902,1900,1903,2108]},{"kind": 8,"name": "std.os.linux.stack_t","src": 767,"pubDecls": [],"privDecls": [],"fields": [851,829,719]},{"kind": 7,"len": 32,"elem": 893},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn(anytype,anytype) anytype","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(anytype,anytype) anytype","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 7,"len": 5,"elem": 732},{"kind": 6,"len": 1,"elem": 1315},{"kind": 6,"len": 1,"elem": 1332},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 8,"name": "std.dwarf.TAG","src": 768,"pubDecls": [6389,6390,6391,6392,6393,6394,6395,6396,6397,6398,6399,6400,6401,6402,6403,6404,6405,6406,6407,6408,6409,6410,6411,6412,6413,6414,6415,6416,6417,6418,6419,6420,6421,6422,6423,6424,6425,6426,6427,6428,6429,6430,6431,6432,6433,6434,6435,6436,6437,6438,6439,6440,6441,6442,6443,6444,6445,6446,6447,6448,6449,6450,6451,6452,6453,6454,6455,6456,6457,6458,6459,6460,6461,6462,6463,6464,6465,6466,6467,6468,6469,6470,6471],"privDecls": [],"file": 61},{"kind": 8,"name": "std.dwarf.AT","src": 769,"pubDecls": [6472,6473,6474,6475,6476,6477,6478,6479,6480,6481,6482,6483,6484,6485,6486,6487,6488,6489,6490,6491,6492,6493,6494,6495,6496,6497,6498,6499,6500,6501,6502,6503,6504,6505,6506,6507,6508,6509,6510,6511,6512,6513,6514,6515,6516,6517,6518,6519,6520,6521,6522,6523,6524,6525,6526,6527,6528,6529,6530,6531,6532,6533,6534,6535,6536,6537,6538,6539,6540,6541,6542,6543,6544,6545,6546,6547,6548,6549,6550,6551,6552,6553,6554,6555,6556,6557,6558,6559,6560,6561,6562,6563,6564,6565,6566,6567,6568,6569,6570,6571,6572,6573,6574,6575,6576,6577,6578,6579,6580,6581,6582,6583,6584,6585,6586,6587,6588,6589,6590,6591,6592,6593,6594,6595,6596,6597,6598,6599,6600,6601,6602,6603,6604,6605,6606,6607,6608,6609,6610,6611,6612,6613,6614,6615,6616,6617,6618,6619,6620,6621,6622,6623,6624,6625,6626,6627,6628,6629,6630,6631,6632,6633,6634,6635,6636,6637,6638,6639,6640],"privDecls": [],"file": 62},{"kind": 8,"name": "std.dwarf.FORM","src": 770,"pubDecls": [6641,6642,6643,6644,6645,6646,6647,6648,6649,6650,6651,6652,6653,6654,6655,6656,6657,6658,6659,6660,6661,6662,6663,6664,6665,6666,6667,6668,6669],"privDecls": []},{"kind": 8,"name": "std.dwarf.CHILDREN","src": 771,"pubDecls": [6670,6671],"privDecls": []},{"kind": 8,"name": "std.dwarf.LNS","src": 772,"pubDecls": [6672,6673,6674,6675,6676,6677,6678,6679,6680,6681,6682,6683,6684],"privDecls": []},{"kind": 8,"name": "std.dwarf.LNE","src": 773,"pubDecls": [6685,6686,6687,6688,6689,6690],"privDecls": []},{"kind": 8,"name": "std.leb128","src": 774,"pubDecls": [6691,6692,6693,6694,6695],"privDecls": [6696,6697,6698,6699,6700,6701,6702,6703,6704],"file": 63},{"kind": 18,"name": "fn(anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,anytype,anytype) anytype","generic": true,"args": [977,null,null]},{"kind": 18,"name": "fn(anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,anytype,anytype) anytype","generic": true,"args": [977,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,anytype,anytype,anytype) anytype","generic": true,"args": [977,null,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [977,null,null,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,anytype,anytype,anytype) anytype","generic": true,"args": [977,null,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [977,null,null,null,null]},{"kind": 6,"len": 1,"elem": 1506},{"kind": 17,"name": "std.coff.Misc","src": 775,"pubDecls": [],"privDecls": [],"fields": [893,893]},{"kind": 8,"name": "std.Thread.AutoResetEvent","src": 776,"pubDecls": [6705,6706,6707],"privDecls": [6708,6709,6710,6711,6712,6713,6714,6715,6716,6717],"fields": [719],"file": 64},{"kind": 8,"name": "std.Thread.ResetEvent","src": 777,"pubDecls": [6718,6719,6720,6721,6722,6723,6724,6725,6726,6727,6728],"privDecls": [6729,6730,6731,6732,6733,6734,6735,6736],"fields": [1663],"file": 65},{"kind": 8,"name": "std.Thread.LinuxThreadImpl","src": 778,"pubDecls": [6737],"privDecls": [6738,6739,6740,6741,6742,6743,6744,6745,6746],"fields": [2112]},{"kind": 8,"name": "std.coff.Coff","src": 779,"pubDecls": [6747,6748,6749,6750,6751,6752],"privDecls": [6753,6754],"fields": [724,977,1958,1959,936,2113,893]},{"kind": 8,"name": "std.coff.CoffHeader","src": 780,"pubDecls": [],"privDecls": [],"fields": [715,715,893,893,893,715,715]},{"kind": 8,"name": "std.coff.OptionalHeader","src": 781,"pubDecls": [],"privDecls": [6755],"fields": [715,2115,732]},{"kind": 18,"name": "fn([]const u8,anytype) anytype","generic": true,"args": [765,null]},{"kind": 18,"name": "fn(std.builtin.StackTrace,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [962,null,null,null,null]},{"kind": 18,"name": "fn(anytype,anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null,null]},{"kind": 8,"name": "std.debug.TTY","src": 782,"pubDecls": [6756,6757],"privDecls": []},{"kind": 18,"name": "fn(*std.debug.DebugInfo,anytype,anytype,anytype) anytype","generic": true,"args": [981,null,null,null]},{"kind": 17,"name": "std.debug.PdbOrDwarf","src": 783,"pubDecls": [],"privDecls": [],"fields": [2034,933]},{"kind": 13,"child": 1160},{"kind": 6,"const": true,"elem": 2116},{"kind": 18,"name": "fn(anytype,anytype,anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null,null,null,null,null]},{"kind": 18,"name": "fn(anytype,anytype) anytype","generic": true,"args": [null,null]},{"kind": 8,"name": "std.debug.MachoSymbol","src": 784,"pubDecls": [],"privDecls": [6758,6759],"fields": [2117,2118,732]},{"kind": 16,"name": "std.elf.ET","src": 785,"pubDecls": [6760,6761],"privDecls": [],"fields": [0,1,2,3,4]},{"kind": 8,"name": "std.elf.Elf32_Ehdr","src": 786,"pubDecls": [],"privDecls": [],"fields": [2113,1971,1979,893,893,893,893,893,715,715,715,715,715,715]},{"kind": 8,"name": "std.elf.Elf64_Ehdr","src": 787,"pubDecls": [],"privDecls": [],"fields": [2113,1971,1979,893,732,732,732,893,715,715,715,715,715,715]},{"kind": 8,"name": "std.elf.Elf32_Phdr","src": 788,"pubDecls": [],"privDecls": [],"fields": [893,893,893,893,893,893,893,893]},{"kind": 8,"name": "std.elf.Elf32_Shdr","src": 789,"pubDecls": [],"privDecls": [],"fields": [893,893,893,893,893,893,893,893,893,893]},{"kind": 8,"name": "std.elf.Elf64_Shdr","src": 790,"pubDecls": [],"privDecls": [],"fields": [893,893,732,732,732,732,893,893,732,732]},{"kind": 8,"name": "std.elf.Elf64_Dyn","src": 791,"pubDecls": [],"privDecls": [],"fields": [836,732]},{"kind": 8,"name": "std.elf.Elf64_auxv_t","src": 792,"pubDecls": [],"privDecls": [],"fields": [732,2119]},{"kind": 16,"name": "std.elf.EM","src": 793,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,13,15,17,18,19,20,21,22,23,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,131,132,133,134,135,136,137,138,139,140,141,142,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,186,187,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,224,243,244,247]},{"kind": 18,"name": "fn(anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null]},{"kind": 18,"name": "fn(anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null,null,null]},{"kind": 18,"name": "fn(anytype,anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null,null]},{"kind": 18,"name": "fn([]const u8,[]const u8,anytype,anytype) anytype","generic": true,"args": [765,765,null,null]},{"kind": 18,"name": "fn([]const u8,std.fmt.FormatOptions,anytype) anytype","generic": true,"args": [765,972,null]},{"kind": 18,"name": "fn(anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn([]u8,[]const u8,anytype) anytype","generic": true,"args": [811,765,null]},{"kind": 18,"name": "fn([]const u8,anytype) anytype","generic": true,"args": [765,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,[]const u8,anytype) anytype","generic": true,"args": [977,765,null]},{"kind": 6,"const": true,"elem": 2120},{"kind": 18,"name": "fn(anytype,anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null]},{"kind": 8,"name": "std.fs.path","src": 794,"pubDecls": [6762,6763,6764,6765,6766,6767,6768,6769,6770,6771,6772,6773,6774,6775,6776,6777,6778,6779,6780,6781,6782,6783,6784,6785,6786,6787,6788,6789,6790,6791,6792,6793,6794,6795,6796,6797,6798,6799,6800,6801],"privDecls": [6802,6803,6804,6805,6806,6807,6808,6809,6810,6811,6812,6813,6814,6815,6816,6817,6818,6819,6820,6821,6822,6823,6824,6825,6826,6827,6828,6829,6830,6831,6832,6833,6834],"file": 66},{"kind": 15,"name": "std.fs.SelfExePathError","errors": [120,59,121,122,123,124,60,125,126,127,61,11,62,63,64,65,128,129,130,131,132,133,134,135,136,137]},{"kind": 8,"name": "std.hash.auto_hash","src": 795,"pubDecls": [6835,6836,6837,6838,6839],"privDecls": [6840,6841,6842,6843,6844,6845,6846,6847,6848,6849,6850],"file": 67},{"kind": 8,"name": "std.heap.PageAllocator","src": 796,"pubDecls": [],"privDecls": [6851,6852]},{"kind": 16,"name": "std.io.Mode","src": 797,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 8,"name": "std.macho.nlist_64","src": 798,"pubDecls": [],"privDecls": [],"fields": [893,759,759,715,732]},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 18,"name": "fn(anytype,anytype) anytype","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [709,null,null]},{"kind": 18,"name": "fn(anytype,anytype) anytype","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 18,"name": "fn(anytype,anytype) anytype","generic": true,"args": [null,null]},{"kind": 8,"name": "std.os.linux.AT","src": 799,"pubDecls": [6853,6854,6855,6856,6857,6858,6859,6860,6861,6862,6863],"privDecls": []},{"kind": 8,"name": "std.os.linux.MAP","src": 800,"pubDecls": [6864,6865,6866,6867,6868,6869,6870,6871,6872,6873,6874,6875,6876,6352,6353,6354,6355,6356,6357],"privDecls": []},{"kind": 8,"name": "std.os.linux.O","src": 801,"pubDecls": [6877,6878,6879,6333,6334,6335,6336,6337,6338,6339,6340,6341,6342,6343,6344,6345,6346,6347,6348,6349,6350,6351],"privDecls": []},{"kind": 8,"name": "std.os.linux.PROT","src": 802,"pubDecls": [6880,6881,6882,6883,6884,6885,6886],"privDecls": []},{"kind": 8,"name": "std.os.linux.S","src": 803,"pubDecls": [6887,6888,6889,6890,6891,6892,6893,6894,6895,6896,6897,6898,6899,6900,6901,6902,6903,6904,6905,6906,6907,6908,6909,6910,6911,6912,6913,6914,6915,6916],"privDecls": []},{"kind": 8,"name": "std.os.linux.SA","src": 804,"pubDecls": [6917,6918,6919,6920,6921,6922,6923,6924],"privDecls": []},{"kind": 8,"name": "std.os.linux.SIG","src": 805,"pubDecls": [6925,6926,6927,6928,6929,6930,6931,6932,6933,6934,6935,6936,6937,6938,6939,6940,6941,6942,6943,6944,6945,6946,6947,6948,6949,6950,6951,6952,6953,6954,6955,6956,6957,6958,6959,6960,6961,6962,6963,6964],"privDecls": []},{"kind": 8,"name": "std.os.linux.Sigaction","src": 806,"pubDecls": [6965,6966],"privDecls": [],"fields": [2126,1903,2127,2128]},{"kind": 8,"name": "std.os.iovec","src": 807,"pubDecls": [],"privDecls": [],"fields": [851,719]},{"kind": 8,"name": "std.os.iovec_const","src": 808,"pubDecls": [],"privDecls": [],"fields": [874,719]},{"kind": 15,"name": "std.os.PReadError","errors": [12,13,14,15,16,17,18,19,20,21,11,138]},{"kind": 15,"name": "std.os.PWriteError","errors": [0,1,2,3,4,5,6,7,8,9,10,11,139]},{"kind": 15,"name": "std.os.ReadLinkError","errors": [120,59,121,122,123,124,60,125,126,127,61,11]},{"kind": 15,"name": "std.os.AccessError","errors": [140,141,142,143,144,145,146,147,148,149,11]},{"kind": 15,"name": "std.os.SysCtlError","errors": [62,150,151,63,11]},{"kind": 15,"name": "std.os.SeekError","errors": [44,45,11]},{"kind": 15,"name": "std.os.RealPathError","errors": [152,153,154,64,155,156,65,128,129,130,131,132,157,133,158,159,134,135,136,160,137,11]},{"kind": 18,"name": "fn(anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null]},{"kind": 8,"name": "std.dynamic_library","src": 809,"pubDecls": [6967,6968,6969,6970,6971,6972],"privDecls": [6973,6974,6975,6976,6977,6978,6979,6980,6981,6982,6983,6984,6985,6986],"file": 68},{"kind": 8,"name": "std.pdb.SectionContribEntry","src": 810,"pubDecls": [],"privDecls": [],"fields": [715,1585,893,893,893,715,1585,893,893]},{"kind": 8,"name": "std.pdb.ModInfo","src": 811,"pubDecls": [],"privDecls": [],"fields": [893,2032,715,715,893,893,893,715,1585,893,893,893]},{"kind": 8,"name": "std.pdb.Pdb","src": 812,"pubDecls": [6987,6988,6989,6990,6991,6992,6993,6994,6995,6996],"privDecls": [],"fields": [724,2035,977,2131,2131,2132,2133,2113,893]},{"kind": 8,"name": "std.pdb.Msf","src": 813,"pubDecls": [],"privDecls": [6997],"fields": [2036,2134]},{"kind": 8,"name": "std.pdb.MsfStream","src": 814,"pubDecls": [6998,6999,7000,7001],"privDecls": [7002,7003,7004,7005],"fields": [724,732,2135,893]},{"kind": 18,"name": "fn([]const u8) anytype","generic": true,"args": [765]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null]},{"kind": 8,"name": "std.sort.Pull","src": 815,"pubDecls": [],"privDecls": [],"fields": [719,719,719,1367]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [709,null,null,null,null,null,null]},{"kind": 8,"name": "std.time.Timer","src": 816,"pubDecls": [7006,7007,7008,7009,7010],"privDecls": [7011,7012,7013],"fields": [726,732,732]},{"kind": 6,"const": true,"elem": 2136},{"kind": 18,"name": "fn(*std.mem.Allocator,type) anytype","generic": true,"args": [977,709]},{"kind": 18,"name": "fn(*std.mem.Allocator,anytype) anytype","generic": true,"args": [977,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,type,anytype) anytype","generic": true,"args": [977,709,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,type,anytype,anytype) anytype","generic": true,"args": [977,709,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,type,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [977,709,null,null,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,anytype,anytype) anytype","generic": true,"args": [977,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,anytype,anytype) anytype","generic": true,"args": [977,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,anytype,anytype) anytype","generic": true,"args": [977,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [977,null,null,null,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,anytype,anytype) anytype","generic": true,"args": [977,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [977,null,null,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,anytype) anytype","generic": true,"args": [977,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,type,anytype) anytype","generic": true,"args": [977,709,null]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, u29, u29, usize) std.mem.Allocator.Error![]u8","generic": false,"ret": 1101,"args": [977,719,1163,1163,719]},{"kind": 6,"len": 1,"elem": 1547},{"kind": 8,"name": "std.Thread.StaticResetEvent.LinuxFutex","src": 817,"pubDecls": [],"privDecls": [7014,7015]},{"kind": 8,"name": "std.dynamic_library.LinkMap","src": 818,"pubDecls": [7016],"privDecls": [],"fields": [719,813,2137,1168,1168]},{"kind": 7,"len": 1,"elem": 851},{"kind": 17,"name": "std.os.linux.siginfo_fields_union","src": 819,"pubDecls": [],"privDecls": [],"fields": [2138,2139,2140,2141,2142]},{"kind": 20,"name": "c_void"},{"kind": 18,"name": "fn(u8,anytype) anytype","generic": true,"args": [759,null]},{"kind": 8,"name": "std.builtin.Range","src": 820,"pubDecls": [7017,7018],"privDecls": [],"fields": [1838,1838]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [709]},{"kind": 8,"name": "std.target.Range","src": 821,"pubDecls": [7019,7020],"privDecls": [],"fields": [1844,1844]},{"kind": 16,"name": "std.builtin.Modifier","src": 822,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7]},{"kind": 13,"child": 2143},{"kind": 8,"name": "std.builtin.FnDecl","src": 823,"pubDecls": [],"privDecls": [],"fields": [709,720,720,720,720,1098,709,1118]},{"kind": 8,"name": "std.os.linux.tls","src": 824,"pubDecls": [7021,7022,7023,7024],"privDecls": [7025,7026,7027,7028,7029,7030,7031,7032,7033,7034,7035,7036,7037,7038,7039,7040,7041,7042,7043],"file": 69},{"kind": 13,"child": 2149},{"kind": 8,"name": "std.os.linux.FUTEX","src": 825,"pubDecls": [7044,7045,7046,7047,7048,7049,7050,7051,7052,7053,7054,7055,7056,7057,7058],"privDecls": []},{"kind": 8,"name": "std.os.linux.T","src": 826,"pubDecls": [7059,7060,7061,7062,7063,7064,7065,7066,7067,7068,7069,7070,7071,7072,7073,7074,7075,7076,7077,7078,7079,7080,7081,7082,7083,7084,7085,7086,7087,7088,7089,7090,7091,7092,7093,7094,7095,7096,7097,7098,7099,7100,7101,7102,7103,7104,7105,7106,7107,7108,7109,7110,7111,7112,7113],"privDecls": []},{"kind": 8,"name": "std.os.linux.winsize","src": 827,"pubDecls": [],"privDecls": [],"fields": [715,715,715,715]},{"kind": 8,"name": "std.os.linux.k_sigaction","src": 828,"pubDecls": [],"privDecls": [],"fields": [2150,2151,2152,2153]},{"kind": 17,"name": "std.os.linux.epoll_data","src": 829,"pubDecls": [],"privDecls": [],"fields": [719,829,893,732]},{"kind": 8,"name": "std.os.linux.epoll_event","src": 830,"pubDecls": [],"privDecls": [],"fields": [893,2088]},{"kind": 17,"name": "std.os.linux.sigval","src": 831,"pubDecls": [],"privDecls": [],"fields": [829,2097]},{"kind": 8,"name": "std.os.linux.io_uring","src": 832,"pubDecls": [5519,5520,5521,5522,5523,5524,5525,5526,5527,5528,5529,5530,5531,5532,5533,5534,5535,5536,5537,5538,5539,5540,5541,5542,5543,5544,5545,5546,5547],"privDecls": [7114,7115,7116,7117,7118,7119,7120,7121,7122,7123,7124],"file": 70},{"kind": 13,"child": 2154},{"kind": 8,"name": "std.event.loop.DelayQueue","src": 833,"pubDecls": [],"privDecls": [7125,7126,7127],"fields": [2053,2155,1519,1954,720]},{"kind": 8,"name": "std.event.loop.LinuxOsData","src": 834,"pubDecls": [],"privDecls": [],"fields": [829,829,2089]},{"kind": 6,"len": 2,"elem": 1519},{"kind": 6,"len": 2,"elem": 1473},{"kind": 6,"elem": 2074},{"kind": 6,"len": 2,"const": true,"elem": 2021},{"kind": 6,"len": 2,"const": true,"elem": 2022},{"kind": 14,"err": 2024,"payload": 719},{"kind": 14,"err": 2023,"payload": 719},{"kind": 14,"err": 2026,"payload": 726},{"kind": 7,"len": 8,"elem": 2156},{"kind": 7,"len": 16,"elem": 2157},{"kind": 7,"len": 24,"elem": 893},{"kind": 7,"len": 8,"elem": 719},{"kind": 6,"elem": 1901},{"kind": 7,"len": 64,"elem": 719},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [709,null]},{"kind": 8,"name": "std.Thread.ThreadCompletion","src": 835,"pubDecls": [],"privDecls": [7128],"fields": [826,828,829,1573]},{"kind": 6,"elem": 2111},{"kind": 7,"len": 16,"elem": 759},{"kind": 8,"name": "std.coff.DataDirectory","src": 836,"pubDecls": [],"privDecls": [],"fields": [893,893]},{"kind": 7,"len": 16,"elem": 2114},{"kind": 7,"len": 7,"elem": 759},{"kind": 6,"const": true,"elem": 1998},{"kind": 13,"child": 2117},{"kind": 17,"name": "std.elf.union:790:11","src": 837,"pubDecls": [],"privDecls": [],"fields": [732]},{"kind": 7,"len": 3,"elem": 759},{"kind": 16,"name": "std.hash.auto_hash.HashStrategy","src": 838,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 18,"name": "fn(anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null]},{"kind": 13,"child": 2125},{"kind": 18,"name": "fn(c_int) callconv(.C) void","generic": false,"ret": 726,"args": [2158]},{"kind": 18,"name": "fn(c_int, *const std.os.linux.siginfo_t, ?*const c_void) callconv(.C) void","generic": false,"ret": 726,"args": [2158,1236,1237]},{"kind": 17,"name": "std.os.linux.union:3050:14","src": 839,"pubDecls": [],"privDecls": [],"fields": [2150,2123]},{"kind": 4,"u": 32},{"kind": 13,"child": 2152},{"kind": 8,"name": "std.dynamic_library.RDebug","src": 840,"pubDecls": [],"privDecls": [],"fields": [829,1168,719,719]},{"kind": 8,"name": "std.pdb.Module","src": 841,"pubDecls": [],"privDecls": [],"fields": [2033,811,811,720,811,811,791]},{"kind": 13,"child": 2159},{"kind": 6,"len": 2,"elem": 2130},{"kind": 6,"len": 2,"elem": 2032},{"kind": 6,"len": 2,"elem": 2036},{"kind": 6,"len": 2,"elem": 893},{"kind": 7,"len": 6,"elem": 759},{"kind": 13,"child": 2160},{"kind": 7,"len": 112,"elem": 759},{"kind": 8,"name": "std.os.linux.struct:3350:13","src": 842,"pubDecls": [],"privDecls": [],"fields": [2161,2162]},{"kind": 8,"name": "std.os.linux.struct:3370:15","src": 843,"pubDecls": [],"privDecls": [],"fields": [2097,2163,2164]},{"kind": 8,"name": "std.os.linux.struct:3381:14","src": 844,"pubDecls": [],"privDecls": [],"fields": [819,829]},{"kind": 8,"name": "std.os.linux.struct:3385:13","src": 845,"pubDecls": [],"privDecls": [],"fields": [2097,829,893]},{"kind": 6,"len": 2,"align": 16,"elem": 759},{"kind": 8,"name": "std.os.linux.tls.TLSImage","src": 846,"pubDecls": [],"privDecls": [],"fields": [765,719,719,719,719,719,719,719]},{"kind": 16,"name": "std.os.linux.tls.TLSVariant","src": 847,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 8,"name": "std.os.linux.tls.CustomData","src": 848,"pubDecls": [],"privDecls": [],"fields": [719]},{"kind": 18,"name": "fn(type,anytype) callconv(.Inline) anytype","generic": true,"args": [709,null]},{"kind": 7,"len": 8448,"elem": 759},{"kind": 6,"len": 1,"elem": 1978},{"kind": 13,"child": 2124},{"kind": 4,"u": 64},{"kind": 18,"name": "fn() callconv(.C) void","generic": false,"ret": 726},{"kind": 7,"len": 2,"elem": 2127},{"kind": 6,"elem": 1872},{"kind": 8,"name": "std.event.loop.Waiters","src": 849,"pubDecls": [],"privDecls": [7129,7130,7131,7132,7133],"fields": [821]},{"kind": 8,"name": "std.os.linux.x86_64.struct:685:12","src": 850,"pubDecls": [],"privDecls": [],"fields": [2165,715,2166]},{"kind": 8,"name": "std.os.linux.x86_64.struct:690:14","src": 851,"pubDecls": [],"privDecls": [],"fields": [2167]},{"kind": 4,"i": 32},{"kind": 6,"elem": 2036},{"kind": 6,"elem": 1977},{"kind": 17,"name": "std.os.linux.union:3351:16","src": 852,"pubDecls": [],"privDecls": [],"fields": [2168,2169]},{"kind": 17,"name": "std.os.linux.union:3361:17","src": 853,"pubDecls": [],"privDecls": [],"fields": [2090,2170]},{"kind": 4,"i": 16},{"kind": 17,"name": "std.os.linux.union:3373:16","src": 854,"pubDecls": [],"privDecls": [],"fields": [2171,893]},{"kind": 7,"len": 4,"elem": 715},{"kind": 7,"len": 3,"elem": 715},{"kind": 7,"len": 4,"elem": 893},{"kind": 8,"name": "std.os.linux.struct:3352:21","src": 855,"pubDecls": [],"privDecls": [],"fields": [829,893]},{"kind": 8,"name": "std.os.linux.struct:3356:20","src": 856,"pubDecls": [],"privDecls": [],"fields": [829,829]},{"kind": 8,"name": "std.os.linux.struct:3363:22","src": 857,"pubDecls": [],"privDecls": [],"fields": [829,819,819]},{"kind": 8,"name": "std.os.linux.struct:3374:23","src": 858,"pubDecls": [],"privDecls": [],"fields": [2097,2097]}],"decls": [{"import": 1403,"src": 1,"name": "featureSet","kind": "const","type": 1,"value": 1},{"import": 1403,"src": 859,"name": "featureSetHas"},{"import": 1403,"src": 860,"name": "featureSetHasAny"},{"import": 1403,"src": 861,"name": "featureSetHasAll"},{"import": 1403,"src": 862,"name": "isX86"},{"import": 1403,"src": 21,"name": "isARM","kind": "const","type": 4,"value": 23},{"import": 1403,"src": 863,"name": "isAARCH64"},{"import": 1403,"src": 864,"name": "isThumb"},{"import": 1403,"src": 4,"name": "isWasm","kind": "const","type": 4,"value": 4},{"import": 1403,"src": 296,"name": "isRISCV","kind": "const","type": 4,"value": 468},{"import": 1403,"src": 5,"name": "isMIPS","kind": "const","type": 4,"value": 5},{"import": 1403,"src": 865,"name": "isPPC"},{"import": 1403,"src": 360,"name": "isPPC64","kind": "const","type": 4,"value": 568},{"import": 1403,"src": 26,"name": "isSPARC","kind": "const","type": 4,"value": 28},{"import": 1403,"src": 866,"name": "isSPIRV"},{"import": 1403,"src": 867,"name": "isBpf"},{"import": 1403,"src": 868,"name": "parseCpuModel"},{"import": 1403,"src": 869,"name": "toElfMachine"},{"import": 1403,"src": 870,"name": "toCoffMachine"},{"import": 1403,"src": 65,"name": "endian","kind": "const","type": 63,"value": 70},{"import": 1403,"src": 871,"name": "ptrBitWidth"},{"import": 1403,"src": 872,"name": "genericName"},{"import": 1403,"src": 873,"name": "allFeaturesList"},{"import": 1403,"src": 874,"name": "allCpuModels"},{"import": 1403,"src": 875,"name": "allCpusFromDecls"},{"import": 1404,"src": 876,"name": "Error","kind": "const","type": 709,"value": 725},{"import": 1404,"src": 177,"name": "write","kind": "const","type": 243,"value": 260},{"import": 1404,"src": 33,"name": "writeAll","kind": "const","type": 28,"value": 35},{"import": 1404,"src": 15,"name": "print","kind": "const","type": 1405,"value": 915},{"import": 1404,"src": 239,"name": "writeByte","kind": "const","type": 324,"value": 350},{"import": 1404,"src": 188,"name": "writeByteNTimes","kind": "const","type": 254,"value": 271},{"import": 1404,"src": 877,"name": "writeIntNative"},{"import": 1404,"src": 878,"name": "writeIntForeign"},{"import": 1404,"src": 879,"name": "writeIntLittle"},{"import": 1404,"src": 880,"name": "writeIntBig"},{"import": 1404,"src": 881,"name": "writeInt"},{"import": 1404,"src": 882,"name": "writeStruct"},{"import": 1404,"src": 883,"name": "Self","kind": "const","type": 709,"value": 723},{"import": 1406,"src": 884,"name": "Handle","kind": "const","type": 709,"value": 829},{"import": 1406,"src": 885,"name": "Mode","kind": "const","type": 709,"value": 719},{"import": 1406,"src": 886,"name": "INode","kind": "const","type": 709,"value": 732},{"import": 1406,"src": 887,"name": "Uid"},{"import": 1406,"src": 888,"name": "Gid"},{"import": 1406,"src": 889,"name": "Kind","kind": "const","type": 709,"value": 1407},{"import": 1406,"src": 890,"name": "default_mode"},{"import": 1406,"src": 891,"name": "OpenError","kind": "const","type": 709,"value": 1408},{"import": 1406,"src": 892,"name": "Lock","kind": "const","type": 709,"value": 1409},{"import": 1406,"src": 893,"name": "OpenFlags","kind": "const","type": 709,"value": 993},{"import": 1406,"src": 894,"name": "CreateFlags"},{"import": 1406,"src": 61,"name": "close","kind": "const","type": 59,"value": 66},{"import": 1406,"src": 271,"name": "isTty","kind": "const","type": 268,"value": 394},{"import": 1406,"src": 201,"name": "supportsAnsiEscapeCodes","kind": "const","type": 268,"value": 287},{"import": 1406,"src": 895,"name": "SetEndPosError"},{"import": 1406,"src": 896,"name": "setEndPos"},{"import": 1406,"src": 897,"name": "SeekError"},{"import": 1406,"src": 898,"name": "seekBy"},{"import": 1406,"src": 899,"name": "seekFromEnd"},{"import": 1406,"src": 900,"name": "seekTo"},{"import": 1406,"src": 901,"name": "GetSeekPosError","kind": "const","type": 709,"value": 1410},{"import": 1406,"src": 902,"name": "getPos"},{"import": 1406,"src": 60,"name": "getEndPos","kind": "const","type": 58,"value": 65},{"import": 1406,"src": 903,"name": "ModeError"},{"import": 1406,"src": 904,"name": "mode"},{"import": 1406,"src": 905,"name": "Stat","kind": "const","type": 709,"value": 1411},{"import": 1406,"src": 906,"name": "StatError","kind": "const","type": 709,"value": 1412},{"import": 1406,"src": 214,"name": "stat","kind": "const","type": 281,"value": 300},{"import": 1406,"src": 907,"name": "ChmodError"},{"import": 1406,"src": 908,"name": "chmod"},{"import": 1406,"src": 909,"name": "ChownError"},{"import": 1406,"src": 910,"name": "chown"},{"import": 1406,"src": 911,"name": "UpdateTimesError"},{"import": 1406,"src": 912,"name": "updateTimes"},{"import": 1406,"src": 913,"name": "readToEndAlloc"},{"import": 1406,"src": 345,"name": "readToEndAllocOptions","kind": "const","type": 1413,"value": 916},{"import": 1406,"src": 914,"name": "ReadError","kind": "const","type": 709,"value": 867},{"import": 1406,"src": 915,"name": "PReadError"},{"import": 1406,"src": 238,"name": "read","kind": "const","type": 323,"value": 349},{"import": 1406,"src": 916,"name": "readAll"},{"import": 1406,"src": 917,"name": "pread"},{"import": 1406,"src": 918,"name": "preadAll"},{"import": 1406,"src": 919,"name": "readv"},{"import": 1406,"src": 920,"name": "readvAll"},{"import": 1406,"src": 921,"name": "preadv"},{"import": 1406,"src": 922,"name": "preadvAll"},{"import": 1406,"src": 923,"name": "WriteError","kind": "const","type": 709,"value": 725},{"import": 1406,"src": 924,"name": "PWriteError"},{"import": 1406,"src": 12,"name": "write","kind": "const","type": 11,"value": 12},{"import": 1406,"src": 925,"name": "writeAll"},{"import": 1406,"src": 926,"name": "pwrite"},{"import": 1406,"src": 927,"name": "pwriteAll"},{"import": 1406,"src": 928,"name": "writev"},{"import": 1406,"src": 929,"name": "writevAll"},{"import": 1406,"src": 930,"name": "pwritev"},{"import": 1406,"src": 931,"name": "pwritevAll"},{"import": 1406,"src": 932,"name": "CopyRangeError"},{"import": 1406,"src": 933,"name": "copyRange"},{"import": 1406,"src": 934,"name": "copyRangeAll"},{"import": 1406,"src": 935,"name": "WriteFileOptions"},{"import": 1406,"src": 936,"name": "WriteFileError"},{"import": 1406,"src": 937,"name": "writeFileAll"},{"import": 1406,"src": 938,"name": "writeFileAllUnseekable"},{"import": 1406,"src": 939,"name": "Reader","kind": "const","type": 709,"value": 866},{"import": 1406,"src": 347,"name": "reader","kind": "const","type": 482,"value": 546},{"import": 1406,"src": 940,"name": "Writer","kind": "const","type": 709,"value": 723},{"import": 1406,"src": 13,"name": "writer","kind": "const","type": 12,"value": 13},{"import": 1406,"src": 941,"name": "SeekableStream"},{"import": 1406,"src": 942,"name": "seekableStream"},{"import": 1406,"src": 943,"name": "LockError"},{"import": 1406,"src": 944,"name": "lock"},{"import": 1406,"src": 945,"name": "unlock"},{"import": 1406,"src": 946,"name": "tryLock"},{"import": 1406,"src": 947,"name": "downgradeLock"},{"import": 1406,"src": 948,"name": "writeFileAllSendfile"},{"import": 1406,"src": 949,"name": "range_off"},{"import": 1406,"src": 950,"name": "range_len"},{"import": 1415,"src": 951,"name": "hash","kind": "const","type": 34,"value": 41},{"import": 1415,"src": 952,"name": "eql","kind": "const","type": 35,"value": 42},{"import": 1415,"src": 953,"name": "Unmanaged","kind": "const","type": 709,"value": 738},{"import": 1415,"src": 954,"name": "Entry"},{"import": 1415,"src": 955,"name": "KV"},{"import": 1415,"src": 956,"name": "Hash"},{"import": 1415,"src": 957,"name": "Iterator"},{"import": 1415,"src": 958,"name": "KeyIterator"},{"import": 1415,"src": 959,"name": "ValueIterator"},{"import": 1415,"src": 960,"name": "Size"},{"import": 1415,"src": 961,"name": "GetOrPutResult"},{"import": 1415,"src": 264,"name": "init","kind": "const","type": 354,"value": 386},{"import": 1415,"src": 962,"name": "initContext"},{"import": 1415,"src": 384,"name": "deinit"},{"import": 1415,"src": 963,"name": "clearRetainingCapacity"},{"import": 1415,"src": 964,"name": "clearAndFree"},{"import": 1415,"src": 965,"name": "count"},{"import": 1415,"src": 966,"name": "iterator"},{"import": 1415,"src": 967,"name": "keyIterator"},{"import": 1415,"src": 402,"name": "valueIterator"},{"import": 1415,"src": 374,"name": "getOrPut"},{"import": 1415,"src": 968,"name": "getOrPutAdapted"},{"import": 1415,"src": 969,"name": "getOrPutAssumeCapacity"},{"import": 1415,"src": 970,"name": "getOrPutAssumeCapacityAdapted"},{"import": 1415,"src": 971,"name": "getOrPutValue"},{"import": 1415,"src": 972,"name": "ensureCapacity"},{"import": 1415,"src": 973,"name": "ensureTotalCapacity"},{"import": 1415,"src": 974,"name": "ensureUnusedCapacity"},{"import": 1415,"src": 975,"name": "capacity"},{"import": 1415,"src": 385,"name": "put"},{"import": 1415,"src": 114,"name": "putNoClobber","kind": "const","type": 154,"value": 164},{"import": 1415,"src": 976,"name": "putAssumeCapacity"},{"import": 1415,"src": 977,"name": "putAssumeCapacityNoClobber"},{"import": 1415,"src": 978,"name": "fetchPut"},{"import": 1415,"src": 979,"name": "fetchPutAssumeCapacity"},{"import": 1415,"src": 980,"name": "fetchRemove"},{"import": 1415,"src": 981,"name": "fetchRemoveAdapted"},{"import": 1415,"src": 52,"name": "get","kind": "const","type": 50,"value": 57},{"import": 1415,"src": 982,"name": "getAdapted"},{"import": 1415,"src": 983,"name": "getPtr"},{"import": 1415,"src": 984,"name": "getPtrAdapted"},{"import": 1415,"src": 985,"name": "getKey"},{"import": 1415,"src": 986,"name": "getKeyAdapted"},{"import": 1415,"src": 987,"name": "getKeyPtr"},{"import": 1415,"src": 988,"name": "getKeyPtrAdapted"},{"import": 1415,"src": 989,"name": "getEntry"},{"import": 1415,"src": 990,"name": "getEntryAdapted"},{"import": 1415,"src": 991,"name": "contains"},{"import": 1415,"src": 992,"name": "containsAdapted"},{"import": 1415,"src": 993,"name": "remove"},{"import": 1415,"src": 994,"name": "removeAdapted"},{"import": 1415,"src": 995,"name": "clone"},{"import": 1415,"src": 996,"name": "cloneWithAllocator"},{"import": 1415,"src": 997,"name": "cloneWithContext"},{"import": 1415,"src": 998,"name": "cloneWithAllocatorAndContext"},{"import": 1415,"src": 999,"name": "Self","kind": "const","type": 709,"value": 734},{"import": 1415,"src": 1000,"name": "Size","kind": "const","type": 709,"value": 893},{"import": 1415,"src": 1001,"name": "Hash","kind": "const","type": 709,"value": 732},{"import": 1415,"src": 1002,"name": "Entry"},{"import": 1415,"src": 1003,"name": "KV"},{"import": 1415,"src": 1004,"name": "Iterator"},{"import": 1415,"src": 1005,"name": "KeyIterator"},{"import": 1415,"src": 1006,"name": "ValueIterator"},{"import": 1415,"src": 1007,"name": "GetOrPutResult"},{"import": 1415,"src": 1008,"name": "Managed"},{"import": 1415,"src": 1009,"name": "promote"},{"import": 1415,"src": 1010,"name": "promoteContext"},{"import": 1415,"src": 127,"name": "deinit","kind": "const","type": 164,"value": 177},{"import": 1415,"src": 1011,"name": "ensureCapacity"},{"import": 1415,"src": 1012,"name": "ensureTotalCapacity"},{"import": 1415,"src": 1013,"name": "ensureTotalCapacityContext"},{"import": 1415,"src": 1014,"name": "ensureUnusedCapacity"},{"import": 1415,"src": 1015,"name": "ensureUnusedCapacityContext"},{"import": 1415,"src": 1016,"name": "clearRetainingCapacity"},{"import": 1415,"src": 1017,"name": "clearAndFree"},{"import": 1415,"src": 1018,"name": "count"},{"import": 1415,"src": 122,"name": "capacity","kind": "const","type": 160,"value": 172},{"import": 1415,"src": 1019,"name": "iterator"},{"import": 1415,"src": 1020,"name": "keyIterator"},{"import": 1415,"src": 441,"name": "valueIterator"},{"import": 1415,"src": 1021,"name": "putNoClobber"},{"import": 1415,"src": 115,"name": "putNoClobberContext","kind": "const","type": 155,"value": 165},{"import": 1415,"src": 1022,"name": "putAssumeCapacity"},{"import": 1415,"src": 1023,"name": "putAssumeCapacityContext"},{"import": 1415,"src": 1024,"name": "putAssumeCapacityNoClobber"},{"import": 1415,"src": 132,"name": "putAssumeCapacityNoClobberContext","kind": "const","type": 169,"value": 182},{"import": 1415,"src": 1025,"name": "fetchPut"},{"import": 1415,"src": 1026,"name": "fetchPutContext"},{"import": 1415,"src": 1027,"name": "fetchPutAssumeCapacity"},{"import": 1415,"src": 1028,"name": "fetchPutAssumeCapacityContext"},{"import": 1415,"src": 1029,"name": "fetchRemove"},{"import": 1415,"src": 1030,"name": "fetchRemoveContext"},{"import": 1415,"src": 1031,"name": "fetchRemoveAdapted"},{"import": 1415,"src": 1032,"name": "getEntry"},{"import": 1415,"src": 1033,"name": "getEntryContext"},{"import": 1415,"src": 1034,"name": "getEntryAdapted"},{"import": 1415,"src": 1035,"name": "put"},{"import": 1415,"src": 386,"name": "putContext"},{"import": 1415,"src": 1036,"name": "getKeyPtr"},{"import": 1415,"src": 1037,"name": "getKeyPtrContext"},{"import": 1415,"src": 1038,"name": "getKeyPtrAdapted"},{"import": 1415,"src": 1039,"name": "getKey"},{"import": 1415,"src": 1040,"name": "getKeyContext"},{"import": 1415,"src": 1041,"name": "getKeyAdapted"},{"import": 1415,"src": 1042,"name": "getPtr"},{"import": 1415,"src": 1043,"name": "getPtrContext"},{"import": 1415,"src": 1044,"name": "getPtrAdapted"},{"import": 1415,"src": 1045,"name": "get"},{"import": 1415,"src": 207,"name": "getContext","kind": "const","type": 274,"value": 293},{"import": 1415,"src": 275,"name": "getAdapted","kind": "const","type": 1417,"value": 917},{"import": 1415,"src": 1046,"name": "getOrPut"},{"import": 1415,"src": 375,"name": "getOrPutContext"},{"import": 1415,"src": 1047,"name": "getOrPutAdapted"},{"import": 1415,"src": 376,"name": "getOrPutContextAdapted"},{"import": 1415,"src": 1048,"name": "getOrPutAssumeCapacity"},{"import": 1415,"src": 1049,"name": "getOrPutAssumeCapacityContext"},{"import": 1415,"src": 377,"name": "getOrPutAssumeCapacityAdapted"},{"import": 1415,"src": 1050,"name": "getOrPutValue"},{"import": 1415,"src": 1051,"name": "getOrPutValueContext"},{"import": 1415,"src": 1052,"name": "contains"},{"import": 1415,"src": 116,"name": "containsContext","kind": "const","type": 156,"value": 166},{"import": 1415,"src": 228,"name": "containsAdapted","kind": "const","type": 1418,"value": 918},{"import": 1415,"src": 1053,"name": "remove"},{"import": 1415,"src": 1054,"name": "removeContext"},{"import": 1415,"src": 1055,"name": "removeAdapted"},{"import": 1415,"src": 1056,"name": "clone"},{"import": 1415,"src": 1057,"name": "cloneContext"},{"import": 1415,"src": 1058,"name": "Self","kind": "const","type": 709,"value": 738},{"import": 1415,"src": 1059,"name": "minimal_capacity","kind": "const","type": 778,"value": null},{"import": 1415,"src": 1060,"name": "Header","kind": "const","type": 709,"value": 1419},{"import": 1415,"src": 1061,"name": "Metadata","kind": "const","type": 709,"value": 1090},{"import": 1415,"src": 504,"name": "FieldIterator"},{"import": 1415,"src": 1062,"name": "isUnderMaxLoadPercentage"},{"import": 1415,"src": 119,"name": "capacityForSize","kind": "const","type": 159,"value": 169},{"import": 1415,"src": 230,"name": "header","kind": "const","type": 315,"value": 338},{"import": 1415,"src": 129,"name": "keys","kind": "const","type": 166,"value": 179},{"import": 1415,"src": 130,"name": "values","kind": "const","type": 167,"value": 180},{"import": 1415,"src": 291,"name": "getIndex","kind": "const","type": 1420,"value": 919},{"import": 1415,"src": 128,"name": "initMetadatas","kind": "const","type": 165,"value": 178},{"import": 1415,"src": 120,"name": "load","kind": "const","type": 160,"value": 170},{"import": 1415,"src": 117,"name": "growIfNeeded","kind": "const","type": 157,"value": 167},{"import": 1415,"src": 118,"name": "grow","kind": "const","type": 158,"value": 168},{"import": 1415,"src": 124,"name": "allocate","kind": "const","type": 162,"value": 174},{"import": 1415,"src": 232,"name": "deallocate","kind": "const","type": 164,"value": 341},{"import": 1422,"src": 1063,"name": "Slice","kind": "const","type": 709,"value": 844},{"import": 1422,"src": 70,"name": "init","kind": "const","type": 68,"value": 75},{"import": 1422,"src": 346,"name": "initCapacity"},{"import": 1422,"src": 96,"name": "deinit"},{"import": 1422,"src": 1064,"name": "span"},{"import": 1422,"src": 1065,"name": "toSlice"},{"import": 1422,"src": 1066,"name": "toSliceConst"},{"import": 1422,"src": 1067,"name": "at"},{"import": 1422,"src": 1068,"name": "ptrAt"},{"import": 1422,"src": 1069,"name": "setOrError"},{"import": 1422,"src": 1070,"name": "set"},{"import": 1422,"src": 1071,"name": "swapRemoveOrError"},{"import": 1422,"src": 1072,"name": "fromOwnedSlice"},{"import": 1422,"src": 1073,"name": "toUnmanaged"},{"import": 1422,"src": 1074,"name": "moveToUnmanaged"},{"import": 1422,"src": 147,"name": "toOwnedSlice"},{"import": 1422,"src": 1075,"name": "toOwnedSliceSentinel"},{"import": 1422,"src": 1076,"name": "insert"},{"import": 1422,"src": 1077,"name": "insertSlice"},{"import": 1422,"src": 1078,"name": "replaceRange"},{"import": 1422,"src": 92,"name": "append","kind": "const","type": 95,"value": 105},{"import": 1422,"src": 1079,"name": "appendAssumeCapacity"},{"import": 1422,"src": 1080,"name": "orderedRemove"},{"import": 1422,"src": 1081,"name": "swapRemove"},{"import": 1422,"src": 1082,"name": "appendSlice"},{"import": 1422,"src": 1083,"name": "appendSliceAssumeCapacity"},{"import": 1422,"src": 1084,"name": "Writer"},{"import": 1422,"src": 1085,"name": "writer"},{"import": 1422,"src": 1086,"name": "appendNTimes"},{"import": 1422,"src": 1087,"name": "appendNTimesAssumeCapacity"},{"import": 1422,"src": 105,"name": "resize"},{"import": 1422,"src": 350,"name": "shrinkAndFree"},{"import": 1422,"src": 146,"name": "shrinkRetainingCapacity"},{"import": 1422,"src": 1088,"name": "clearRetainingCapacity"},{"import": 1422,"src": 1089,"name": "clearAndFree"},{"import": 1422,"src": 1090,"name": "ensureCapacity"},{"import": 1422,"src": 98,"name": "ensureTotalCapacity","kind": "const","type": 117,"value": 127},{"import": 1422,"src": 99,"name": "ensureTotalCapacityPrecise","kind": "const","type": 118,"value": 128},{"import": 1422,"src": 1091,"name": "ensureUnusedCapacity"},{"import": 1422,"src": 349,"name": "expandToCapacity"},{"import": 1422,"src": 97,"name": "addOne","kind": "const","type": 116,"value": 126},{"import": 1422,"src": 102,"name": "addOneAssumeCapacity","kind": "const","type": 121,"value": 131},{"import": 1422,"src": 1092,"name": "addManyAsArray"},{"import": 1422,"src": 1093,"name": "addManyAsArrayAssumeCapacity"},{"import": 1422,"src": 1094,"name": "pop"},{"import": 1422,"src": 1095,"name": "popOrNull"},{"import": 1422,"src": 100,"name": "allocatedSlice","kind": "const","type": 119,"value": 129},{"import": 1422,"src": 1096,"name": "unusedCapacitySlice"},{"import": 1422,"src": 1097,"name": "Self","kind": "const","type": 709,"value": 741},{"import": 1422,"src": 1098,"name": "appendWrite"},{"import": 1422,"src": 1063,"name": "Slice","kind": "const","type": 709,"value": 837},{"import": 1422,"src": 70,"name": "init","kind": "const","type": 97,"value": 107},{"import": 1422,"src": 346,"name": "initCapacity"},{"import": 1422,"src": 96,"name": "deinit","kind": "const","type": 100,"value": 110},{"import": 1422,"src": 1064,"name": "span"},{"import": 1422,"src": 1065,"name": "toSlice"},{"import": 1422,"src": 1066,"name": "toSliceConst"},{"import": 1422,"src": 1067,"name": "at"},{"import": 1422,"src": 1068,"name": "ptrAt"},{"import": 1422,"src": 1069,"name": "setOrError"},{"import": 1422,"src": 1070,"name": "set"},{"import": 1422,"src": 1071,"name": "swapRemoveOrError"},{"import": 1422,"src": 1072,"name": "fromOwnedSlice"},{"import": 1422,"src": 1073,"name": "toUnmanaged"},{"import": 1422,"src": 1074,"name": "moveToUnmanaged"},{"import": 1422,"src": 147,"name": "toOwnedSlice"},{"import": 1422,"src": 1075,"name": "toOwnedSliceSentinel"},{"import": 1422,"src": 1076,"name": "insert"},{"import": 1422,"src": 1077,"name": "insertSlice"},{"import": 1422,"src": 1078,"name": "replaceRange"},{"import": 1422,"src": 92,"name": "append","kind": "const","type": 101,"value": 111},{"import": 1422,"src": 1079,"name": "appendAssumeCapacity"},{"import": 1422,"src": 1080,"name": "orderedRemove"},{"import": 1422,"src": 1081,"name": "swapRemove"},{"import": 1422,"src": 1082,"name": "appendSlice"},{"import": 1422,"src": 1083,"name": "appendSliceAssumeCapacity"},{"import": 1422,"src": 1084,"name": "Writer"},{"import": 1422,"src": 1085,"name": "writer"},{"import": 1422,"src": 1086,"name": "appendNTimes"},{"import": 1422,"src": 1087,"name": "appendNTimesAssumeCapacity"},{"import": 1422,"src": 105,"name": "resize"},{"import": 1422,"src": 350,"name": "shrinkAndFree"},{"import": 1422,"src": 146,"name": "shrinkRetainingCapacity"},{"import": 1422,"src": 1088,"name": "clearRetainingCapacity"},{"import": 1422,"src": 1089,"name": "clearAndFree"},{"import": 1422,"src": 1090,"name": "ensureCapacity"},{"import": 1422,"src": 98,"name": "ensureTotalCapacity","kind": "const","type": 104,"value": 114},{"import": 1422,"src": 99,"name": "ensureTotalCapacityPrecise","kind": "const","type": 105,"value": 115},{"import": 1422,"src": 1091,"name": "ensureUnusedCapacity"},{"import": 1422,"src": 349,"name": "expandToCapacity"},{"import": 1422,"src": 97,"name": "addOne","kind": "const","type": 103,"value": 113},{"import": 1422,"src": 102,"name": "addOneAssumeCapacity","kind": "const","type": 108,"value": 118},{"import": 1422,"src": 1092,"name": "addManyAsArray"},{"import": 1422,"src": 1093,"name": "addManyAsArrayAssumeCapacity"},{"import": 1422,"src": 1094,"name": "pop"},{"import": 1422,"src": 1095,"name": "popOrNull"},{"import": 1422,"src": 100,"name": "allocatedSlice","kind": "const","type": 106,"value": 116},{"import": 1422,"src": 1096,"name": "unusedCapacitySlice"},{"import": 1422,"src": 1097,"name": "Self","kind": "const","type": 709,"value": 745},{"import": 1422,"src": 1098,"name": "appendWrite"},{"import": 1422,"src": 1063,"name": "Slice","kind": "const","type": 709,"value": 843},{"import": 1422,"src": 70,"name": "init","kind": "const","type": 102,"value": 112},{"import": 1422,"src": 346,"name": "initCapacity"},{"import": 1422,"src": 96,"name": "deinit"},{"import": 1422,"src": 1064,"name": "span"},{"import": 1422,"src": 1065,"name": "toSlice"},{"import": 1422,"src": 1066,"name": "toSliceConst"},{"import": 1422,"src": 1067,"name": "at"},{"import": 1422,"src": 1068,"name": "ptrAt"},{"import": 1422,"src": 1069,"name": "setOrError"},{"import": 1422,"src": 1070,"name": "set"},{"import": 1422,"src": 1071,"name": "swapRemoveOrError"},{"import": 1422,"src": 1072,"name": "fromOwnedSlice"},{"import": 1422,"src": 1073,"name": "toUnmanaged"},{"import": 1422,"src": 1074,"name": "moveToUnmanaged"},{"import": 1422,"src": 147,"name": "toOwnedSlice"},{"import": 1422,"src": 1075,"name": "toOwnedSliceSentinel"},{"import": 1422,"src": 1076,"name": "insert"},{"import": 1422,"src": 1077,"name": "insertSlice"},{"import": 1422,"src": 1078,"name": "replaceRange"},{"import": 1422,"src": 92,"name": "append","kind": "const","type": 109,"value": 119},{"import": 1422,"src": 1079,"name": "appendAssumeCapacity"},{"import": 1422,"src": 1080,"name": "orderedRemove"},{"import": 1422,"src": 1081,"name": "swapRemove"},{"import": 1422,"src": 1082,"name": "appendSlice"},{"import": 1422,"src": 1083,"name": "appendSliceAssumeCapacity"},{"import": 1422,"src": 1084,"name": "Writer"},{"import": 1422,"src": 1085,"name": "writer"},{"import": 1422,"src": 1086,"name": "appendNTimes"},{"import": 1422,"src": 1087,"name": "appendNTimesAssumeCapacity"},{"import": 1422,"src": 105,"name": "resize"},{"import": 1422,"src": 350,"name": "shrinkAndFree"},{"import": 1422,"src": 146,"name": "shrinkRetainingCapacity"},{"import": 1422,"src": 1088,"name": "clearRetainingCapacity"},{"import": 1422,"src": 1089,"name": "clearAndFree"},{"import": 1422,"src": 1090,"name": "ensureCapacity"},{"import": 1422,"src": 98,"name": "ensureTotalCapacity","kind": "const","type": 111,"value": 121},{"import": 1422,"src": 99,"name": "ensureTotalCapacityPrecise","kind": "const","type": 112,"value": 122},{"import": 1422,"src": 1091,"name": "ensureUnusedCapacity"},{"import": 1422,"src": 349,"name": "expandToCapacity"},{"import": 1422,"src": 97,"name": "addOne","kind": "const","type": 110,"value": 120},{"import": 1422,"src": 102,"name": "addOneAssumeCapacity","kind": "const","type": 115,"value": 125},{"import": 1422,"src": 1092,"name": "addManyAsArray"},{"import": 1422,"src": 1093,"name": "addManyAsArrayAssumeCapacity"},{"import": 1422,"src": 1094,"name": "pop"},{"import": 1422,"src": 1095,"name": "popOrNull"},{"import": 1422,"src": 100,"name": "allocatedSlice","kind": "const","type": 113,"value": 123},{"import": 1422,"src": 1096,"name": "unusedCapacitySlice"},{"import": 1422,"src": 1097,"name": "Self","kind": "const","type": 709,"value": 747},{"import": 1422,"src": 1098,"name": "appendWrite"},{"import": 1422,"src": 1063,"name": "Slice","kind": "const","type": 709,"value": 847},{"import": 1422,"src": 70,"name": "init","kind": "const","type": 69,"value": 76},{"import": 1422,"src": 346,"name": "initCapacity"},{"import": 1422,"src": 96,"name": "deinit"},{"import": 1422,"src": 1064,"name": "span"},{"import": 1422,"src": 1065,"name": "toSlice"},{"import": 1422,"src": 1066,"name": "toSliceConst"},{"import": 1422,"src": 1067,"name": "at"},{"import": 1422,"src": 1068,"name": "ptrAt"},{"import": 1422,"src": 1069,"name": "setOrError"},{"import": 1422,"src": 1070,"name": "set"},{"import": 1422,"src": 1071,"name": "swapRemoveOrError"},{"import": 1422,"src": 1072,"name": "fromOwnedSlice"},{"import": 1422,"src": 1073,"name": "toUnmanaged"},{"import": 1422,"src": 1074,"name": "moveToUnmanaged"},{"import": 1422,"src": 147,"name": "toOwnedSlice"},{"import": 1422,"src": 1075,"name": "toOwnedSliceSentinel"},{"import": 1422,"src": 1076,"name": "insert"},{"import": 1422,"src": 1077,"name": "insertSlice"},{"import": 1422,"src": 1078,"name": "replaceRange"},{"import": 1422,"src": 92,"name": "append","kind": "const","type": 147,"value": 157},{"import": 1422,"src": 1079,"name": "appendAssumeCapacity"},{"import": 1422,"src": 1080,"name": "orderedRemove"},{"import": 1422,"src": 1081,"name": "swapRemove"},{"import": 1422,"src": 1082,"name": "appendSlice"},{"import": 1422,"src": 1083,"name": "appendSliceAssumeCapacity"},{"import": 1422,"src": 1084,"name": "Writer"},{"import": 1422,"src": 1085,"name": "writer"},{"import": 1422,"src": 1086,"name": "appendNTimes"},{"import": 1422,"src": 1087,"name": "appendNTimesAssumeCapacity"},{"import": 1422,"src": 105,"name": "resize"},{"import": 1422,"src": 350,"name": "shrinkAndFree"},{"import": 1422,"src": 146,"name": "shrinkRetainingCapacity"},{"import": 1422,"src": 1088,"name": "clearRetainingCapacity"},{"import": 1422,"src": 1089,"name": "clearAndFree"},{"import": 1422,"src": 1090,"name": "ensureCapacity"},{"import": 1422,"src": 98,"name": "ensureTotalCapacity","kind": "const","type": 149,"value": 159},{"import": 1422,"src": 99,"name": "ensureTotalCapacityPrecise","kind": "const","type": 150,"value": 160},{"import": 1422,"src": 1091,"name": "ensureUnusedCapacity"},{"import": 1422,"src": 349,"name": "expandToCapacity"},{"import": 1422,"src": 97,"name": "addOne","kind": "const","type": 148,"value": 158},{"import": 1422,"src": 102,"name": "addOneAssumeCapacity","kind": "const","type": 153,"value": 163},{"import": 1422,"src": 1092,"name": "addManyAsArray"},{"import": 1422,"src": 1093,"name": "addManyAsArrayAssumeCapacity"},{"import": 1422,"src": 1094,"name": "pop"},{"import": 1422,"src": 1095,"name": "popOrNull"},{"import": 1422,"src": 100,"name": "allocatedSlice","kind": "const","type": 151,"value": 161},{"import": 1422,"src": 1096,"name": "unusedCapacitySlice"},{"import": 1422,"src": 1097,"name": "Self","kind": "const","type": 709,"value": 749},{"import": 1422,"src": 1098,"name": "appendWrite"},{"import": 1422,"src": 1063,"name": "Slice","kind": "const","type": 709,"value": 845},{"import": 1422,"src": 70,"name": "init","kind": "const","type": 124,"value": 134},{"import": 1422,"src": 346,"name": "initCapacity"},{"import": 1422,"src": 96,"name": "deinit","kind": "const","type": 134,"value": 144},{"import": 1422,"src": 1064,"name": "span"},{"import": 1422,"src": 1065,"name": "toSlice"},{"import": 1422,"src": 1066,"name": "toSliceConst"},{"import": 1422,"src": 1067,"name": "at"},{"import": 1422,"src": 1068,"name": "ptrAt"},{"import": 1422,"src": 1069,"name": "setOrError"},{"import": 1422,"src": 1070,"name": "set"},{"import": 1422,"src": 1071,"name": "swapRemoveOrError"},{"import": 1422,"src": 1072,"name": "fromOwnedSlice"},{"import": 1422,"src": 1073,"name": "toUnmanaged"},{"import": 1422,"src": 1074,"name": "moveToUnmanaged"},{"import": 1422,"src": 147,"name": "toOwnedSlice"},{"import": 1422,"src": 1075,"name": "toOwnedSliceSentinel"},{"import": 1422,"src": 1076,"name": "insert"},{"import": 1422,"src": 1077,"name": "insertSlice"},{"import": 1422,"src": 1078,"name": "replaceRange"},{"import": 1422,"src": 92,"name": "append"},{"import": 1422,"src": 1079,"name": "appendAssumeCapacity"},{"import": 1422,"src": 1080,"name": "orderedRemove"},{"import": 1422,"src": 1081,"name": "swapRemove"},{"import": 1422,"src": 1082,"name": "appendSlice"},{"import": 1422,"src": 1083,"name": "appendSliceAssumeCapacity"},{"import": 1422,"src": 1084,"name": "Writer"},{"import": 1422,"src": 1085,"name": "writer"},{"import": 1422,"src": 1086,"name": "appendNTimes"},{"import": 1422,"src": 1087,"name": "appendNTimesAssumeCapacity"},{"import": 1422,"src": 105,"name": "resize","kind": "const","type": 125,"value": 135},{"import": 1422,"src": 350,"name": "shrinkAndFree"},{"import": 1422,"src": 146,"name": "shrinkRetainingCapacity"},{"import": 1422,"src": 1088,"name": "clearRetainingCapacity"},{"import": 1422,"src": 1089,"name": "clearAndFree"},{"import": 1422,"src": 1090,"name": "ensureCapacity"},{"import": 1422,"src": 98,"name": "ensureTotalCapacity","kind": "const","type": 126,"value": 136},{"import": 1422,"src": 99,"name": "ensureTotalCapacityPrecise","kind": "const","type": 127,"value": 137},{"import": 1422,"src": 1091,"name": "ensureUnusedCapacity"},{"import": 1422,"src": 349,"name": "expandToCapacity"},{"import": 1422,"src": 97,"name": "addOne"},{"import": 1422,"src": 102,"name": "addOneAssumeCapacity"},{"import": 1422,"src": 1092,"name": "addManyAsArray"},{"import": 1422,"src": 1093,"name": "addManyAsArrayAssumeCapacity"},{"import": 1422,"src": 1094,"name": "pop"},{"import": 1422,"src": 1095,"name": "popOrNull"},{"import": 1422,"src": 100,"name": "allocatedSlice","kind": "const","type": 128,"value": 138},{"import": 1422,"src": 1096,"name": "unusedCapacitySlice"},{"import": 1422,"src": 1097,"name": "Self","kind": "const","type": 709,"value": 751},{"import": 1422,"src": 1098,"name": "appendWrite"},{"import": 1422,"src": 1063,"name": "Slice","kind": "const","type": 709,"value": 846},{"import": 1422,"src": 70,"name": "init","kind": "const","type": 70,"value": 77},{"import": 1422,"src": 346,"name": "initCapacity"},{"import": 1422,"src": 96,"name": "deinit"},{"import": 1422,"src": 1064,"name": "span"},{"import": 1422,"src": 1065,"name": "toSlice"},{"import": 1422,"src": 1066,"name": "toSliceConst"},{"import": 1422,"src": 1067,"name": "at"},{"import": 1422,"src": 1068,"name": "ptrAt"},{"import": 1422,"src": 1069,"name": "setOrError"},{"import": 1422,"src": 1070,"name": "set"},{"import": 1422,"src": 1071,"name": "swapRemoveOrError"},{"import": 1422,"src": 1072,"name": "fromOwnedSlice"},{"import": 1422,"src": 1073,"name": "toUnmanaged"},{"import": 1422,"src": 1074,"name": "moveToUnmanaged"},{"import": 1422,"src": 147,"name": "toOwnedSlice"},{"import": 1422,"src": 1075,"name": "toOwnedSliceSentinel"},{"import": 1422,"src": 1076,"name": "insert"},{"import": 1422,"src": 1077,"name": "insertSlice"},{"import": 1422,"src": 1078,"name": "replaceRange"},{"import": 1422,"src": 92,"name": "append","kind": "const","type": 138,"value": 148},{"import": 1422,"src": 1079,"name": "appendAssumeCapacity"},{"import": 1422,"src": 1080,"name": "orderedRemove"},{"import": 1422,"src": 1081,"name": "swapRemove"},{"import": 1422,"src": 1082,"name": "appendSlice"},{"import": 1422,"src": 1083,"name": "appendSliceAssumeCapacity"},{"import": 1422,"src": 1084,"name": "Writer"},{"import": 1422,"src": 1085,"name": "writer"},{"import": 1422,"src": 1086,"name": "appendNTimes"},{"import": 1422,"src": 1087,"name": "appendNTimesAssumeCapacity"},{"import": 1422,"src": 105,"name": "resize"},{"import": 1422,"src": 350,"name": "shrinkAndFree"},{"import": 1422,"src": 146,"name": "shrinkRetainingCapacity"},{"import": 1422,"src": 1088,"name": "clearRetainingCapacity"},{"import": 1422,"src": 1089,"name": "clearAndFree"},{"import": 1422,"src": 1090,"name": "ensureCapacity"},{"import": 1422,"src": 98,"name": "ensureTotalCapacity","kind": "const","type": 140,"value": 150},{"import": 1422,"src": 99,"name": "ensureTotalCapacityPrecise","kind": "const","type": 141,"value": 151},{"import": 1422,"src": 1091,"name": "ensureUnusedCapacity"},{"import": 1422,"src": 349,"name": "expandToCapacity"},{"import": 1422,"src": 97,"name": "addOne","kind": "const","type": 139,"value": 149},{"import": 1422,"src": 102,"name": "addOneAssumeCapacity","kind": "const","type": 144,"value": 154},{"import": 1422,"src": 1092,"name": "addManyAsArray"},{"import": 1422,"src": 1093,"name": "addManyAsArrayAssumeCapacity"},{"import": 1422,"src": 1094,"name": "pop"},{"import": 1422,"src": 1095,"name": "popOrNull"},{"import": 1422,"src": 100,"name": "allocatedSlice","kind": "const","type": 142,"value": 152},{"import": 1422,"src": 1096,"name": "unusedCapacitySlice"},{"import": 1422,"src": 1097,"name": "Self","kind": "const","type": 709,"value": 753},{"import": 1422,"src": 1098,"name": "appendWrite"},{"import": 1403,"src": 48,"name": "isDarwin","kind": "const","type": 46,"value": 53},{"import": 1403,"src": 1099,"name": "isBSD"},{"import": 1403,"src": 1100,"name": "dynamicLibSuffix"},{"import": 1403,"src": 1101,"name": "defaultVersionRange"},{"import": 1403,"src": 1102,"name": "Os","kind": "const","type": 709,"value": 1426},{"import": 1403,"src": 1103,"name": "aarch64"},{"import": 1403,"src": 1104,"name": "arc"},{"import": 1403,"src": 1105,"name": "amdgpu"},{"import": 1403,"src": 1106,"name": "arm"},{"import": 1403,"src": 1107,"name": "avr"},{"import": 1403,"src": 1108,"name": "bpf"},{"import": 1403,"src": 1109,"name": "hexagon"},{"import": 1403,"src": 1110,"name": "mips"},{"import": 1403,"src": 1111,"name": "msp430"},{"import": 1403,"src": 1112,"name": "nvptx"},{"import": 1403,"src": 1113,"name": "powerpc"},{"import": 1403,"src": 1114,"name": "riscv"},{"import": 1403,"src": 1115,"name": "sparc"},{"import": 1403,"src": 1116,"name": "spirv"},{"import": 1403,"src": 1117,"name": "systemz"},{"import": 1403,"src": 1118,"name": "ve"},{"import": 1403,"src": 1119,"name": "wasm"},{"import": 1403,"src": 1120,"name": "x86","kind": "const","type": 709,"value": 1427},{"import": 1403,"src": 1121,"name": "Abi","kind": "const","type": 709,"value": 1428},{"import": 1403,"src": 1122,"name": "ObjectFormat","kind": "const","type": 709,"value": 1429},{"import": 1403,"src": 1123,"name": "SubSystem"},{"import": 1403,"src": 1124,"name": "Cpu","kind": "const","type": 709,"value": 1430},{"import": 1403,"src": 1125,"name": "current"},{"import": 1403,"src": 1126,"name": "stack_align","kind": "const","type": 778,"value": null},{"import": 1403,"src": 1127,"name": "zigTriple"},{"import": 1403,"src": 1128,"name": "linuxTripleSimple"},{"import": 1403,"src": 1129,"name": "linuxTriple"},{"import": 1403,"src": 1130,"name": "exeFileExtSimple"},{"import": 1403,"src": 1131,"name": "exeFileExt"},{"import": 1403,"src": 1132,"name": "staticLibSuffix_os_abi"},{"import": 1403,"src": 1133,"name": "staticLibSuffix"},{"import": 1403,"src": 1134,"name": "dynamicLibSuffix"},{"import": 1403,"src": 1135,"name": "libPrefix_os_abi"},{"import": 1403,"src": 1136,"name": "libPrefix"},{"import": 1403,"src": 1137,"name": "getObjectFormatSimple"},{"import": 1403,"src": 1138,"name": "getObjectFormat"},{"import": 1403,"src": 1139,"name": "isMinGW"},{"import": 1403,"src": 1140,"name": "isGnu"},{"import": 1403,"src": 1141,"name": "isMusl"},{"import": 1403,"src": 1142,"name": "isAndroid"},{"import": 1403,"src": 197,"name": "isWasm","kind": "const","type": 45,"value": 280},{"import": 1403,"src": 47,"name": "isDarwin","kind": "const","type": 45,"value": 52},{"import": 1403,"src": 1143,"name": "isBSD"},{"import": 1403,"src": 1144,"name": "isBpfFreestanding"},{"import": 1403,"src": 1145,"name": "isGnuLibC_os_tag_abi"},{"import": 1403,"src": 1146,"name": "isGnuLibC"},{"import": 1403,"src": 1147,"name": "supportsNewStackCall"},{"import": 1403,"src": 1148,"name": "FloatAbi"},{"import": 1403,"src": 1149,"name": "getFloatAbi"},{"import": 1403,"src": 1150,"name": "hasDynamicLinker"},{"import": 1403,"src": 1151,"name": "DynamicLinker"},{"import": 1403,"src": 1152,"name": "standardDynamicLinkerPath"},{"import": 1403,"src": 1153,"name": "canExecBinariesOf"},{"import": 1403,"src": 1154,"name": "plan9Ext"},{"import": 1403,"src": 1155,"name": "longDoubleIsF128"},{"import": 1431,"src": 1156,"name": "ReadError","kind": "const","type": 709,"value": 772},{"import": 1431,"src": 1157,"name": "WriteError"},{"import": 1431,"src": 1158,"name": "SeekError","kind": "const","type": 709,"value": 775},{"import": 1431,"src": 1159,"name": "GetSeekPosError","kind": "const","type": 709,"value": 776},{"import": 1431,"src": 1160,"name": "Reader","kind": "const","type": 709,"value": 770},{"import": 1431,"src": 1161,"name": "Writer"},{"import": 1431,"src": 1162,"name": "SeekableStream","kind": "const","type": 709,"value": 774},{"import": 1431,"src": 74,"name": "reader","kind": "const","type": 74,"value": 81},{"import": 1431,"src": 434,"name": "writer"},{"import": 1431,"src": 79,"name": "seekableStream","kind": "const","type": 78,"value": 86},{"import": 1431,"src": 73,"name": "read","kind": "const","type": 73,"value": 80},{"import": 1431,"src": 433,"name": "write"},{"import": 1431,"src": 75,"name": "seekTo","kind": "const","type": 75,"value": 82},{"import": 1431,"src": 76,"name": "seekBy","kind": "const","type": 76,"value": 83},{"import": 1431,"src": 78,"name": "getEndPos","kind": "const","type": 77,"value": 85},{"import": 1431,"src": 77,"name": "getPos","kind": "const","type": 77,"value": 84},{"import": 1431,"src": 435,"name": "getWritten"},{"import": 1431,"src": 1163,"name": "reset"},{"import": 1431,"src": 1164,"name": "Self","kind": "const","type": 709,"value": 768},{"import": 1432,"src": 1165,"name": "Error","kind": "const","type": 709,"value": 772},{"import": 1432,"src": 89,"name": "read","kind": "const","type": 85,"value": 102},{"import": 1432,"src": 86,"name": "readAll","kind": "const","type": 85,"value": 93},{"import": 1432,"src": 85,"name": "readNoEof","kind": "const","type": 84,"value": 92},{"import": 1432,"src": 1166,"name": "readAllBuffer"},{"import": 1432,"src": 1167,"name": "readAllArrayList"},{"import": 1432,"src": 348,"name": "readAllArrayListAligned"},{"import": 1432,"src": 1168,"name": "readAllAlloc"},{"import": 1432,"src": 145,"name": "readUntilDelimiterArrayList","kind": "const","type": 193,"value": 206},{"import": 1432,"src": 144,"name": "readUntilDelimiterAlloc","kind": "const","type": 191,"value": 204},{"import": 1432,"src": 1169,"name": "readUntilDelimiter"},{"import": 1432,"src": 1170,"name": "readUntilDelimiterOrEofAlloc"},{"import": 1432,"src": 1171,"name": "readUntilDelimiterOrEof"},{"import": 1432,"src": 1172,"name": "skipUntilDelimiterOrEof"},{"import": 1432,"src": 88,"name": "readByte","kind": "const","type": 93,"value": 101},{"import": 1432,"src": 141,"name": "readByteSigned","kind": "const","type": 180,"value": 193},{"import": 1432,"src": 84,"name": "readBytesNoEof","kind": "const","type": 1433,"value": 920},{"import": 1432,"src": 1173,"name": "readIntNative"},{"import": 1432,"src": 1174,"name": "readIntForeign"},{"import": 1432,"src": 1175,"name": "readIntLittle"},{"import": 1432,"src": 1176,"name": "readIntBig"},{"import": 1432,"src": 83,"name": "readInt","kind": "const","type": 1434,"value": 921},{"import": 1432,"src": 289,"name": "readVarInt","kind": "const","type": 1435,"value": 922},{"import": 1432,"src": 1177,"name": "SkipBytesOptions"},{"import": 1432,"src": 1178,"name": "skipBytes"},{"import": 1432,"src": 1179,"name": "isBytes"},{"import": 1432,"src": 1180,"name": "readStruct"},{"import": 1432,"src": 1181,"name": "readEnum"},{"import": 1432,"src": 1182,"name": "Self","kind": "const","type": 709,"value": 770},{"import": 1436,"src": 1183,"name": "SeekError","kind": "const","type": 709,"value": 775},{"import": 1436,"src": 1184,"name": "GetSeekPosError","kind": "const","type": 709,"value": 776},{"import": 1436,"src": 81,"name": "seekTo","kind": "const","type": 80,"value": 88},{"import": 1436,"src": 149,"name": "seekBy","kind": "const","type": 215,"value": 228},{"import": 1436,"src": 80,"name": "getEndPos","kind": "const","type": 79,"value": 87},{"import": 1436,"src": 90,"name": "getPos","kind": "const","type": 79,"value": 103},{"import": 1436,"src": 1185,"name": "Self","kind": "const","type": 709,"value": 774},{"import": 1422,"src": 1063,"name": "Slice","kind": "const","type": 709,"value": 852},{"import": 1422,"src": 70,"name": "init","kind": "const","type": 183,"value": 196},{"import": 1422,"src": 346,"name": "initCapacity"},{"import": 1422,"src": 96,"name": "deinit"},{"import": 1422,"src": 1064,"name": "span"},{"import": 1422,"src": 1065,"name": "toSlice"},{"import": 1422,"src": 1066,"name": "toSliceConst"},{"import": 1422,"src": 1067,"name": "at"},{"import": 1422,"src": 1068,"name": "ptrAt"},{"import": 1422,"src": 1069,"name": "setOrError"},{"import": 1422,"src": 1070,"name": "set"},{"import": 1422,"src": 1071,"name": "swapRemoveOrError"},{"import": 1422,"src": 1072,"name": "fromOwnedSlice"},{"import": 1422,"src": 1073,"name": "toUnmanaged"},{"import": 1422,"src": 1074,"name": "moveToUnmanaged"},{"import": 1422,"src": 147,"name": "toOwnedSlice"},{"import": 1422,"src": 1075,"name": "toOwnedSliceSentinel"},{"import": 1422,"src": 1076,"name": "insert"},{"import": 1422,"src": 1077,"name": "insertSlice"},{"import": 1422,"src": 1078,"name": "replaceRange"},{"import": 1422,"src": 92,"name": "append","kind": "const","type": 184,"value": 197},{"import": 1422,"src": 1079,"name": "appendAssumeCapacity"},{"import": 1422,"src": 1080,"name": "orderedRemove"},{"import": 1422,"src": 1081,"name": "swapRemove"},{"import": 1422,"src": 1082,"name": "appendSlice"},{"import": 1422,"src": 1083,"name": "appendSliceAssumeCapacity"},{"import": 1422,"src": 1084,"name": "Writer"},{"import": 1422,"src": 1085,"name": "writer"},{"import": 1422,"src": 1086,"name": "appendNTimes"},{"import": 1422,"src": 1087,"name": "appendNTimesAssumeCapacity"},{"import": 1422,"src": 105,"name": "resize"},{"import": 1422,"src": 350,"name": "shrinkAndFree"},{"import": 1422,"src": 146,"name": "shrinkRetainingCapacity"},{"import": 1422,"src": 1088,"name": "clearRetainingCapacity"},{"import": 1422,"src": 1089,"name": "clearAndFree"},{"import": 1422,"src": 1090,"name": "ensureCapacity"},{"import": 1422,"src": 98,"name": "ensureTotalCapacity","kind": "const","type": 186,"value": 199},{"import": 1422,"src": 99,"name": "ensureTotalCapacityPrecise","kind": "const","type": 187,"value": 200},{"import": 1422,"src": 1091,"name": "ensureUnusedCapacity"},{"import": 1422,"src": 349,"name": "expandToCapacity"},{"import": 1422,"src": 97,"name": "addOne","kind": "const","type": 185,"value": 198},{"import": 1422,"src": 102,"name": "addOneAssumeCapacity","kind": "const","type": 190,"value": 203},{"import": 1422,"src": 1092,"name": "addManyAsArray"},{"import": 1422,"src": 1093,"name": "addManyAsArrayAssumeCapacity"},{"import": 1422,"src": 1094,"name": "pop"},{"import": 1422,"src": 1095,"name": "popOrNull"},{"import": 1422,"src": 100,"name": "allocatedSlice","kind": "const","type": 188,"value": 201},{"import": 1422,"src": 1096,"name": "unusedCapacitySlice"},{"import": 1422,"src": 1097,"name": "Self","kind": "const","type": 709,"value": 781},{"import": 1422,"src": 1098,"name": "appendWrite"},{"import": 1422,"src": 1063,"name": "Slice","kind": "const","type": 709,"value": 811},{"import": 1422,"src": 70,"name": "init","kind": "const","type": 192,"value": 205},{"import": 1422,"src": 346,"name": "initCapacity","kind": "const","type": 481,"value": 545},{"import": 1422,"src": 96,"name": "deinit","kind": "const","type": 202,"value": 215},{"import": 1422,"src": 1064,"name": "span"},{"import": 1422,"src": 1065,"name": "toSlice"},{"import": 1422,"src": 1066,"name": "toSliceConst"},{"import": 1422,"src": 1067,"name": "at"},{"import": 1422,"src": 1068,"name": "ptrAt"},{"import": 1422,"src": 1069,"name": "setOrError"},{"import": 1422,"src": 1070,"name": "set"},{"import": 1422,"src": 1071,"name": "swapRemoveOrError"},{"import": 1422,"src": 1072,"name": "fromOwnedSlice"},{"import": 1422,"src": 1073,"name": "toUnmanaged"},{"import": 1422,"src": 1074,"name": "moveToUnmanaged"},{"import": 1422,"src": 147,"name": "toOwnedSlice","kind": "const","type": 203,"value": 216},{"import": 1422,"src": 1075,"name": "toOwnedSliceSentinel"},{"import": 1422,"src": 1076,"name": "insert"},{"import": 1422,"src": 1077,"name": "insertSlice"},{"import": 1422,"src": 1078,"name": "replaceRange"},{"import": 1422,"src": 92,"name": "append","kind": "const","type": 195,"value": 208},{"import": 1422,"src": 1079,"name": "appendAssumeCapacity"},{"import": 1422,"src": 1080,"name": "orderedRemove"},{"import": 1422,"src": 1081,"name": "swapRemove"},{"import": 1422,"src": 1082,"name": "appendSlice"},{"import": 1422,"src": 1083,"name": "appendSliceAssumeCapacity"},{"import": 1422,"src": 1084,"name": "Writer"},{"import": 1422,"src": 1085,"name": "writer"},{"import": 1422,"src": 1086,"name": "appendNTimes"},{"import": 1422,"src": 1087,"name": "appendNTimesAssumeCapacity"},{"import": 1422,"src": 105,"name": "resize"},{"import": 1422,"src": 350,"name": "shrinkAndFree","kind": "const","type": 194,"value": 551},{"import": 1422,"src": 146,"name": "shrinkRetainingCapacity","kind": "const","type": 194,"value": 207},{"import": 1422,"src": 1088,"name": "clearRetainingCapacity"},{"import": 1422,"src": 1089,"name": "clearAndFree"},{"import": 1422,"src": 1090,"name": "ensureCapacity"},{"import": 1422,"src": 98,"name": "ensureTotalCapacity","kind": "const","type": 197,"value": 210},{"import": 1422,"src": 99,"name": "ensureTotalCapacityPrecise","kind": "const","type": 198,"value": 211},{"import": 1422,"src": 1091,"name": "ensureUnusedCapacity"},{"import": 1422,"src": 349,"name": "expandToCapacity","kind": "const","type": 484,"value": 549},{"import": 1422,"src": 97,"name": "addOne","kind": "const","type": 196,"value": 209},{"import": 1422,"src": 102,"name": "addOneAssumeCapacity","kind": "const","type": 201,"value": 214},{"import": 1422,"src": 1092,"name": "addManyAsArray"},{"import": 1422,"src": 1093,"name": "addManyAsArrayAssumeCapacity"},{"import": 1422,"src": 1094,"name": "pop"},{"import": 1422,"src": 1095,"name": "popOrNull"},{"import": 1422,"src": 100,"name": "allocatedSlice","kind": "const","type": 199,"value": 212},{"import": 1422,"src": 1096,"name": "unusedCapacitySlice"},{"import": 1422,"src": 1097,"name": "Self","kind": "const","type": 709,"value": 782},{"import": 1422,"src": 1098,"name": "appendWrite"},{"import": 1422,"src": 1063,"name": "Slice","kind": "const","type": 709,"value": 853},{"import": 1422,"src": 70,"name": "init","kind": "const","type": 204,"value": 217},{"import": 1422,"src": 346,"name": "initCapacity"},{"import": 1422,"src": 96,"name": "deinit"},{"import": 1422,"src": 1064,"name": "span"},{"import": 1422,"src": 1065,"name": "toSlice"},{"import": 1422,"src": 1066,"name": "toSliceConst"},{"import": 1422,"src": 1067,"name": "at"},{"import": 1422,"src": 1068,"name": "ptrAt"},{"import": 1422,"src": 1069,"name": "setOrError"},{"import": 1422,"src": 1070,"name": "set"},{"import": 1422,"src": 1071,"name": "swapRemoveOrError"},{"import": 1422,"src": 1072,"name": "fromOwnedSlice"},{"import": 1422,"src": 1073,"name": "toUnmanaged"},{"import": 1422,"src": 1074,"name": "moveToUnmanaged"},{"import": 1422,"src": 147,"name": "toOwnedSlice"},{"import": 1422,"src": 1075,"name": "toOwnedSliceSentinel"},{"import": 1422,"src": 1076,"name": "insert"},{"import": 1422,"src": 1077,"name": "insertSlice"},{"import": 1422,"src": 1078,"name": "replaceRange"},{"import": 1422,"src": 92,"name": "append","kind": "const","type": 207,"value": 220},{"import": 1422,"src": 1079,"name": "appendAssumeCapacity"},{"import": 1422,"src": 1080,"name": "orderedRemove"},{"import": 1422,"src": 1081,"name": "swapRemove"},{"import": 1422,"src": 1082,"name": "appendSlice"},{"import": 1422,"src": 1083,"name": "appendSliceAssumeCapacity"},{"import": 1422,"src": 1084,"name": "Writer"},{"import": 1422,"src": 1085,"name": "writer"},{"import": 1422,"src": 1086,"name": "appendNTimes"},{"import": 1422,"src": 1087,"name": "appendNTimesAssumeCapacity"},{"import": 1422,"src": 105,"name": "resize"},{"import": 1422,"src": 350,"name": "shrinkAndFree"},{"import": 1422,"src": 146,"name": "shrinkRetainingCapacity"},{"import": 1422,"src": 1088,"name": "clearRetainingCapacity"},{"import": 1422,"src": 1089,"name": "clearAndFree"},{"import": 1422,"src": 1090,"name": "ensureCapacity"},{"import": 1422,"src": 98,"name": "ensureTotalCapacity","kind": "const","type": 209,"value": 222},{"import": 1422,"src": 99,"name": "ensureTotalCapacityPrecise","kind": "const","type": 210,"value": 223},{"import": 1422,"src": 1091,"name": "ensureUnusedCapacity"},{"import": 1422,"src": 349,"name": "expandToCapacity"},{"import": 1422,"src": 97,"name": "addOne","kind": "const","type": 208,"value": 221},{"import": 1422,"src": 102,"name": "addOneAssumeCapacity","kind": "const","type": 213,"value": 226},{"import": 1422,"src": 1092,"name": "addManyAsArray"},{"import": 1422,"src": 1093,"name": "addManyAsArrayAssumeCapacity"},{"import": 1422,"src": 1094,"name": "pop"},{"import": 1422,"src": 1095,"name": "popOrNull"},{"import": 1422,"src": 100,"name": "allocatedSlice","kind": "const","type": 211,"value": 224},{"import": 1422,"src": 1096,"name": "unusedCapacitySlice"},{"import": 1422,"src": 1097,"name": "Self","kind": "const","type": 709,"value": 783},{"import": 1422,"src": 1098,"name": "appendWrite"},{"import": 1437,"src": 1186,"name": "Int","kind": "const","type": 709,"value": 1438},{"import": 1437,"src": 1187,"name": "Float","kind": "const","type": 709,"value": 1439},{"import": 1437,"src": 1188,"name": "Pointer","kind": "const","type": 709,"value": 1440},{"import": 1437,"src": 1189,"name": "Array","kind": "const","type": 709,"value": 1441},{"import": 1437,"src": 1190,"name": "ContainerLayout","kind": "const","type": 709,"value": 869},{"import": 1437,"src": 1191,"name": "StructField","kind": "const","type": 709,"value": 1442},{"import": 1437,"src": 1192,"name": "Struct","kind": "const","type": 709,"value": 1443},{"import": 1437,"src": 1193,"name": "Optional","kind": "const","type": 709,"value": 1444},{"import": 1437,"src": 1194,"name": "ErrorUnion","kind": "const","type": 709,"value": 1445},{"import": 1437,"src": 1195,"name": "Error","kind": "const","type": 709,"value": 1446},{"import": 1437,"src": 1196,"name": "ErrorSet","kind": "const","type": 709,"value": 1447},{"import": 1437,"src": 1197,"name": "EnumField","kind": "const","type": 709,"value": 1448},{"import": 1437,"src": 1198,"name": "Enum","kind": "const","type": 709,"value": 1449},{"import": 1437,"src": 1199,"name": "UnionField","kind": "const","type": 709,"value": 1450},{"import": 1437,"src": 1200,"name": "Union","kind": "const","type": 709,"value": 1451},{"import": 1437,"src": 1201,"name": "FnArg","kind": "const","type": 709,"value": 1452},{"import": 1437,"src": 1202,"name": "Fn","kind": "const","type": 709,"value": 1453},{"import": 1437,"src": 1203,"name": "Opaque","kind": "const","type": 709,"value": 1454},{"import": 1437,"src": 1204,"name": "Frame","kind": "const","type": 709,"value": 1455},{"import": 1437,"src": 1205,"name": "AnyFrame","kind": "const","type": 709,"value": 1456},{"import": 1437,"src": 1206,"name": "Vector","kind": "const","type": 709,"value": 1457},{"import": 1437,"src": 1207,"name": "Declaration","kind": "const","type": 709,"value": 1458},{"import": 1459,"src": 1208,"name": "Node","kind": "const","type": 709,"value": 1460},{"import": 1459,"src": 309,"name": "prepend","kind": "const","type": 436,"value": 482},{"import": 1459,"src": 1209,"name": "remove"},{"import": 1459,"src": 1210,"name": "popFirst"},{"import": 1459,"src": 1211,"name": "len"},{"import": 1459,"src": 1212,"name": "Self","kind": "const","type": 709,"value": 810},{"import": 1462,"src": 1213,"name": "Self"},{"import": 1462,"src": 1214,"name": "Node","kind": "const","type": 709,"value": 1463},{"import": 1462,"src": 1215,"name": "init"},{"import": 1462,"src": 1216,"name": "put"},{"import": 1462,"src": 1217,"name": "get"},{"import": 1462,"src": 1218,"name": "unget"},{"import": 1462,"src": 1219,"name": "remove"},{"import": 1462,"src": 1220,"name": "isEmpty"},{"import": 1462,"src": 1221,"name": "dump"},{"import": 1462,"src": 1222,"name": "dumpToStream"},{"import": 1459,"src": 1223,"name": "Node","kind": "const","type": 709,"value": 1463},{"import": 1459,"src": 1224,"name": "insertAfter"},{"import": 1459,"src": 1225,"name": "insertBefore"},{"import": 1459,"src": 1226,"name": "concatByMoving"},{"import": 1459,"src": 1227,"name": "append"},{"import": 1459,"src": 1228,"name": "prepend"},{"import": 1459,"src": 1229,"name": "remove"},{"import": 1459,"src": 1230,"name": "pop"},{"import": 1459,"src": 1231,"name": "popFirst"},{"import": 1459,"src": 1232,"name": "Self"},{"import": 1466,"src": 1233,"name": "init"},{"import": 1466,"src": 1234,"name": "loadUnchecked"},{"import": 1466,"src": 1235,"name": "storeUnchecked"},{"import": 1466,"src": 1236,"name": "load"},{"import": 1466,"src": 1237,"name": "store"},{"import": 1466,"src": 1238,"name": "swap"},{"import": 1466,"src": 1239,"name": "compareAndSwap"},{"import": 1466,"src": 1240,"name": "tryCompareAndSwap"},{"import": 1466,"src": 1241,"name": "Self"},{"import": 1466,"src": 1242,"name": "cmpxchg"},{"import": 1466,"src": 1243,"name": "rmw"},{"import": 1466,"src": 511,"name": "exportWhen","kind": "const","type": 939,"value": 912},{"import": 1466,"src": 1233,"name": "init"},{"import": 1466,"src": 1234,"name": "loadUnchecked"},{"import": 1466,"src": 1235,"name": "storeUnchecked"},{"import": 1466,"src": 1236,"name": "load"},{"import": 1466,"src": 1237,"name": "store"},{"import": 1466,"src": 1238,"name": "swap"},{"import": 1466,"src": 1239,"name": "compareAndSwap"},{"import": 1466,"src": 1240,"name": "tryCompareAndSwap"},{"import": 1466,"src": 1244,"name": "fetchAnd"},{"import": 1466,"src": 1245,"name": "fetchNand"},{"import": 1466,"src": 1246,"name": "fetchOr"},{"import": 1466,"src": 1247,"name": "fetchXor"},{"import": 1466,"src": 1248,"name": "bitSet"},{"import": 1466,"src": 1249,"name": "bitReset"},{"import": 1466,"src": 1250,"name": "bitToggle"},{"import": 1466,"src": 1251,"name": "fetchAdd"},{"import": 1466,"src": 1252,"name": "fetchSub"},{"import": 1466,"src": 1253,"name": "fetchMin"},{"import": 1466,"src": 1254,"name": "fetchMax"},{"import": 1466,"src": 1241,"name": "Self"},{"import": 1466,"src": 1242,"name": "cmpxchg"},{"import": 1466,"src": 1243,"name": "rmw"},{"import": 1466,"src": 511,"name": "exportWhen","kind": "const","type": 945,"value": 914},{"import": 1462,"src": 1213,"name": "Self"},{"import": 1462,"src": 1214,"name": "Node","kind": "const","type": 709,"value": 1467},{"import": 1462,"src": 1215,"name": "init"},{"import": 1462,"src": 1216,"name": "put"},{"import": 1462,"src": 1217,"name": "get"},{"import": 1462,"src": 1218,"name": "unget"},{"import": 1462,"src": 1219,"name": "remove"},{"import": 1462,"src": 1220,"name": "isEmpty"},{"import": 1462,"src": 1221,"name": "dump"},{"import": 1462,"src": 1222,"name": "dumpToStream"},{"import": 1469,"src": 1255,"name": "Node","kind": "const","type": 709,"value": 1467},{"import": 1469,"src": 1256,"name": "Finish","kind": "const","type": 709,"value": 1470},{"import": 1469,"src": 1257,"name": "Msg","kind": "const","type": 709,"value": 1471},{"import": 1459,"src": 1223,"name": "Node","kind": "const","type": 709,"value": 1467},{"import": 1459,"src": 1224,"name": "insertAfter"},{"import": 1459,"src": 1225,"name": "insertBefore"},{"import": 1459,"src": 1226,"name": "concatByMoving"},{"import": 1459,"src": 1227,"name": "append"},{"import": 1459,"src": 1228,"name": "prepend"},{"import": 1459,"src": 1229,"name": "remove"},{"import": 1459,"src": 1230,"name": "pop"},{"import": 1459,"src": 1231,"name": "popFirst"},{"import": 1459,"src": 1232,"name": "Self"},{"import": 1472,"src": 1258,"name": "Self"},{"import": 1472,"src": 1259,"name": "Node","kind": "const","type": 709,"value": 1473},{"import": 1472,"src": 1260,"name": "init"},{"import": 1472,"src": 1261,"name": "pushFirst"},{"import": 1472,"src": 1262,"name": "push"},{"import": 1472,"src": 1263,"name": "pop"},{"import": 1472,"src": 1264,"name": "isEmpty"},{"import": 1472,"src": 1265,"name": "lock_init","kind": "const","type": 720,"value": "false"},{"import": 1476,"src": 1266,"name": "emerg"},{"import": 1476,"src": 1267,"name": "alert"},{"import": 1476,"src": 1268,"name": "crit"},{"import": 1476,"src": 303,"name": "err","kind": "const","type": 1477,"value": 923},{"import": 1476,"src": 1269,"name": "warn"},{"import": 1476,"src": 1270,"name": "notice"},{"import": 1476,"src": 351,"name": "info","kind": "const","type": 1478,"value": 924},{"import": 1476,"src": 1271,"name": "debug"},{"import": 1432,"src": 1165,"name": "Error","kind": "const","type": 709,"value": 867},{"import": 1432,"src": 89,"name": "read","kind": "const","type": 485,"value": 667},{"import": 1432,"src": 86,"name": "readAll","kind": "const","type": 485,"value": 550},{"import": 1432,"src": 85,"name": "readNoEof"},{"import": 1432,"src": 1166,"name": "readAllBuffer"},{"import": 1432,"src": 1167,"name": "readAllArrayList"},{"import": 1432,"src": 348,"name": "readAllArrayListAligned","kind": "const","type": 1479,"value": 925},{"import": 1432,"src": 1168,"name": "readAllAlloc"},{"import": 1432,"src": 145,"name": "readUntilDelimiterArrayList"},{"import": 1432,"src": 144,"name": "readUntilDelimiterAlloc"},{"import": 1432,"src": 1169,"name": "readUntilDelimiter"},{"import": 1432,"src": 1170,"name": "readUntilDelimiterOrEofAlloc"},{"import": 1432,"src": 1171,"name": "readUntilDelimiterOrEof"},{"import": 1432,"src": 1172,"name": "skipUntilDelimiterOrEof"},{"import": 1432,"src": 88,"name": "readByte"},{"import": 1432,"src": 141,"name": "readByteSigned"},{"import": 1432,"src": 84,"name": "readBytesNoEof"},{"import": 1432,"src": 1173,"name": "readIntNative"},{"import": 1432,"src": 1174,"name": "readIntForeign"},{"import": 1432,"src": 1175,"name": "readIntLittle"},{"import": 1432,"src": 1176,"name": "readIntBig"},{"import": 1432,"src": 83,"name": "readInt"},{"import": 1432,"src": 289,"name": "readVarInt"},{"import": 1432,"src": 1177,"name": "SkipBytesOptions"},{"import": 1432,"src": 1178,"name": "skipBytes"},{"import": 1432,"src": 1179,"name": "isBytes"},{"import": 1432,"src": 1180,"name": "readStruct"},{"import": 1432,"src": 1181,"name": "readEnum"},{"import": 1432,"src": 1182,"name": "Self","kind": "const","type": 709,"value": 866},{"import": 1480,"src": 281,"name": "atime","kind": "const","type": 370,"value": 405},{"import": 1480,"src": 282,"name": "mtime","kind": "const","type": 370,"value": 406},{"import": 1480,"src": 283,"name": "ctime","kind": "const","type": 370,"value": 407},{"import": 1482,"src": 363,"name": "next","kind": "const","type": 501,"value": 579},{"import": 1482,"src": 1272,"name": "rest"},{"import": 1482,"src": 1273,"name": "Self","kind": "const","type": 709,"value": 876},{"import": 1483,"src": 366,"name": "next","kind": "const","type": 504,"value": 582},{"import": 1483,"src": 1274,"name": "Self","kind": "const","type": 709,"value": 878},{"import": 1483,"src": 1275,"name": "Item","kind": "const","type": 709,"value": 1484},{"import": 1482,"src": 370,"name": "next","kind": "const","type": 509,"value": 588},{"import": 1482,"src": 1276,"name": "rest"},{"import": 1482,"src": 1277,"name": "reset"},{"import": 1482,"src": 1278,"name": "Self","kind": "const","type": 709,"value": 880},{"import": 1482,"src": 398,"name": "isSplitByte","kind": "const","type": 597,"value": 692},{"import": 1422,"src": 1063,"name": "Slice","kind": "const","type": 709,"value": 915},{"import": 1422,"src": 70,"name": "init","kind": "const","type": 507,"value": 586},{"import": 1422,"src": 346,"name": "initCapacity"},{"import": 1422,"src": 96,"name": "deinit","kind": "const","type": 517,"value": 596},{"import": 1422,"src": 1064,"name": "span"},{"import": 1422,"src": 1065,"name": "toSlice"},{"import": 1422,"src": 1066,"name": "toSliceConst"},{"import": 1422,"src": 1067,"name": "at"},{"import": 1422,"src": 1068,"name": "ptrAt"},{"import": 1422,"src": 1069,"name": "setOrError"},{"import": 1422,"src": 1070,"name": "set"},{"import": 1422,"src": 1071,"name": "swapRemoveOrError"},{"import": 1422,"src": 1072,"name": "fromOwnedSlice"},{"import": 1422,"src": 1073,"name": "toUnmanaged"},{"import": 1422,"src": 1074,"name": "moveToUnmanaged"},{"import": 1422,"src": 147,"name": "toOwnedSlice"},{"import": 1422,"src": 1075,"name": "toOwnedSliceSentinel"},{"import": 1422,"src": 1076,"name": "insert"},{"import": 1422,"src": 1077,"name": "insertSlice"},{"import": 1422,"src": 1078,"name": "replaceRange"},{"import": 1422,"src": 92,"name": "append","kind": "const","type": 510,"value": 589},{"import": 1422,"src": 1079,"name": "appendAssumeCapacity"},{"import": 1422,"src": 1080,"name": "orderedRemove"},{"import": 1422,"src": 1081,"name": "swapRemove"},{"import": 1422,"src": 1082,"name": "appendSlice"},{"import": 1422,"src": 1083,"name": "appendSliceAssumeCapacity"},{"import": 1422,"src": 1084,"name": "Writer"},{"import": 1422,"src": 1085,"name": "writer"},{"import": 1422,"src": 1086,"name": "appendNTimes"},{"import": 1422,"src": 1087,"name": "appendNTimesAssumeCapacity"},{"import": 1422,"src": 105,"name": "resize"},{"import": 1422,"src": 350,"name": "shrinkAndFree"},{"import": 1422,"src": 146,"name": "shrinkRetainingCapacity"},{"import": 1422,"src": 1088,"name": "clearRetainingCapacity"},{"import": 1422,"src": 1089,"name": "clearAndFree"},{"import": 1422,"src": 1090,"name": "ensureCapacity"},{"import": 1422,"src": 98,"name": "ensureTotalCapacity","kind": "const","type": 512,"value": 591},{"import": 1422,"src": 99,"name": "ensureTotalCapacityPrecise","kind": "const","type": 513,"value": 592},{"import": 1422,"src": 1091,"name": "ensureUnusedCapacity"},{"import": 1422,"src": 349,"name": "expandToCapacity"},{"import": 1422,"src": 97,"name": "addOne","kind": "const","type": 511,"value": 590},{"import": 1422,"src": 102,"name": "addOneAssumeCapacity","kind": "const","type": 516,"value": 595},{"import": 1422,"src": 1092,"name": "addManyAsArray"},{"import": 1422,"src": 1093,"name": "addManyAsArrayAssumeCapacity"},{"import": 1422,"src": 1094,"name": "pop"},{"import": 1422,"src": 1095,"name": "popOrNull"},{"import": 1422,"src": 100,"name": "allocatedSlice","kind": "const","type": 514,"value": 593},{"import": 1422,"src": 1096,"name": "unusedCapacitySlice"},{"import": 1422,"src": 1097,"name": "Self","kind": "const","type": 709,"value": 881},{"import": 1422,"src": 1098,"name": "appendWrite"},{"import": 1485,"src": 1279,"name": "Self","kind": "const","type": 709,"value": 882},{"import": 1485,"src": 369,"name": "init","kind": "const","type": 508,"value": 587},{"import": 1485,"src": 371,"name": "mark","kind": "const","type": 518,"value": 597},{"import": 1485,"src": 399,"name": "row_marked","kind": "const","type": 600,"value": 695},{"import": 1485,"src": 400,"name": "col_marked","kind": "const","type": 600,"value": 696},{"import": 1485,"src": 401,"name": "unmarked_sum","kind": "const","type": 601,"value": 697},{"import": 1415,"src": 951,"name": "hash","kind": "const","type": 519,"value": 598},{"import": 1415,"src": 952,"name": "eql","kind": "const","type": 520,"value": 599},{"import": 1415,"src": 953,"name": "Unmanaged","kind": "const","type": 709,"value": 886},{"import": 1415,"src": 954,"name": "Entry"},{"import": 1415,"src": 955,"name": "KV"},{"import": 1415,"src": 956,"name": "Hash"},{"import": 1415,"src": 957,"name": "Iterator"},{"import": 1415,"src": 958,"name": "KeyIterator"},{"import": 1415,"src": 959,"name": "ValueIterator","kind": "const","type": 709,"value": 898},{"import": 1415,"src": 960,"name": "Size"},{"import": 1415,"src": 961,"name": "GetOrPutResult","kind": "const","type": 709,"value": 1316},{"import": 1415,"src": 264,"name": "init","kind": "const","type": 604,"value": 700},{"import": 1415,"src": 962,"name": "initContext"},{"import": 1415,"src": 384,"name": "deinit","kind": "const","type": 609,"value": 708},{"import": 1415,"src": 963,"name": "clearRetainingCapacity"},{"import": 1415,"src": 964,"name": "clearAndFree"},{"import": 1415,"src": 965,"name": "count"},{"import": 1415,"src": 966,"name": "iterator"},{"import": 1415,"src": 967,"name": "keyIterator"},{"import": 1415,"src": 402,"name": "valueIterator","kind": "const","type": 610,"value": 709},{"import": 1415,"src": 374,"name": "getOrPut","kind": "const","type": 524,"value": 604},{"import": 1415,"src": 968,"name": "getOrPutAdapted"},{"import": 1415,"src": 969,"name": "getOrPutAssumeCapacity"},{"import": 1415,"src": 970,"name": "getOrPutAssumeCapacityAdapted"},{"import": 1415,"src": 971,"name": "getOrPutValue"},{"import": 1415,"src": 972,"name": "ensureCapacity"},{"import": 1415,"src": 973,"name": "ensureTotalCapacity"},{"import": 1415,"src": 974,"name": "ensureUnusedCapacity"},{"import": 1415,"src": 975,"name": "capacity"},{"import": 1415,"src": 385,"name": "put"},{"import": 1415,"src": 114,"name": "putNoClobber"},{"import": 1415,"src": 976,"name": "putAssumeCapacity"},{"import": 1415,"src": 977,"name": "putAssumeCapacityNoClobber"},{"import": 1415,"src": 978,"name": "fetchPut"},{"import": 1415,"src": 979,"name": "fetchPutAssumeCapacity"},{"import": 1415,"src": 980,"name": "fetchRemove"},{"import": 1415,"src": 981,"name": "fetchRemoveAdapted"},{"import": 1415,"src": 52,"name": "get"},{"import": 1415,"src": 982,"name": "getAdapted"},{"import": 1415,"src": 983,"name": "getPtr"},{"import": 1415,"src": 984,"name": "getPtrAdapted"},{"import": 1415,"src": 985,"name": "getKey"},{"import": 1415,"src": 986,"name": "getKeyAdapted"},{"import": 1415,"src": 987,"name": "getKeyPtr"},{"import": 1415,"src": 988,"name": "getKeyPtrAdapted"},{"import": 1415,"src": 989,"name": "getEntry"},{"import": 1415,"src": 990,"name": "getEntryAdapted"},{"import": 1415,"src": 991,"name": "contains"},{"import": 1415,"src": 992,"name": "containsAdapted"},{"import": 1415,"src": 993,"name": "remove"},{"import": 1415,"src": 994,"name": "removeAdapted"},{"import": 1415,"src": 995,"name": "clone"},{"import": 1415,"src": 996,"name": "cloneWithAllocator"},{"import": 1415,"src": 997,"name": "cloneWithContext"},{"import": 1415,"src": 998,"name": "cloneWithAllocatorAndContext"},{"import": 1415,"src": 999,"name": "Self","kind": "const","type": 709,"value": 885},{"import": 1415,"src": 1000,"name": "Size","kind": "const","type": 709,"value": 893},{"import": 1415,"src": 1001,"name": "Hash","kind": "const","type": 709,"value": 732},{"import": 1415,"src": 1002,"name": "Entry"},{"import": 1415,"src": 1003,"name": "KV"},{"import": 1415,"src": 1004,"name": "Iterator"},{"import": 1415,"src": 1005,"name": "KeyIterator"},{"import": 1415,"src": 1006,"name": "ValueIterator","kind": "const","type": 709,"value": 898},{"import": 1415,"src": 1007,"name": "GetOrPutResult","kind": "const","type": 709,"value": 1316},{"import": 1415,"src": 1008,"name": "Managed"},{"import": 1415,"src": 1009,"name": "promote"},{"import": 1415,"src": 1010,"name": "promoteContext"},{"import": 1415,"src": 127,"name": "deinit","kind": "const","type": 532,"value": 614},{"import": 1415,"src": 1011,"name": "ensureCapacity"},{"import": 1415,"src": 1012,"name": "ensureTotalCapacity"},{"import": 1415,"src": 1013,"name": "ensureTotalCapacityContext"},{"import": 1415,"src": 1014,"name": "ensureUnusedCapacity"},{"import": 1415,"src": 1015,"name": "ensureUnusedCapacityContext"},{"import": 1415,"src": 1016,"name": "clearRetainingCapacity"},{"import": 1415,"src": 1017,"name": "clearAndFree"},{"import": 1415,"src": 1018,"name": "count"},{"import": 1415,"src": 122,"name": "capacity","kind": "const","type": 529,"value": 611},{"import": 1415,"src": 1019,"name": "iterator"},{"import": 1415,"src": 1020,"name": "keyIterator"},{"import": 1415,"src": 441,"name": "valueIterator","kind": "const","type": 664,"value": 784},{"import": 1415,"src": 1021,"name": "putNoClobber"},{"import": 1415,"src": 115,"name": "putNoClobberContext"},{"import": 1415,"src": 1022,"name": "putAssumeCapacity"},{"import": 1415,"src": 1023,"name": "putAssumeCapacityContext"},{"import": 1415,"src": 1024,"name": "putAssumeCapacityNoClobber"},{"import": 1415,"src": 132,"name": "putAssumeCapacityNoClobberContext","kind": "const","type": 537,"value": 619},{"import": 1415,"src": 1025,"name": "fetchPut"},{"import": 1415,"src": 1026,"name": "fetchPutContext"},{"import": 1415,"src": 1027,"name": "fetchPutAssumeCapacity"},{"import": 1415,"src": 1028,"name": "fetchPutAssumeCapacityContext"},{"import": 1415,"src": 1029,"name": "fetchRemove"},{"import": 1415,"src": 1030,"name": "fetchRemoveContext"},{"import": 1415,"src": 1031,"name": "fetchRemoveAdapted"},{"import": 1415,"src": 1032,"name": "getEntry"},{"import": 1415,"src": 1033,"name": "getEntryContext"},{"import": 1415,"src": 1034,"name": "getEntryAdapted"},{"import": 1415,"src": 1035,"name": "put"},{"import": 1415,"src": 386,"name": "putContext"},{"import": 1415,"src": 1036,"name": "getKeyPtr"},{"import": 1415,"src": 1037,"name": "getKeyPtrContext"},{"import": 1415,"src": 1038,"name": "getKeyPtrAdapted"},{"import": 1415,"src": 1039,"name": "getKey"},{"import": 1415,"src": 1040,"name": "getKeyContext"},{"import": 1415,"src": 1041,"name": "getKeyAdapted"},{"import": 1415,"src": 1042,"name": "getPtr"},{"import": 1415,"src": 1043,"name": "getPtrContext"},{"import": 1415,"src": 1044,"name": "getPtrAdapted"},{"import": 1415,"src": 1045,"name": "get"},{"import": 1415,"src": 207,"name": "getContext"},{"import": 1415,"src": 275,"name": "getAdapted"},{"import": 1415,"src": 1046,"name": "getOrPut"},{"import": 1415,"src": 375,"name": "getOrPutContext","kind": "const","type": 525,"value": 605},{"import": 1415,"src": 1047,"name": "getOrPutAdapted"},{"import": 1415,"src": 376,"name": "getOrPutContextAdapted","kind": "const","type": 1487,"value": 926},{"import": 1415,"src": 1048,"name": "getOrPutAssumeCapacity"},{"import": 1415,"src": 1049,"name": "getOrPutAssumeCapacityContext"},{"import": 1415,"src": 377,"name": "getOrPutAssumeCapacityAdapted","kind": "const","type": 1488,"value": 927},{"import": 1415,"src": 1050,"name": "getOrPutValue"},{"import": 1415,"src": 1051,"name": "getOrPutValueContext"},{"import": 1415,"src": 1052,"name": "contains"},{"import": 1415,"src": 116,"name": "containsContext","kind": "const","type": 607,"value": 704},{"import": 1415,"src": 228,"name": "containsAdapted","kind": "const","type": 1489,"value": 928},{"import": 1415,"src": 1053,"name": "remove"},{"import": 1415,"src": 1054,"name": "removeContext"},{"import": 1415,"src": 1055,"name": "removeAdapted"},{"import": 1415,"src": 1056,"name": "clone"},{"import": 1415,"src": 1057,"name": "cloneContext"},{"import": 1415,"src": 1058,"name": "Self","kind": "const","type": 709,"value": 886},{"import": 1415,"src": 1059,"name": "minimal_capacity","kind": "const","type": 778,"value": null},{"import": 1415,"src": 1060,"name": "Header","kind": "const","type": 709,"value": 1490},{"import": 1415,"src": 1061,"name": "Metadata","kind": "const","type": 709,"value": 1315},{"import": 1415,"src": 504,"name": "FieldIterator","kind": "const","type": 897,"value": 902},{"import": 1415,"src": 1062,"name": "isUnderMaxLoadPercentage"},{"import": 1415,"src": 119,"name": "capacityForSize","kind": "const","type": 159,"value": 609},{"import": 1415,"src": 230,"name": "header","kind": "const","type": 605,"value": 701},{"import": 1415,"src": 129,"name": "keys","kind": "const","type": 534,"value": 616},{"import": 1415,"src": 130,"name": "values","kind": "const","type": 535,"value": 617},{"import": 1415,"src": 291,"name": "getIndex","kind": "const","type": 1491,"value": 929},{"import": 1415,"src": 128,"name": "initMetadatas","kind": "const","type": 533,"value": 615},{"import": 1415,"src": 120,"name": "load","kind": "const","type": 529,"value": 610},{"import": 1415,"src": 117,"name": "growIfNeeded","kind": "const","type": 527,"value": 607},{"import": 1415,"src": 118,"name": "grow","kind": "const","type": 528,"value": 608},{"import": 1415,"src": 124,"name": "allocate","kind": "const","type": 530,"value": 612},{"import": 1415,"src": 232,"name": "deallocate","kind": "const","type": 532,"value": 703},{"import": 1415,"src": 951,"name": "hash","kind": "const","type": 545,"value": 628},{"import": 1415,"src": 952,"name": "eql","kind": "const","type": 546,"value": 629},{"import": 1415,"src": 953,"name": "Unmanaged","kind": "const","type": 709,"value": 890},{"import": 1415,"src": 954,"name": "Entry"},{"import": 1415,"src": 955,"name": "KV"},{"import": 1415,"src": 956,"name": "Hash"},{"import": 1415,"src": 957,"name": "Iterator"},{"import": 1415,"src": 958,"name": "KeyIterator"},{"import": 1415,"src": 959,"name": "ValueIterator"},{"import": 1415,"src": 960,"name": "Size"},{"import": 1415,"src": 961,"name": "GetOrPutResult"},{"import": 1415,"src": 264,"name": "init","kind": "const","type": 547,"value": 630},{"import": 1415,"src": 962,"name": "initContext"},{"import": 1415,"src": 384,"name": "deinit","kind": "const","type": 550,"value": 633},{"import": 1415,"src": 963,"name": "clearRetainingCapacity"},{"import": 1415,"src": 964,"name": "clearAndFree"},{"import": 1415,"src": 965,"name": "count"},{"import": 1415,"src": 966,"name": "iterator"},{"import": 1415,"src": 967,"name": "keyIterator"},{"import": 1415,"src": 402,"name": "valueIterator"},{"import": 1415,"src": 374,"name": "getOrPut"},{"import": 1415,"src": 968,"name": "getOrPutAdapted"},{"import": 1415,"src": 969,"name": "getOrPutAssumeCapacity"},{"import": 1415,"src": 970,"name": "getOrPutAssumeCapacityAdapted"},{"import": 1415,"src": 971,"name": "getOrPutValue"},{"import": 1415,"src": 972,"name": "ensureCapacity"},{"import": 1415,"src": 973,"name": "ensureTotalCapacity"},{"import": 1415,"src": 974,"name": "ensureUnusedCapacity"},{"import": 1415,"src": 975,"name": "capacity"},{"import": 1415,"src": 385,"name": "put","kind": "const","type": 551,"value": 634},{"import": 1415,"src": 114,"name": "putNoClobber"},{"import": 1415,"src": 976,"name": "putAssumeCapacity"},{"import": 1415,"src": 977,"name": "putAssumeCapacityNoClobber"},{"import": 1415,"src": 978,"name": "fetchPut"},{"import": 1415,"src": 979,"name": "fetchPutAssumeCapacity"},{"import": 1415,"src": 980,"name": "fetchRemove"},{"import": 1415,"src": 981,"name": "fetchRemoveAdapted"},{"import": 1415,"src": 52,"name": "get","kind": "const","type": 548,"value": 631},{"import": 1415,"src": 982,"name": "getAdapted"},{"import": 1415,"src": 983,"name": "getPtr"},{"import": 1415,"src": 984,"name": "getPtrAdapted"},{"import": 1415,"src": 985,"name": "getKey"},{"import": 1415,"src": 986,"name": "getKeyAdapted"},{"import": 1415,"src": 987,"name": "getKeyPtr"},{"import": 1415,"src": 988,"name": "getKeyPtrAdapted"},{"import": 1415,"src": 989,"name": "getEntry"},{"import": 1415,"src": 990,"name": "getEntryAdapted"},{"import": 1415,"src": 991,"name": "contains"},{"import": 1415,"src": 992,"name": "containsAdapted"},{"import": 1415,"src": 993,"name": "remove"},{"import": 1415,"src": 994,"name": "removeAdapted"},{"import": 1415,"src": 995,"name": "clone"},{"import": 1415,"src": 996,"name": "cloneWithAllocator"},{"import": 1415,"src": 997,"name": "cloneWithContext"},{"import": 1415,"src": 998,"name": "cloneWithAllocatorAndContext"},{"import": 1415,"src": 999,"name": "Self","kind": "const","type": 709,"value": 889},{"import": 1415,"src": 1000,"name": "Size","kind": "const","type": 709,"value": 893},{"import": 1415,"src": 1001,"name": "Hash","kind": "const","type": 709,"value": 732},{"import": 1415,"src": 1002,"name": "Entry"},{"import": 1415,"src": 1003,"name": "KV"},{"import": 1415,"src": 1004,"name": "Iterator"},{"import": 1415,"src": 1005,"name": "KeyIterator"},{"import": 1415,"src": 1006,"name": "ValueIterator"},{"import": 1415,"src": 1007,"name": "GetOrPutResult","kind": "const","type": 709,"value": 1333},{"import": 1415,"src": 1008,"name": "Managed"},{"import": 1415,"src": 1009,"name": "promote"},{"import": 1415,"src": 1010,"name": "promoteContext"},{"import": 1415,"src": 127,"name": "deinit","kind": "const","type": 559,"value": 644},{"import": 1415,"src": 1011,"name": "ensureCapacity"},{"import": 1415,"src": 1012,"name": "ensureTotalCapacity"},{"import": 1415,"src": 1013,"name": "ensureTotalCapacityContext"},{"import": 1415,"src": 1014,"name": "ensureUnusedCapacity"},{"import": 1415,"src": 1015,"name": "ensureUnusedCapacityContext"},{"import": 1415,"src": 1016,"name": "clearRetainingCapacity"},{"import": 1415,"src": 1017,"name": "clearAndFree"},{"import": 1415,"src": 1018,"name": "count"},{"import": 1415,"src": 122,"name": "capacity","kind": "const","type": 557,"value": 642},{"import": 1415,"src": 1019,"name": "iterator"},{"import": 1415,"src": 1020,"name": "keyIterator"},{"import": 1415,"src": 441,"name": "valueIterator"},{"import": 1415,"src": 1021,"name": "putNoClobber"},{"import": 1415,"src": 115,"name": "putNoClobberContext"},{"import": 1415,"src": 1022,"name": "putAssumeCapacity"},{"import": 1415,"src": 1023,"name": "putAssumeCapacityContext"},{"import": 1415,"src": 1024,"name": "putAssumeCapacityNoClobber"},{"import": 1415,"src": 132,"name": "putAssumeCapacityNoClobberContext","kind": "const","type": 564,"value": 649},{"import": 1415,"src": 1025,"name": "fetchPut"},{"import": 1415,"src": 1026,"name": "fetchPutContext"},{"import": 1415,"src": 1027,"name": "fetchPutAssumeCapacity"},{"import": 1415,"src": 1028,"name": "fetchPutAssumeCapacityContext"},{"import": 1415,"src": 1029,"name": "fetchRemove"},{"import": 1415,"src": 1030,"name": "fetchRemoveContext"},{"import": 1415,"src": 1031,"name": "fetchRemoveAdapted"},{"import": 1415,"src": 1032,"name": "getEntry"},{"import": 1415,"src": 1033,"name": "getEntryContext"},{"import": 1415,"src": 1034,"name": "getEntryAdapted"},{"import": 1415,"src": 1035,"name": "put"},{"import": 1415,"src": 386,"name": "putContext","kind": "const","type": 552,"value": 635},{"import": 1415,"src": 1036,"name": "getKeyPtr"},{"import": 1415,"src": 1037,"name": "getKeyPtrContext"},{"import": 1415,"src": 1038,"name": "getKeyPtrAdapted"},{"import": 1415,"src": 1039,"name": "getKey"},{"import": 1415,"src": 1040,"name": "getKeyContext"},{"import": 1415,"src": 1041,"name": "getKeyAdapted"},{"import": 1415,"src": 1042,"name": "getPtr"},{"import": 1415,"src": 1043,"name": "getPtrContext"},{"import": 1415,"src": 1044,"name": "getPtrAdapted"},{"import": 1415,"src": 1045,"name": "get"},{"import": 1415,"src": 207,"name": "getContext","kind": "const","type": 616,"value": 715},{"import": 1415,"src": 275,"name": "getAdapted","kind": "const","type": 1493,"value": 930},{"import": 1415,"src": 1046,"name": "getOrPut"},{"import": 1415,"src": 375,"name": "getOrPutContext","kind": "const","type": 553,"value": 636},{"import": 1415,"src": 1047,"name": "getOrPutAdapted"},{"import": 1415,"src": 376,"name": "getOrPutContextAdapted","kind": "const","type": 1494,"value": 931},{"import": 1415,"src": 1048,"name": "getOrPutAssumeCapacity"},{"import": 1415,"src": 1049,"name": "getOrPutAssumeCapacityContext"},{"import": 1415,"src": 377,"name": "getOrPutAssumeCapacityAdapted","kind": "const","type": 1495,"value": 932},{"import": 1415,"src": 1050,"name": "getOrPutValue"},{"import": 1415,"src": 1051,"name": "getOrPutValueContext"},{"import": 1415,"src": 1052,"name": "contains"},{"import": 1415,"src": 116,"name": "containsContext","kind": "const","type": 618,"value": 718},{"import": 1415,"src": 228,"name": "containsAdapted","kind": "const","type": 1496,"value": 933},{"import": 1415,"src": 1053,"name": "remove"},{"import": 1415,"src": 1054,"name": "removeContext"},{"import": 1415,"src": 1055,"name": "removeAdapted"},{"import": 1415,"src": 1056,"name": "clone"},{"import": 1415,"src": 1057,"name": "cloneContext"},{"import": 1415,"src": 1058,"name": "Self","kind": "const","type": 709,"value": 890},{"import": 1415,"src": 1059,"name": "minimal_capacity","kind": "const","type": 778,"value": null},{"import": 1415,"src": 1060,"name": "Header","kind": "const","type": 709,"value": 1497},{"import": 1415,"src": 1061,"name": "Metadata","kind": "const","type": 709,"value": 1332},{"import": 1415,"src": 504,"name": "FieldIterator"},{"import": 1415,"src": 1062,"name": "isUnderMaxLoadPercentage"},{"import": 1415,"src": 119,"name": "capacityForSize","kind": "const","type": 159,"value": 640},{"import": 1415,"src": 230,"name": "header","kind": "const","type": 617,"value": 716},{"import": 1415,"src": 129,"name": "keys","kind": "const","type": 561,"value": 646},{"import": 1415,"src": 130,"name": "values","kind": "const","type": 562,"value": 647},{"import": 1415,"src": 291,"name": "getIndex","kind": "const","type": 1498,"value": 934},{"import": 1415,"src": 128,"name": "initMetadatas","kind": "const","type": 560,"value": 645},{"import": 1415,"src": 120,"name": "load","kind": "const","type": 557,"value": 641},{"import": 1415,"src": 117,"name": "growIfNeeded","kind": "const","type": 555,"value": 638},{"import": 1415,"src": 118,"name": "grow","kind": "const","type": 556,"value": 639},{"import": 1415,"src": 124,"name": "allocate","kind": "const","type": 558,"value": 643},{"import": 1415,"src": 232,"name": "deallocate","kind": "const","type": 559,"value": 717},{"import": 1422,"src": 1063,"name": "Slice","kind": "const","type": 709,"value": 922},{"import": 1422,"src": 70,"name": "init","kind": "const","type": 568,"value": 653},{"import": 1422,"src": 346,"name": "initCapacity"},{"import": 1422,"src": 96,"name": "deinit","kind": "const","type": 576,"value": 661},{"import": 1422,"src": 1064,"name": "span"},{"import": 1422,"src": 1065,"name": "toSlice"},{"import": 1422,"src": 1066,"name": "toSliceConst"},{"import": 1422,"src": 1067,"name": "at"},{"import": 1422,"src": 1068,"name": "ptrAt"},{"import": 1422,"src": 1069,"name": "setOrError"},{"import": 1422,"src": 1070,"name": "set"},{"import": 1422,"src": 1071,"name": "swapRemoveOrError"},{"import": 1422,"src": 1072,"name": "fromOwnedSlice"},{"import": 1422,"src": 1073,"name": "toUnmanaged"},{"import": 1422,"src": 1074,"name": "moveToUnmanaged"},{"import": 1422,"src": 147,"name": "toOwnedSlice"},{"import": 1422,"src": 1075,"name": "toOwnedSliceSentinel"},{"import": 1422,"src": 1076,"name": "insert"},{"import": 1422,"src": 1077,"name": "insertSlice"},{"import": 1422,"src": 1078,"name": "replaceRange"},{"import": 1422,"src": 92,"name": "append","kind": "const","type": 569,"value": 654},{"import": 1422,"src": 1079,"name": "appendAssumeCapacity"},{"import": 1422,"src": 1080,"name": "orderedRemove"},{"import": 1422,"src": 1081,"name": "swapRemove"},{"import": 1422,"src": 1082,"name": "appendSlice"},{"import": 1422,"src": 1083,"name": "appendSliceAssumeCapacity"},{"import": 1422,"src": 1084,"name": "Writer"},{"import": 1422,"src": 1085,"name": "writer"},{"import": 1422,"src": 1086,"name": "appendNTimes"},{"import": 1422,"src": 1087,"name": "appendNTimesAssumeCapacity"},{"import": 1422,"src": 105,"name": "resize"},{"import": 1422,"src": 350,"name": "shrinkAndFree"},{"import": 1422,"src": 146,"name": "shrinkRetainingCapacity"},{"import": 1422,"src": 1088,"name": "clearRetainingCapacity"},{"import": 1422,"src": 1089,"name": "clearAndFree"},{"import": 1422,"src": 1090,"name": "ensureCapacity"},{"import": 1422,"src": 98,"name": "ensureTotalCapacity","kind": "const","type": 571,"value": 656},{"import": 1422,"src": 99,"name": "ensureTotalCapacityPrecise","kind": "const","type": 572,"value": 657},{"import": 1422,"src": 1091,"name": "ensureUnusedCapacity"},{"import": 1422,"src": 349,"name": "expandToCapacity"},{"import": 1422,"src": 97,"name": "addOne","kind": "const","type": 570,"value": 655},{"import": 1422,"src": 102,"name": "addOneAssumeCapacity","kind": "const","type": 575,"value": 660},{"import": 1422,"src": 1092,"name": "addManyAsArray"},{"import": 1422,"src": 1093,"name": "addManyAsArrayAssumeCapacity"},{"import": 1422,"src": 1094,"name": "pop"},{"import": 1422,"src": 1095,"name": "popOrNull"},{"import": 1422,"src": 100,"name": "allocatedSlice","kind": "const","type": 573,"value": 658},{"import": 1422,"src": 1096,"name": "unusedCapacitySlice"},{"import": 1422,"src": 1097,"name": "Self","kind": "const","type": 709,"value": 891},{"import": 1422,"src": 1098,"name": "appendWrite"},{"import": 1415,"src": 403,"name": "next","kind": "const","type": 611,"value": 710},{"import": 1404,"src": 876,"name": "Error","kind": "const","type": 709,"value": 901},{"import": 1404,"src": 177,"name": "write","kind": "const","type": 670,"value": 797},{"import": 1404,"src": 33,"name": "writeAll"},{"import": 1404,"src": 15,"name": "print"},{"import": 1404,"src": 239,"name": "writeByte"},{"import": 1404,"src": 188,"name": "writeByteNTimes"},{"import": 1404,"src": 877,"name": "writeIntNative"},{"import": 1404,"src": 878,"name": "writeIntForeign"},{"import": 1404,"src": 879,"name": "writeIntLittle"},{"import": 1404,"src": 880,"name": "writeIntBig"},{"import": 1404,"src": 881,"name": "writeInt"},{"import": 1404,"src": 882,"name": "writeStruct"},{"import": 1404,"src": 883,"name": "Self","kind": "const","type": 709,"value": 900},{"import": 1501,"src": 1280,"name": "Error","kind": "const","type": 709,"value": 901},{"import": 1501,"src": 1281,"name": "Writer","kind": "const","type": 709,"value": 905},{"import": 1501,"src": 431,"name": "write","kind": "const","type": 642,"value": 750},{"import": 1501,"src": 432,"name": "writer","kind": "const","type": 643,"value": 751},{"import": 1501,"src": 1282,"name": "Self","kind": "const","type": 709,"value": 904},{"import": 1404,"src": 876,"name": "Error","kind": "const","type": 709,"value": 901},{"import": 1404,"src": 177,"name": "write","kind": "const","type": 671,"value": 798},{"import": 1404,"src": 33,"name": "writeAll","kind": "const","type": 645,"value": 753},{"import": 1404,"src": 15,"name": "print"},{"import": 1404,"src": 239,"name": "writeByte"},{"import": 1404,"src": 188,"name": "writeByteNTimes","kind": "const","type": 676,"value": 803},{"import": 1404,"src": 877,"name": "writeIntNative"},{"import": 1404,"src": 878,"name": "writeIntForeign"},{"import": 1404,"src": 879,"name": "writeIntLittle"},{"import": 1404,"src": 880,"name": "writeIntBig"},{"import": 1404,"src": 881,"name": "writeInt"},{"import": 1404,"src": 882,"name": "writeStruct"},{"import": 1404,"src": 883,"name": "Self","kind": "const","type": 709,"value": 905},{"import": 1431,"src": 1156,"name": "ReadError"},{"import": 1431,"src": 1157,"name": "WriteError","kind": "const","type": 709,"value": 910},{"import": 1431,"src": 1158,"name": "SeekError"},{"import": 1431,"src": 1159,"name": "GetSeekPosError"},{"import": 1431,"src": 1160,"name": "Reader"},{"import": 1431,"src": 1161,"name": "Writer","kind": "const","type": 709,"value": 908},{"import": 1431,"src": 1162,"name": "SeekableStream"},{"import": 1431,"src": 74,"name": "reader"},{"import": 1431,"src": 434,"name": "writer","kind": "const","type": 649,"value": 757},{"import": 1431,"src": 79,"name": "seekableStream"},{"import": 1431,"src": 73,"name": "read"},{"import": 1431,"src": 433,"name": "write","kind": "const","type": 648,"value": 756},{"import": 1431,"src": 75,"name": "seekTo"},{"import": 1431,"src": 76,"name": "seekBy"},{"import": 1431,"src": 78,"name": "getEndPos"},{"import": 1431,"src": 77,"name": "getPos"},{"import": 1431,"src": 435,"name": "getWritten","kind": "const","type": 653,"value": 761},{"import": 1431,"src": 1163,"name": "reset"},{"import": 1431,"src": 1164,"name": "Self","kind": "const","type": 709,"value": 907},{"import": 1404,"src": 876,"name": "Error","kind": "const","type": 709,"value": 910},{"import": 1404,"src": 177,"name": "write","kind": "const","type": 677,"value": 805},{"import": 1404,"src": 33,"name": "writeAll","kind": "const","type": 651,"value": 759},{"import": 1404,"src": 15,"name": "print"},{"import": 1404,"src": 239,"name": "writeByte"},{"import": 1404,"src": 188,"name": "writeByteNTimes","kind": "const","type": 682,"value": 810},{"import": 1404,"src": 877,"name": "writeIntNative"},{"import": 1404,"src": 878,"name": "writeIntForeign"},{"import": 1404,"src": 879,"name": "writeIntLittle"},{"import": 1404,"src": 880,"name": "writeIntBig"},{"import": 1404,"src": 881,"name": "writeInt"},{"import": 1404,"src": 882,"name": "writeStruct"},{"import": 1404,"src": 883,"name": "Self","kind": "const","type": 709,"value": 908},{"import": 1476,"src": 507,"name": "asText","kind": "const","type": 911,"value": 905},{"import": 1415,"src": 449,"name": "hash","kind": "const","type": 706,"value": 841},{"import": 1415,"src": 450,"name": "eql","kind": "const","type": 707,"value": 842},{"import": 1415,"src": 953,"name": "Unmanaged","kind": "const","type": 709,"value": 935},{"import": 1415,"src": 954,"name": "Entry"},{"import": 1415,"src": 955,"name": "KV"},{"import": 1415,"src": 956,"name": "Hash"},{"import": 1415,"src": 957,"name": "Iterator"},{"import": 1415,"src": 958,"name": "KeyIterator"},{"import": 1415,"src": 959,"name": "ValueIterator"},{"import": 1415,"src": 960,"name": "Size"},{"import": 1415,"src": 961,"name": "GetOrPutResult"},{"import": 1415,"src": 264,"name": "init"},{"import": 1415,"src": 962,"name": "initContext"},{"import": 1415,"src": 384,"name": "deinit"},{"import": 1415,"src": 963,"name": "clearRetainingCapacity"},{"import": 1415,"src": 964,"name": "clearAndFree"},{"import": 1415,"src": 965,"name": "count"},{"import": 1415,"src": 966,"name": "iterator"},{"import": 1415,"src": 967,"name": "keyIterator"},{"import": 1415,"src": 402,"name": "valueIterator"},{"import": 1415,"src": 374,"name": "getOrPut"},{"import": 1415,"src": 968,"name": "getOrPutAdapted"},{"import": 1415,"src": 969,"name": "getOrPutAssumeCapacity"},{"import": 1415,"src": 970,"name": "getOrPutAssumeCapacityAdapted"},{"import": 1415,"src": 971,"name": "getOrPutValue"},{"import": 1415,"src": 972,"name": "ensureCapacity"},{"import": 1415,"src": 973,"name": "ensureTotalCapacity"},{"import": 1415,"src": 974,"name": "ensureUnusedCapacity"},{"import": 1415,"src": 975,"name": "capacity"},{"import": 1415,"src": 385,"name": "put"},{"import": 1415,"src": 114,"name": "putNoClobber"},{"import": 1415,"src": 976,"name": "putAssumeCapacity"},{"import": 1415,"src": 977,"name": "putAssumeCapacityNoClobber"},{"import": 1415,"src": 978,"name": "fetchPut"},{"import": 1415,"src": 979,"name": "fetchPutAssumeCapacity"},{"import": 1415,"src": 980,"name": "fetchRemove"},{"import": 1415,"src": 981,"name": "fetchRemoveAdapted"},{"import": 1415,"src": 52,"name": "get"},{"import": 1415,"src": 982,"name": "getAdapted"},{"import": 1415,"src": 983,"name": "getPtr"},{"import": 1415,"src": 984,"name": "getPtrAdapted"},{"import": 1415,"src": 985,"name": "getKey"},{"import": 1415,"src": 986,"name": "getKeyAdapted"},{"import": 1415,"src": 987,"name": "getKeyPtr"},{"import": 1415,"src": 988,"name": "getKeyPtrAdapted"},{"import": 1415,"src": 989,"name": "getEntry"},{"import": 1415,"src": 990,"name": "getEntryAdapted"},{"import": 1415,"src": 991,"name": "contains"},{"import": 1415,"src": 992,"name": "containsAdapted"},{"import": 1415,"src": 993,"name": "remove"},{"import": 1415,"src": 994,"name": "removeAdapted"},{"import": 1415,"src": 995,"name": "clone"},{"import": 1415,"src": 996,"name": "cloneWithAllocator"},{"import": 1415,"src": 997,"name": "cloneWithContext"},{"import": 1415,"src": 998,"name": "cloneWithAllocatorAndContext"},{"import": 1415,"src": 999,"name": "Self"},{"import": 1504,"src": 94,"name": "allocator","kind": "const","type": 98,"value": 108},{"import": 1504,"src": 139,"name": "getSymbolName","kind": "const","type": 178,"value": 191},{"import": 1504,"src": 137,"name": "findCompileUnit","kind": "const","type": 174,"value": 187},{"import": 1504,"src": 140,"name": "getLineNumberInfo","kind": "const","type": 179,"value": 192},{"import": 1504,"src": 71,"name": "scanAllFunctions","kind": "const","type": 71,"value": 78},{"import": 1504,"src": 113,"name": "scanAllCompileUnits","kind": "const","type": 145,"value": 155},{"import": 1504,"src": 91,"name": "getAbbrevTable","kind": "const","type": 94,"value": 104},{"import": 1504,"src": 93,"name": "parseAbbrevTable","kind": "const","type": 96,"value": 106},{"import": 1504,"src": 103,"name": "parseDie","kind": "const","type": 1505,"value": 935},{"import": 1504,"src": 109,"name": "getString","kind": "const","type": 133,"value": 143},{"import": 1415,"src": 1000,"name": "Size","kind": "const","type": 709,"value": 893},{"import": 1415,"src": 1001,"name": "Hash"},{"import": 1415,"src": 1002,"name": "Entry"},{"import": 1415,"src": 1003,"name": "KV"},{"import": 1415,"src": 1004,"name": "Iterator"},{"import": 1415,"src": 1005,"name": "KeyIterator"},{"import": 1415,"src": 1006,"name": "ValueIterator"},{"import": 1415,"src": 1007,"name": "GetOrPutResult"},{"import": 1415,"src": 1008,"name": "Managed"},{"import": 1415,"src": 1009,"name": "promote"},{"import": 1415,"src": 1010,"name": "promoteContext"},{"import": 1415,"src": 127,"name": "deinit"},{"import": 1415,"src": 1011,"name": "ensureCapacity"},{"import": 1415,"src": 1012,"name": "ensureTotalCapacity"},{"import": 1415,"src": 1013,"name": "ensureTotalCapacityContext"},{"import": 1415,"src": 1014,"name": "ensureUnusedCapacity"},{"import": 1415,"src": 1015,"name": "ensureUnusedCapacityContext"},{"import": 1415,"src": 1016,"name": "clearRetainingCapacity"},{"import": 1415,"src": 1017,"name": "clearAndFree"},{"import": 1415,"src": 1018,"name": "count"},{"import": 1415,"src": 122,"name": "capacity"},{"import": 1415,"src": 1019,"name": "iterator"},{"import": 1415,"src": 1020,"name": "keyIterator"},{"import": 1415,"src": 441,"name": "valueIterator"},{"import": 1415,"src": 1021,"name": "putNoClobber"},{"import": 1415,"src": 115,"name": "putNoClobberContext"},{"import": 1415,"src": 1022,"name": "putAssumeCapacity"},{"import": 1415,"src": 1023,"name": "putAssumeCapacityContext"},{"import": 1415,"src": 1024,"name": "putAssumeCapacityNoClobber"},{"import": 1415,"src": 132,"name": "putAssumeCapacityNoClobberContext"},{"import": 1415,"src": 1025,"name": "fetchPut"},{"import": 1415,"src": 1026,"name": "fetchPutContext"},{"import": 1415,"src": 1027,"name": "fetchPutAssumeCapacity"},{"import": 1415,"src": 1028,"name": "fetchPutAssumeCapacityContext"},{"import": 1415,"src": 1029,"name": "fetchRemove"},{"import": 1415,"src": 1030,"name": "fetchRemoveContext"},{"import": 1415,"src": 1031,"name": "fetchRemoveAdapted"},{"import": 1415,"src": 1032,"name": "getEntry"},{"import": 1415,"src": 1033,"name": "getEntryContext"},{"import": 1415,"src": 1034,"name": "getEntryAdapted"},{"import": 1415,"src": 1035,"name": "put"},{"import": 1415,"src": 386,"name": "putContext"},{"import": 1415,"src": 1036,"name": "getKeyPtr"},{"import": 1415,"src": 1037,"name": "getKeyPtrContext"},{"import": 1415,"src": 1038,"name": "getKeyPtrAdapted"},{"import": 1415,"src": 1039,"name": "getKey"},{"import": 1415,"src": 1040,"name": "getKeyContext"},{"import": 1415,"src": 1041,"name": "getKeyAdapted"},{"import": 1415,"src": 1042,"name": "getPtr"},{"import": 1415,"src": 1043,"name": "getPtrContext"},{"import": 1415,"src": 1044,"name": "getPtrAdapted"},{"import": 1415,"src": 1045,"name": "get"},{"import": 1415,"src": 207,"name": "getContext"},{"import": 1415,"src": 275,"name": "getAdapted"},{"import": 1415,"src": 1046,"name": "getOrPut"},{"import": 1415,"src": 375,"name": "getOrPutContext"},{"import": 1415,"src": 1047,"name": "getOrPutAdapted"},{"import": 1415,"src": 376,"name": "getOrPutContextAdapted"},{"import": 1415,"src": 1048,"name": "getOrPutAssumeCapacity"},{"import": 1415,"src": 1049,"name": "getOrPutAssumeCapacityContext"},{"import": 1415,"src": 377,"name": "getOrPutAssumeCapacityAdapted"},{"import": 1415,"src": 1050,"name": "getOrPutValue"},{"import": 1415,"src": 1051,"name": "getOrPutValueContext"},{"import": 1415,"src": 1052,"name": "contains"},{"import": 1415,"src": 116,"name": "containsContext"},{"import": 1415,"src": 228,"name": "containsAdapted"},{"import": 1415,"src": 1053,"name": "remove"},{"import": 1415,"src": 1054,"name": "removeContext"},{"import": 1415,"src": 1055,"name": "removeAdapted"},{"import": 1415,"src": 1056,"name": "clone"},{"import": 1415,"src": 1057,"name": "cloneContext"},{"import": 1415,"src": 1058,"name": "Self"},{"import": 1415,"src": 1059,"name": "minimal_capacity"},{"import": 1415,"src": 1060,"name": "Header"},{"import": 1415,"src": 1061,"name": "Metadata","kind": "const","type": 709,"value": 1506},{"import": 1415,"src": 504,"name": "FieldIterator"},{"import": 1415,"src": 1062,"name": "isUnderMaxLoadPercentage"},{"import": 1415,"src": 119,"name": "capacityForSize"},{"import": 1415,"src": 230,"name": "header"},{"import": 1415,"src": 129,"name": "keys"},{"import": 1415,"src": 130,"name": "values"},{"import": 1415,"src": 291,"name": "getIndex"},{"import": 1415,"src": 128,"name": "initMetadatas"},{"import": 1415,"src": 120,"name": "load"},{"import": 1415,"src": 117,"name": "growIfNeeded"},{"import": 1415,"src": 118,"name": "grow"},{"import": 1415,"src": 124,"name": "allocate"},{"import": 1415,"src": 232,"name": "deallocate"},{"import": 1422,"src": 1063,"name": "Slice","kind": "const","type": 709,"value": 1508},{"import": 1422,"src": 70,"name": "init"},{"import": 1422,"src": 346,"name": "initCapacity"},{"import": 1422,"src": 96,"name": "deinit"},{"import": 1422,"src": 1064,"name": "span"},{"import": 1422,"src": 1065,"name": "toSlice"},{"import": 1422,"src": 1066,"name": "toSliceConst"},{"import": 1422,"src": 1067,"name": "at"},{"import": 1422,"src": 1068,"name": "ptrAt"},{"import": 1422,"src": 1069,"name": "setOrError"},{"import": 1422,"src": 1070,"name": "set"},{"import": 1422,"src": 1071,"name": "swapRemoveOrError"},{"import": 1422,"src": 1072,"name": "fromOwnedSlice"},{"import": 1422,"src": 1073,"name": "toUnmanaged"},{"import": 1422,"src": 1074,"name": "moveToUnmanaged"},{"import": 1422,"src": 147,"name": "toOwnedSlice"},{"import": 1422,"src": 1075,"name": "toOwnedSliceSentinel"},{"import": 1422,"src": 1076,"name": "insert"},{"import": 1422,"src": 1077,"name": "insertSlice"},{"import": 1422,"src": 1078,"name": "replaceRange"},{"import": 1422,"src": 92,"name": "append"},{"import": 1422,"src": 1079,"name": "appendAssumeCapacity"},{"import": 1422,"src": 1080,"name": "orderedRemove"},{"import": 1422,"src": 1081,"name": "swapRemove"},{"import": 1422,"src": 1082,"name": "appendSlice"},{"import": 1422,"src": 1083,"name": "appendSliceAssumeCapacity"},{"import": 1422,"src": 1084,"name": "Writer"},{"import": 1422,"src": 1085,"name": "writer"},{"import": 1422,"src": 1086,"name": "appendNTimes"},{"import": 1422,"src": 1087,"name": "appendNTimesAssumeCapacity"},{"import": 1422,"src": 105,"name": "resize"},{"import": 1422,"src": 350,"name": "shrinkAndFree"},{"import": 1422,"src": 146,"name": "shrinkRetainingCapacity"},{"import": 1422,"src": 1088,"name": "clearRetainingCapacity"},{"import": 1422,"src": 1089,"name": "clearAndFree"},{"import": 1422,"src": 1090,"name": "ensureCapacity"},{"import": 1422,"src": 98,"name": "ensureTotalCapacity"},{"import": 1422,"src": 99,"name": "ensureTotalCapacityPrecise"},{"import": 1422,"src": 1091,"name": "ensureUnusedCapacity"},{"import": 1422,"src": 349,"name": "expandToCapacity"},{"import": 1422,"src": 97,"name": "addOne"},{"import": 1422,"src": 102,"name": "addOneAssumeCapacity"},{"import": 1422,"src": 1092,"name": "addManyAsArray"},{"import": 1422,"src": 1093,"name": "addManyAsArrayAssumeCapacity"},{"import": 1422,"src": 1094,"name": "pop"},{"import": 1422,"src": 1095,"name": "popOrNull"},{"import": 1422,"src": 100,"name": "allocatedSlice"},{"import": 1422,"src": 1096,"name": "unusedCapacitySlice"},{"import": 1422,"src": 1097,"name": "Self"},{"import": 1422,"src": 1098,"name": "appendWrite"},{"import": 1466,"src": 1244,"name": "fetchAnd"},{"import": 1466,"src": 1245,"name": "fetchNand"},{"import": 1466,"src": 1246,"name": "fetchOr"},{"import": 1466,"src": 1247,"name": "fetchXor"},{"import": 1466,"src": 1248,"name": "bitSet"},{"import": 1466,"src": 1249,"name": "bitReset"},{"import": 1466,"src": 1250,"name": "bitToggle"},{"import": 1466,"src": 1283,"name": "Bit"},{"import": 1466,"src": 1284,"name": "BitRmwOp"},{"import": 1466,"src": 1285,"name": "bitRmw"},{"import": 1466,"src": 1251,"name": "fetchAdd"},{"import": 1466,"src": 1252,"name": "fetchSub"},{"import": 1466,"src": 1253,"name": "fetchMin"},{"import": 1466,"src": 1254,"name": "fetchMax"},{"import": 1466,"src": 1283,"name": "Bit"},{"import": 1466,"src": 1284,"name": "BitRmwOp"},{"import": 1466,"src": 1285,"name": "bitRmw"},{"import": 948,"src": 302,"name": "main","kind": "const","type": 428,"value": 474},{"import": 948,"src": 1286,"name": "std","kind": "const","type": 709,"value": 949},{"import": 948,"src": 1287,"name": "day1","kind": "const","type": 709,"value": 1510},{"import": 948,"src": 1288,"name": "day2","kind": "const","type": 709,"value": 1511},{"import": 948,"src": 1289,"name": "day3","kind": "const","type": 709,"value": 1512},{"import": 948,"src": 1290,"name": "day4","kind": "const","type": 709,"value": 1485},{"import": 948,"src": 1291,"name": "day5","kind": "const","type": 709,"value": 1513},{"import": 948,"src": 1292,"name": "day6","kind": "const","type": 709,"value": 1514},{"import": 948,"src": 1293,"name": "day7","kind": "const","type": 709,"value": 1515},{"import": 948,"src": 1294,"name": "day8","kind": "const","type": 709,"value": 1516},{"import": 948,"src": 1295,"name": "SolutionFn","kind": "const","type": 709,"value": 1517},{"import": 948,"src": 1296,"name": "Solution","kind": "const","type": 709,"value": 1518},{"import": 949,"src": 1297,"name": "ArrayHashMap"},{"import": 949,"src": 1298,"name": "ArrayHashMapUnmanaged"},{"import": 949,"src": 1299,"name": "ArrayList","kind": "const","type": 744,"value": 858},{"import": 949,"src": 1300,"name": "ArrayListAligned","kind": "const","type": 740,"value": 857},{"import": 949,"src": 1301,"name": "ArrayListAlignedUnmanaged"},{"import": 949,"src": 1302,"name": "ArrayListUnmanaged"},{"import": 949,"src": 1303,"name": "AutoArrayHashMap"},{"import": 949,"src": 1304,"name": "AutoArrayHashMapUnmanaged"},{"import": 949,"src": 1305,"name": "AutoHashMap","kind": "const","type": 736,"value": 854},{"import": 949,"src": 1306,"name": "AutoHashMapUnmanaged"},{"import": 949,"src": 1307,"name": "BoundedArray"},{"import": 949,"src": 1308,"name": "BufMap"},{"import": 949,"src": 1309,"name": "BufSet"},{"import": 949,"src": 1310,"name": "ChildProcess"},{"import": 949,"src": 1311,"name": "ComptimeStringMap"},{"import": 949,"src": 1312,"name": "DynLib"},{"import": 949,"src": 1313,"name": "DynamicBitSet"},{"import": 949,"src": 1314,"name": "DynamicBitSetUnmanaged"},{"import": 949,"src": 1315,"name": "EnumArray"},{"import": 949,"src": 1316,"name": "EnumMap"},{"import": 949,"src": 1317,"name": "EnumSet"},{"import": 949,"src": 1318,"name": "HashMap"},{"import": 949,"src": 1319,"name": "HashMapUnmanaged"},{"import": 949,"src": 1320,"name": "MultiArrayList"},{"import": 949,"src": 1321,"name": "PackedIntArray"},{"import": 949,"src": 1322,"name": "PackedIntArrayEndian"},{"import": 949,"src": 1323,"name": "PackedIntSlice"},{"import": 949,"src": 1324,"name": "PackedIntSliceEndian"},{"import": 949,"src": 1325,"name": "PriorityQueue"},{"import": 949,"src": 1326,"name": "PriorityDequeue"},{"import": 949,"src": 1327,"name": "Progress"},{"import": 949,"src": 1328,"name": "SemanticVersion"},{"import": 949,"src": 1329,"name": "SinglyLinkedList","kind": "const","type": 809,"value": 884},{"import": 949,"src": 1330,"name": "StaticBitSet"},{"import": 949,"src": 1331,"name": "StringHashMap","kind": "const","type": 934,"value": 910},{"import": 949,"src": 1332,"name": "StringHashMapUnmanaged"},{"import": 949,"src": 1333,"name": "StringArrayHashMap"},{"import": 949,"src": 1334,"name": "StringArrayHashMapUnmanaged"},{"import": 949,"src": 1335,"name": "TailQueue","kind": "const","type": 823,"value": 889},{"import": 949,"src": 1336,"name": "Target","kind": "const","type": 709,"value": 756},{"import": 949,"src": 1337,"name": "Thread","kind": "const","type": 709,"value": 1519},{"import": 949,"src": 1338,"name": "array_hash_map"},{"import": 949,"src": 1339,"name": "atomic","kind": "const","type": 709,"value": 1520},{"import": 949,"src": 1340,"name": "base64"},{"import": 949,"src": 1341,"name": "bit_set"},{"import": 949,"src": 1342,"name": "build"},{"import": 949,"src": 1343,"name": "builtin","kind": "const","type": 709,"value": 1437},{"import": 949,"src": 1344,"name": "c"},{"import": 949,"src": 1345,"name": "coff","kind": "const","type": 709,"value": 1521},{"import": 949,"src": 1346,"name": "compress"},{"import": 949,"src": 1347,"name": "crypto"},{"import": 949,"src": 1348,"name": "cstr"},{"import": 949,"src": 1349,"name": "debug","kind": "const","type": 709,"value": 1522},{"import": 949,"src": 1350,"name": "dwarf","kind": "const","type": 709,"value": 1504},{"import": 949,"src": 1351,"name": "elf","kind": "const","type": 709,"value": 1523},{"import": 949,"src": 1352,"name": "enums"},{"import": 949,"src": 1353,"name": "event","kind": "const","type": 709,"value": 1524},{"import": 949,"src": 1354,"name": "fifo"},{"import": 949,"src": 1355,"name": "fmt","kind": "const","type": 709,"value": 1525},{"import": 949,"src": 1356,"name": "fs","kind": "const","type": 709,"value": 1526},{"import": 949,"src": 1357,"name": "hash","kind": "const","type": 709,"value": 1527},{"import": 949,"src": 1358,"name": "hash_map","kind": "const","type": 709,"value": 1415},{"import": 949,"src": 1359,"name": "heap","kind": "const","type": 709,"value": 1528},{"import": 949,"src": 1360,"name": "io","kind": "const","type": 709,"value": 1529},{"import": 949,"src": 1361,"name": "json"},{"import": 949,"src": 1362,"name": "leb"},{"import": 949,"src": 1363,"name": "log","kind": "const","type": 709,"value": 1476},{"import": 949,"src": 1364,"name": "macho","kind": "const","type": 709,"value": 1530},{"import": 949,"src": 1365,"name": "math","kind": "const","type": 709,"value": 1531},{"import": 949,"src": 1366,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 949,"src": 1367,"name": "meta","kind": "const","type": 709,"value": 1532},{"import": 949,"src": 1368,"name": "net"},{"import": 949,"src": 1369,"name": "os","kind": "const","type": 709,"value": 1533},{"import": 949,"src": 1370,"name": "once"},{"import": 949,"src": 1371,"name": "packed_int_array"},{"import": 949,"src": 1372,"name": "pdb","kind": "const","type": 709,"value": 1534},{"import": 949,"src": 1373,"name": "process","kind": "const","type": 709,"value": 1535},{"import": 949,"src": 1374,"name": "rand"},{"import": 949,"src": 1375,"name": "sort","kind": "const","type": 709,"value": 1536},{"import": 949,"src": 1376,"name": "ascii"},{"import": 949,"src": 1377,"name": "testing"},{"import": 949,"src": 1378,"name": "time","kind": "const","type": 709,"value": 1537},{"import": 949,"src": 1379,"name": "unicode","kind": "const","type": 709,"value": 1538},{"import": 949,"src": 1380,"name": "valgrind"},{"import": 949,"src": 1381,"name": "wasm"},{"import": 949,"src": 1382,"name": "x"},{"import": 949,"src": 1383,"name": "zig"},{"import": 949,"src": 1384,"name": "start","kind": "const","type": 709,"value": 1539},{"import": 950,"src": 1385,"name": "zig_version"},{"import": 950,"src": 1386,"name": "zig_is_stage2","kind": "const","type": 720,"value": "false"},{"import": 950,"src": 1387,"name": "stage2_arch"},{"import": 950,"src": 1388,"name": "stage2_x86_cx16"},{"import": 950,"src": 1389,"name": "output_mode","kind": "const","type": 1540,"value": null},{"import": 950,"src": 1390,"name": "link_mode"},{"import": 950,"src": 1391,"name": "is_test"},{"import": 950,"src": 1392,"name": "single_threaded","kind": "const","type": 720,"value": "false"},{"import": 950,"src": 1393,"name": "abi","kind": "const","type": 1428,"value": null},{"import": 950,"src": 1394,"name": "cpu","kind": "const","type": 1430,"value": null},{"import": 950,"src": 1395,"name": "os","kind": "const","type": 1426,"value": null},{"import": 950,"src": 1396,"name": "target","kind": "const","type": 756,"value": null},{"import": 950,"src": 1397,"name": "object_format","kind": "const","type": 1429,"value": null},{"import": 950,"src": 1398,"name": "mode","kind": "const","type": 1541,"value": null},{"import": 950,"src": 1399,"name": "link_libc","kind": "const","type": 720,"value": "false"},{"import": 950,"src": 1400,"name": "link_libcpp"},{"import": 950,"src": 1401,"name": "have_error_return_tracing"},{"import": 950,"src": 1402,"name": "valgrind_support"},{"import": 950,"src": 1403,"name": "position_independent_code"},{"import": 950,"src": 1404,"name": "position_independent_executable","kind": "const","type": 720,"value": "false"},{"import": 950,"src": 1405,"name": "strip_debug_info","kind": "const","type": 720,"value": "false"},{"import": 950,"src": 1406,"name": "code_model"},{"import": 950,"src": 1407,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1403,"src": 1408,"name": "needed_bit_count","kind": "const","type": 778,"value": null},{"import": 1403,"src": 1409,"name": "byte_count","kind": "const","type": 778,"value": null},{"import": 1403,"src": 1410,"name": "usize_count","kind": "const","type": 778,"value": null},{"import": 1403,"src": 1411,"name": "Index","kind": "const","type": 709,"value": 716},{"import": 1403,"src": 1412,"name": "ShiftInt","kind": "const","type": 709,"value": 718},{"import": 1403,"src": 1413,"name": "empty"},{"import": 1403,"src": 2,"name": "empty_workaround","kind": "const","type": 2,"value": 2},{"import": 1403,"src": 1414,"name": "isEmpty"},{"import": 1403,"src": 1415,"name": "isEnabled"},{"import": 1403,"src": 3,"name": "addFeature","kind": "const","type": 3,"value": 3},{"import": 1403,"src": 1416,"name": "addFeatureSet"},{"import": 1403,"src": 1417,"name": "removeFeature"},{"import": 1403,"src": 1418,"name": "removeFeatureSet"},{"import": 1403,"src": 1419,"name": "populateDependencies"},{"import": 1403,"src": 1420,"name": "asBytes"},{"import": 1403,"src": 1421,"name": "eql"},{"import": 1403,"src": 1422,"name": "isSuperSetOf"},{"import": 1437,"src": 1423,"name": "format"},{"import": 1522,"src": 236,"name": "setColor","kind": "const","type": 1558,"value": 936},{"import": 1526,"src": 1424,"name": "Entry"},{"import": 1526,"src": 1425,"name": "Iterator"},{"import": 1526,"src": 1426,"name": "iterate"},{"import": 1526,"src": 1427,"name": "Walker"},{"import": 1526,"src": 1428,"name": "walk"},{"import": 1526,"src": 1429,"name": "OpenError"},{"import": 1526,"src": 1430,"name": "close"},{"import": 1526,"src": 55,"name": "openFile","kind": "const","type": 53,"value": 60},{"import": 1526,"src": 1431,"name": "openFileWasi"},{"import": 1526,"src": 1432,"name": "openFileC"},{"import": 1526,"src": 211,"name": "openFileZ","kind": "const","type": 278,"value": 297},{"import": 1526,"src": 1433,"name": "openFileW"},{"import": 1526,"src": 1434,"name": "createFile"},{"import": 1526,"src": 1435,"name": "createFileC"},{"import": 1526,"src": 1436,"name": "createFileWasi"},{"import": 1526,"src": 1437,"name": "createFileZ"},{"import": 1526,"src": 1438,"name": "createFileW"},{"import": 1526,"src": 1439,"name": "openRead"},{"import": 1526,"src": 1440,"name": "openReadC"},{"import": 1526,"src": 1441,"name": "openReadW"},{"import": 1526,"src": 1442,"name": "makeDir"},{"import": 1526,"src": 1443,"name": "makeDirZ"},{"import": 1526,"src": 1444,"name": "makeDirW"},{"import": 1526,"src": 1445,"name": "makePath"},{"import": 1526,"src": 1446,"name": "makeOpenPath"},{"import": 1526,"src": 1447,"name": "realpath"},{"import": 1526,"src": 1448,"name": "realpathZ"},{"import": 1526,"src": 1449,"name": "realpathW"},{"import": 1526,"src": 1450,"name": "realpathAlloc"},{"import": 1526,"src": 1451,"name": "setAsCwd"},{"import": 1526,"src": 1452,"name": "OpenDirOptions"},{"import": 1526,"src": 1453,"name": "openDir"},{"import": 1526,"src": 1454,"name": "openDirC"},{"import": 1526,"src": 1455,"name": "openDirWasi"},{"import": 1526,"src": 1456,"name": "openDirZ"},{"import": 1526,"src": 1457,"name": "openDirW"},{"import": 1526,"src": 1458,"name": "DeleteFileError"},{"import": 1526,"src": 1459,"name": "deleteFile"},{"import": 1526,"src": 1460,"name": "deleteFileC"},{"import": 1526,"src": 1461,"name": "deleteFileZ"},{"import": 1526,"src": 1462,"name": "deleteFileW"},{"import": 1526,"src": 1463,"name": "DeleteDirError"},{"import": 1526,"src": 1464,"name": "deleteDir"},{"import": 1526,"src": 1465,"name": "deleteDirZ"},{"import": 1526,"src": 1466,"name": "deleteDirW"},{"import": 1526,"src": 1467,"name": "RenameError"},{"import": 1526,"src": 1468,"name": "rename"},{"import": 1526,"src": 1469,"name": "renameZ"},{"import": 1526,"src": 1470,"name": "renameW"},{"import": 1526,"src": 1471,"name": "symLink"},{"import": 1526,"src": 1472,"name": "symLinkWasi"},{"import": 1526,"src": 1473,"name": "symLinkZ"},{"import": 1526,"src": 1474,"name": "symLinkW"},{"import": 1526,"src": 1475,"name": "readLink"},{"import": 1526,"src": 1476,"name": "readLinkC"},{"import": 1526,"src": 1477,"name": "readLinkWasi"},{"import": 1526,"src": 1478,"name": "readLinkZ"},{"import": 1526,"src": 1479,"name": "readLinkW"},{"import": 1526,"src": 1480,"name": "readFile"},{"import": 1526,"src": 343,"name": "readFileAlloc","kind": "const","type": 478,"value": 542},{"import": 1526,"src": 344,"name": "readFileAllocOptions","kind": "const","type": 1567,"value": 937},{"import": 1526,"src": 1481,"name": "DeleteTreeError"},{"import": 1526,"src": 1482,"name": "deleteTree"},{"import": 1526,"src": 1483,"name": "writeFile"},{"import": 1526,"src": 1484,"name": "AccessError"},{"import": 1526,"src": 1485,"name": "access"},{"import": 1526,"src": 1486,"name": "accessZ"},{"import": 1526,"src": 1487,"name": "accessW"},{"import": 1526,"src": 1488,"name": "updateFile"},{"import": 1526,"src": 1489,"name": "copyFile"},{"import": 1526,"src": 1490,"name": "AtomicFileOptions"},{"import": 1526,"src": 1491,"name": "atomicFile"},{"import": 1526,"src": 1492,"name": "Stat"},{"import": 1526,"src": 1493,"name": "StatError"},{"import": 1526,"src": 1494,"name": "stat"},{"import": 1526,"src": 1495,"name": "ChmodError"},{"import": 1526,"src": 1496,"name": "chmod"},{"import": 1526,"src": 1497,"name": "chown"},{"import": 1526,"src": 1498,"name": "ChownError"},{"import": 1526,"src": 1499,"name": "IteratorError"},{"import": 1526,"src": 1500,"name": "openDirFlagsZ"},{"import": 1526,"src": 1501,"name": "openDirAccessMaskW"},{"import": 1415,"src": 131,"name": "isUsed","kind": "const","type": 168,"value": 181},{"import": 1415,"src": 233,"name": "isTombstone","kind": "const","type": 168,"value": 342},{"import": 1415,"src": 234,"name": "takeFingerprint","kind": "const","type": 317,"value": 343},{"import": 1415,"src": 235,"name": "fill","kind": "const","type": 318,"value": 344},{"import": 1415,"src": 1502,"name": "remove"},{"import": 1415,"src": 1503,"name": "FingerPrint","kind": "const","type": 709,"value": 1191},{"import": 1415,"src": 1504,"name": "free"},{"import": 1415,"src": 1505,"name": "tombstone","kind": "const","type": 1191,"value": 1},{"import": 1504,"src": 156,"name": "reset","kind": "const","type": 222,"value": 235},{"import": 1504,"src": 148,"name": "init","kind": "const","type": 205,"value": 218},{"import": 1504,"src": 150,"name": "checkLineMatch","kind": "const","type": 216,"value": 229},{"import": 1522,"src": 158,"name": "deinit","kind": "const","type": 224,"value": 237},{"import": 1522,"src": 160,"name": "init","kind": "const","type": 228,"value": 241},{"import": 1522,"src": 161,"name": "next","kind": "const","type": 229,"value": 242},{"import": 1522,"src": 1506,"name": "fp_offset","kind": "const","type": 778,"value": null},{"import": 1522,"src": 1507,"name": "fp_bias","kind": "const","type": 778,"value": null},{"import": 1522,"src": 1508,"name": "pc_offset","kind": "const","type": 778,"value": null},{"import": 1522,"src": 243,"name": "next_internal","kind": "const","type": 229,"value": 362},{"import": 1522,"src": 195,"name": "init","kind": "const","type": 261,"value": 278},{"import": 1522,"src": 1509,"name": "deinit"},{"import": 1522,"src": 46,"name": "getModuleForAddress","kind": "const","type": 44,"value": 51},{"import": 1522,"src": 1510,"name": "lookupModuleDyld"},{"import": 1522,"src": 1511,"name": "lookupModuleWin32"},{"import": 1522,"src": 49,"name": "lookupModuleDl","kind": "const","type": 47,"value": 54},{"import": 1522,"src": 1512,"name": "lookupModuleHaiku"},{"import": 1678,"src": 1513,"name": "State","kind": "const","type": 709,"value": 1213},{"import": 1678,"src": 196,"name": "init","kind": "const","type": 262,"value": 279},{"import": 1678,"src": 1514,"name": "deinit"},{"import": 1678,"src": 1515,"name": "BufNode","kind": "const","type": 709,"value": 1460},{"import": 1678,"src": 308,"name": "createNode","kind": "const","type": 435,"value": 481},{"import": 1678,"src": 307,"name": "alloc","kind": "const","type": 434,"value": 480},{"import": 1678,"src": 311,"name": "resize","kind": "const","type": 264,"value": 484},{"import": 1522,"src": 242,"name": "deinit","kind": "const","type": 331,"value": 358},{"import": 1678,"src": 265,"name": "promote","kind": "const","type": 355,"value": 387},{"import": 1730,"src": 304,"name": "init","kind": "const","type": 431,"value": 477},{"import": 1730,"src": 305,"name": "update","kind": "const","type": 432,"value": 478},{"import": 1730,"src": 306,"name": "final","kind": "const","type": 433,"value": 479},{"import": 1730,"src": 263,"name": "hash","kind": "const","type": 258,"value": 385},{"import": 1730,"src": 353,"name": "round","kind": "const","type": 432,"value": 558},{"import": 1513,"src": 1516,"name": "Self","kind": "const","type": 709,"value": 1301},{"import": 1513,"src": 1517,"name": "Point","kind": "const","type": 709,"value": 884},{"import": 1513,"src": 372,"name": "init","kind": "const","type": 521,"value": 600},{"import": 1513,"src": 378,"name": "deinit","kind": "const","type": 541,"value": 623},{"import": 1513,"src": 373,"name": "mark","kind": "const","type": 523,"value": 603},{"import": 1513,"src": 1518,"name": "get"},{"import": 1513,"src": 379,"name": "count","kind": "const","type": 542,"value": 624},{"import": 1415,"src": 131,"name": "isUsed","kind": "const","type": 536,"value": 618},{"import": 1415,"src": 233,"name": "isTombstone","kind": "const","type": 536,"value": 705},{"import": 1415,"src": 234,"name": "takeFingerprint","kind": "const","type": 317,"value": 706},{"import": 1415,"src": 235,"name": "fill","kind": "const","type": 608,"value": 707},{"import": 1415,"src": 1502,"name": "remove"},{"import": 1415,"src": 1503,"name": "FingerPrint","kind": "const","type": 709,"value": 1191},{"import": 1415,"src": 1504,"name": "free"},{"import": 1415,"src": 1505,"name": "tombstone","kind": "const","type": 1191,"value": 1},{"import": 1415,"src": 131,"name": "isUsed","kind": "const","type": 563,"value": 648},{"import": 1415,"src": 233,"name": "isTombstone","kind": "const","type": 563,"value": 719},{"import": 1415,"src": 234,"name": "takeFingerprint","kind": "const","type": 317,"value": 720},{"import": 1415,"src": 235,"name": "fill","kind": "const","type": 619,"value": 721},{"import": 1415,"src": 1502,"name": "remove"},{"import": 1415,"src": 1503,"name": "FingerPrint","kind": "const","type": 709,"value": 1191},{"import": 1415,"src": 1504,"name": "free"},{"import": 1415,"src": 1505,"name": "tombstone","kind": "const","type": 1191,"value": 1},{"import": 1730,"src": 404,"name": "init","kind": "const","type": 612,"value": 711},{"import": 1730,"src": 448,"name": "update","kind": "const","type": 702,"value": 837},{"import": 1730,"src": 406,"name": "final","kind": "const","type": 614,"value": 713},{"import": 1730,"src": 192,"name": "hash","kind": "const","type": 258,"value": 275},{"import": 1536,"src": 407,"name": "init","kind": "const","type": 623,"value": 725},{"import": 1536,"src": 413,"name": "begin","kind": "const","type": 629,"value": 731},{"import": 1536,"src": 409,"name": "nextRange","kind": "const","type": 625,"value": 727},{"import": 1536,"src": 408,"name": "finished","kind": "const","type": 624,"value": 726},{"import": 1536,"src": 416,"name": "nextLevel","kind": "const","type": 624,"value": 735},{"import": 1536,"src": 412,"name": "length","kind": "const","type": 628,"value": 730},{"import": 1536,"src": 415,"name": "init","kind": "const","type": 632,"value": 734},{"import": 1536,"src": 410,"name": "length","kind": "const","type": 626,"value": 728},{"import": 1403,"src": 1519,"name": "Target","kind": "const","type": 709,"value": 756},{"import": 1403,"src": 1520,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1403,"src": 1521,"name": "mem"},{"import": 1403,"src": 1522,"name": "Version","kind": "const","type": 709,"value": 1838},{"import": 1404,"src": 456,"name": "Writer","kind": "const","type": 722,"value": 848},{"import": 1404,"src": 1523,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1404,"src": 1524,"name": "assert"},{"import": 1404,"src": 1525,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1406,"src": 1526,"name": "File","kind": "const","type": 709,"value": 724},{"import": 1406,"src": 1527,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1406,"src": 1528,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1406,"src": 1529,"name": "os","kind": "const","type": 709,"value": 1533},{"import": 1406,"src": 1530,"name": "io","kind": "const","type": 709,"value": 1529},{"import": 1406,"src": 1531,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1406,"src": 1532,"name": "math"},{"import": 1406,"src": 1533,"name": "assert"},{"import": 1406,"src": 1534,"name": "windows"},{"import": 1406,"src": 1535,"name": "Os"},{"import": 1406,"src": 1536,"name": "maxInt"},{"import": 1406,"src": 1537,"name": "is_windows","kind": "const","type": 720,"value": "false"},{"import": 1415,"src": 458,"name": "getAutoHashFn","kind": "const","type": 729,"value": 850},{"import": 1415,"src": 459,"name": "getAutoEqlFn","kind": "const","type": 730,"value": 851},{"import": 1415,"src": 462,"name": "AutoHashMap","kind": "const","type": 736,"value": 854},{"import": 1415,"src": 1538,"name": "AutoHashMapUnmanaged"},{"import": 1415,"src": 457,"name": "AutoContext","kind": "const","type": 727,"value": 849},{"import": 1415,"src": 509,"name": "StringHashMap","kind": "const","type": 934,"value": 910},{"import": 1415,"src": 1539,"name": "StringHashMapUnmanaged"},{"import": 1415,"src": 1540,"name": "StringContext","kind": "const","type": 709,"value": 931},{"import": 1415,"src": 452,"name": "eqlString","kind": "const","type": 62,"value": 844},{"import": 1415,"src": 451,"name": "hashString","kind": "const","type": 492,"value": 843},{"import": 1415,"src": 1541,"name": "StringIndexContext"},{"import": 1415,"src": 1542,"name": "StringIndexAdapter"},{"import": 1415,"src": 1543,"name": "DefaultMaxLoadPercentage"},{"import": 1415,"src": 1544,"name": "default_max_load_percentage","kind": "const","type": 778,"value": null},{"import": 1415,"src": 460,"name": "verifyContext","kind": "const","type": 731,"value": 852},{"import": 1415,"src": 461,"name": "HashMap","kind": "const","type": 733,"value": 853},{"import": 1415,"src": 463,"name": "HashMapUnmanaged","kind": "const","type": 737,"value": 855},{"import": 1415,"src": 1545,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1415,"src": 1546,"name": "assert","kind": "const","type": 29,"value": 36},{"import": 1415,"src": 1547,"name": "autoHash","kind": "const","type": 1840,"value": 938},{"import": 1415,"src": 1548,"name": "debug","kind": "const","type": 709,"value": 1522},{"import": 1415,"src": 1549,"name": "warn"},{"import": 1415,"src": 1550,"name": "math","kind": "const","type": 709,"value": 1531},{"import": 1415,"src": 1551,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1415,"src": 1552,"name": "meta","kind": "const","type": 709,"value": 1532},{"import": 1415,"src": 1553,"name": "trait","kind": "const","type": 709,"value": 1841},{"import": 1415,"src": 1554,"name": "Allocator","kind": "const","type": 709,"value": 1557},{"import": 1415,"src": 1555,"name": "Wyhash","kind": "const","type": 709,"value": 1361},{"import": 1415,"src": 1556,"name": "testing"},{"import": 1415,"src": 1557,"name": "expect"},{"import": 1415,"src": 1558,"name": "expectEqual"},{"import": 1522,"src": 135,"name": "getSymbolAtAddress","kind": "const","type": 172,"value": 185},{"import": 1422,"src": 466,"name": "ArrayList","kind": "const","type": 744,"value": 858},{"import": 1422,"src": 465,"name": "ArrayListAligned","kind": "const","type": 740,"value": 857},{"import": 1422,"src": 1559,"name": "ArrayListUnmanaged"},{"import": 1422,"src": 1560,"name": "ArrayListAlignedUnmanaged"},{"import": 1422,"src": 1561,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1422,"src": 1562,"name": "debug","kind": "const","type": 709,"value": 1522},{"import": 1422,"src": 1563,"name": "assert","kind": "const","type": 29,"value": 36},{"import": 1422,"src": 1564,"name": "testing"},{"import": 1422,"src": 1565,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1422,"src": 1566,"name": "Allocator","kind": "const","type": 709,"value": 1557},{"import": 1422,"src": 1567,"name": "Item"},{"import": 1422,"src": 1568,"name": "ItemUnmanaged"},{"import": 1403,"src": 1569,"name": "Tag","kind": "const","type": 709,"value": 755},{"import": 1403,"src": 1570,"name": "WindowsVersion","kind": "const","type": 709,"value": 1844},{"import": 1403,"src": 1571,"name": "LinuxVersionRange","kind": "const","type": 709,"value": 1845},{"import": 1403,"src": 1572,"name": "VersionRange","kind": "const","type": 709,"value": 1846},{"import": 1403,"src": 1573,"name": "TaggedVersionRange"},{"import": 1403,"src": 1574,"name": "getVersionRange"},{"import": 1403,"src": 1575,"name": "isAtLeast"},{"import": 1403,"src": 1576,"name": "requiresLibC"},{"import": 1427,"src": 1577,"name": "Feature","kind": "const","type": 709,"value": 711},{"import": 1427,"src": 1578,"name": "featureSet","kind": "const","type": 1,"value": 1},{"import": 1427,"src": 1579,"name": "featureSetHas"},{"import": 1427,"src": 1580,"name": "featureSetHasAny"},{"import": 1427,"src": 1581,"name": "featureSetHasAll"},{"import": 1427,"src": 1582,"name": "all_features"},{"import": 1427,"src": 1583,"name": "cpu","kind": "const","type": 709,"value": 1847},{"import": 1427,"src": 1584,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1427,"src": 1585,"name": "CpuFeature","kind": "const","type": 709,"value": 1848},{"import": 1427,"src": 1586,"name": "CpuModel","kind": "const","type": 709,"value": 1849},{"import": 1403,"src": 1587,"name": "default"},{"import": 1403,"src": 1588,"name": "isGnu"},{"import": 1403,"src": 1589,"name": "isMusl"},{"import": 1403,"src": 1590,"name": "floatAbi"},{"import": 1403,"src": 1591,"name": "fileExt"},{"import": 1403,"src": 1592,"name": "Feature","kind": "const","type": 709,"value": 1848},{"import": 1403,"src": 1593,"name": "Arch","kind": "const","type": 709,"value": 721},{"import": 1403,"src": 1594,"name": "Model","kind": "const","type": 709,"value": 1849},{"import": 1403,"src": 1595,"name": "baseline"},{"import": 1431,"src": 471,"name": "FixedBufferStream","kind": "const","type": 767,"value": 863},{"import": 1431,"src": 72,"name": "fixedBufferStream","kind": "const","type": 1851,"value": 939},{"import": 1431,"src": 1596,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1431,"src": 1597,"name": "io","kind": "const","type": 709,"value": 1529},{"import": 1431,"src": 1598,"name": "testing"},{"import": 1431,"src": 1599,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1431,"src": 1600,"name": "assert"},{"import": 1431,"src": 470,"name": "NonSentinelSpan","kind": "const","type": 766,"value": 862},{"import": 1432,"src": 472,"name": "Reader","kind": "const","type": 769,"value": 864},{"import": 1432,"src": 1601,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1432,"src": 1602,"name": "math","kind": "const","type": 709,"value": 1531},{"import": 1432,"src": 1603,"name": "assert","kind": "const","type": 29,"value": 36},{"import": 1432,"src": 1604,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1432,"src": 1605,"name": "testing"},{"import": 1436,"src": 473,"name": "SeekableStream","kind": "const","type": 773,"value": 865},{"import": 1436,"src": 1606,"name": "std"},{"import": 1437,"src": 1607,"name": "zig_version"},{"import": 1437,"src": 1608,"name": "zig_is_stage2"},{"import": 1437,"src": 1609,"name": "output_mode"},{"import": 1437,"src": 1610,"name": "link_mode"},{"import": 1437,"src": 1611,"name": "is_test"},{"import": 1437,"src": 1612,"name": "single_threaded"},{"import": 1437,"src": 1613,"name": "abi"},{"import": 1437,"src": 1614,"name": "cpu"},{"import": 1437,"src": 1615,"name": "os"},{"import": 1437,"src": 1616,"name": "target"},{"import": 1437,"src": 1617,"name": "object_format"},{"import": 1437,"src": 1618,"name": "mode"},{"import": 1437,"src": 1619,"name": "link_libc"},{"import": 1437,"src": 1620,"name": "link_libcpp"},{"import": 1437,"src": 1621,"name": "have_error_return_tracing"},{"import": 1437,"src": 1622,"name": "valgrind_support"},{"import": 1437,"src": 1623,"name": "position_independent_code"},{"import": 1437,"src": 1624,"name": "position_independent_executable"},{"import": 1437,"src": 1625,"name": "strip_debug_info"},{"import": 1437,"src": 1626,"name": "code_model"},{"import": 1437,"src": 1627,"name": "subsystem"},{"import": 1437,"src": 1628,"name": "StackTrace","kind": "const","type": 709,"value": 962},{"import": 1437,"src": 1629,"name": "GlobalLinkage","kind": "const","type": 709,"value": 1852},{"import": 1437,"src": 1630,"name": "AtomicOrder","kind": "const","type": 709,"value": 1853},{"import": 1437,"src": 1631,"name": "ReduceOp"},{"import": 1437,"src": 1632,"name": "AtomicRmwOp","kind": "const","type": 709,"value": 1854},{"import": 1437,"src": 1633,"name": "CodeModel"},{"import": 1437,"src": 1634,"name": "Mode","kind": "const","type": 709,"value": 1541},{"import": 1437,"src": 1635,"name": "CallingConvention","kind": "const","type": 709,"value": 1855},{"import": 1437,"src": 1636,"name": "AddressSpace","kind": "const","type": 709,"value": 1856},{"import": 1437,"src": 1637,"name": "SourceLocation"},{"import": 1437,"src": 1638,"name": "TypeId","kind": "const","type": 709,"value": 796},{"import": 1437,"src": 1639,"name": "TypeInfo","kind": "const","type": 709,"value": 797},{"import": 1437,"src": 1640,"name": "FloatMode"},{"import": 1437,"src": 1641,"name": "Endian","kind": "const","type": 709,"value": 757},{"import": 1437,"src": 1642,"name": "Signedness","kind": "const","type": 709,"value": 714},{"import": 1437,"src": 1643,"name": "OutputMode","kind": "const","type": 709,"value": 1540},{"import": 1437,"src": 1644,"name": "LinkMode"},{"import": 1437,"src": 1645,"name": "WasiExecModel"},{"import": 1437,"src": 1646,"name": "Version","kind": "const","type": 709,"value": 1838},{"import": 1437,"src": 1647,"name": "testVersionParse"},{"import": 1437,"src": 1648,"name": "CallOptions","kind": "const","type": 709,"value": 1857},{"import": 1437,"src": 1649,"name": "ExportOptions","kind": "const","type": 709,"value": 1858},{"import": 1437,"src": 1650,"name": "ExternOptions","kind": "const","type": 709,"value": 1859},{"import": 1437,"src": 1651,"name": "TestFn"},{"import": 1437,"src": 1652,"name": "PanicFn","kind": "const","type": 709,"value": 0},{"import": 1437,"src": 1653,"name": "panic","kind": "const","type": 0,"value": 0},{"import": 1437,"src": 0,"name": "default_panic","kind": "const","type": 0,"value": 0},{"import": 1437,"src": 1654,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1437,"src": 1655,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1437,"src": 1656,"name": "root","kind": "const","type": 709,"value": 948},{"import": 1437,"src": 1657,"name": "Size","kind": "const","type": 709,"value": 806},{"import": 1437,"src": 1658,"name": "Data","kind": "const","type": 709,"value": 1868},{"import": 1459,"src": 486,"name": "SinglyLinkedList","kind": "const","type": 809,"value": 884},{"import": 1459,"src": 491,"name": "TailQueue","kind": "const","type": 823,"value": 889},{"import": 1459,"src": 1659,"name": "std"},{"import": 1459,"src": 1660,"name": "debug"},{"import": 1459,"src": 1661,"name": "assert"},{"import": 1459,"src": 1662,"name": "testing"},{"import": 1459,"src": 1663,"name": "mem"},{"import": 1459,"src": 1664,"name": "Allocator"},{"import": 1459,"src": 1665,"name": "Data"},{"import": 1459,"src": 1666,"name": "insertAfter"},{"import": 1459,"src": 1667,"name": "removeNext"},{"import": 1459,"src": 1668,"name": "findLast"},{"import": 1459,"src": 1669,"name": "countChildren"},{"import": 1462,"src": 490,"name": "Queue","kind": "const","type": 820,"value": 888},{"import": 1462,"src": 1670,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1462,"src": 1671,"name": "builtin"},{"import": 1462,"src": 1672,"name": "assert"},{"import": 1462,"src": 1673,"name": "expect"},{"import": 1462,"src": 1674,"name": "Context"},{"import": 1462,"src": 1675,"name": "puts_per_thread"},{"import": 1462,"src": 1676,"name": "put_thread_count"},{"import": 1462,"src": 1677,"name": "startPuts"},{"import": 1462,"src": 1678,"name": "startGets"},{"import": 1465,"src": 1679,"name": "tryLock"},{"import": 1465,"src": 10,"name": "lock","kind": "const","type": 9,"value": 10},{"import": 1465,"src": 19,"name": "unlock","kind": "const","type": 9,"value": 20},{"import": 1465,"src": 1680,"name": "AtomicMutex","kind": "const","type": 709,"value": 1551},{"import": 1465,"src": 1681,"name": "PthreadMutex"},{"import": 1465,"src": 1682,"name": "Dummy"},{"import": 1465,"src": 1683,"name": "WindowsMutex"},{"import": 1465,"src": 1684,"name": "Mutex","kind": "const","type": 709,"value": 1465},{"import": 1465,"src": 1685,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1465,"src": 1686,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1465,"src": 1687,"name": "os","kind": "const","type": 709,"value": 1533},{"import": 1465,"src": 1688,"name": "assert"},{"import": 1465,"src": 1689,"name": "windows"},{"import": 1465,"src": 1690,"name": "linux","kind": "const","type": 709,"value": 1870},{"import": 1465,"src": 1691,"name": "testing"},{"import": 1465,"src": 1692,"name": "StaticResetEvent"},{"import": 1465,"src": 1693,"name": "Impl","kind": "const","type": 709,"value": 1551},{"import": 1465,"src": 1694,"name": "TestContext"},{"import": 1465,"src": 1695,"name": "worker"},{"import": 1466,"src": 492,"name": "Atomic","kind": "const","type": 825,"value": 890},{"import": 1466,"src": 1696,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1466,"src": 1697,"name": "testing"},{"import": 1466,"src": 1698,"name": "target"},{"import": 1466,"src": 1699,"name": "Ordering"},{"import": 1466,"src": 1700,"name": "atomicIntTypes"},{"import": 1466,"src": 1701,"name": "atomic_rmw_orderings"},{"import": 1466,"src": 1702,"name": "atomic_cmpxchg_orderings"},{"import": 1469,"src": 1703,"name": "Loop","kind": "const","type": 709,"value": 1872},{"import": 1469,"src": 1704,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1469,"src": 1705,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1469,"src": 1706,"name": "root","kind": "const","type": 709,"value": 948},{"import": 1469,"src": 1707,"name": "assert"},{"import": 1469,"src": 1708,"name": "testing"},{"import": 1469,"src": 1709,"name": "mem"},{"import": 1469,"src": 1710,"name": "os","kind": "const","type": 709,"value": 1533},{"import": 1469,"src": 1711,"name": "windows","kind": "const","type": 709,"value": 1873},{"import": 1469,"src": 1712,"name": "maxInt"},{"import": 1469,"src": 1713,"name": "Thread","kind": "const","type": 709,"value": 1519},{"import": 1469,"src": 1714,"name": "is_windows"},{"import": 1469,"src": 1715,"name": "testEventLoop"},{"import": 1469,"src": 1716,"name": "testEventLoop2"},{"import": 1469,"src": 1717,"name": "testRunDetachedData"},{"import": 1469,"src": 1718,"name": "testRunDetached"},{"import": 1469,"src": 1719,"name": "testSleep"},{"import": 1469,"src": 1720,"name": "Read","kind": "const","type": 709,"value": 1874},{"import": 1469,"src": 1721,"name": "ReadV","kind": "const","type": 709,"value": 1875},{"import": 1469,"src": 1722,"name": "Write","kind": "const","type": 709,"value": 1876},{"import": 1469,"src": 1723,"name": "WriteV","kind": "const","type": 709,"value": 1877},{"import": 1469,"src": 1724,"name": "PWrite","kind": "const","type": 709,"value": 1878},{"import": 1469,"src": 1725,"name": "PWriteV","kind": "const","type": 709,"value": 1879},{"import": 1469,"src": 1726,"name": "PRead","kind": "const","type": 709,"value": 1880},{"import": 1469,"src": 1727,"name": "PReadV","kind": "const","type": 709,"value": 1881},{"import": 1469,"src": 1728,"name": "Open","kind": "const","type": 709,"value": 1882},{"import": 1469,"src": 1729,"name": "OpenAt","kind": "const","type": 709,"value": 1883},{"import": 1469,"src": 1730,"name": "Close","kind": "const","type": 709,"value": 1884},{"import": 1469,"src": 1731,"name": "FAccessAt","kind": "const","type": 709,"value": 1885},{"import": 1472,"src": 493,"name": "Stack","kind": "const","type": 833,"value": 891},{"import": 1472,"src": 1732,"name": "std"},{"import": 1472,"src": 1733,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1472,"src": 1734,"name": "assert"},{"import": 1472,"src": 1735,"name": "expect"},{"import": 1472,"src": 1736,"name": "Context"},{"import": 1472,"src": 1737,"name": "puts_per_thread"},{"import": 1472,"src": 1738,"name": "put_thread_count"},{"import": 1472,"src": 1739,"name": "startPuts"},{"import": 1472,"src": 1740,"name": "startGets"},{"import": 1469,"src": 1741,"name": "overlapped_init","kind": "const","type": 726,"value": null},{"import": 1469,"src": 1742,"name": "Overlapped","kind": "const","type": 709,"value": 726},{"import": 1469,"src": 1743,"name": "Id","kind": "const","type": 709,"value": 1887},{"import": 1469,"src": 1744,"name": "EventFd","kind": "const","type": 709,"value": 835},{"import": 1469,"src": 1745,"name": "Basic"},{"import": 1469,"src": 1746,"name": "KEventFd"},{"import": 1469,"src": 1747,"name": "KEventBasic"},{"import": 1476,"src": 1748,"name": "Level","kind": "const","type": 709,"value": 913},{"import": 1476,"src": 1749,"name": "default_level","kind": "const","type": 913,"value": null},{"import": 1476,"src": 1750,"name": "level","kind": "const","type": 913,"value": null},{"import": 1476,"src": 1751,"name": "ScopeLevel","kind": "const","type": 709,"value": 1888},{"import": 1476,"src": 393,"name": "defaultLog","kind": "const","type": 1889,"value": 940},{"import": 1476,"src": 498,"name": "scoped","kind": "const","type": 854,"value": 896},{"import": 1476,"src": 1752,"name": "default","kind": "const","type": 709,"value": 855},{"import": 1476,"src": 1753,"name": "emerg"},{"import": 1476,"src": 1754,"name": "alert"},{"import": 1476,"src": 1755,"name": "crit"},{"import": 1476,"src": 1756,"name": "err","kind": "const","type": 1477,"value": 923},{"import": 1476,"src": 1757,"name": "warn"},{"import": 1476,"src": 1758,"name": "notice"},{"import": 1476,"src": 1759,"name": "info","kind": "const","type": 1478,"value": 924},{"import": 1476,"src": 1760,"name": "debug"},{"import": 1476,"src": 1761,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1476,"src": 1762,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1476,"src": 1763,"name": "root","kind": "const","type": 709,"value": 948},{"import": 1476,"src": 1764,"name": "scope_levels","kind": "const","type": 1890,"value": null},{"import": 1476,"src": 352,"name": "log","kind": "const","type": 1891,"value": 941},{"import": 1480,"src": 259,"name": "syscall0","kind": "const","type": 350,"value": 381},{"import": 1480,"src": 250,"name": "syscall1","kind": "const","type": 341,"value": 371},{"import": 1480,"src": 248,"name": "syscall2","kind": "const","type": 339,"value": 369},{"import": 1480,"src": 257,"name": "syscall3","kind": "const","type": 348,"value": 379},{"import": 1480,"src": 254,"name": "syscall4","kind": "const","type": 344,"value": 375},{"import": 1480,"src": 1765,"name": "syscall5"},{"import": 1480,"src": 285,"name": "syscall6","kind": "const","type": 372,"value": 409},{"import": 1480,"src": 1766,"name": "clone"},{"import": 1480,"src": 1767,"name": "restore","kind": "const","type": 343,"value": 374},{"import": 1480,"src": 253,"name": "restore_rt","kind": "const","type": 343,"value": 374},{"import": 1480,"src": 1768,"name": "mode_t","kind": "const","type": 709,"value": 719},{"import": 1480,"src": 1769,"name": "time_t"},{"import": 1480,"src": 1770,"name": "nlink_t"},{"import": 1480,"src": 1771,"name": "blksize_t"},{"import": 1480,"src": 1772,"name": "blkcnt_t"},{"import": 1480,"src": 1773,"name": "SYS","kind": "const","type": 709,"value": 1206},{"import": 1480,"src": 1774,"name": "O","kind": "const","type": 709,"value": 1892},{"import": 1480,"src": 1775,"name": "F"},{"import": 1480,"src": 1776,"name": "MAP","kind": "const","type": 709,"value": 1893},{"import": 1480,"src": 1777,"name": "VDSO"},{"import": 1480,"src": 1778,"name": "ARCH","kind": "const","type": 709,"value": 1894},{"import": 1480,"src": 1779,"name": "REG","kind": "const","type": 709,"value": 1895},{"import": 1480,"src": 1780,"name": "LOCK","kind": "const","type": 709,"value": 1896},{"import": 1480,"src": 1781,"name": "Flock"},{"import": 1480,"src": 1782,"name": "msghdr"},{"import": 1480,"src": 1783,"name": "msghdr_const"},{"import": 1480,"src": 1784,"name": "off_t","kind": "const","type": 709,"value": 836},{"import": 1480,"src": 1785,"name": "ino_t","kind": "const","type": 709,"value": 732},{"import": 1480,"src": 1786,"name": "dev_t","kind": "const","type": 709,"value": 732},{"import": 1480,"src": 1787,"name": "Stat","kind": "const","type": 709,"value": 870},{"import": 1480,"src": 1788,"name": "timeval"},{"import": 1480,"src": 1789,"name": "timezone"},{"import": 1480,"src": 1790,"name": "Elf_Symndx"},{"import": 1480,"src": 1791,"name": "greg_t","kind": "const","type": 709,"value": 719},{"import": 1480,"src": 1792,"name": "gregset_t","kind": "const","type": 709,"value": 1897},{"import": 1480,"src": 1793,"name": "fpstate","kind": "const","type": 709,"value": 1898},{"import": 1480,"src": 1794,"name": "fpregset_t","kind": "const","type": 709,"value": 1899},{"import": 1480,"src": 1795,"name": "sigcontext"},{"import": 1480,"src": 1796,"name": "mcontext_t","kind": "const","type": 709,"value": 1900},{"import": 1480,"src": 1797,"name": "ucontext_t","kind": "const","type": 709,"value": 1901},{"import": 1480,"src": 1798,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1480,"src": 1799,"name": "maxInt"},{"import": 1480,"src": 1800,"name": "linux","kind": "const","type": 709,"value": 1870},{"import": 1480,"src": 1801,"name": "iovec"},{"import": 1480,"src": 1802,"name": "iovec_const"},{"import": 1480,"src": 1803,"name": "pid_t"},{"import": 1480,"src": 1804,"name": "uid_t","kind": "const","type": 709,"value": 893},{"import": 1480,"src": 1805,"name": "gid_t","kind": "const","type": 709,"value": 893},{"import": 1480,"src": 1806,"name": "clock_t"},{"import": 1480,"src": 1807,"name": "stack_t","kind": "const","type": 709,"value": 1902},{"import": 1480,"src": 1808,"name": "sigset_t","kind": "const","type": 709,"value": 1903},{"import": 1480,"src": 1809,"name": "sockaddr"},{"import": 1480,"src": 1810,"name": "socklen_t"},{"import": 1480,"src": 1811,"name": "timespec","kind": "const","type": 709,"value": 1222},{"import": 1482,"src": 1812,"name": "page_size","kind": "const","type": 778,"value": null},{"import": 1482,"src": 1813,"name": "byte_size_in_bits"},{"import": 1482,"src": 1814,"name": "Allocator","kind": "const","type": 709,"value": 1557},{"import": 1482,"src": 1815,"name": "ValidationAllocator"},{"import": 1482,"src": 1816,"name": "validationWrap"},{"import": 1482,"src": 315,"name": "alignAllocLen","kind": "const","type": 358,"value": 488},{"import": 1482,"src": 155,"name": "copy","kind": "const","type": 1904,"value": 942},{"import": 1482,"src": 1817,"name": "copyBackwards"},{"import": 1482,"src": 246,"name": "set","kind": "const","type": 1905,"value": 943},{"import": 1482,"src": 322,"name": "zeroes","kind": "const","type": 914,"value": 906},{"import": 1482,"src": 1818,"name": "zeroInit"},{"import": 1482,"src": 1819,"name": "order"},{"import": 1482,"src": 1820,"name": "lessThan"},{"import": 1482,"src": 64,"name": "eql","kind": "const","type": 785,"value": 869},{"import": 1482,"src": 1821,"name": "indexOfDiff"},{"import": 1482,"src": 1822,"name": "toSliceConst"},{"import": 1482,"src": 1823,"name": "toSlice"},{"import": 1482,"src": 469,"name": "Span","kind": "const","type": 763,"value": 861},{"import": 1482,"src": 67,"name": "span","kind": "const","type": 1906,"value": 944},{"import": 1482,"src": 202,"name": "spanZ","kind": "const","type": 1907,"value": 945},{"import": 1482,"src": 1824,"name": "sliceTo"},{"import": 1482,"src": 217,"name": "len","kind": "const","type": 1908,"value": 946},{"import": 1482,"src": 317,"name": "lenZ","kind": "const","type": 1909,"value": 947},{"import": 1482,"src": 286,"name": "indexOfSentinel","kind": "const","type": 1910,"value": 948},{"import": 1482,"src": 1825,"name": "allEqual"},{"import": 1482,"src": 1826,"name": "dupe"},{"import": 1482,"src": 1827,"name": "dupeZ"},{"import": 1482,"src": 1828,"name": "trimLeft"},{"import": 1482,"src": 367,"name": "trimRight","kind": "const","type": 1911,"value": 949},{"import": 1482,"src": 1829,"name": "trim"},{"import": 1482,"src": 210,"name": "indexOfScalar","kind": "const","type": 792,"value": 874},{"import": 1482,"src": 1830,"name": "lastIndexOfScalar"},{"import": 1482,"src": 227,"name": "indexOfScalarPos","kind": "const","type": 790,"value": 873},{"import": 1482,"src": 1831,"name": "indexOfAny"},{"import": 1482,"src": 1832,"name": "lastIndexOfAny"},{"import": 1482,"src": 1833,"name": "indexOfAnyPos"},{"import": 1482,"src": 1834,"name": "indexOf"},{"import": 1482,"src": 1835,"name": "lastIndexOfLinear"},{"import": 1482,"src": 438,"name": "indexOfPosLinear","kind": "const","type": 1912,"value": 950},{"import": 1482,"src": 1836,"name": "lastIndexOf"},{"import": 1482,"src": 396,"name": "indexOfPos","kind": "const","type": 1913,"value": 951},{"import": 1482,"src": 1837,"name": "count"},{"import": 1482,"src": 1838,"name": "containsAtLeast"},{"import": 1482,"src": 290,"name": "readVarInt","kind": "const","type": 1914,"value": 952},{"import": 1482,"src": 185,"name": "readIntNative","kind": "const","type": 1915,"value": 953},{"import": 1482,"src": 219,"name": "readIntForeign","kind": "const","type": 1916,"value": 954},{"import": 1482,"src": 1839,"name": "readIntLittle","kind": "const","type": 1915,"value": 953},{"import": 1482,"src": 1840,"name": "readIntBig"},{"import": 1482,"src": 1841,"name": "readIntSliceNative"},{"import": 1482,"src": 1842,"name": "readIntSliceForeign"},{"import": 1482,"src": 1843,"name": "readIntSliceLittle"},{"import": 1482,"src": 1844,"name": "readIntSliceBig"},{"import": 1482,"src": 87,"name": "readInt","kind": "const","type": 1917,"value": 955},{"import": 1482,"src": 1845,"name": "readIntSlice"},{"import": 1482,"src": 1846,"name": "writeIntNative"},{"import": 1482,"src": 1847,"name": "writeIntForeign"},{"import": 1482,"src": 1848,"name": "writeIntLittle"},{"import": 1482,"src": 1849,"name": "writeIntBig"},{"import": 1482,"src": 1850,"name": "writeInt"},{"import": 1482,"src": 1851,"name": "writeIntSliceLittle"},{"import": 1482,"src": 1852,"name": "writeIntSliceBig"},{"import": 1482,"src": 1853,"name": "writeIntSliceNative"},{"import": 1482,"src": 1854,"name": "writeIntSliceForeign"},{"import": 1482,"src": 1855,"name": "writeIntSlice"},{"import": 1482,"src": 1856,"name": "bswapAllFields"},{"import": 1482,"src": 368,"name": "tokenize","kind": "const","type": 1918,"value": 956},{"import": 1482,"src": 362,"name": "split","kind": "const","type": 1919,"value": 957},{"import": 1482,"src": 1857,"name": "separate"},{"import": 1482,"src": 1858,"name": "startsWith"},{"import": 1482,"src": 1859,"name": "endsWith"},{"import": 1482,"src": 502,"name": "TokenIterator","kind": "const","type": 879,"value": 900},{"import": 1482,"src": 500,"name": "SplitIterator","kind": "const","type": 875,"value": 898},{"import": 1482,"src": 1860,"name": "join"},{"import": 1482,"src": 1861,"name": "joinZ"},{"import": 1482,"src": 1862,"name": "concat"},{"import": 1482,"src": 1863,"name": "min"},{"import": 1482,"src": 1864,"name": "max"},{"import": 1482,"src": 133,"name": "swap","kind": "const","type": 1920,"value": 958},{"import": 1482,"src": 444,"name": "reverse","kind": "const","type": 1921,"value": 959},{"import": 1482,"src": 417,"name": "rotate","kind": "const","type": 1922,"value": 960},{"import": 1482,"src": 1865,"name": "replace"},{"import": 1482,"src": 1866,"name": "replaceScalar"},{"import": 1482,"src": 1867,"name": "collapseRepeatsLen"},{"import": 1482,"src": 1868,"name": "collapseRepeats"},{"import": 1482,"src": 1869,"name": "replacementSize"},{"import": 1482,"src": 1870,"name": "replaceOwned"},{"import": 1482,"src": 1871,"name": "littleToNative"},{"import": 1482,"src": 1872,"name": "bigToNative"},{"import": 1482,"src": 1873,"name": "toNative"},{"import": 1482,"src": 1874,"name": "nativeTo"},{"import": 1482,"src": 1875,"name": "nativeToLittle"},{"import": 1482,"src": 1876,"name": "nativeToBig"},{"import": 1482,"src": 313,"name": "alignPointerOffset","kind": "const","type": 1923,"value": 961},{"import": 1482,"src": 267,"name": "alignPointer","kind": "const","type": 1924,"value": 962},{"import": 1482,"src": 193,"name": "asBytes","kind": "const","type": 1925,"value": 963},{"import": 1482,"src": 1877,"name": "toBytes"},{"import": 1482,"src": 1878,"name": "bytesAsValue"},{"import": 1482,"src": 1879,"name": "bytesToValue"},{"import": 1482,"src": 288,"name": "bytesAsSlice","kind": "const","type": 1926,"value": 964},{"import": 1482,"src": 240,"name": "sliceAsBytes","kind": "const","type": 1927,"value": 965},{"import": 1482,"src": 125,"name": "alignForward","kind": "const","type": 42,"value": 175},{"import": 1482,"src": 231,"name": "alignForwardGeneric","kind": "const","type": 1928,"value": 966},{"import": 1482,"src": 1880,"name": "doNotOptimizeAway"},{"import": 1482,"src": 359,"name": "alignBackwardAnyAlign","kind": "const","type": 42,"value": 567},{"import": 1482,"src": 395,"name": "alignBackward","kind": "const","type": 42,"value": 679},{"import": 1482,"src": 293,"name": "alignBackwardGeneric","kind": "const","type": 1929,"value": 967},{"import": 1482,"src": 1881,"name": "isValidAlign"},{"import": 1482,"src": 1882,"name": "isAlignedAnyAlign"},{"import": 1482,"src": 266,"name": "isAligned","kind": "const","type": 260,"value": 388},{"import": 1482,"src": 312,"name": "isAlignedGeneric","kind": "const","type": 1930,"value": 968},{"import": 1482,"src": 1883,"name": "alignInBytes"},{"import": 1482,"src": 1884,"name": "alignInSlice"},{"import": 1482,"src": 1885,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1482,"src": 1886,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1482,"src": 1887,"name": "debug","kind": "const","type": 709,"value": 1522},{"import": 1482,"src": 1888,"name": "assert","kind": "const","type": 29,"value": 36},{"import": 1482,"src": 1889,"name": "math","kind": "const","type": 709,"value": 1531},{"import": 1482,"src": 1890,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1482,"src": 1891,"name": "meta","kind": "const","type": 709,"value": 1532},{"import": 1482,"src": 1892,"name": "trait","kind": "const","type": 709,"value": 1841},{"import": 1482,"src": 1893,"name": "testing"},{"import": 1482,"src": 1894,"name": "Endian","kind": "const","type": 709,"value": 757},{"import": 1482,"src": 1895,"name": "native_endian","kind": "const","type": 757,"value": null},{"import": 1482,"src": 1896,"name": "failAllocator"},{"import": 1482,"src": 1897,"name": "failAllocatorAlloc"},{"import": 1482,"src": 1898,"name": "SliceTo"},{"import": 1482,"src": 1899,"name": "lenSliceTo"},{"import": 1482,"src": 1900,"name": "boyerMooreHorspoolPreprocessReverse"},{"import": 1482,"src": 439,"name": "boyerMooreHorspoolPreprocess","kind": "const","type": 657,"value": 770},{"import": 1482,"src": 1901,"name": "joinMaybeZ"},{"import": 1482,"src": 1902,"name": "testReadIntImpl"},{"import": 1482,"src": 1903,"name": "testWriteIntImpl"},{"import": 1482,"src": 1904,"name": "testCollapseRepeats"},{"import": 1482,"src": 484,"name": "CopyPtrAttrs","kind": "const","type": 804,"value": 882},{"import": 1482,"src": 485,"name": "AsBytesReturnType","kind": "const","type": 808,"value": 883},{"import": 1482,"src": 1905,"name": "BytesAsValueReturnType"},{"import": 1482,"src": 496,"name": "BytesAsSliceReturnType","kind": "const","type": 842,"value": 894},{"import": 1482,"src": 489,"name": "SliceAsBytesReturnType","kind": "const","type": 818,"value": 887},{"import": 1482,"src": 1906,"name": "AlignedSlice"},{"import": 1483,"src": 364,"name": "parseInt","kind": "const","type": 1931,"value": 969},{"import": 1483,"src": 501,"name": "EnumerateIterator","kind": "const","type": 877,"value": 899},{"import": 1483,"src": 365,"name": "enumerate","kind": "const","type": 1932,"value": 970},{"import": 1483,"src": 1907,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1485,"src": 332,"name": "part1","kind": "const","type": 467,"value": 531},{"import": 1485,"src": 333,"name": "part2","kind": "const","type": 468,"value": 532},{"import": 1485,"src": 1908,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1485,"src": 1909,"name": "util","kind": "const","type": 709,"value": 1483},{"import": 1485,"src": 1910,"name": "Board","kind": "const","type": 709,"value": 882},{"import": 1501,"src": 506,"name": "CountingWriter","kind": "const","type": 903,"value": 904},{"import": 1501,"src": 430,"name": "countingWriter","kind": "const","type": 1936,"value": 971},{"import": 1501,"src": 1911,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1501,"src": 1912,"name": "io","kind": "const","type": 709,"value": 1529},{"import": 1501,"src": 1913,"name": "testing"},{"import": 1504,"src": 1914,"name": "TAG","kind": "const","type": 709,"value": 1937},{"import": 1504,"src": 1915,"name": "AT","kind": "const","type": 709,"value": 1938},{"import": 1504,"src": 1916,"name": "OP"},{"import": 1504,"src": 1917,"name": "FORM","kind": "const","type": 709,"value": 1939},{"import": 1504,"src": 1918,"name": "ATE"},{"import": 1504,"src": 1919,"name": "CFA"},{"import": 1504,"src": 1920,"name": "CHILDREN","kind": "const","type": 709,"value": 1940},{"import": 1504,"src": 1921,"name": "LNS","kind": "const","type": 709,"value": 1941},{"import": 1504,"src": 1922,"name": "LNE","kind": "const","type": 709,"value": 1942},{"import": 1504,"src": 1923,"name": "LANG"},{"import": 1504,"src": 1924,"name": "UT"},{"import": 1504,"src": 1925,"name": "LNCT"},{"import": 1504,"src": 1926,"name": "DwarfInfo","kind": "const","type": 709,"value": 933},{"import": 1504,"src": 69,"name": "openDwarfDebugInfo","kind": "const","type": 67,"value": 74},{"import": 1504,"src": 1927,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1504,"src": 1928,"name": "debug","kind": "const","type": 709,"value": 1522},{"import": 1504,"src": 1929,"name": "fs","kind": "const","type": 709,"value": 1526},{"import": 1504,"src": 1930,"name": "io","kind": "const","type": 709,"value": 1529},{"import": 1504,"src": 1931,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1504,"src": 1932,"name": "math","kind": "const","type": 709,"value": 1531},{"import": 1504,"src": 1933,"name": "leb","kind": "const","type": 709,"value": 1943},{"import": 1504,"src": 1934,"name": "ArrayList","kind": "const","type": 744,"value": 858},{"import": 1504,"src": 1935,"name": "PcRange","kind": "const","type": 709,"value": 1843},{"import": 1504,"src": 1936,"name": "Func","kind": "const","type": 709,"value": 754},{"import": 1504,"src": 1937,"name": "CompileUnit","kind": "const","type": 709,"value": 750},{"import": 1504,"src": 1938,"name": "AbbrevTable","kind": "const","type": 709,"value": 745},{"import": 1504,"src": 1939,"name": "AbbrevTableHeader","kind": "const","type": 709,"value": 742},{"import": 1504,"src": 1940,"name": "AbbrevTableEntry","kind": "const","type": 709,"value": 746},{"import": 1504,"src": 1941,"name": "AbbrevAttr","kind": "const","type": 709,"value": 748},{"import": 1504,"src": 1942,"name": "FormValue","kind": "const","type": 709,"value": 1425},{"import": 1504,"src": 1943,"name": "Constant","kind": "const","type": 709,"value": 1615},{"import": 1504,"src": 1944,"name": "Die","kind": "const","type": 709,"value": 1609},{"import": 1504,"src": 1945,"name": "FileEntry","kind": "const","type": 709,"value": 784},{"import": 1504,"src": 1946,"name": "LineNumberProgram","kind": "const","type": 709,"value": 1117},{"import": 1504,"src": 82,"name": "readUnitLength","kind": "const","type": 1944,"value": 972},{"import": 1504,"src": 225,"name": "readAllocBytes","kind": "const","type": 1945,"value": 973},{"import": 1504,"src": 221,"name": "readAddress","kind": "const","type": 1946,"value": 974},{"import": 1504,"src": 223,"name": "parseFormValueBlockLen","kind": "const","type": 1947,"value": 975},{"import": 1504,"src": 222,"name": "parseFormValueBlock","kind": "const","type": 1948,"value": 976},{"import": 1504,"src": 224,"name": "parseFormValueConstant","kind": "const","type": 1949,"value": 977},{"import": 1504,"src": 226,"name": "parseFormValueRef","kind": "const","type": 1950,"value": 978},{"import": 1504,"src": 106,"name": "parseFormValue","kind": "const","type": 1951,"value": 979},{"import": 1504,"src": 104,"name": "getAbbrevTableEntry","kind": "const","type": 123,"value": 133},{"import": 1415,"src": 131,"name": "isUsed"},{"import": 1415,"src": 233,"name": "isTombstone"},{"import": 1415,"src": 234,"name": "takeFingerprint"},{"import": 1415,"src": 235,"name": "fill"},{"import": 1415,"src": 1502,"name": "remove"},{"import": 1415,"src": 1503,"name": "FingerPrint","kind": "const","type": 709,"value": 1191},{"import": 1415,"src": 1504,"name": "free"},{"import": 1415,"src": 1505,"name": "tombstone"},{"import": 1521,"src": 1947,"name": "Misc","kind": "const","type": 709,"value": 1953},{"import": 1510,"src": 326,"name": "part1","kind": "const","type": 461,"value": 525},{"import": 1510,"src": 327,"name": "part2","kind": "const","type": 462,"value": 526},{"import": 1510,"src": 1948,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1510,"src": 1949,"name": "util","kind": "const","type": 709,"value": 1483},{"import": 1511,"src": 328,"name": "part1","kind": "const","type": 463,"value": 527},{"import": 1511,"src": 329,"name": "part2","kind": "const","type": 464,"value": 528},{"import": 1511,"src": 1950,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1511,"src": 1951,"name": "util","kind": "const","type": 709,"value": 1483},{"import": 1512,"src": 330,"name": "part1","kind": "const","type": 465,"value": 529},{"import": 1512,"src": 331,"name": "part2","kind": "const","type": 466,"value": 530},{"import": 1512,"src": 1952,"name": "std"},{"import": 1512,"src": 1953,"name": "util"},{"import": 1513,"src": 334,"name": "part1","kind": "const","type": 469,"value": 533},{"import": 1513,"src": 335,"name": "part2","kind": "const","type": 470,"value": 534},{"import": 1513,"src": 1954,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1513,"src": 1955,"name": "math","kind": "const","type": 709,"value": 1531},{"import": 1513,"src": 1956,"name": "util","kind": "const","type": 709,"value": 1483},{"import": 1513,"src": 1957,"name": "Map","kind": "const","type": 709,"value": 1301},{"import": 1513,"src": 381,"name": "signum","kind": "const","type": 543,"value": 626},{"import": 1513,"src": 380,"name": "abs","kind": "const","type": 543,"value": 625},{"import": 1514,"src": 336,"name": "part1","kind": "const","type": 471,"value": 535},{"import": 1514,"src": 337,"name": "part2","kind": "const","type": 472,"value": 536},{"import": 1514,"src": 1958,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1514,"src": 1959,"name": "util","kind": "const","type": 709,"value": 1483},{"import": 1514,"src": 1960,"name": "Key","kind": "const","type": 709,"value": 888},{"import": 1514,"src": 383,"name": "simulate_single","kind": "const","type": 549,"value": 632},{"import": 1514,"src": 382,"name": "simulate","kind": "const","type": 544,"value": 627},{"import": 1515,"src": 338,"name": "part1","kind": "const","type": 473,"value": 537},{"import": 1515,"src": 339,"name": "part2","kind": "const","type": 474,"value": 538},{"import": 1515,"src": 1961,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1515,"src": 1962,"name": "util","kind": "const","type": 709,"value": 1483},{"import": 1515,"src": 389,"name": "abs","kind": "const","type": 543,"value": 664},{"import": 1516,"src": 340,"name": "part1","kind": "const","type": 475,"value": 539},{"import": 1516,"src": 341,"name": "part2","kind": "const","type": 476,"value": 540},{"import": 1516,"src": 1963,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1516,"src": 1964,"name": "util"},{"import": 1516,"src": 1965,"name": "Wires"},{"import": 1516,"src": 1966,"name": "signals_to_bits"},{"import": 1519,"src": 1967,"name": "AutoResetEvent","kind": "const","type": 709,"value": 1954},{"import": 1519,"src": 1968,"name": "Futex"},{"import": 1519,"src": 1969,"name": "ResetEvent","kind": "const","type": 709,"value": 1955},{"import": 1519,"src": 1970,"name": "StaticResetEvent","kind": "const","type": 709,"value": 1546},{"import": 1519,"src": 1971,"name": "Mutex","kind": "const","type": 709,"value": 1465},{"import": 1519,"src": 1972,"name": "Semaphore"},{"import": 1519,"src": 1973,"name": "Condition"},{"import": 1519,"src": 1974,"name": "spinLoopHint"},{"import": 1519,"src": 1975,"name": "use_pthreads","kind": "const","type": 720,"value": "false"},{"import": 1519,"src": 1976,"name": "max_name_len"},{"import": 1519,"src": 1977,"name": "SetNameError"},{"import": 1519,"src": 1978,"name": "setName"},{"import": 1519,"src": 1979,"name": "GetNameError"},{"import": 1519,"src": 1980,"name": "getName"},{"import": 1519,"src": 1981,"name": "Id","kind": "const","type": 709,"value": 732},{"import": 1519,"src": 14,"name": "getCurrentId","kind": "const","type": 13,"value": 14},{"import": 1519,"src": 1982,"name": "CpuCountError"},{"import": 1519,"src": 1983,"name": "getCpuCount"},{"import": 1519,"src": 1984,"name": "SpawnConfig"},{"import": 1519,"src": 1985,"name": "SpawnError"},{"import": 1519,"src": 1986,"name": "spawn"},{"import": 1519,"src": 1987,"name": "Handle"},{"import": 1519,"src": 1988,"name": "getHandle"},{"import": 1519,"src": 1989,"name": "detach"},{"import": 1519,"src": 1990,"name": "join"},{"import": 1519,"src": 1991,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1519,"src": 1992,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1519,"src": 1993,"name": "os","kind": "const","type": 709,"value": 1533},{"import": 1519,"src": 1994,"name": "assert"},{"import": 1519,"src": 1995,"name": "target","kind": "const","type": 756,"value": null},{"import": 1519,"src": 1996,"name": "Atomic","kind": "const","type": 825,"value": 890},{"import": 1519,"src": 1997,"name": "is_gnu"},{"import": 1519,"src": 1998,"name": "Thread"},{"import": 1519,"src": 1999,"name": "Impl","kind": "const","type": 709,"value": 1956},{"import": 1519,"src": 2000,"name": "Completion","kind": "const","type": 709,"value": 826},{"import": 1519,"src": 2001,"name": "callFn"},{"import": 1519,"src": 2002,"name": "UnsupportedImpl"},{"import": 1519,"src": 2003,"name": "WindowsThreadImpl"},{"import": 1519,"src": 2004,"name": "PosixThreadImpl"},{"import": 1519,"src": 2005,"name": "LinuxThreadImpl","kind": "const","type": 709,"value": 1956},{"import": 1519,"src": 2006,"name": "testThreadName"},{"import": 1519,"src": 2007,"name": "testIncrementNotify"},{"import": 1520,"src": 2008,"name": "Ordering"},{"import": 1520,"src": 2009,"name": "Stack","kind": "const","type": 833,"value": 891},{"import": 1520,"src": 2010,"name": "Queue","kind": "const","type": 820,"value": 888},{"import": 1520,"src": 2011,"name": "Atomic","kind": "const","type": 825,"value": 890},{"import": 1520,"src": 2012,"name": "fence"},{"import": 1520,"src": 2013,"name": "compilerFence"},{"import": 1520,"src": 255,"name": "spinLoopHint","kind": "const","type": 346,"value": 377},{"import": 1520,"src": 2014,"name": "std"},{"import": 1520,"src": 2015,"name": "target","kind": "const","type": 756,"value": null},{"import": 1521,"src": 2016,"name": "MachineType"},{"import": 1521,"src": 2017,"name": "IMAGE_FILE_RELOCS_STRIPPED"},{"import": 1521,"src": 2018,"name": "IMAGE_FILE_DEBUG_STRIPPED"},{"import": 1521,"src": 2019,"name": "IMAGE_FILE_EXECUTABLE_IMAGE"},{"import": 1521,"src": 2020,"name": "IMAGE_FILE_32BIT_MACHINE"},{"import": 1521,"src": 2021,"name": "IMAGE_FILE_LARGE_ADDRESS_AWARE"},{"import": 1521,"src": 2022,"name": "IMAGE_SCN_CNT_INITIALIZED_DATA"},{"import": 1521,"src": 2023,"name": "IMAGE_SCN_MEM_READ"},{"import": 1521,"src": 2024,"name": "IMAGE_SCN_CNT_CODE"},{"import": 1521,"src": 2025,"name": "IMAGE_SCN_MEM_EXECUTE"},{"import": 1521,"src": 2026,"name": "IMAGE_SCN_MEM_WRITE"},{"import": 1521,"src": 2027,"name": "CoffError"},{"import": 1521,"src": 2028,"name": "Coff","kind": "const","type": 709,"value": 1957},{"import": 1521,"src": 2029,"name": "Section","kind": "const","type": 709,"value": 937},{"import": 1521,"src": 2030,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1521,"src": 2031,"name": "io"},{"import": 1521,"src": 2032,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1521,"src": 2033,"name": "os"},{"import": 1521,"src": 2034,"name": "File","kind": "const","type": 709,"value": 724},{"import": 1521,"src": 2035,"name": "ArrayList","kind": "const","type": 744,"value": 858},{"import": 1521,"src": 2036,"name": "IMAGE_FILE_MACHINE_I386"},{"import": 1521,"src": 2037,"name": "IMAGE_FILE_MACHINE_IA64"},{"import": 1521,"src": 2038,"name": "IMAGE_FILE_MACHINE_AMD64"},{"import": 1521,"src": 2039,"name": "IMAGE_NT_OPTIONAL_HDR32_MAGIC"},{"import": 1521,"src": 2040,"name": "IMAGE_NT_OPTIONAL_HDR64_MAGIC"},{"import": 1521,"src": 2041,"name": "IMAGE_NUMBEROF_DIRECTORY_ENTRIES","kind": "const","type": 778,"value": null},{"import": 1521,"src": 2042,"name": "IMAGE_DEBUG_TYPE_CODEVIEW"},{"import": 1521,"src": 2043,"name": "DEBUG_DIRECTORY"},{"import": 1521,"src": 2044,"name": "CoffHeader","kind": "const","type": 709,"value": 1958},{"import": 1521,"src": 2045,"name": "OptionalHeader","kind": "const","type": 709,"value": 1959},{"import": 1521,"src": 2046,"name": "DebugDirectoryEntry"},{"import": 1521,"src": 2047,"name": "SectionHeader","kind": "const","type": 709,"value": 1509},{"import": 1522,"src": 2048,"name": "runtime_safety","kind": "const","type": 720,"value": "true"},{"import": 1522,"src": 2049,"name": "LineInfo","kind": "const","type": 709,"value": 1197},{"import": 1522,"src": 2050,"name": "SymbolInfo","kind": "const","type": 709,"value": 1134},{"import": 1522,"src": 2051,"name": "warn","kind": "const","type": 1960,"value": 980},{"import": 1522,"src": 258,"name": "print","kind": "const","type": 1960,"value": 980},{"import": 1522,"src": 436,"name": "getStderrMutex","kind": "const","type": 654,"value": 765},{"import": 1522,"src": 39,"name": "getSelfDebugInfo","kind": "const","type": 36,"value": 43},{"import": 1522,"src": 42,"name": "detectTTYConfig","kind": "const","type": 40,"value": 47},{"import": 1522,"src": 18,"name": "dumpCurrentStackTrace","kind": "const","type": 17,"value": 19},{"import": 1522,"src": 325,"name": "dumpStackTraceFromBase","kind": "const","type": 460,"value": 524},{"import": 1522,"src": 2052,"name": "captureStackTrace"},{"import": 1522,"src": 17,"name": "dumpStackTrace","kind": "const","type": 16,"value": 18},{"import": 1522,"src": 34,"name": "assert","kind": "const","type": 29,"value": 36},{"import": 1522,"src": 2053,"name": "panic"},{"import": 1522,"src": 2054,"name": "panicExtra"},{"import": 1522,"src": 7,"name": "panicImpl","kind": "const","type": 6,"value": 7},{"import": 1522,"src": 43,"name": "writeStackTrace","kind": "const","type": 1961,"value": 981},{"import": 1522,"src": 2055,"name": "StackIterator","kind": "const","type": 709,"value": 1138},{"import": 1522,"src": 159,"name": "writeCurrentStackTrace","kind": "const","type": 1962,"value": 982},{"import": 1522,"src": 2056,"name": "writeCurrentStackTraceWindows"},{"import": 1522,"src": 2057,"name": "TTY","kind": "const","type": 709,"value": 1963},{"import": 1522,"src": 45,"name": "printSourceAtAddress","kind": "const","type": 1964,"value": 983},{"import": 1522,"src": 2058,"name": "OpenSelfDebugInfoError"},{"import": 1522,"src": 40,"name": "openSelfDebugInfo","kind": "const","type": 37,"value": 44},{"import": 1522,"src": 58,"name": "readElfDebugInfo","kind": "const","type": 56,"value": 63},{"import": 1522,"src": 2059,"name": "DebugInfo","kind": "const","type": 709,"value": 1160},{"import": 1522,"src": 2060,"name": "ModuleDebugInfo","kind": "const","type": 709,"value": 1416},{"import": 1522,"src": 2061,"name": "have_segfault_handling_support","kind": "const","type": 720,"value": "true"},{"import": 1522,"src": 2062,"name": "enable_segfault_handler","kind": "const","type": 720,"value": "true"},{"import": 1522,"src": 169,"name": "maybeEnableSegfaultHandler","kind": "const","type": 8,"value": 252},{"import": 1522,"src": 251,"name": "attachSegfaultHandler","kind": "const","type": 8,"value": 372},{"import": 1522,"src": 2063,"name": "dumpStackPointerAddr"},{"import": 1522,"src": 2064,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1522,"src": 2065,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1522,"src": 2066,"name": "math","kind": "const","type": 709,"value": 1531},{"import": 1522,"src": 2067,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1522,"src": 2068,"name": "io","kind": "const","type": 709,"value": 1529},{"import": 1522,"src": 2069,"name": "os","kind": "const","type": 709,"value": 1533},{"import": 1522,"src": 2070,"name": "fs","kind": "const","type": 709,"value": 1526},{"import": 1522,"src": 2071,"name": "process","kind": "const","type": 709,"value": 1535},{"import": 1522,"src": 2072,"name": "elf","kind": "const","type": 709,"value": 1523},{"import": 1522,"src": 2073,"name": "DW","kind": "const","type": 709,"value": 1504},{"import": 1522,"src": 2074,"name": "macho","kind": "const","type": 709,"value": 1530},{"import": 1522,"src": 2075,"name": "coff","kind": "const","type": 709,"value": 1521},{"import": 1522,"src": 2076,"name": "pdb","kind": "const","type": 709,"value": 1534},{"import": 1522,"src": 2077,"name": "ArrayList"},{"import": 1522,"src": 2078,"name": "root","kind": "const","type": 709,"value": 948},{"import": 1522,"src": 2079,"name": "maxInt"},{"import": 1522,"src": 2080,"name": "File","kind": "const","type": 709,"value": 724},{"import": 1522,"src": 2081,"name": "windows"},{"import": 1522,"src": 2082,"name": "native_arch","kind": "const","type": 721,"value": null},{"import": 1522,"src": 2083,"name": "native_os","kind": "const","type": 755,"value": null},{"import": 1522,"src": 2084,"name": "native_endian","kind": "const","type": 757,"value": null},{"import": 1522,"src": 2085,"name": "PdbOrDwarf","kind": "const","type": 709,"value": 1965},{"import": 1522,"src": 2086,"name": "stderr_mutex","kind": "var","type": 1465,"value": null},{"import": 1522,"src": 2087,"name": "self_debug_info","kind": "var","type": 1966,"value": "null"},{"import": 1522,"src": 2088,"name": "panicking","kind": "var","type": 759,"value": 0},{"import": 1522,"src": 2089,"name": "panic_mutex","kind": "var","type": 1465,"value": null},{"import": 1522,"src": 2090,"name": "panic_stage","kind": "var","threadlocal": true,"type": 719,"value": 0},{"import": 1522,"src": 2091,"name": "RED","kind": "const","type": 1967,"value": null},{"import": 1522,"src": 2092,"name": "GREEN","kind": "const","type": 1967,"value": null},{"import": 1522,"src": 2093,"name": "CYAN","kind": "const","type": 1967,"value": null},{"import": 1522,"src": 2094,"name": "WHITE","kind": "const","type": 1967,"value": null},{"import": 1522,"src": 2095,"name": "BOLD","kind": "const","type": 923,"value": null},{"import": 1522,"src": 2096,"name": "DIM","kind": "const","type": 923,"value": null},{"import": 1522,"src": 2097,"name": "RESET","kind": "const","type": 923,"value": null},{"import": 1522,"src": 2098,"name": "machoSearchSymbols"},{"import": 1522,"src": 134,"name": "printLineInfo","kind": "const","type": 1968,"value": 984},{"import": 1522,"src": 2099,"name": "readCoffDebugInfo"},{"import": 1522,"src": 68,"name": "chopSlice","kind": "const","type": 66,"value": 73},{"import": 1522,"src": 2100,"name": "readMachODebugInfo"},{"import": 1522,"src": 237,"name": "printLineFromFileAnyOs","kind": "const","type": 1969,"value": 985},{"import": 1522,"src": 2101,"name": "MachoSymbol","kind": "const","type": 709,"value": 1970},{"import": 1522,"src": 59,"name": "mapWholeFile","kind": "const","type": 57,"value": 64},{"import": 1522,"src": 136,"name": "getSymbolFromDwarf","kind": "const","type": 173,"value": 186},{"import": 1522,"src": 2102,"name": "debug_info_allocator","kind": "var","type": 1703,"value": "null"},{"import": 1522,"src": 2103,"name": "debug_info_arena_allocator","kind": "var","type": 1161,"value": "undefined"},{"import": 1522,"src": 41,"name": "getDebugInfoAllocator","kind": "const","type": 38,"value": 45},{"import": 1522,"src": 2104,"name": "windows_segfault_handle"},{"import": 1522,"src": 9,"name": "resetSegfaultHandler","kind": "const","type": 8,"value": 9},{"import": 1522,"src": 301,"name": "handleSegfaultLinux","kind": "const","type": 427,"value": 473},{"import": 1522,"src": 2105,"name": "handleSegfaultWindows"},{"import": 1522,"src": 2106,"name": "handleSegfaultWindowsExtra"},{"import": 1523,"src": 2107,"name": "AT_NULL","kind": "const","type": 778,"value": null},{"import": 1523,"src": 2108,"name": "AT_IGNORE"},{"import": 1523,"src": 2109,"name": "AT_EXECFD"},{"import": 1523,"src": 2110,"name": "AT_PHDR","kind": "const","type": 778,"value": null},{"import": 1523,"src": 2111,"name": "AT_PHENT"},{"import": 1523,"src": 2112,"name": "AT_PHNUM","kind": "const","type": 778,"value": null},{"import": 1523,"src": 2113,"name": "AT_PAGESZ"},{"import": 1523,"src": 2114,"name": "AT_BASE","kind": "const","type": 778,"value": null},{"import": 1523,"src": 2115,"name": "AT_FLAGS"},{"import": 1523,"src": 2116,"name": "AT_ENTRY"},{"import": 1523,"src": 2117,"name": "AT_NOTELF"},{"import": 1523,"src": 2118,"name": "AT_UID"},{"import": 1523,"src": 2119,"name": "AT_EUID"},{"import": 1523,"src": 2120,"name": "AT_GID"},{"import": 1523,"src": 2121,"name": "AT_EGID"},{"import": 1523,"src": 2122,"name": "AT_CLKTCK"},{"import": 1523,"src": 2123,"name": "AT_PLATFORM"},{"import": 1523,"src": 2124,"name": "AT_HWCAP","kind": "const","type": 778,"value": null},{"import": 1523,"src": 2125,"name": "AT_FPUCW"},{"import": 1523,"src": 2126,"name": "AT_DCACHEBSIZE"},{"import": 1523,"src": 2127,"name": "AT_ICACHEBSIZE"},{"import": 1523,"src": 2128,"name": "AT_UCACHEBSIZE"},{"import": 1523,"src": 2129,"name": "AT_IGNOREPPC"},{"import": 1523,"src": 2130,"name": "AT_SECURE"},{"import": 1523,"src": 2131,"name": "AT_BASE_PLATFORM"},{"import": 1523,"src": 2132,"name": "AT_RANDOM"},{"import": 1523,"src": 2133,"name": "AT_HWCAP2"},{"import": 1523,"src": 2134,"name": "AT_EXECFN"},{"import": 1523,"src": 2135,"name": "AT_SYSINFO"},{"import": 1523,"src": 2136,"name": "AT_SYSINFO_EHDR"},{"import": 1523,"src": 2137,"name": "AT_L1I_CACHESHAPE"},{"import": 1523,"src": 2138,"name": "AT_L1D_CACHESHAPE"},{"import": 1523,"src": 2139,"name": "AT_L2_CACHESHAPE"},{"import": 1523,"src": 2140,"name": "AT_L3_CACHESHAPE"},{"import": 1523,"src": 2141,"name": "AT_L1I_CACHESIZE"},{"import": 1523,"src": 2142,"name": "AT_L1I_CACHEGEOMETRY"},{"import": 1523,"src": 2143,"name": "AT_L1D_CACHESIZE"},{"import": 1523,"src": 2144,"name": "AT_L1D_CACHEGEOMETRY"},{"import": 1523,"src": 2145,"name": "AT_L2_CACHESIZE"},{"import": 1523,"src": 2146,"name": "AT_L2_CACHEGEOMETRY"},{"import": 1523,"src": 2147,"name": "AT_L3_CACHESIZE"},{"import": 1523,"src": 2148,"name": "AT_L3_CACHEGEOMETRY"},{"import": 1523,"src": 2149,"name": "DT_NULL","kind": "const","type": 778,"value": null},{"import": 1523,"src": 2150,"name": "DT_NEEDED"},{"import": 1523,"src": 2151,"name": "DT_PLTRELSZ"},{"import": 1523,"src": 2152,"name": "DT_PLTGOT","kind": "const","type": 778,"value": null},{"import": 1523,"src": 2153,"name": "DT_HASH"},{"import": 1523,"src": 2154,"name": "DT_STRTAB"},{"import": 1523,"src": 2155,"name": "DT_SYMTAB"},{"import": 1523,"src": 2156,"name": "DT_RELA"},{"import": 1523,"src": 2157,"name": "DT_RELASZ"},{"import": 1523,"src": 2158,"name": "DT_RELAENT"},{"import": 1523,"src": 2159,"name": "DT_STRSZ"},{"import": 1523,"src": 2160,"name": "DT_SYMENT"},{"import": 1523,"src": 2161,"name": "DT_INIT"},{"import": 1523,"src": 2162,"name": "DT_FINI"},{"import": 1523,"src": 2163,"name": "DT_SONAME"},{"import": 1523,"src": 2164,"name": "DT_RPATH"},{"import": 1523,"src": 2165,"name": "DT_SYMBOLIC"},{"import": 1523,"src": 2166,"name": "DT_REL"},{"import": 1523,"src": 2167,"name": "DT_RELSZ"},{"import": 1523,"src": 2168,"name": "DT_RELENT"},{"import": 1523,"src": 2169,"name": "DT_PLTREL"},{"import": 1523,"src": 2170,"name": "DT_DEBUG","kind": "const","type": 778,"value": null},{"import": 1523,"src": 2171,"name": "DT_TEXTREL"},{"import": 1523,"src": 2172,"name": "DT_JMPREL"},{"import": 1523,"src": 2173,"name": "DT_BIND_NOW"},{"import": 1523,"src": 2174,"name": "DT_INIT_ARRAY"},{"import": 1523,"src": 2175,"name": "DT_FINI_ARRAY"},{"import": 1523,"src": 2176,"name": "DT_INIT_ARRAYSZ"},{"import": 1523,"src": 2177,"name": "DT_FINI_ARRAYSZ"},{"import": 1523,"src": 2178,"name": "DT_RUNPATH"},{"import": 1523,"src": 2179,"name": "DT_FLAGS"},{"import": 1523,"src": 2180,"name": "DT_ENCODING"},{"import": 1523,"src": 2181,"name": "DT_PREINIT_ARRAY"},{"import": 1523,"src": 2182,"name": "DT_PREINIT_ARRAYSZ"},{"import": 1523,"src": 2183,"name": "DT_SYMTAB_SHNDX"},{"import": 1523,"src": 2184,"name": "DT_NUM"},{"import": 1523,"src": 2185,"name": "DT_LOOS"},{"import": 1523,"src": 2186,"name": "DT_HIOS"},{"import": 1523,"src": 2187,"name": "DT_LOPROC"},{"import": 1523,"src": 2188,"name": "DT_HIPROC"},{"import": 1523,"src": 2189,"name": "DT_PROCNUM"},{"import": 1523,"src": 2190,"name": "DT_VALRNGLO"},{"import": 1523,"src": 2191,"name": "DT_GNU_PRELINKED"},{"import": 1523,"src": 2192,"name": "DT_GNU_CONFLICTSZ"},{"import": 1523,"src": 2193,"name": "DT_GNU_LIBLISTSZ"},{"import": 1523,"src": 2194,"name": "DT_CHECKSUM"},{"import": 1523,"src": 2195,"name": "DT_PLTPADSZ"},{"import": 1523,"src": 2196,"name": "DT_MOVEENT"},{"import": 1523,"src": 2197,"name": "DT_MOVESZ"},{"import": 1523,"src": 2198,"name": "DT_FEATURE_1"},{"import": 1523,"src": 2199,"name": "DT_POSFLAG_1"},{"import": 1523,"src": 2200,"name": "DT_SYMINSZ"},{"import": 1523,"src": 2201,"name": "DT_SYMINENT"},{"import": 1523,"src": 2202,"name": "DT_VALRNGHI"},{"import": 1523,"src": 2203,"name": "DT_VALNUM"},{"import": 1523,"src": 2204,"name": "DT_ADDRRNGLO"},{"import": 1523,"src": 2205,"name": "DT_GNU_HASH"},{"import": 1523,"src": 2206,"name": "DT_TLSDESC_PLT"},{"import": 1523,"src": 2207,"name": "DT_TLSDESC_GOT"},{"import": 1523,"src": 2208,"name": "DT_GNU_CONFLICT"},{"import": 1523,"src": 2209,"name": "DT_GNU_LIBLIST"},{"import": 1523,"src": 2210,"name": "DT_CONFIG"},{"import": 1523,"src": 2211,"name": "DT_DEPAUDIT"},{"import": 1523,"src": 2212,"name": "DT_AUDIT"},{"import": 1523,"src": 2213,"name": "DT_PLTPAD"},{"import": 1523,"src": 2214,"name": "DT_MOVETAB"},{"import": 1523,"src": 2215,"name": "DT_SYMINFO"},{"import": 1523,"src": 2216,"name": "DT_ADDRRNGHI"},{"import": 1523,"src": 2217,"name": "DT_ADDRNUM"},{"import": 1523,"src": 2218,"name": "DT_VERSYM"},{"import": 1523,"src": 2219,"name": "DT_RELACOUNT"},{"import": 1523,"src": 2220,"name": "DT_RELCOUNT"},{"import": 1523,"src": 2221,"name": "DT_FLAGS_1"},{"import": 1523,"src": 2222,"name": "DT_VERDEF"},{"import": 1523,"src": 2223,"name": "DT_VERDEFNUM"},{"import": 1523,"src": 2224,"name": "DT_VERNEED"},{"import": 1523,"src": 2225,"name": "DT_VERNEEDNUM"},{"import": 1523,"src": 2226,"name": "DT_VERSIONTAGNUM"},{"import": 1523,"src": 2227,"name": "DT_AUXILIARY"},{"import": 1523,"src": 2228,"name": "DT_FILTER"},{"import": 1523,"src": 2229,"name": "DT_EXTRANUM"},{"import": 1523,"src": 2230,"name": "DT_SPARC_REGISTER"},{"import": 1523,"src": 2231,"name": "DT_SPARC_NUM"},{"import": 1523,"src": 2232,"name": "DT_MIPS_RLD_VERSION"},{"import": 1523,"src": 2233,"name": "DT_MIPS_TIME_STAMP"},{"import": 1523,"src": 2234,"name": "DT_MIPS_ICHECKSUM"},{"import": 1523,"src": 2235,"name": "DT_MIPS_IVERSION"},{"import": 1523,"src": 2236,"name": "DT_MIPS_FLAGS"},{"import": 1523,"src": 2237,"name": "DT_MIPS_BASE_ADDRESS"},{"import": 1523,"src": 2238,"name": "DT_MIPS_MSYM"},{"import": 1523,"src": 2239,"name": "DT_MIPS_CONFLICT"},{"import": 1523,"src": 2240,"name": "DT_MIPS_LIBLIST"},{"import": 1523,"src": 2241,"name": "DT_MIPS_LOCAL_GOTNO"},{"import": 1523,"src": 2242,"name": "DT_MIPS_CONFLICTNO"},{"import": 1523,"src": 2243,"name": "DT_MIPS_LIBLISTNO"},{"import": 1523,"src": 2244,"name": "DT_MIPS_SYMTABNO"},{"import": 1523,"src": 2245,"name": "DT_MIPS_UNREFEXTNO"},{"import": 1523,"src": 2246,"name": "DT_MIPS_GOTSYM"},{"import": 1523,"src": 2247,"name": "DT_MIPS_HIPAGENO"},{"import": 1523,"src": 2248,"name": "DT_MIPS_RLD_MAP"},{"import": 1523,"src": 2249,"name": "DT_MIPS_DELTA_CLASS"},{"import": 1523,"src": 2250,"name": "DT_MIPS_DELTA_CLASS_NO"},{"import": 1523,"src": 2251,"name": "DT_MIPS_DELTA_INSTANCE"},{"import": 1523,"src": 2252,"name": "DT_MIPS_DELTA_INSTANCE_NO"},{"import": 1523,"src": 2253,"name": "DT_MIPS_DELTA_RELOC"},{"import": 1523,"src": 2254,"name": "DT_MIPS_DELTA_RELOC_NO"},{"import": 1523,"src": 2255,"name": "DT_MIPS_DELTA_SYM"},{"import": 1523,"src": 2256,"name": "DT_MIPS_DELTA_SYM_NO"},{"import": 1523,"src": 2257,"name": "DT_MIPS_DELTA_CLASSSYM"},{"import": 1523,"src": 2258,"name": "DT_MIPS_DELTA_CLASSSYM_NO"},{"import": 1523,"src": 2259,"name": "DT_MIPS_CXX_FLAGS"},{"import": 1523,"src": 2260,"name": "DT_MIPS_PIXIE_INIT"},{"import": 1523,"src": 2261,"name": "DT_MIPS_SYMBOL_LIB"},{"import": 1523,"src": 2262,"name": "DT_MIPS_LOCALPAGE_GOTIDX"},{"import": 1523,"src": 2263,"name": "DT_MIPS_LOCAL_GOTIDX"},{"import": 1523,"src": 2264,"name": "DT_MIPS_HIDDEN_GOTIDX"},{"import": 1523,"src": 2265,"name": "DT_MIPS_PROTECTED_GOTIDX"},{"import": 1523,"src": 2266,"name": "DT_MIPS_OPTIONS"},{"import": 1523,"src": 2267,"name": "DT_MIPS_INTERFACE"},{"import": 1523,"src": 2268,"name": "DT_MIPS_DYNSTR_ALIGN"},{"import": 1523,"src": 2269,"name": "DT_MIPS_INTERFACE_SIZE"},{"import": 1523,"src": 2270,"name": "DT_MIPS_RLD_TEXT_RESOLVE_ADDR"},{"import": 1523,"src": 2271,"name": "DT_MIPS_PERF_SUFFIX"},{"import": 1523,"src": 2272,"name": "DT_MIPS_COMPACT_SIZE"},{"import": 1523,"src": 2273,"name": "DT_MIPS_GP_VALUE"},{"import": 1523,"src": 2274,"name": "DT_MIPS_AUX_DYNAMIC"},{"import": 1523,"src": 2275,"name": "DT_MIPS_PLTGOT"},{"import": 1523,"src": 2276,"name": "DT_MIPS_RWPLT"},{"import": 1523,"src": 2277,"name": "DT_MIPS_RLD_MAP_REL"},{"import": 1523,"src": 2278,"name": "DT_MIPS_NUM"},{"import": 1523,"src": 2279,"name": "DT_ALPHA_PLTRO"},{"import": 1523,"src": 2280,"name": "DT_ALPHA_NUM"},{"import": 1523,"src": 2281,"name": "DT_PPC_GOT"},{"import": 1523,"src": 2282,"name": "DT_PPC_OPT"},{"import": 1523,"src": 2283,"name": "DT_PPC_NUM"},{"import": 1523,"src": 2284,"name": "DT_PPC64_GLINK"},{"import": 1523,"src": 2285,"name": "DT_PPC64_OPD"},{"import": 1523,"src": 2286,"name": "DT_PPC64_OPDSZ"},{"import": 1523,"src": 2287,"name": "DT_PPC64_OPT"},{"import": 1523,"src": 2288,"name": "DT_PPC64_NUM"},{"import": 1523,"src": 2289,"name": "DT_IA_64_PLT_RESERVE"},{"import": 1523,"src": 2290,"name": "DT_IA_64_NUM"},{"import": 1523,"src": 2291,"name": "DT_NIOS2_GP"},{"import": 1523,"src": 2292,"name": "PT_NULL"},{"import": 1523,"src": 2293,"name": "PT_LOAD","kind": "const","type": 778,"value": null},{"import": 1523,"src": 2294,"name": "PT_DYNAMIC"},{"import": 1523,"src": 2295,"name": "PT_INTERP"},{"import": 1523,"src": 2296,"name": "PT_NOTE"},{"import": 1523,"src": 2297,"name": "PT_SHLIB"},{"import": 1523,"src": 2298,"name": "PT_PHDR","kind": "const","type": 778,"value": null},{"import": 1523,"src": 2299,"name": "PT_TLS","kind": "const","type": 778,"value": null},{"import": 1523,"src": 2300,"name": "PT_NUM"},{"import": 1523,"src": 2301,"name": "PT_LOOS"},{"import": 1523,"src": 2302,"name": "PT_GNU_EH_FRAME"},{"import": 1523,"src": 2303,"name": "PT_GNU_STACK","kind": "const","type": 778,"value": null},{"import": 1523,"src": 2304,"name": "PT_GNU_RELRO"},{"import": 1523,"src": 2305,"name": "PT_LOSUNW"},{"import": 1523,"src": 2306,"name": "PT_SUNWBSS"},{"import": 1523,"src": 2307,"name": "PT_SUNWSTACK"},{"import": 1523,"src": 2308,"name": "PT_HISUNW"},{"import": 1523,"src": 2309,"name": "PT_HIOS"},{"import": 1523,"src": 2310,"name": "PT_LOPROC"},{"import": 1523,"src": 2311,"name": "PT_HIPROC"},{"import": 1523,"src": 2312,"name": "SHT_NULL","kind": "const","type": 778,"value": null},{"import": 1523,"src": 2313,"name": "SHT_PROGBITS"},{"import": 1523,"src": 2314,"name": "SHT_SYMTAB"},{"import": 1523,"src": 2315,"name": "SHT_STRTAB"},{"import": 1523,"src": 2316,"name": "SHT_RELA"},{"import": 1523,"src": 2317,"name": "SHT_HASH"},{"import": 1523,"src": 2318,"name": "SHT_DYNAMIC"},{"import": 1523,"src": 2319,"name": "SHT_NOTE"},{"import": 1523,"src": 2320,"name": "SHT_NOBITS"},{"import": 1523,"src": 2321,"name": "SHT_REL"},{"import": 1523,"src": 2322,"name": "SHT_SHLIB"},{"import": 1523,"src": 2323,"name": "SHT_DYNSYM"},{"import": 1523,"src": 2324,"name": "SHT_INIT_ARRAY"},{"import": 1523,"src": 2325,"name": "SHT_FINI_ARRAY"},{"import": 1523,"src": 2326,"name": "SHT_PREINIT_ARRAY"},{"import": 1523,"src": 2327,"name": "SHT_GROUP"},{"import": 1523,"src": 2328,"name": "SHT_SYMTAB_SHNDX"},{"import": 1523,"src": 2329,"name": "SHT_LOOS"},{"import": 1523,"src": 2330,"name": "SHT_HIOS"},{"import": 1523,"src": 2331,"name": "SHT_LOPROC"},{"import": 1523,"src": 2332,"name": "SHT_HIPROC"},{"import": 1523,"src": 2333,"name": "SHT_LOUSER"},{"import": 1523,"src": 2334,"name": "SHT_HIUSER"},{"import": 1523,"src": 2335,"name": "STB_LOCAL"},{"import": 1523,"src": 2336,"name": "STB_GLOBAL"},{"import": 1523,"src": 2337,"name": "STB_WEAK"},{"import": 1523,"src": 2338,"name": "STB_NUM"},{"import": 1523,"src": 2339,"name": "STB_LOOS"},{"import": 1523,"src": 2340,"name": "STB_GNU_UNIQUE"},{"import": 1523,"src": 2341,"name": "STB_HIOS"},{"import": 1523,"src": 2342,"name": "STB_LOPROC"},{"import": 1523,"src": 2343,"name": "STB_HIPROC"},{"import": 1523,"src": 2344,"name": "STB_MIPS_SPLIT_COMMON"},{"import": 1523,"src": 2345,"name": "STT_NOTYPE"},{"import": 1523,"src": 2346,"name": "STT_OBJECT"},{"import": 1523,"src": 2347,"name": "STT_FUNC"},{"import": 1523,"src": 2348,"name": "STT_SECTION"},{"import": 1523,"src": 2349,"name": "STT_FILE"},{"import": 1523,"src": 2350,"name": "STT_COMMON"},{"import": 1523,"src": 2351,"name": "STT_TLS"},{"import": 1523,"src": 2352,"name": "STT_NUM"},{"import": 1523,"src": 2353,"name": "STT_LOOS"},{"import": 1523,"src": 2354,"name": "STT_GNU_IFUNC"},{"import": 1523,"src": 2355,"name": "STT_HIOS"},{"import": 1523,"src": 2356,"name": "STT_LOPROC"},{"import": 1523,"src": 2357,"name": "STT_HIPROC"},{"import": 1523,"src": 2358,"name": "STT_SPARC_REGISTER"},{"import": 1523,"src": 2359,"name": "STT_PARISC_MILLICODE"},{"import": 1523,"src": 2360,"name": "STT_HP_OPAQUE"},{"import": 1523,"src": 2361,"name": "STT_HP_STUB"},{"import": 1523,"src": 2362,"name": "STT_ARM_TFUNC"},{"import": 1523,"src": 2363,"name": "STT_ARM_16BIT"},{"import": 1523,"src": 2364,"name": "VER_FLG_BASE"},{"import": 1523,"src": 2365,"name": "VER_FLG_WEAK"},{"import": 1523,"src": 2366,"name": "ET","kind": "const","type": 709,"value": 1971},{"import": 1523,"src": 2367,"name": "Header"},{"import": 1523,"src": 2368,"name": "ProgramHeaderIterator"},{"import": 1523,"src": 2369,"name": "SectionHeaderIterator"},{"import": 1523,"src": 2370,"name": "int"},{"import": 1523,"src": 2371,"name": "int32"},{"import": 1523,"src": 2372,"name": "EI_NIDENT","kind": "const","type": 778,"value": null},{"import": 1523,"src": 2373,"name": "EI_CLASS"},{"import": 1523,"src": 2374,"name": "ELFCLASSNONE"},{"import": 1523,"src": 2375,"name": "ELFCLASS32"},{"import": 1523,"src": 2376,"name": "ELFCLASS64"},{"import": 1523,"src": 2377,"name": "ELFCLASSNUM"},{"import": 1523,"src": 2378,"name": "EI_DATA","kind": "const","type": 778,"value": null},{"import": 1523,"src": 2379,"name": "ELFDATANONE"},{"import": 1523,"src": 2380,"name": "ELFDATA2LSB","kind": "const","type": 778,"value": null},{"import": 1523,"src": 2381,"name": "ELFDATA2MSB","kind": "const","type": 778,"value": null},{"import": 1523,"src": 2382,"name": "ELFDATANUM"},{"import": 1523,"src": 2383,"name": "EI_VERSION","kind": "const","type": 778,"value": null},{"import": 1523,"src": 2384,"name": "Elf32_Half","kind": "const","type": 709,"value": 715},{"import": 1523,"src": 2385,"name": "Elf64_Half","kind": "const","type": 709,"value": 715},{"import": 1523,"src": 2386,"name": "Elf32_Word","kind": "const","type": 709,"value": 893},{"import": 1523,"src": 2387,"name": "Elf32_Sword"},{"import": 1523,"src": 2388,"name": "Elf64_Word","kind": "const","type": 709,"value": 893},{"import": 1523,"src": 2389,"name": "Elf64_Sword"},{"import": 1523,"src": 2390,"name": "Elf32_Xword"},{"import": 1523,"src": 2391,"name": "Elf32_Sxword"},{"import": 1523,"src": 2392,"name": "Elf64_Xword","kind": "const","type": 709,"value": 732},{"import": 1523,"src": 2393,"name": "Elf64_Sxword","kind": "const","type": 709,"value": 836},{"import": 1523,"src": 2394,"name": "Elf32_Addr","kind": "const","type": 709,"value": 893},{"import": 1523,"src": 2395,"name": "Elf64_Addr","kind": "const","type": 709,"value": 732},{"import": 1523,"src": 2396,"name": "Elf32_Off","kind": "const","type": 709,"value": 893},{"import": 1523,"src": 2397,"name": "Elf64_Off","kind": "const","type": 709,"value": 732},{"import": 1523,"src": 2398,"name": "Elf32_Section"},{"import": 1523,"src": 2399,"name": "Elf64_Section"},{"import": 1523,"src": 2400,"name": "Elf32_Versym"},{"import": 1523,"src": 2401,"name": "Elf64_Versym"},{"import": 1523,"src": 2402,"name": "Elf32_Ehdr","kind": "const","type": 709,"value": 1972},{"import": 1523,"src": 2403,"name": "Elf64_Ehdr","kind": "const","type": 709,"value": 1973},{"import": 1523,"src": 2404,"name": "Elf32_Phdr","kind": "const","type": 709,"value": 1974},{"import": 1523,"src": 2405,"name": "Elf64_Phdr","kind": "const","type": 709,"value": 1547},{"import": 1523,"src": 2406,"name": "Elf32_Shdr","kind": "const","type": 709,"value": 1975},{"import": 1523,"src": 2407,"name": "Elf64_Shdr","kind": "const","type": 709,"value": 1976},{"import": 1523,"src": 2408,"name": "Elf32_Chdr"},{"import": 1523,"src": 2409,"name": "Elf64_Chdr"},{"import": 1523,"src": 2410,"name": "Elf32_Sym"},{"import": 1523,"src": 2411,"name": "Elf64_Sym"},{"import": 1523,"src": 2412,"name": "Elf32_Syminfo"},{"import": 1523,"src": 2413,"name": "Elf64_Syminfo"},{"import": 1523,"src": 2414,"name": "Elf32_Rel"},{"import": 1523,"src": 2415,"name": "Elf64_Rel"},{"import": 1523,"src": 2416,"name": "Elf32_Rela"},{"import": 1523,"src": 2417,"name": "Elf64_Rela"},{"import": 1523,"src": 2418,"name": "Elf32_Dyn"},{"import": 1523,"src": 2419,"name": "Elf64_Dyn","kind": "const","type": 709,"value": 1977},{"import": 1523,"src": 2420,"name": "Elf32_Verdef"},{"import": 1523,"src": 2421,"name": "Elf64_Verdef"},{"import": 1523,"src": 2422,"name": "Elf32_Verdaux"},{"import": 1523,"src": 2423,"name": "Elf64_Verdaux"},{"import": 1523,"src": 2424,"name": "Elf32_Verneed"},{"import": 1523,"src": 2425,"name": "Elf64_Verneed"},{"import": 1523,"src": 2426,"name": "Elf32_Vernaux"},{"import": 1523,"src": 2427,"name": "Elf64_Vernaux"},{"import": 1523,"src": 2428,"name": "Elf32_auxv_t"},{"import": 1523,"src": 2429,"name": "Elf64_auxv_t","kind": "const","type": 709,"value": 1978},{"import": 1523,"src": 2430,"name": "Elf32_Nhdr"},{"import": 1523,"src": 2431,"name": "Elf64_Nhdr"},{"import": 1523,"src": 2432,"name": "Elf32_Move"},{"import": 1523,"src": 2433,"name": "Elf64_Move"},{"import": 1523,"src": 2434,"name": "Elf32_gptab"},{"import": 1523,"src": 2435,"name": "Elf32_RegInfo"},{"import": 1523,"src": 2436,"name": "Elf_Options"},{"import": 1523,"src": 2437,"name": "Elf_Options_Hw"},{"import": 1523,"src": 2438,"name": "Elf32_Lib"},{"import": 1523,"src": 2439,"name": "Elf64_Lib"},{"import": 1523,"src": 2440,"name": "Elf32_Conflict"},{"import": 1523,"src": 2441,"name": "Elf_MIPS_ABIFlags_v0"},{"import": 1523,"src": 2442,"name": "Auxv","kind": "const","type": 709,"value": 1978},{"import": 1523,"src": 2443,"name": "Ehdr","kind": "const","type": 709,"value": 1973},{"import": 1523,"src": 2444,"name": "Phdr","kind": "const","type": 709,"value": 1547},{"import": 1523,"src": 2445,"name": "Dyn","kind": "const","type": 709,"value": 1977},{"import": 1523,"src": 2446,"name": "Rel"},{"import": 1523,"src": 2447,"name": "Rela"},{"import": 1523,"src": 2448,"name": "Shdr","kind": "const","type": 709,"value": 1976},{"import": 1523,"src": 2449,"name": "Sym"},{"import": 1523,"src": 2450,"name": "Verdef"},{"import": 1523,"src": 2451,"name": "Verdaux"},{"import": 1523,"src": 2452,"name": "Addr"},{"import": 1523,"src": 2453,"name": "Half"},{"import": 1523,"src": 2454,"name": "EM","kind": "const","type": 709,"value": 1979},{"import": 1523,"src": 2455,"name": "SHF_WRITE"},{"import": 1523,"src": 2456,"name": "SHF_ALLOC"},{"import": 1523,"src": 2457,"name": "SHF_EXECINSTR"},{"import": 1523,"src": 2458,"name": "SHF_MERGE"},{"import": 1523,"src": 2459,"name": "SHF_STRINGS"},{"import": 1523,"src": 2460,"name": "SHF_INFO_LINK"},{"import": 1523,"src": 2461,"name": "SHF_LINK_ORDER"},{"import": 1523,"src": 2462,"name": "SHF_OS_NONCONFORMING"},{"import": 1523,"src": 2463,"name": "SHF_GROUP"},{"import": 1523,"src": 2464,"name": "SHF_TLS"},{"import": 1523,"src": 2465,"name": "SHF_COMPRESSED"},{"import": 1523,"src": 2466,"name": "SHF_EXCLUDE"},{"import": 1523,"src": 2467,"name": "SHF_MASKOS"},{"import": 1523,"src": 2468,"name": "SHF_MASKPROC"},{"import": 1523,"src": 2469,"name": "XCORE_SHF_DP_SECTION"},{"import": 1523,"src": 2470,"name": "XCORE_SHF_CP_SECTION"},{"import": 1523,"src": 2471,"name": "SHF_X86_64_LARGE"},{"import": 1523,"src": 2472,"name": "SHF_HEX_GPREL"},{"import": 1523,"src": 2473,"name": "SHF_MIPS_NODUPES"},{"import": 1523,"src": 2474,"name": "SHF_MIPS_NAMES"},{"import": 1523,"src": 2475,"name": "SHF_MIPS_LOCAL"},{"import": 1523,"src": 2476,"name": "SHF_MIPS_NOSTRIP"},{"import": 1523,"src": 2477,"name": "SHF_MIPS_GPREL"},{"import": 1523,"src": 2478,"name": "SHF_MIPS_MERGE"},{"import": 1523,"src": 2479,"name": "SHF_MIPS_ADDR"},{"import": 1523,"src": 2480,"name": "SHF_MIPS_STRING"},{"import": 1523,"src": 2481,"name": "SHF_ARM_PURECODE"},{"import": 1523,"src": 2482,"name": "PF_X"},{"import": 1523,"src": 2483,"name": "PF_W"},{"import": 1523,"src": 2484,"name": "PF_R"},{"import": 1523,"src": 2485,"name": "PF_MASKOS"},{"import": 1523,"src": 2486,"name": "PF_MASKPROC"},{"import": 1523,"src": 2487,"name": "SHN_UNDEF"},{"import": 1523,"src": 2488,"name": "SHN_LORESERVE"},{"import": 1523,"src": 2489,"name": "SHN_LOPROC"},{"import": 1523,"src": 2490,"name": "SHN_HIPROC"},{"import": 1523,"src": 2491,"name": "SHN_LIVEPATCH"},{"import": 1523,"src": 2492,"name": "SHN_ABS"},{"import": 1523,"src": 2493,"name": "SHN_COMMON"},{"import": 1523,"src": 2494,"name": "SHN_HIRESERVE"},{"import": 1523,"src": 2495,"name": "R_X86_64_NONE"},{"import": 1523,"src": 2496,"name": "R_X86_64_64"},{"import": 1523,"src": 2497,"name": "R_X86_64_PC32"},{"import": 1523,"src": 2498,"name": "R_X86_64_GOT32"},{"import": 1523,"src": 2499,"name": "R_X86_64_PLT32"},{"import": 1523,"src": 2500,"name": "R_X86_64_COPY"},{"import": 1523,"src": 2501,"name": "R_X86_64_GLOB_DAT"},{"import": 1523,"src": 2502,"name": "R_X86_64_JUMP_SLOT"},{"import": 1523,"src": 2503,"name": "R_X86_64_RELATIVE"},{"import": 1523,"src": 2504,"name": "R_X86_64_GOTPCREL"},{"import": 1523,"src": 2505,"name": "R_X86_64_32"},{"import": 1523,"src": 2506,"name": "R_X86_64_32S"},{"import": 1523,"src": 2507,"name": "R_X86_64_16"},{"import": 1523,"src": 2508,"name": "R_X86_64_PC16"},{"import": 1523,"src": 2509,"name": "R_X86_64_8"},{"import": 1523,"src": 2510,"name": "R_X86_64_PC8"},{"import": 1523,"src": 2511,"name": "R_X86_64_DTPMOD64"},{"import": 1523,"src": 2512,"name": "R_X86_64_DTPOFF64"},{"import": 1523,"src": 2513,"name": "R_X86_64_TPOFF64"},{"import": 1523,"src": 2514,"name": "R_X86_64_TLSGD"},{"import": 1523,"src": 2515,"name": "R_X86_64_TLSLD"},{"import": 1523,"src": 2516,"name": "R_X86_64_DTPOFF32"},{"import": 1523,"src": 2517,"name": "R_X86_64_GOTTPOFF"},{"import": 1523,"src": 2518,"name": "R_X86_64_TPOFF32"},{"import": 1523,"src": 2519,"name": "R_X86_64_PC64"},{"import": 1523,"src": 2520,"name": "R_X86_64_GOTOFF64"},{"import": 1523,"src": 2521,"name": "R_X86_64_GOTPC32"},{"import": 1523,"src": 2522,"name": "R_X86_64_GOT64"},{"import": 1523,"src": 2523,"name": "R_X86_64_GOTPCREL64"},{"import": 1523,"src": 2524,"name": "R_X86_64_GOTPC64"},{"import": 1523,"src": 2525,"name": "R_X86_64_GOTPLT64"},{"import": 1523,"src": 2526,"name": "R_X86_64_PLTOFF64"},{"import": 1523,"src": 2527,"name": "R_X86_64_SIZE32"},{"import": 1523,"src": 2528,"name": "R_X86_64_SIZE64"},{"import": 1523,"src": 2529,"name": "R_X86_64_GOTPC32_TLSDESC"},{"import": 1523,"src": 2530,"name": "R_X86_64_TLSDESC_CALL"},{"import": 1523,"src": 2531,"name": "R_X86_64_TLSDESC"},{"import": 1523,"src": 2532,"name": "R_X86_64_IRELATIVE"},{"import": 1523,"src": 2533,"name": "R_X86_64_RELATIVE64"},{"import": 1523,"src": 2534,"name": "R_X86_64_GOTPCRELX"},{"import": 1523,"src": 2535,"name": "R_X86_64_REX_GOTPCRELX"},{"import": 1523,"src": 2536,"name": "R_X86_64_NUM"},{"import": 1523,"src": 2537,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1523,"src": 2538,"name": "io"},{"import": 1523,"src": 2539,"name": "os"},{"import": 1523,"src": 2540,"name": "math"},{"import": 1523,"src": 2541,"name": "mem"},{"import": 1523,"src": 2542,"name": "debug","kind": "const","type": 709,"value": 1522},{"import": 1523,"src": 2543,"name": "File"},{"import": 1523,"src": 2544,"name": "native_endian"},{"import": 1524,"src": 2545,"name": "Channel"},{"import": 1524,"src": 2546,"name": "Future"},{"import": 1524,"src": 2547,"name": "Group"},{"import": 1524,"src": 2548,"name": "Batch"},{"import": 1524,"src": 2549,"name": "Lock"},{"import": 1524,"src": 2550,"name": "Locked"},{"import": 1524,"src": 2551,"name": "RwLock"},{"import": 1524,"src": 2552,"name": "RwLocked"},{"import": 1524,"src": 2553,"name": "Loop","kind": "const","type": 709,"value": 1872},{"import": 1524,"src": 2554,"name": "WaitGroup"},{"import": 1525,"src": 2555,"name": "default_max_depth","kind": "const","type": 778,"value": null},{"import": 1525,"src": 2556,"name": "Alignment","kind": "const","type": 709,"value": 1553},{"import": 1525,"src": 2557,"name": "FormatOptions","kind": "const","type": 709,"value": 972},{"import": 1525,"src": 32,"name": "format","kind": "const","type": 1980,"value": 986},{"import": 1525,"src": 2558,"name": "formatAddress"},{"import": 1525,"src": 35,"name": "formatType","kind": "const","type": 1981,"value": 987},{"import": 1525,"src": 179,"name": "formatIntValue","kind": "const","type": 1982,"value": 988},{"import": 1525,"src": 2559,"name": "Case","kind": "const","type": 709,"value": 1152},{"import": 1525,"src": 2560,"name": "fmtSliceHexLower"},{"import": 1525,"src": 2561,"name": "fmtSliceHexUpper"},{"import": 1525,"src": 2562,"name": "fmtSliceEscapeLower"},{"import": 1525,"src": 2563,"name": "fmtSliceEscapeUpper"},{"import": 1525,"src": 2564,"name": "fmtIntSizeDec"},{"import": 1525,"src": 2565,"name": "fmtIntSizeBin"},{"import": 1525,"src": 191,"name": "formatText","kind": "const","type": 1983,"value": 989},{"import": 1525,"src": 2566,"name": "formatAsciiChar"},{"import": 1525,"src": 2567,"name": "formatUnicodeCodepoint"},{"import": 1525,"src": 183,"name": "formatBuf","kind": "const","type": 1984,"value": 990},{"import": 1525,"src": 2568,"name": "formatFloatScientific"},{"import": 1525,"src": 2569,"name": "formatFloatHexadecimal"},{"import": 1525,"src": 2570,"name": "formatFloatDecimal"},{"import": 1525,"src": 180,"name": "formatInt","kind": "const","type": 1985,"value": 991},{"import": 1525,"src": 2571,"name": "formatIntBuf"},{"import": 1525,"src": 2572,"name": "fmtDuration"},{"import": 1525,"src": 2573,"name": "fmtDurationSigned"},{"import": 1525,"src": 2574,"name": "ParseIntError","kind": "const","type": 709,"value": 1806},{"import": 1525,"src": 2575,"name": "Formatter"},{"import": 1525,"src": 397,"name": "parseInt","kind": "const","type": 1986,"value": 992},{"import": 1525,"src": 2576,"name": "parseUnsigned"},{"import": 1525,"src": 2577,"name": "parseFloat"},{"import": 1525,"src": 2578,"name": "ParseFloatError"},{"import": 1525,"src": 2579,"name": "parseHexFloat"},{"import": 1525,"src": 447,"name": "charToDigit","kind": "const","type": 687,"value": 817},{"import": 1525,"src": 182,"name": "digitToChar","kind": "const","type": 248,"value": 265},{"import": 1525,"src": 2580,"name": "BufPrintError","kind": "const","type": 709,"value": 1795},{"import": 1525,"src": 391,"name": "bufPrint","kind": "const","type": 1987,"value": 993},{"import": 1525,"src": 2581,"name": "bufPrintZ"},{"import": 1525,"src": 390,"name": "count","kind": "const","type": 1988,"value": 994},{"import": 1525,"src": 2582,"name": "AllocPrintError","kind": "const","type": 709,"value": 1759},{"import": 1525,"src": 342,"name": "allocPrint","kind": "const","type": 1989,"value": 995},{"import": 1525,"src": 2583,"name": "allocPrint0"},{"import": 1525,"src": 2584,"name": "allocPrintZ"},{"import": 1525,"src": 2585,"name": "bufPrintIntToSlice"},{"import": 1525,"src": 2586,"name": "comptimePrint"},{"import": 1525,"src": 2587,"name": "trim"},{"import": 1525,"src": 2588,"name": "isWhiteSpace"},{"import": 1525,"src": 2589,"name": "hexToBytes"},{"import": 1525,"src": 2590,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1525,"src": 2591,"name": "math","kind": "const","type": 709,"value": 1531},{"import": 1525,"src": 2592,"name": "assert","kind": "const","type": 29,"value": 36},{"import": 1525,"src": 2593,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1525,"src": 2594,"name": "unicode","kind": "const","type": 709,"value": 1538},{"import": 1525,"src": 2595,"name": "meta","kind": "const","type": 709,"value": 1532},{"import": 1525,"src": 2596,"name": "builtin"},{"import": 1525,"src": 2597,"name": "errol"},{"import": 1525,"src": 2598,"name": "lossyCast"},{"import": 1525,"src": 2599,"name": "expectFmt"},{"import": 1525,"src": 2600,"name": "ANY","kind": "const","type": 1990,"value": null},{"import": 1525,"src": 2601,"name": "defaultSpec"},{"import": 1525,"src": 178,"name": "formatValue","kind": "const","type": 1991,"value": 996},{"import": 1525,"src": 2602,"name": "formatFloatValue"},{"import": 1525,"src": 2603,"name": "formatSliceHexImpl"},{"import": 1525,"src": 2604,"name": "formatSliceHexLower"},{"import": 1525,"src": 2605,"name": "formatSliceHexUpper"},{"import": 1525,"src": 2606,"name": "formatSliceEscapeImpl"},{"import": 1525,"src": 2607,"name": "formatSliceEscapeLower"},{"import": 1525,"src": 2608,"name": "formatSliceEscapeUpper"},{"import": 1525,"src": 2609,"name": "formatSizeImpl"},{"import": 1525,"src": 2610,"name": "formatSizeDec"},{"import": 1525,"src": 2611,"name": "formatSizeBin"},{"import": 1525,"src": 2612,"name": "formatDuration"},{"import": 1525,"src": 2613,"name": "formatDurationSigned"},{"import": 1525,"src": 440,"name": "parseWithSign","kind": "const","type": 1992,"value": 997},{"import": 1526,"src": 2614,"name": "path","kind": "const","type": 709,"value": 1993},{"import": 1526,"src": 2615,"name": "File","kind": "const","type": 709,"value": 724},{"import": 1526,"src": 2616,"name": "wasi"},{"import": 1526,"src": 2617,"name": "realpath"},{"import": 1526,"src": 2618,"name": "realpathZ"},{"import": 1526,"src": 2619,"name": "realpathC"},{"import": 1526,"src": 2620,"name": "realpathW"},{"import": 1526,"src": 2621,"name": "getAppDataDir"},{"import": 1526,"src": 2622,"name": "GetAppDataDirError"},{"import": 1526,"src": 2623,"name": "Watch"},{"import": 1526,"src": 2624,"name": "MAX_PATH_BYTES","kind": "const","type": 778,"value": null},{"import": 1526,"src": 2625,"name": "base64_alphabet"},{"import": 1526,"src": 2626,"name": "base64_encoder"},{"import": 1526,"src": 2627,"name": "base64_decoder"},{"import": 1526,"src": 2628,"name": "need_async_thread"},{"import": 1526,"src": 2629,"name": "atomicSymLink"},{"import": 1526,"src": 2630,"name": "PrevStatus"},{"import": 1526,"src": 2631,"name": "CopyFileOptions"},{"import": 1526,"src": 2632,"name": "updateFileAbsolute"},{"import": 1526,"src": 2633,"name": "copyFileAbsolute"},{"import": 1526,"src": 2634,"name": "AtomicFile"},{"import": 1526,"src": 2635,"name": "makeDirAbsolute"},{"import": 1526,"src": 2636,"name": "makeDirAbsoluteZ"},{"import": 1526,"src": 2637,"name": "makeDirAbsoluteW"},{"import": 1526,"src": 2638,"name": "deleteDir"},{"import": 1526,"src": 2639,"name": "deleteDirC"},{"import": 1526,"src": 2640,"name": "deleteDirW"},{"import": 1526,"src": 2641,"name": "deleteDirAbsolute"},{"import": 1526,"src": 2642,"name": "deleteDirAbsoluteZ"},{"import": 1526,"src": 2643,"name": "deleteDirAbsoluteW"},{"import": 1526,"src": 2644,"name": "renameC"},{"import": 1526,"src": 2645,"name": "renameAbsolute"},{"import": 1526,"src": 2646,"name": "renameAbsoluteZ"},{"import": 1526,"src": 2647,"name": "renameAbsoluteW"},{"import": 1526,"src": 2648,"name": "rename"},{"import": 1526,"src": 2649,"name": "renameZ"},{"import": 1526,"src": 2650,"name": "renameW"},{"import": 1526,"src": 2651,"name": "Dir","kind": "const","type": 709,"value": 991},{"import": 1526,"src": 54,"name": "cwd","kind": "const","type": 52,"value": 59},{"import": 1526,"src": 2652,"name": "openDirAbsolute"},{"import": 1526,"src": 2653,"name": "openDirAbsoluteZ"},{"import": 1526,"src": 2654,"name": "openDirAbsoluteW"},{"import": 1526,"src": 2655,"name": "openFileAbsolute"},{"import": 1526,"src": 2656,"name": "openFileAbsoluteC"},{"import": 1526,"src": 212,"name": "openFileAbsoluteZ","kind": "const","type": 279,"value": 298},{"import": 1526,"src": 2657,"name": "openFileAbsoluteW"},{"import": 1526,"src": 2658,"name": "accessAbsolute"},{"import": 1526,"src": 2659,"name": "accessAbsoluteZ"},{"import": 1526,"src": 2660,"name": "accessAbsoluteW"},{"import": 1526,"src": 2661,"name": "createFileAbsolute"},{"import": 1526,"src": 2662,"name": "createFileAbsoluteC"},{"import": 1526,"src": 2663,"name": "createFileAbsoluteZ"},{"import": 1526,"src": 2664,"name": "createFileAbsoluteW"},{"import": 1526,"src": 2665,"name": "deleteFileAbsolute"},{"import": 1526,"src": 2666,"name": "deleteFileAbsoluteC"},{"import": 1526,"src": 2667,"name": "deleteFileAbsoluteZ"},{"import": 1526,"src": 2668,"name": "deleteFileAbsoluteW"},{"import": 1526,"src": 2669,"name": "deleteTreeAbsolute"},{"import": 1526,"src": 2670,"name": "readLinkAbsolute"},{"import": 1526,"src": 2671,"name": "readlinkAbsoluteW"},{"import": 1526,"src": 2672,"name": "readLinkAbsoluteZ"},{"import": 1526,"src": 2673,"name": "readLink"},{"import": 1526,"src": 2674,"name": "readLinkC"},{"import": 1526,"src": 2675,"name": "SymLinkFlags"},{"import": 1526,"src": 2676,"name": "symLinkAbsolute"},{"import": 1526,"src": 2677,"name": "symLinkAbsoluteW"},{"import": 1526,"src": 2678,"name": "symLinkAbsoluteZ"},{"import": 1526,"src": 2679,"name": "symLink"},{"import": 1526,"src": 2680,"name": "symLinkC"},{"import": 1526,"src": 2681,"name": "walkPath"},{"import": 1526,"src": 2682,"name": "OpenSelfExeError","kind": "const","type": 709,"value": 1568},{"import": 1526,"src": 56,"name": "openSelfExe","kind": "const","type": 54,"value": 61},{"import": 1526,"src": 2683,"name": "SelfExePathError","kind": "const","type": 709,"value": 1994},{"import": 1526,"src": 2684,"name": "selfExePathAlloc"},{"import": 1526,"src": 2685,"name": "selfExePath"},{"import": 1526,"src": 2686,"name": "selfExePathW"},{"import": 1526,"src": 2687,"name": "selfExeDirPathAlloc"},{"import": 1526,"src": 2688,"name": "selfExeDirPath"},{"import": 1526,"src": 2689,"name": "realpathAlloc"},{"import": 1526,"src": 2690,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1526,"src": 2691,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1526,"src": 2692,"name": "root"},{"import": 1526,"src": 2693,"name": "os","kind": "const","type": 709,"value": 1533},{"import": 1526,"src": 2694,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1526,"src": 2695,"name": "base64"},{"import": 1526,"src": 2696,"name": "crypto"},{"import": 1526,"src": 2697,"name": "Allocator"},{"import": 1526,"src": 2698,"name": "assert","kind": "const","type": 29,"value": 36},{"import": 1526,"src": 2699,"name": "math","kind": "const","type": 709,"value": 1531},{"import": 1526,"src": 2700,"name": "is_darwin"},{"import": 1526,"src": 2701,"name": "default_new_dir_mode"},{"import": 1526,"src": 2702,"name": "CopyFileError"},{"import": 1526,"src": 2703,"name": "copy_file"},{"import": 1527,"src": 2704,"name": "Adler32"},{"import": 1527,"src": 2705,"name": "autoHash","kind": "const","type": 1840,"value": 938},{"import": 1527,"src": 2706,"name": "autoHashStrat"},{"import": 1527,"src": 2707,"name": "Strategy"},{"import": 1527,"src": 2708,"name": "crc"},{"import": 1527,"src": 2709,"name": "Crc32"},{"import": 1527,"src": 2710,"name": "Fnv1a_32"},{"import": 1527,"src": 2711,"name": "Fnv1a_64"},{"import": 1527,"src": 2712,"name": "Fnv1a_128"},{"import": 1527,"src": 2713,"name": "SipHash64"},{"import": 1527,"src": 2714,"name": "SipHash128"},{"import": 1527,"src": 2715,"name": "murmur"},{"import": 1527,"src": 2716,"name": "Murmur2_32"},{"import": 1527,"src": 2717,"name": "Murmur2_64"},{"import": 1527,"src": 2718,"name": "Murmur3_32"},{"import": 1527,"src": 2719,"name": "cityhash"},{"import": 1527,"src": 2720,"name": "CityHash32"},{"import": 1527,"src": 2721,"name": "CityHash64"},{"import": 1527,"src": 2722,"name": "Wyhash","kind": "const","type": 709,"value": 1361},{"import": 1527,"src": 2723,"name": "adler"},{"import": 1527,"src": 2724,"name": "auto_hash","kind": "const","type": 709,"value": 1995},{"import": 1527,"src": 2725,"name": "fnv"},{"import": 1527,"src": 2726,"name": "siphash"},{"import": 1527,"src": 2727,"name": "wyhash","kind": "const","type": 709,"value": 1730},{"import": 1528,"src": 2728,"name": "LoggingAllocator"},{"import": 1528,"src": 2729,"name": "loggingAllocator"},{"import": 1528,"src": 2730,"name": "ScopedLoggingAllocator"},{"import": 1528,"src": 2731,"name": "LogToWriterAllocator"},{"import": 1528,"src": 2732,"name": "logToWriterAllocator"},{"import": 1528,"src": 2733,"name": "ArenaAllocator","kind": "const","type": 709,"value": 1161},{"import": 1528,"src": 2734,"name": "GeneralPurposeAllocator"},{"import": 1528,"src": 2735,"name": "c_allocator"},{"import": 1528,"src": 2736,"name": "raw_c_allocator"},{"import": 1528,"src": 2737,"name": "page_allocator","kind": "const","type": 977,"value": null},{"import": 1528,"src": 269,"name": "alignPageAllocLen","kind": "const","type": 358,"value": 391},{"import": 1528,"src": 2738,"name": "next_mmap_addr_hint","kind": "var","type": 1000,"value": "null"},{"import": 1528,"src": 2739,"name": "HeapAllocator"},{"import": 1528,"src": 2740,"name": "FixedBufferAllocator"},{"import": 1528,"src": 2741,"name": "ThreadSafeFixedBufferAllocator"},{"import": 1528,"src": 2742,"name": "stackFallback"},{"import": 1528,"src": 2743,"name": "StackFallbackAllocator"},{"import": 1528,"src": 2744,"name": "testAllocator"},{"import": 1528,"src": 2745,"name": "testAllocatorAligned"},{"import": 1528,"src": 2746,"name": "testAllocatorLargeAlignment"},{"import": 1528,"src": 2747,"name": "testAllocatorAlignedShrink"},{"import": 1528,"src": 2748,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1528,"src": 2749,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1528,"src": 2750,"name": "root"},{"import": 1528,"src": 2751,"name": "debug","kind": "const","type": 709,"value": 1522},{"import": 1528,"src": 2752,"name": "assert","kind": "const","type": 29,"value": 36},{"import": 1528,"src": 2753,"name": "testing"},{"import": 1528,"src": 2754,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1528,"src": 2755,"name": "os","kind": "const","type": 709,"value": 1533},{"import": 1528,"src": 2756,"name": "c"},{"import": 1528,"src": 2757,"name": "maxInt"},{"import": 1528,"src": 2758,"name": "Allocator","kind": "const","type": 709,"value": 1557},{"import": 1528,"src": 2759,"name": "CAllocator"},{"import": 1528,"src": 2760,"name": "c_allocator_state"},{"import": 1528,"src": 2761,"name": "raw_c_allocator_state"},{"import": 1528,"src": 2762,"name": "rawCAlloc"},{"import": 1528,"src": 2763,"name": "rawCResize"},{"import": 1528,"src": 2764,"name": "page_allocator_state","kind": "var","type": 1557,"value": null},{"import": 1528,"src": 2765,"name": "wasm_page_allocator_state"},{"import": 1528,"src": 2766,"name": "PageAllocator","kind": "const","type": 709,"value": 1996},{"import": 1528,"src": 2767,"name": "WasmPageAllocator"},{"import": 1528,"src": 2768,"name": "sliceContainsPtr"},{"import": 1528,"src": 2769,"name": "sliceContainsSlice"},{"import": 1528,"src": 2770,"name": "test_fixed_buffer_allocator_memory"},{"import": 1529,"src": 2771,"name": "Mode","kind": "const","type": 709,"value": 1997},{"import": 1529,"src": 2772,"name": "mode","kind": "const","type": 1997,"value": null},{"import": 1529,"src": 2773,"name": "is_async","kind": "const","type": 720,"value": "false"},{"import": 1529,"src": 2774,"name": "ModeOverride","kind": "const","type": 709,"value": 1414},{"import": 1529,"src": 2775,"name": "default_mode","kind": "const","type": 1414,"value": "undefined"},{"import": 1529,"src": 2776,"name": "getStdOut"},{"import": 1529,"src": 11,"name": "getStdErr","kind": "const","type": 10,"value": 11},{"import": 1529,"src": 2777,"name": "getStdIn"},{"import": 1529,"src": 2778,"name": "Reader","kind": "const","type": 769,"value": 864},{"import": 1529,"src": 2779,"name": "Writer","kind": "const","type": 722,"value": 848},{"import": 1529,"src": 2780,"name": "SeekableStream","kind": "const","type": 773,"value": 865},{"import": 1529,"src": 2781,"name": "BufferedWriter"},{"import": 1529,"src": 2782,"name": "bufferedWriter"},{"import": 1529,"src": 2783,"name": "BufferedReader"},{"import": 1529,"src": 2784,"name": "bufferedReader"},{"import": 1529,"src": 2785,"name": "PeekStream"},{"import": 1529,"src": 2786,"name": "peekStream"},{"import": 1529,"src": 2787,"name": "FixedBufferStream"},{"import": 1529,"src": 2788,"name": "fixedBufferStream","kind": "const","type": 1851,"value": 939},{"import": 1529,"src": 2789,"name": "CWriter"},{"import": 1529,"src": 2790,"name": "cWriter"},{"import": 1529,"src": 2791,"name": "LimitedReader"},{"import": 1529,"src": 2792,"name": "limitedReader"},{"import": 1529,"src": 2793,"name": "CountingWriter"},{"import": 1529,"src": 2794,"name": "countingWriter","kind": "const","type": 1936,"value": 971},{"import": 1529,"src": 2795,"name": "CountingReader"},{"import": 1529,"src": 2796,"name": "countingReader"},{"import": 1529,"src": 2797,"name": "MultiWriter"},{"import": 1529,"src": 2798,"name": "multiWriter"},{"import": 1529,"src": 2799,"name": "BitReader"},{"import": 1529,"src": 2800,"name": "bitReader"},{"import": 1529,"src": 2801,"name": "BitWriter"},{"import": 1529,"src": 2802,"name": "bitWriter"},{"import": 1529,"src": 2803,"name": "ChangeDetectionStream"},{"import": 1529,"src": 2804,"name": "changeDetectionStream"},{"import": 1529,"src": 2805,"name": "FindByteWriter"},{"import": 1529,"src": 2806,"name": "findByteWriter"},{"import": 1529,"src": 2807,"name": "FindByteOutStream"},{"import": 1529,"src": 2808,"name": "findByteOutStream"},{"import": 1529,"src": 2809,"name": "BufferedAtomicFile"},{"import": 1529,"src": 2810,"name": "StreamSource"},{"import": 1529,"src": 2811,"name": "null_writer","kind": "const","type": 900,"value": null},{"import": 1529,"src": 2812,"name": "writeFile"},{"import": 1529,"src": 2813,"name": "readFileAlloc"},{"import": 1529,"src": 2814,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1529,"src": 2815,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1529,"src": 2816,"name": "root","kind": "const","type": 709,"value": 948},{"import": 1529,"src": 2817,"name": "c"},{"import": 1529,"src": 2818,"name": "math"},{"import": 1529,"src": 2819,"name": "assert"},{"import": 1529,"src": 2820,"name": "os","kind": "const","type": 709,"value": 1533},{"import": 1529,"src": 2821,"name": "fs"},{"import": 1529,"src": 2822,"name": "mem"},{"import": 1529,"src": 2823,"name": "meta"},{"import": 1529,"src": 2824,"name": "trait"},{"import": 1529,"src": 2825,"name": "File","kind": "const","type": 709,"value": 724},{"import": 1529,"src": 2826,"name": "getStdOutHandle"},{"import": 1529,"src": 29,"name": "getStdErrHandle","kind": "const","type": 25,"value": 31},{"import": 1529,"src": 2827,"name": "getStdInHandle"},{"import": 1529,"src": 2828,"name": "NullWriter","kind": "const","type": 709,"value": 900},{"import": 1529,"src": 429,"name": "dummyWrite","kind": "const","type": 640,"value": 748},{"import": 1530,"src": 2829,"name": "mach_header"},{"import": 1530,"src": 2830,"name": "mach_header_64"},{"import": 1530,"src": 2831,"name": "fat_header"},{"import": 1530,"src": 2832,"name": "fat_arch"},{"import": 1530,"src": 2833,"name": "load_command"},{"import": 1530,"src": 2834,"name": "uuid_command"},{"import": 1530,"src": 2835,"name": "version_min_command"},{"import": 1530,"src": 2836,"name": "source_version_command"},{"import": 1530,"src": 2837,"name": "build_version_command"},{"import": 1530,"src": 2838,"name": "build_tool_version"},{"import": 1530,"src": 2839,"name": "PLATFORM_MACOS"},{"import": 1530,"src": 2840,"name": "PLATFORM_IOS"},{"import": 1530,"src": 2841,"name": "PLATFORM_TVOS"},{"import": 1530,"src": 2842,"name": "PLATFORM_WATCHOS"},{"import": 1530,"src": 2843,"name": "PLATFORM_BRIDGEOS"},{"import": 1530,"src": 2844,"name": "PLATFORM_MACCATALYST"},{"import": 1530,"src": 2845,"name": "PLATFORM_IOSSIMULATOR"},{"import": 1530,"src": 2846,"name": "PLATFORM_TVOSSIMULATOR"},{"import": 1530,"src": 2847,"name": "PLATFORM_WATCHOSSIMULATOR"},{"import": 1530,"src": 2848,"name": "PLATFORM_DRIVERKIT"},{"import": 1530,"src": 2849,"name": "TOOL_CLANG"},{"import": 1530,"src": 2850,"name": "TOOL_SWIFT"},{"import": 1530,"src": 2851,"name": "TOOL_LD"},{"import": 1530,"src": 2852,"name": "entry_point_command"},{"import": 1530,"src": 2853,"name": "symtab_command"},{"import": 1530,"src": 2854,"name": "dysymtab_command"},{"import": 1530,"src": 2855,"name": "linkedit_data_command"},{"import": 1530,"src": 2856,"name": "dyld_info_command"},{"import": 1530,"src": 2857,"name": "dylinker_command"},{"import": 1530,"src": 2858,"name": "dylib_command"},{"import": 1530,"src": 2859,"name": "dylib"},{"import": 1530,"src": 2860,"name": "rpath_command"},{"import": 1530,"src": 2861,"name": "segment_command"},{"import": 1530,"src": 2862,"name": "segment_command_64"},{"import": 1530,"src": 2863,"name": "section"},{"import": 1530,"src": 2864,"name": "section_64"},{"import": 1530,"src": 2865,"name": "nlist"},{"import": 1530,"src": 2866,"name": "nlist_64","kind": "const","type": 709,"value": 1998},{"import": 1530,"src": 2867,"name": "relocation_info"},{"import": 1530,"src": 2868,"name": "LC_REQ_DYLD"},{"import": 1530,"src": 2869,"name": "LC_SEGMENT"},{"import": 1530,"src": 2870,"name": "LC_SYMTAB"},{"import": 1530,"src": 2871,"name": "LC_SYMSEG"},{"import": 1530,"src": 2872,"name": "LC_THREAD"},{"import": 1530,"src": 2873,"name": "LC_UNIXTHREAD"},{"import": 1530,"src": 2874,"name": "LC_LOADFVMLIB"},{"import": 1530,"src": 2875,"name": "LC_IDFVMLIB"},{"import": 1530,"src": 2876,"name": "LC_IDENT"},{"import": 1530,"src": 2877,"name": "LC_FVMFILE"},{"import": 1530,"src": 2878,"name": "LC_PREPAGE"},{"import": 1530,"src": 2879,"name": "LC_DYSYMTAB"},{"import": 1530,"src": 2880,"name": "LC_LOAD_DYLIB"},{"import": 1530,"src": 2881,"name": "LC_ID_DYLIB"},{"import": 1530,"src": 2882,"name": "LC_LOAD_DYLINKER"},{"import": 1530,"src": 2883,"name": "LC_ID_DYLINKER"},{"import": 1530,"src": 2884,"name": "LC_PREBOUND_DYLIB"},{"import": 1530,"src": 2885,"name": "LC_ROUTINES"},{"import": 1530,"src": 2886,"name": "LC_SUB_FRAMEWORK"},{"import": 1530,"src": 2887,"name": "LC_SUB_UMBRELLA"},{"import": 1530,"src": 2888,"name": "LC_SUB_CLIENT"},{"import": 1530,"src": 2889,"name": "LC_SUB_LIBRARY"},{"import": 1530,"src": 2890,"name": "LC_TWOLEVEL_HINTS"},{"import": 1530,"src": 2891,"name": "LC_PREBIND_CKSUM"},{"import": 1530,"src": 2892,"name": "LC_LOAD_WEAK_DYLIB"},{"import": 1530,"src": 2893,"name": "LC_SEGMENT_64"},{"import": 1530,"src": 2894,"name": "LC_ROUTINES_64"},{"import": 1530,"src": 2895,"name": "LC_UUID"},{"import": 1530,"src": 2896,"name": "LC_RPATH"},{"import": 1530,"src": 2897,"name": "LC_CODE_SIGNATURE"},{"import": 1530,"src": 2898,"name": "LC_SEGMENT_SPLIT_INFO"},{"import": 1530,"src": 2899,"name": "LC_REEXPORT_DYLIB"},{"import": 1530,"src": 2900,"name": "LC_LAZY_LOAD_DYLIB"},{"import": 1530,"src": 2901,"name": "LC_ENCRYPTION_INFO"},{"import": 1530,"src": 2902,"name": "LC_DYLD_INFO"},{"import": 1530,"src": 2903,"name": "LC_DYLD_INFO_ONLY"},{"import": 1530,"src": 2904,"name": "LC_LOAD_UPWARD_DYLIB"},{"import": 1530,"src": 2905,"name": "LC_VERSION_MIN_MACOSX"},{"import": 1530,"src": 2906,"name": "LC_VERSION_MIN_IPHONEOS"},{"import": 1530,"src": 2907,"name": "LC_FUNCTION_STARTS"},{"import": 1530,"src": 2908,"name": "LC_DYLD_ENVIRONMENT"},{"import": 1530,"src": 2909,"name": "LC_MAIN"},{"import": 1530,"src": 2910,"name": "LC_DATA_IN_CODE"},{"import": 1530,"src": 2911,"name": "LC_SOURCE_VERSION"},{"import": 1530,"src": 2912,"name": "LC_DYLIB_CODE_SIGN_DRS"},{"import": 1530,"src": 2913,"name": "LC_ENCRYPTION_INFO_64"},{"import": 1530,"src": 2914,"name": "LC_LINKER_OPTION"},{"import": 1530,"src": 2915,"name": "LC_LINKER_OPTIMIZATION_HINT"},{"import": 1530,"src": 2916,"name": "LC_VERSION_MIN_TVOS"},{"import": 1530,"src": 2917,"name": "LC_VERSION_MIN_WATCHOS"},{"import": 1530,"src": 2918,"name": "LC_NOTE"},{"import": 1530,"src": 2919,"name": "LC_BUILD_VERSION"},{"import": 1530,"src": 2920,"name": "MH_MAGIC"},{"import": 1530,"src": 2921,"name": "MH_CIGAM"},{"import": 1530,"src": 2922,"name": "MH_MAGIC_64"},{"import": 1530,"src": 2923,"name": "MH_CIGAM_64"},{"import": 1530,"src": 2924,"name": "MH_OBJECT"},{"import": 1530,"src": 2925,"name": "MH_EXECUTE"},{"import": 1530,"src": 2926,"name": "MH_FVMLIB"},{"import": 1530,"src": 2927,"name": "MH_CORE"},{"import": 1530,"src": 2928,"name": "MH_PRELOAD"},{"import": 1530,"src": 2929,"name": "MH_DYLIB"},{"import": 1530,"src": 2930,"name": "MH_DYLINKER"},{"import": 1530,"src": 2931,"name": "MH_BUNDLE"},{"import": 1530,"src": 2932,"name": "MH_DYLIB_STUB"},{"import": 1530,"src": 2933,"name": "MH_DSYM"},{"import": 1530,"src": 2934,"name": "MH_KEXT_BUNDLE"},{"import": 1530,"src": 2935,"name": "MH_NOUNDEFS"},{"import": 1530,"src": 2936,"name": "MH_INCRLINK"},{"import": 1530,"src": 2937,"name": "MH_DYLDLINK"},{"import": 1530,"src": 2938,"name": "MH_BINDATLOAD"},{"import": 1530,"src": 2939,"name": "MH_PREBOUND"},{"import": 1530,"src": 2940,"name": "MH_SPLIT_SEGS"},{"import": 1530,"src": 2941,"name": "MH_LAZY_INIT"},{"import": 1530,"src": 2942,"name": "MH_TWOLEVEL"},{"import": 1530,"src": 2943,"name": "MH_FORCE_FLAT"},{"import": 1530,"src": 2944,"name": "MH_NOMULTIDEFS"},{"import": 1530,"src": 2945,"name": "MH_NOFIXPREBINDING"},{"import": 1530,"src": 2946,"name": "MH_PREBINDABLE"},{"import": 1530,"src": 2947,"name": "MH_ALLMODSBOUND"},{"import": 1530,"src": 2948,"name": "MH_SUBSECTIONS_VIA_SYMBOLS"},{"import": 1530,"src": 2949,"name": "MH_CANONICAL"},{"import": 1530,"src": 2950,"name": "MH_WEAK_DEFINES"},{"import": 1530,"src": 2951,"name": "MH_BINDS_TO_WEAK"},{"import": 1530,"src": 2952,"name": "MH_ALLOW_STACK_EXECUTION"},{"import": 1530,"src": 2953,"name": "MH_ROOT_SAFE"},{"import": 1530,"src": 2954,"name": "MH_SETUID_SAFE"},{"import": 1530,"src": 2955,"name": "MH_NO_REEXPORTED_DYLIBS"},{"import": 1530,"src": 2956,"name": "MH_PIE"},{"import": 1530,"src": 2957,"name": "MH_DEAD_STRIPPABLE_DYLIB"},{"import": 1530,"src": 2958,"name": "MH_HAS_TLV_DESCRIPTORS"},{"import": 1530,"src": 2959,"name": "MH_NO_HEAP_EXECUTION"},{"import": 1530,"src": 2960,"name": "MH_APP_EXTENSION_SAFE"},{"import": 1530,"src": 2961,"name": "MH_NLIST_OUTOFSYNC_WITH_DYLDINFO"},{"import": 1530,"src": 2962,"name": "FAT_MAGIC"},{"import": 1530,"src": 2963,"name": "FAT_CIGAM"},{"import": 1530,"src": 2964,"name": "FAT_MAGIC_64"},{"import": 1530,"src": 2965,"name": "FAT_CIGAM_64"},{"import": 1530,"src": 2966,"name": "SECTION_TYPE"},{"import": 1530,"src": 2967,"name": "SECTION_ATTRIBUTES"},{"import": 1530,"src": 2968,"name": "S_REGULAR"},{"import": 1530,"src": 2969,"name": "S_ZEROFILL"},{"import": 1530,"src": 2970,"name": "S_CSTRING_LITERALS"},{"import": 1530,"src": 2971,"name": "S_4BYTE_LITERALS"},{"import": 1530,"src": 2972,"name": "S_8BYTE_LITERALS"},{"import": 1530,"src": 2973,"name": "S_LITERAL_POINTERS"},{"import": 1530,"src": 2974,"name": "N_STAB"},{"import": 1530,"src": 2975,"name": "N_PEXT"},{"import": 1530,"src": 2976,"name": "N_TYPE"},{"import": 1530,"src": 2977,"name": "N_EXT"},{"import": 1530,"src": 2978,"name": "N_UNDF"},{"import": 1530,"src": 2979,"name": "N_ABS"},{"import": 1530,"src": 2980,"name": "N_SECT"},{"import": 1530,"src": 2981,"name": "N_PBUD"},{"import": 1530,"src": 2982,"name": "N_INDR"},{"import": 1530,"src": 2983,"name": "N_GSYM"},{"import": 1530,"src": 2984,"name": "N_FNAME"},{"import": 1530,"src": 2985,"name": "N_FUN"},{"import": 1530,"src": 2986,"name": "N_STSYM"},{"import": 1530,"src": 2987,"name": "N_LCSYM"},{"import": 1530,"src": 2988,"name": "N_BNSYM"},{"import": 1530,"src": 2989,"name": "N_AST"},{"import": 1530,"src": 2990,"name": "N_OPT"},{"import": 1530,"src": 2991,"name": "N_RSYM"},{"import": 1530,"src": 2992,"name": "N_SLINE"},{"import": 1530,"src": 2993,"name": "N_ENSYM"},{"import": 1530,"src": 2994,"name": "N_SSYM"},{"import": 1530,"src": 2995,"name": "N_SO"},{"import": 1530,"src": 2996,"name": "N_OSO"},{"import": 1530,"src": 2997,"name": "N_LSYM"},{"import": 1530,"src": 2998,"name": "N_BINCL"},{"import": 1530,"src": 2999,"name": "N_SOL"},{"import": 1530,"src": 3000,"name": "N_PARAMS"},{"import": 1530,"src": 3001,"name": "N_VERSION"},{"import": 1530,"src": 3002,"name": "N_OLEVEL"},{"import": 1530,"src": 3003,"name": "N_PSYM"},{"import": 1530,"src": 3004,"name": "N_EINCL"},{"import": 1530,"src": 3005,"name": "N_ENTRY"},{"import": 1530,"src": 3006,"name": "N_LBRAC"},{"import": 1530,"src": 3007,"name": "N_EXCL"},{"import": 1530,"src": 3008,"name": "N_RBRAC"},{"import": 1530,"src": 3009,"name": "N_BCOMM"},{"import": 1530,"src": 3010,"name": "N_ECOMM"},{"import": 1530,"src": 3011,"name": "N_ECOML"},{"import": 1530,"src": 3012,"name": "N_LENG"},{"import": 1530,"src": 3013,"name": "S_NON_LAZY_SYMBOL_POINTERS"},{"import": 1530,"src": 3014,"name": "S_LAZY_SYMBOL_POINTERS"},{"import": 1530,"src": 3015,"name": "S_SYMBOL_STUBS"},{"import": 1530,"src": 3016,"name": "S_MOD_INIT_FUNC_POINTERS"},{"import": 1530,"src": 3017,"name": "S_MOD_TERM_FUNC_POINTERS"},{"import": 1530,"src": 3018,"name": "S_COALESCED"},{"import": 1530,"src": 3019,"name": "S_GB_ZEROFILL"},{"import": 1530,"src": 3020,"name": "S_INTERPOSING"},{"import": 1530,"src": 3021,"name": "S_16BYTE_LITERALS"},{"import": 1530,"src": 3022,"name": "S_DTRACE_DOF"},{"import": 1530,"src": 3023,"name": "S_LAZY_DYLIB_SYMBOL_POINTERS"},{"import": 1530,"src": 3024,"name": "S_ATTR_DEBUG"},{"import": 1530,"src": 3025,"name": "S_ATTR_PURE_INSTRUCTIONS"},{"import": 1530,"src": 3026,"name": "S_ATTR_NO_TOC"},{"import": 1530,"src": 3027,"name": "S_ATTR_STRIP_STATIC_SYMS"},{"import": 1530,"src": 3028,"name": "S_ATTR_NO_DEAD_STRIP"},{"import": 1530,"src": 3029,"name": "S_ATTR_LIVE_SUPPORT"},{"import": 1530,"src": 3030,"name": "S_ATTR_SELF_MODIFYING_CODE"},{"import": 1530,"src": 3031,"name": "S_ATTR_SOME_INSTRUCTIONS"},{"import": 1530,"src": 3032,"name": "S_ATTR_EXT_RELOC"},{"import": 1530,"src": 3033,"name": "S_ATTR_LOC_RELOC"},{"import": 1530,"src": 3034,"name": "S_THREAD_LOCAL_REGULAR"},{"import": 1530,"src": 3035,"name": "S_THREAD_LOCAL_ZEROFILL"},{"import": 1530,"src": 3036,"name": "S_THREAD_LOCAL_VARIABLES"},{"import": 1530,"src": 3037,"name": "S_THREAD_LOCAL_VARIABLE_POINTERS"},{"import": 1530,"src": 3038,"name": "S_THREAD_LOCAL_INIT_FUNCTION_POINTERS"},{"import": 1530,"src": 3039,"name": "S_INIT_FUNC_OFFSETS"},{"import": 1530,"src": 3040,"name": "cpu_type_t"},{"import": 1530,"src": 3041,"name": "cpu_subtype_t"},{"import": 1530,"src": 3042,"name": "integer_t"},{"import": 1530,"src": 3043,"name": "vm_prot_t"},{"import": 1530,"src": 3044,"name": "CPU_TYPE_X86_64"},{"import": 1530,"src": 3045,"name": "CPU_TYPE_ARM64"},{"import": 1530,"src": 3046,"name": "CPU_SUBTYPE_X86_64_ALL"},{"import": 1530,"src": 3047,"name": "CPU_SUBTYPE_ARM_ALL"},{"import": 1530,"src": 3048,"name": "VM_PROT_NONE"},{"import": 1530,"src": 3049,"name": "VM_PROT_READ"},{"import": 1530,"src": 3050,"name": "VM_PROT_WRITE"},{"import": 1530,"src": 3051,"name": "VM_PROT_EXECUTE"},{"import": 1530,"src": 3052,"name": "REBASE_TYPE_POINTER"},{"import": 1530,"src": 3053,"name": "REBASE_TYPE_TEXT_ABSOLUTE32"},{"import": 1530,"src": 3054,"name": "REBASE_TYPE_TEXT_PCREL32"},{"import": 1530,"src": 3055,"name": "REBASE_OPCODE_MASK"},{"import": 1530,"src": 3056,"name": "REBASE_IMMEDIATE_MASK"},{"import": 1530,"src": 3057,"name": "REBASE_OPCODE_DONE"},{"import": 1530,"src": 3058,"name": "REBASE_OPCODE_SET_TYPE_IMM"},{"import": 1530,"src": 3059,"name": "REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB"},{"import": 1530,"src": 3060,"name": "REBASE_OPCODE_ADD_ADDR_ULEB"},{"import": 1530,"src": 3061,"name": "REBASE_OPCODE_ADD_ADDR_IMM_SCALED"},{"import": 1530,"src": 3062,"name": "REBASE_OPCODE_DO_REBASE_IMM_TIMES"},{"import": 1530,"src": 3063,"name": "REBASE_OPCODE_DO_REBASE_ULEB_TIMES"},{"import": 1530,"src": 3064,"name": "REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB"},{"import": 1530,"src": 3065,"name": "REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB"},{"import": 1530,"src": 3066,"name": "BIND_TYPE_POINTER"},{"import": 1530,"src": 3067,"name": "BIND_TYPE_TEXT_ABSOLUTE32"},{"import": 1530,"src": 3068,"name": "BIND_TYPE_TEXT_PCREL32"},{"import": 1530,"src": 3069,"name": "BIND_SPECIAL_DYLIB_SELF"},{"import": 1530,"src": 3070,"name": "BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE"},{"import": 1530,"src": 3071,"name": "BIND_SPECIAL_DYLIB_FLAT_LOOKUP"},{"import": 1530,"src": 3072,"name": "BIND_SYMBOL_FLAGS_WEAK_IMPORT"},{"import": 1530,"src": 3073,"name": "BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION"},{"import": 1530,"src": 3074,"name": "BIND_OPCODE_MASK"},{"import": 1530,"src": 3075,"name": "BIND_IMMEDIATE_MASK"},{"import": 1530,"src": 3076,"name": "BIND_OPCODE_DONE"},{"import": 1530,"src": 3077,"name": "BIND_OPCODE_SET_DYLIB_ORDINAL_IMM"},{"import": 1530,"src": 3078,"name": "BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB"},{"import": 1530,"src": 3079,"name": "BIND_OPCODE_SET_DYLIB_SPECIAL_IMM"},{"import": 1530,"src": 3080,"name": "BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM"},{"import": 1530,"src": 3081,"name": "BIND_OPCODE_SET_TYPE_IMM"},{"import": 1530,"src": 3082,"name": "BIND_OPCODE_SET_ADDEND_SLEB"},{"import": 1530,"src": 3083,"name": "BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB"},{"import": 1530,"src": 3084,"name": "BIND_OPCODE_ADD_ADDR_ULEB"},{"import": 1530,"src": 3085,"name": "BIND_OPCODE_DO_BIND"},{"import": 1530,"src": 3086,"name": "BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB"},{"import": 1530,"src": 3087,"name": "BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED"},{"import": 1530,"src": 3088,"name": "BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB"},{"import": 1530,"src": 3089,"name": "reloc_type_x86_64"},{"import": 1530,"src": 3090,"name": "reloc_type_arm64"},{"import": 1530,"src": 3091,"name": "REFERENCE_FLAG_UNDEFINED_NON_LAZY"},{"import": 1530,"src": 3092,"name": "REFERENCE_FLAG_UNDEFINED_LAZY"},{"import": 1530,"src": 3093,"name": "REFERENCE_FLAG_DEFINED"},{"import": 1530,"src": 3094,"name": "REFERENCE_FLAG_PRIVATE_DEFINED"},{"import": 1530,"src": 3095,"name": "REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY"},{"import": 1530,"src": 3096,"name": "REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY"},{"import": 1530,"src": 3097,"name": "REFERENCED_DYNAMICALLY"},{"import": 1530,"src": 3098,"name": "N_DESC_DISCARDED"},{"import": 1530,"src": 3099,"name": "N_WEAK_REF"},{"import": 1530,"src": 3100,"name": "N_WEAK_DEF"},{"import": 1530,"src": 3101,"name": "N_SYMBOL_RESOLVER"},{"import": 1530,"src": 3102,"name": "EXPORT_SYMBOL_FLAGS_KIND_MASK"},{"import": 1530,"src": 3103,"name": "EXPORT_SYMBOL_FLAGS_KIND_REGULAR"},{"import": 1530,"src": 3104,"name": "EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL"},{"import": 1530,"src": 3105,"name": "EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE"},{"import": 1530,"src": 3106,"name": "EXPORT_SYMBOL_FLAGS_KIND_WEAK_DEFINITION"},{"import": 1530,"src": 3107,"name": "EXPORT_SYMBOL_FLAGS_REEXPORT"},{"import": 1530,"src": 3108,"name": "EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER"},{"import": 1530,"src": 3109,"name": "INDIRECT_SYMBOL_LOCAL"},{"import": 1530,"src": 3110,"name": "INDIRECT_SYMBOL_ABS"},{"import": 1530,"src": 3111,"name": "CSMAGIC_REQUIREMENT"},{"import": 1530,"src": 3112,"name": "CSMAGIC_REQUIREMENTS"},{"import": 1530,"src": 3113,"name": "CSMAGIC_CODEDIRECTORY"},{"import": 1530,"src": 3114,"name": "CSMAGIC_EMBEDDED_SIGNATURE"},{"import": 1530,"src": 3115,"name": "CSMAGIC_EMBEDDED_SIGNATURE_OLD"},{"import": 1530,"src": 3116,"name": "CSMAGIC_EMBEDDED_ENTITLEMENTS"},{"import": 1530,"src": 3117,"name": "CSMAGIC_DETACHED_SIGNATURE"},{"import": 1530,"src": 3118,"name": "CSMAGIC_BLOBWRAPPER"},{"import": 1530,"src": 3119,"name": "CS_SUPPORTSSCATTER"},{"import": 1530,"src": 3120,"name": "CS_SUPPORTSTEAMID"},{"import": 1530,"src": 3121,"name": "CS_SUPPORTSCODELIMIT64"},{"import": 1530,"src": 3122,"name": "CS_SUPPORTSEXECSEG"},{"import": 1530,"src": 3123,"name": "CSSLOT_CODEDIRECTORY"},{"import": 1530,"src": 3124,"name": "CSSLOT_INFOSLOT"},{"import": 1530,"src": 3125,"name": "CSSLOT_REQUIREMENTS"},{"import": 1530,"src": 3126,"name": "CSSLOT_RESOURCEDIR"},{"import": 1530,"src": 3127,"name": "CSSLOT_APPLICATION"},{"import": 1530,"src": 3128,"name": "CSSLOT_ENTITLEMENTS"},{"import": 1530,"src": 3129,"name": "CSSLOT_ALTERNATE_CODEDIRECTORIES"},{"import": 1530,"src": 3130,"name": "CSSLOT_ALTERNATE_CODEDIRECTORY_MAX"},{"import": 1530,"src": 3131,"name": "CSSLOT_ALTERNATE_CODEDIRECTORY_LIMIT"},{"import": 1530,"src": 3132,"name": "CSSLOT_SIGNATURESLOT"},{"import": 1530,"src": 3133,"name": "CSSLOT_IDENTIFICATIONSLOT"},{"import": 1530,"src": 3134,"name": "CSSLOT_TICKETSLOT"},{"import": 1530,"src": 3135,"name": "CSTYPE_INDEX_REQUIREMENTS"},{"import": 1530,"src": 3136,"name": "CSTYPE_INDEX_ENTITLEMENTS"},{"import": 1530,"src": 3137,"name": "CS_HASHTYPE_SHA1"},{"import": 1530,"src": 3138,"name": "CS_HASHTYPE_SHA256"},{"import": 1530,"src": 3139,"name": "CS_HASHTYPE_SHA256_TRUNCATED"},{"import": 1530,"src": 3140,"name": "CS_HASHTYPE_SHA384"},{"import": 1530,"src": 3141,"name": "CS_SHA1_LEN"},{"import": 1530,"src": 3142,"name": "CS_SHA256_LEN"},{"import": 1530,"src": 3143,"name": "CS_SHA256_TRUNCATED_LEN"},{"import": 1530,"src": 3144,"name": "CS_CDHASH_LEN"},{"import": 1530,"src": 3145,"name": "CS_HASH_MAX_SIZE"},{"import": 1530,"src": 3146,"name": "CS_SIGNER_TYPE_UNKNOWN"},{"import": 1530,"src": 3147,"name": "CS_SIGNER_TYPE_LEGACYVPN"},{"import": 1530,"src": 3148,"name": "CS_SIGNER_TYPE_MAC_APP_STORE"},{"import": 1530,"src": 3149,"name": "CS_ADHOC"},{"import": 1530,"src": 3150,"name": "CS_EXECSEG_MAIN_BINARY"},{"import": 1530,"src": 3151,"name": "CodeDirectory"},{"import": 1530,"src": 3152,"name": "BlobIndex"},{"import": 1530,"src": 3153,"name": "SuperBlob"},{"import": 1530,"src": 3154,"name": "GenericBlob"},{"import": 1530,"src": 3155,"name": "data_in_code_entry"},{"import": 1531,"src": 3156,"name": "e"},{"import": 1531,"src": 3157,"name": "pi"},{"import": 1531,"src": 3158,"name": "phi"},{"import": 1531,"src": 3159,"name": "tau"},{"import": 1531,"src": 3160,"name": "log2e"},{"import": 1531,"src": 3161,"name": "log10e"},{"import": 1531,"src": 3162,"name": "ln2"},{"import": 1531,"src": 3163,"name": "ln10"},{"import": 1531,"src": 3164,"name": "two_sqrtpi"},{"import": 1531,"src": 3165,"name": "sqrt2"},{"import": 1531,"src": 3166,"name": "sqrt1_2"},{"import": 1531,"src": 3167,"name": "f128_true_min"},{"import": 1531,"src": 3168,"name": "f128_min"},{"import": 1531,"src": 3169,"name": "f128_max"},{"import": 1531,"src": 3170,"name": "f128_epsilon"},{"import": 1531,"src": 3171,"name": "f128_toint"},{"import": 1531,"src": 3172,"name": "f64_true_min"},{"import": 1531,"src": 3173,"name": "f64_min"},{"import": 1531,"src": 3174,"name": "f64_max"},{"import": 1531,"src": 3175,"name": "f64_epsilon"},{"import": 1531,"src": 3176,"name": "f64_toint"},{"import": 1531,"src": 3177,"name": "f32_true_min"},{"import": 1531,"src": 3178,"name": "f32_min"},{"import": 1531,"src": 3179,"name": "f32_max"},{"import": 1531,"src": 3180,"name": "f32_epsilon"},{"import": 1531,"src": 3181,"name": "f32_toint"},{"import": 1531,"src": 3182,"name": "f16_true_min"},{"import": 1531,"src": 3183,"name": "f16_min"},{"import": 1531,"src": 3184,"name": "f16_max"},{"import": 1531,"src": 3185,"name": "f16_epsilon"},{"import": 1531,"src": 3186,"name": "f16_toint"},{"import": 1531,"src": 3187,"name": "epsilon"},{"import": 1531,"src": 3188,"name": "nan_u16"},{"import": 1531,"src": 3189,"name": "nan_f16"},{"import": 1531,"src": 3190,"name": "qnan_u16"},{"import": 1531,"src": 3191,"name": "qnan_f16"},{"import": 1531,"src": 3192,"name": "inf_u16"},{"import": 1531,"src": 3193,"name": "inf_f16"},{"import": 1531,"src": 3194,"name": "nan_u32"},{"import": 1531,"src": 3195,"name": "nan_f32"},{"import": 1531,"src": 3196,"name": "qnan_u32"},{"import": 1531,"src": 3197,"name": "qnan_f32"},{"import": 1531,"src": 3198,"name": "inf_u32"},{"import": 1531,"src": 3199,"name": "inf_f32"},{"import": 1531,"src": 3200,"name": "nan_u64"},{"import": 1531,"src": 3201,"name": "nan_f64"},{"import": 1531,"src": 3202,"name": "qnan_u64"},{"import": 1531,"src": 3203,"name": "qnan_f64"},{"import": 1531,"src": 3204,"name": "inf_u64"},{"import": 1531,"src": 3205,"name": "inf_f64"},{"import": 1531,"src": 3206,"name": "nan_u128"},{"import": 1531,"src": 3207,"name": "nan_f128"},{"import": 1531,"src": 3208,"name": "qnan_u128"},{"import": 1531,"src": 3209,"name": "qnan_f128"},{"import": 1531,"src": 3210,"name": "inf_u128"},{"import": 1531,"src": 3211,"name": "inf_f128"},{"import": 1531,"src": 3212,"name": "nan"},{"import": 1531,"src": 3213,"name": "snan"},{"import": 1531,"src": 3214,"name": "inf"},{"import": 1531,"src": 3215,"name": "approxEqAbs"},{"import": 1531,"src": 3216,"name": "approxEqRel"},{"import": 1531,"src": 3217,"name": "approxEq"},{"import": 1531,"src": 3218,"name": "doNotOptimizeAway"},{"import": 1531,"src": 3219,"name": "raiseInvalid"},{"import": 1531,"src": 3220,"name": "raiseUnderflow"},{"import": 1531,"src": 3221,"name": "raiseOverflow"},{"import": 1531,"src": 3222,"name": "raiseInexact"},{"import": 1531,"src": 3223,"name": "raiseDivByZero"},{"import": 1531,"src": 3224,"name": "isNan"},{"import": 1531,"src": 3225,"name": "isSignalNan"},{"import": 1531,"src": 3226,"name": "fabs"},{"import": 1531,"src": 3227,"name": "ceil"},{"import": 1531,"src": 3228,"name": "floor"},{"import": 1531,"src": 3229,"name": "trunc"},{"import": 1531,"src": 3230,"name": "round"},{"import": 1531,"src": 3231,"name": "frexp"},{"import": 1531,"src": 3232,"name": "Frexp"},{"import": 1531,"src": 3233,"name": "modf"},{"import": 1531,"src": 3234,"name": "modf32_result"},{"import": 1531,"src": 3235,"name": "modf64_result"},{"import": 1531,"src": 3236,"name": "copysign"},{"import": 1531,"src": 3237,"name": "isFinite"},{"import": 1531,"src": 3238,"name": "isInf"},{"import": 1531,"src": 3239,"name": "isPositiveInf"},{"import": 1531,"src": 3240,"name": "isNegativeInf"},{"import": 1531,"src": 3241,"name": "isNormal"},{"import": 1531,"src": 3242,"name": "signbit"},{"import": 1531,"src": 3243,"name": "scalbn"},{"import": 1531,"src": 3244,"name": "ldexp"},{"import": 1531,"src": 3245,"name": "pow"},{"import": 1531,"src": 3246,"name": "powi"},{"import": 1531,"src": 3247,"name": "sqrt","kind": "const","type": 1999,"value": 998},{"import": 1531,"src": 3248,"name": "cbrt"},{"import": 1531,"src": 3249,"name": "acos"},{"import": 1531,"src": 3250,"name": "asin"},{"import": 1531,"src": 3251,"name": "atan"},{"import": 1531,"src": 3252,"name": "atan2"},{"import": 1531,"src": 3253,"name": "hypot"},{"import": 1531,"src": 3254,"name": "exp"},{"import": 1531,"src": 3255,"name": "exp2"},{"import": 1531,"src": 3256,"name": "expm1"},{"import": 1531,"src": 3257,"name": "ilogb"},{"import": 1531,"src": 3258,"name": "ln"},{"import": 1531,"src": 3259,"name": "log"},{"import": 1531,"src": 3260,"name": "log2"},{"import": 1531,"src": 3261,"name": "log10"},{"import": 1531,"src": 3262,"name": "log1p"},{"import": 1531,"src": 3263,"name": "fma"},{"import": 1531,"src": 3264,"name": "asinh"},{"import": 1531,"src": 3265,"name": "acosh"},{"import": 1531,"src": 3266,"name": "atanh"},{"import": 1531,"src": 3267,"name": "sinh"},{"import": 1531,"src": 3268,"name": "cosh"},{"import": 1531,"src": 3269,"name": "tanh"},{"import": 1531,"src": 3270,"name": "cos"},{"import": 1531,"src": 3271,"name": "sin"},{"import": 1531,"src": 3272,"name": "tan"},{"import": 1531,"src": 3273,"name": "complex"},{"import": 1531,"src": 3274,"name": "Complex"},{"import": 1531,"src": 3275,"name": "big"},{"import": 1531,"src": 3276,"name": "floatMantissaBits"},{"import": 1531,"src": 3277,"name": "floatExponentBits"},{"import": 1531,"src": 464,"name": "Min","kind": "const","type": 739,"value": 856},{"import": 1531,"src": 44,"name": "min","kind": "const","type": 2000,"value": 999},{"import": 1531,"src": 3278,"name": "min3"},{"import": 1531,"src": 121,"name": "max","kind": "const","type": 777,"value": 866},{"import": 1531,"src": 474,"name": "max3","kind": "const","type": 779,"value": 867},{"import": 1531,"src": 3279,"name": "clamp"},{"import": 1531,"src": 276,"name": "mul","kind": "const","type": 2001,"value": 1000},{"import": 1531,"src": 218,"name": "add","kind": "const","type": 2002,"value": 1001},{"import": 1531,"src": 297,"name": "sub","kind": "const","type": 2003,"value": 1002},{"import": 1531,"src": 3280,"name": "negate"},{"import": 1531,"src": 3281,"name": "shlExact"},{"import": 1531,"src": 3282,"name": "shl"},{"import": 1531,"src": 3283,"name": "shr"},{"import": 1531,"src": 3284,"name": "rotr"},{"import": 1531,"src": 3285,"name": "rotl"},{"import": 1531,"src": 455,"name": "Log2Int","kind": "const","type": 717,"value": 847},{"import": 1531,"src": 3286,"name": "Log2IntCeil"},{"import": 1531,"src": 3287,"name": "IntFittingRange"},{"import": 1531,"src": 3288,"name": "absInt"},{"import": 1531,"src": 3289,"name": "absFloat"},{"import": 1531,"src": 3290,"name": "divTrunc"},{"import": 1531,"src": 3291,"name": "divFloor"},{"import": 1531,"src": 3292,"name": "divCeil"},{"import": 1531,"src": 3293,"name": "divExact"},{"import": 1531,"src": 3294,"name": "mod"},{"import": 1531,"src": 3295,"name": "rem"},{"import": 1531,"src": 181,"name": "absCast","kind": "const","type": 2004,"value": 1003},{"import": 1531,"src": 3296,"name": "negateCast"},{"import": 1531,"src": 62,"name": "cast","kind": "const","type": 2005,"value": 1004},{"import": 1531,"src": 3297,"name": "AlignCastError"},{"import": 1531,"src": 3298,"name": "alignCast"},{"import": 1531,"src": 123,"name": "isPowerOfTwo","kind": "const","type": 793,"value": 875},{"import": 1531,"src": 443,"name": "floorPowerOfTwo","kind": "const","type": 2006,"value": 1005},{"import": 1531,"src": 292,"name": "ceilPowerOfTwoPromote","kind": "const","type": 2007,"value": 1006},{"import": 1531,"src": 229,"name": "ceilPowerOfTwo","kind": "const","type": 2008,"value": 1007},{"import": 1531,"src": 3299,"name": "ceilPowerOfTwoAssert"},{"import": 1531,"src": 3300,"name": "log2_int"},{"import": 1531,"src": 3301,"name": "log2_int_ceil"},{"import": 1531,"src": 3302,"name": "lossyCast"},{"import": 1531,"src": 475,"name": "maxInt","kind": "const","type": 780,"value": 868},{"import": 1531,"src": 487,"name": "minInt","kind": "const","type": 816,"value": 885},{"import": 1531,"src": 394,"name": "mulWide","kind": "const","type": 2009,"value": 1008},{"import": 1531,"src": 3303,"name": "Order"},{"import": 1531,"src": 3304,"name": "order"},{"import": 1531,"src": 3305,"name": "CompareOperator"},{"import": 1531,"src": 3306,"name": "compare"},{"import": 1531,"src": 3307,"name": "boolMask"},{"import": 1531,"src": 3308,"name": "comptimeMod"},{"import": 1531,"src": 3309,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1531,"src": 3310,"name": "assert","kind": "const","type": 29,"value": 36},{"import": 1531,"src": 3311,"name": "mem"},{"import": 1531,"src": 3312,"name": "testing"},{"import": 1531,"src": 3313,"name": "testOverflow"},{"import": 1531,"src": 3314,"name": "testAbsInt"},{"import": 1531,"src": 3315,"name": "testAbsFloat"},{"import": 1531,"src": 3316,"name": "testDivTrunc"},{"import": 1531,"src": 3317,"name": "testDivFloor"},{"import": 1531,"src": 3318,"name": "testDivCeil"},{"import": 1531,"src": 3319,"name": "testDivExact"},{"import": 1531,"src": 3320,"name": "testMod"},{"import": 1531,"src": 3321,"name": "testRem"},{"import": 1531,"src": 3322,"name": "testFloorPowerOfTwo"},{"import": 1531,"src": 3323,"name": "testCeilPowerOfTwoPromote"},{"import": 1531,"src": 3324,"name": "testCeilPowerOfTwo"},{"import": 1532,"src": 3325,"name": "trait","kind": "const","type": 709,"value": 1841},{"import": 1532,"src": 3326,"name": "TrailerFlags"},{"import": 1532,"src": 3327,"name": "tagName"},{"import": 1532,"src": 3328,"name": "stringToEnum"},{"import": 1532,"src": 3329,"name": "bitCount"},{"import": 1532,"src": 3330,"name": "alignment"},{"import": 1532,"src": 483,"name": "Child","kind": "const","type": 803,"value": 881},{"import": 1532,"src": 467,"name": "Elem","kind": "const","type": 758,"value": 859},{"import": 1532,"src": 497,"name": "sentinel","kind": "const","type": 849,"value": 895},{"import": 1532,"src": 468,"name": "Sentinel","kind": "const","type": 761,"value": 860},{"import": 1532,"src": 66,"name": "assumeSentinel","kind": "const","type": 2010,"value": 1009},{"import": 1532,"src": 499,"name": "containerLayout","kind": "const","type": 868,"value": 897},{"import": 1532,"src": 3331,"name": "declarations"},{"import": 1532,"src": 3332,"name": "declarationInfo"},{"import": 1532,"src": 3333,"name": "fields","kind": "const","type": 2011,"value": 1010},{"import": 1532,"src": 3334,"name": "fieldInfo"},{"import": 1532,"src": 3335,"name": "fieldNames"},{"import": 1532,"src": 3336,"name": "FieldEnum"},{"import": 1532,"src": 3337,"name": "TagType"},{"import": 1532,"src": 479,"name": "Tag","kind": "const","type": 795,"value": 877},{"import": 1532,"src": 3338,"name": "activeTag"},{"import": 1532,"src": 3339,"name": "TagPayload"},{"import": 1532,"src": 194,"name": "eql","kind": "const","type": 2012,"value": 1011},{"import": 1532,"src": 3340,"name": "IntToEnumError"},{"import": 1532,"src": 3341,"name": "intToEnum"},{"import": 1532,"src": 3342,"name": "fieldIndex"},{"import": 1532,"src": 3343,"name": "refAllDecls"},{"import": 1532,"src": 3344,"name": "declList"},{"import": 1532,"src": 3345,"name": "IntType"},{"import": 1532,"src": 454,"name": "Int","kind": "const","type": 712,"value": 846},{"import": 1532,"src": 3346,"name": "Float"},{"import": 1532,"src": 3347,"name": "Vector"},{"import": 1532,"src": 3348,"name": "ArgsTuple"},{"import": 1532,"src": 3349,"name": "Tuple"},{"import": 1532,"src": 3350,"name": "globalOption"},{"import": 1532,"src": 3351,"name": "isError"},{"import": 1532,"src": 3352,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1532,"src": 3353,"name": "debug"},{"import": 1532,"src": 3354,"name": "mem"},{"import": 1532,"src": 3355,"name": "math"},{"import": 1532,"src": 3356,"name": "testing"},{"import": 1532,"src": 3357,"name": "root"},{"import": 1532,"src": 3358,"name": "TypeInfo","kind": "const","type": 709,"value": 797},{"import": 1532,"src": 3359,"name": "testSentinel"},{"import": 1532,"src": 3360,"name": "expectEqualEnum"},{"import": 1532,"src": 3361,"name": "TagPayloadType"},{"import": 1532,"src": 3362,"name": "TupleTester"},{"import": 1533,"src": 3363,"name": "darwin"},{"import": 1533,"src": 3364,"name": "dragonfly"},{"import": 1533,"src": 3365,"name": "freebsd"},{"import": 1533,"src": 3366,"name": "haiku"},{"import": 1533,"src": 3367,"name": "netbsd"},{"import": 1533,"src": 3368,"name": "openbsd"},{"import": 1533,"src": 3369,"name": "solaris"},{"import": 1533,"src": 3370,"name": "linux","kind": "const","type": 709,"value": 1870},{"import": 1533,"src": 3371,"name": "plan9"},{"import": 1533,"src": 3372,"name": "uefi"},{"import": 1533,"src": 3373,"name": "wasi"},{"import": 1533,"src": 3374,"name": "windows","kind": "const","type": 709,"value": 1873},{"import": 1533,"src": 3375,"name": "system","kind": "const","type": 709,"value": 1870},{"import": 1533,"src": 3376,"name": "AF"},{"import": 1533,"src": 3377,"name": "AF_SUN"},{"import": 1533,"src": 3378,"name": "ARCH"},{"import": 1533,"src": 3379,"name": "AT","kind": "const","type": 709,"value": 2013},{"import": 1533,"src": 3380,"name": "AT_SUN"},{"import": 1533,"src": 3381,"name": "CLOCK"},{"import": 1533,"src": 3382,"name": "CPU_COUNT"},{"import": 1533,"src": 3383,"name": "CTL"},{"import": 1533,"src": 3384,"name": "DT"},{"import": 1533,"src": 3385,"name": "E","kind": "const","type": 709,"value": 1146},{"import": 1533,"src": 3386,"name": "Elf_Symndx"},{"import": 1533,"src": 3387,"name": "F"},{"import": 1533,"src": 3388,"name": "FD_CLOEXEC"},{"import": 1533,"src": 3389,"name": "Flock"},{"import": 1533,"src": 3390,"name": "HOST_NAME_MAX"},{"import": 1533,"src": 3391,"name": "IFNAMESIZE"},{"import": 1533,"src": 3392,"name": "IOV_MAX"},{"import": 1533,"src": 3393,"name": "IPPROTO"},{"import": 1533,"src": 3394,"name": "KERN"},{"import": 1533,"src": 3395,"name": "Kevent"},{"import": 1533,"src": 3396,"name": "LOCK","kind": "const","type": 709,"value": 1896},{"import": 1533,"src": 3397,"name": "MADV"},{"import": 1533,"src": 3398,"name": "MAP","kind": "const","type": 709,"value": 2014},{"import": 1533,"src": 3399,"name": "MAX_ADDR_LEN"},{"import": 1533,"src": 3400,"name": "MMAP2_UNIT"},{"import": 1533,"src": 3401,"name": "MSG"},{"import": 1533,"src": 3402,"name": "NAME_MAX"},{"import": 1533,"src": 3403,"name": "O","kind": "const","type": 709,"value": 2015},{"import": 1533,"src": 3404,"name": "PATH_MAX","kind": "const","type": 778,"value": null},{"import": 1533,"src": 3405,"name": "POLL"},{"import": 1533,"src": 3406,"name": "POSIX_FADV"},{"import": 1533,"src": 3407,"name": "PR"},{"import": 1533,"src": 3408,"name": "PROT","kind": "const","type": 709,"value": 2016},{"import": 1533,"src": 3409,"name": "REG","kind": "const","type": 709,"value": 1895},{"import": 1533,"src": 3410,"name": "RIGHT"},{"import": 1533,"src": 3411,"name": "RLIM"},{"import": 1533,"src": 3412,"name": "RR"},{"import": 1533,"src": 3413,"name": "S","kind": "const","type": 709,"value": 2017},{"import": 1533,"src": 3414,"name": "SA","kind": "const","type": 709,"value": 2018},{"import": 1533,"src": 3415,"name": "SC"},{"import": 1533,"src": 3416,"name": "_SC"},{"import": 1533,"src": 3417,"name": "SEEK"},{"import": 1533,"src": 3418,"name": "SHUT"},{"import": 1533,"src": 3419,"name": "SIG","kind": "const","type": 709,"value": 2019},{"import": 1533,"src": 3420,"name": "SIOCGIFINDEX"},{"import": 1533,"src": 3421,"name": "SO"},{"import": 1533,"src": 3422,"name": "SOCK"},{"import": 1533,"src": 3423,"name": "SOL"},{"import": 1533,"src": 3424,"name": "STDERR_FILENO","kind": "const","type": 778,"value": null},{"import": 1533,"src": 3425,"name": "STDIN_FILENO"},{"import": 1533,"src": 3426,"name": "STDOUT_FILENO","kind": "const","type": 778,"value": null},{"import": 1533,"src": 3427,"name": "SYS"},{"import": 1533,"src": 3428,"name": "Sigaction","kind": "const","type": 709,"value": 2020},{"import": 1533,"src": 3429,"name": "Stat","kind": "const","type": 709,"value": 870},{"import": 1533,"src": 3430,"name": "TCSA"},{"import": 1533,"src": 3431,"name": "TCP"},{"import": 1533,"src": 3432,"name": "VDSO"},{"import": 1533,"src": 3433,"name": "W"},{"import": 1533,"src": 3434,"name": "addrinfo"},{"import": 1533,"src": 3435,"name": "blkcnt_t"},{"import": 1533,"src": 3436,"name": "blksize_t"},{"import": 1533,"src": 3437,"name": "clock_t"},{"import": 1533,"src": 3438,"name": "cpu_set_t"},{"import": 1533,"src": 3439,"name": "dev_t"},{"import": 1533,"src": 3440,"name": "dl_phdr_info","kind": "const","type": 709,"value": 1564},{"import": 1533,"src": 3441,"name": "empty_sigset","kind": "const","type": 1903,"value": null},{"import": 1533,"src": 3442,"name": "fd_t","kind": "const","type": 709,"value": 829},{"import": 1533,"src": 3443,"name": "fdflags_t"},{"import": 1533,"src": 3444,"name": "fdstat_t"},{"import": 1533,"src": 3445,"name": "gid_t"},{"import": 1533,"src": 3446,"name": "ifreq"},{"import": 1533,"src": 3447,"name": "ino_t","kind": "const","type": 709,"value": 732},{"import": 1533,"src": 3448,"name": "lookupflags_t"},{"import": 1533,"src": 3449,"name": "mcontext_t"},{"import": 1533,"src": 3450,"name": "mode_t","kind": "const","type": 709,"value": 719},{"import": 1533,"src": 3451,"name": "msghdr"},{"import": 1533,"src": 3452,"name": "msghdr_const"},{"import": 1533,"src": 3453,"name": "nfds_t"},{"import": 1533,"src": 3454,"name": "nlink_t"},{"import": 1533,"src": 3455,"name": "off_t"},{"import": 1533,"src": 3456,"name": "oflags_t"},{"import": 1533,"src": 3457,"name": "pid_t"},{"import": 1533,"src": 3458,"name": "pollfd"},{"import": 1533,"src": 3459,"name": "port_t"},{"import": 1533,"src": 3460,"name": "port_event"},{"import": 1533,"src": 3461,"name": "port_notify"},{"import": 1533,"src": 3462,"name": "file_obj"},{"import": 1533,"src": 3463,"name": "rights_t"},{"import": 1533,"src": 3464,"name": "rlim_t"},{"import": 1533,"src": 3465,"name": "rlimit","kind": "const","type": 709,"value": 1145},{"import": 1533,"src": 3466,"name": "rlimit_resource","kind": "const","type": 709,"value": 1144},{"import": 1533,"src": 3467,"name": "rusage"},{"import": 1533,"src": 3468,"name": "sa_family_t"},{"import": 1533,"src": 3469,"name": "siginfo_t","kind": "const","type": 709,"value": 1728},{"import": 1533,"src": 3470,"name": "sigset_t","kind": "const","type": 709,"value": 1903},{"import": 1533,"src": 3471,"name": "sockaddr"},{"import": 1533,"src": 3472,"name": "socklen_t"},{"import": 1533,"src": 3473,"name": "stack_t"},{"import": 1533,"src": 3474,"name": "termios"},{"import": 1533,"src": 3475,"name": "time_t"},{"import": 1533,"src": 3476,"name": "timespec"},{"import": 1533,"src": 3477,"name": "timestamp_t"},{"import": 1533,"src": 3478,"name": "timeval"},{"import": 1533,"src": 3479,"name": "timezone"},{"import": 1533,"src": 3480,"name": "ucontext_t","kind": "const","type": 709,"value": 1901},{"import": 1533,"src": 3481,"name": "uid_t"},{"import": 1533,"src": 3482,"name": "user_desc"},{"import": 1533,"src": 3483,"name": "utsname"},{"import": 1533,"src": 3484,"name": "F_OK"},{"import": 1533,"src": 3485,"name": "R_OK"},{"import": 1533,"src": 3486,"name": "W_OK"},{"import": 1533,"src": 3487,"name": "X_OK"},{"import": 1533,"src": 3488,"name": "iovec","kind": "const","type": 709,"value": 2021},{"import": 1533,"src": 3489,"name": "iovec_const","kind": "const","type": 709,"value": 2022},{"import": 1533,"src": 3490,"name": "LOG"},{"import": 1533,"src": 3491,"name": "socket_t"},{"import": 1533,"src": 3492,"name": "environ","kind": "var","type": 967,"value": "undefined"},{"import": 1533,"src": 3493,"name": "argv","kind": "var","type": 967,"value": "undefined"},{"import": 1533,"src": 3494,"name": "errno","kind": "const","type": 238,"value": 254},{"import": 1533,"src": 215,"name": "close","kind": "const","type": 282,"value": 301},{"import": 1533,"src": 3495,"name": "FChmodError"},{"import": 1533,"src": 3496,"name": "fchmod"},{"import": 1533,"src": 3497,"name": "FChownError"},{"import": 1533,"src": 3498,"name": "fchown"},{"import": 1533,"src": 3499,"name": "GetRandomError"},{"import": 1533,"src": 3500,"name": "getrandom"},{"import": 1533,"src": 16,"name": "abort","kind": "const","type": 7,"value": 16},{"import": 1533,"src": 3501,"name": "RaiseError","kind": "const","type": 709,"value": 1148},{"import": 1533,"src": 36,"name": "raise","kind": "const","type": 31,"value": 38},{"import": 1533,"src": 3502,"name": "KillError"},{"import": 1533,"src": 3503,"name": "kill"},{"import": 1533,"src": 24,"name": "exit","kind": "const","type": 21,"value": 26},{"import": 1533,"src": 3504,"name": "ReadError","kind": "const","type": 709,"value": 867},{"import": 1533,"src": 294,"name": "read","kind": "const","type": 411,"value": 454},{"import": 1533,"src": 3505,"name": "readv"},{"import": 1533,"src": 3506,"name": "PReadError","kind": "const","type": 709,"value": 2023},{"import": 1533,"src": 3507,"name": "pread"},{"import": 1533,"src": 3508,"name": "TruncateError"},{"import": 1533,"src": 3509,"name": "ftruncate"},{"import": 1533,"src": 3510,"name": "preadv"},{"import": 1533,"src": 3511,"name": "WriteError","kind": "const","type": 709,"value": 725},{"import": 1533,"src": 30,"name": "write","kind": "const","type": 26,"value": 32},{"import": 1533,"src": 3512,"name": "writev"},{"import": 1533,"src": 3513,"name": "PWriteError","kind": "const","type": 709,"value": 2024},{"import": 1533,"src": 3514,"name": "pwrite"},{"import": 1533,"src": 3515,"name": "pwritev"},{"import": 1533,"src": 3516,"name": "OpenError","kind": "const","type": 709,"value": 1715},{"import": 1533,"src": 3517,"name": "open"},{"import": 1533,"src": 3518,"name": "openC"},{"import": 1533,"src": 3519,"name": "openZ"},{"import": 1533,"src": 3520,"name": "openW"},{"import": 1533,"src": 3521,"name": "openat"},{"import": 1533,"src": 3522,"name": "openatWasi"},{"import": 1533,"src": 3523,"name": "openatC"},{"import": 1533,"src": 277,"name": "openatZ","kind": "const","type": 366,"value": 401},{"import": 1533,"src": 3524,"name": "openatW"},{"import": 1533,"src": 3525,"name": "dup"},{"import": 1533,"src": 3526,"name": "dup2"},{"import": 1533,"src": 3527,"name": "ExecveError"},{"import": 1533,"src": 3528,"name": "execveC"},{"import": 1533,"src": 3529,"name": "execveZ"},{"import": 1533,"src": 3530,"name": "execvpeC"},{"import": 1533,"src": 3531,"name": "Arg0Expand"},{"import": 1533,"src": 3532,"name": "execvpeZ_expandArg0"},{"import": 1533,"src": 3533,"name": "execvpeZ"},{"import": 1533,"src": 270,"name": "getenv","kind": "const","type": 360,"value": 393},{"import": 1533,"src": 3534,"name": "getenvC"},{"import": 1533,"src": 272,"name": "getenvZ","kind": "const","type": 361,"value": 395},{"import": 1533,"src": 3535,"name": "getenvW"},{"import": 1533,"src": 3536,"name": "GetCwdError"},{"import": 1533,"src": 3537,"name": "getcwd"},{"import": 1533,"src": 3538,"name": "SymLinkError"},{"import": 1533,"src": 3539,"name": "symlink"},{"import": 1533,"src": 3540,"name": "symlinkC"},{"import": 1533,"src": 3541,"name": "symlinkZ"},{"import": 1533,"src": 3542,"name": "symlinkat"},{"import": 1533,"src": 3543,"name": "symlinkatC"},{"import": 1533,"src": 3544,"name": "symlinkatWasi"},{"import": 1533,"src": 3545,"name": "symlinkatZ"},{"import": 1533,"src": 3546,"name": "LinkError"},{"import": 1533,"src": 3547,"name": "linkZ"},{"import": 1533,"src": 3548,"name": "link"},{"import": 1533,"src": 3549,"name": "LinkatError"},{"import": 1533,"src": 3550,"name": "linkatZ"},{"import": 1533,"src": 3551,"name": "linkat"},{"import": 1533,"src": 3552,"name": "UnlinkError"},{"import": 1533,"src": 3553,"name": "unlink"},{"import": 1533,"src": 3554,"name": "unlinkC"},{"import": 1533,"src": 3555,"name": "unlinkZ"},{"import": 1533,"src": 3556,"name": "unlinkW"},{"import": 1533,"src": 3557,"name": "UnlinkatError"},{"import": 1533,"src": 3558,"name": "unlinkat"},{"import": 1533,"src": 3559,"name": "unlinkatC"},{"import": 1533,"src": 3560,"name": "unlinkatWasi"},{"import": 1533,"src": 3561,"name": "unlinkatZ"},{"import": 1533,"src": 3562,"name": "unlinkatW"},{"import": 1533,"src": 3563,"name": "RenameError"},{"import": 1533,"src": 3564,"name": "rename"},{"import": 1533,"src": 3565,"name": "renameC"},{"import": 1533,"src": 3566,"name": "renameZ"},{"import": 1533,"src": 3567,"name": "renameW"},{"import": 1533,"src": 3568,"name": "renameat"},{"import": 1533,"src": 3569,"name": "renameatWasi"},{"import": 1533,"src": 3570,"name": "renameatZ"},{"import": 1533,"src": 3571,"name": "renameatW"},{"import": 1533,"src": 3572,"name": "mkdirat"},{"import": 1533,"src": 3573,"name": "mkdiratC"},{"import": 1533,"src": 3574,"name": "mkdiratWasi"},{"import": 1533,"src": 3575,"name": "mkdiratZ"},{"import": 1533,"src": 3576,"name": "mkdiratW"},{"import": 1533,"src": 3577,"name": "MakeDirError"},{"import": 1533,"src": 3578,"name": "mkdir"},{"import": 1533,"src": 3579,"name": "mkdirZ"},{"import": 1533,"src": 3580,"name": "mkdirW"},{"import": 1533,"src": 3581,"name": "DeleteDirError"},{"import": 1533,"src": 3582,"name": "rmdir"},{"import": 1533,"src": 3583,"name": "rmdirC"},{"import": 1533,"src": 3584,"name": "rmdirZ"},{"import": 1533,"src": 3585,"name": "rmdirW"},{"import": 1533,"src": 3586,"name": "ChangeCurDirError"},{"import": 1533,"src": 3587,"name": "chdir"},{"import": 1533,"src": 3588,"name": "chdirC"},{"import": 1533,"src": 3589,"name": "chdirZ"},{"import": 1533,"src": 3590,"name": "chdirW"},{"import": 1533,"src": 3591,"name": "FchdirError"},{"import": 1533,"src": 3592,"name": "fchdir"},{"import": 1533,"src": 3593,"name": "ReadLinkError","kind": "const","type": 709,"value": 2025},{"import": 1533,"src": 3594,"name": "readlink"},{"import": 1533,"src": 3595,"name": "readlinkC"},{"import": 1533,"src": 3596,"name": "readlinkW"},{"import": 1533,"src": 3597,"name": "readlinkZ"},{"import": 1533,"src": 3598,"name": "readlinkat"},{"import": 1533,"src": 3599,"name": "readlinkatC"},{"import": 1533,"src": 3600,"name": "readlinkatWasi"},{"import": 1533,"src": 3601,"name": "readlinkatW"},{"import": 1533,"src": 3602,"name": "readlinkatZ"},{"import": 1533,"src": 3603,"name": "SetEidError"},{"import": 1533,"src": 3604,"name": "SetIdError"},{"import": 1533,"src": 3605,"name": "setuid"},{"import": 1533,"src": 3606,"name": "seteuid"},{"import": 1533,"src": 3607,"name": "setreuid"},{"import": 1533,"src": 3608,"name": "setgid"},{"import": 1533,"src": 3609,"name": "setegid"},{"import": 1533,"src": 3610,"name": "setregid"},{"import": 1533,"src": 316,"name": "isatty","kind": "const","type": 440,"value": 489},{"import": 1533,"src": 3611,"name": "isCygwinPty"},{"import": 1533,"src": 3612,"name": "SocketError"},{"import": 1533,"src": 3613,"name": "socket"},{"import": 1533,"src": 3614,"name": "ShutdownError"},{"import": 1533,"src": 3615,"name": "ShutdownHow"},{"import": 1533,"src": 3616,"name": "shutdown"},{"import": 1533,"src": 3617,"name": "closeSocket"},{"import": 1533,"src": 3618,"name": "BindError"},{"import": 1533,"src": 3619,"name": "bind"},{"import": 1533,"src": 3620,"name": "ListenError"},{"import": 1533,"src": 3621,"name": "listen"},{"import": 1533,"src": 3622,"name": "AcceptError"},{"import": 1533,"src": 3623,"name": "accept"},{"import": 1533,"src": 3624,"name": "EpollCreateError"},{"import": 1533,"src": 3625,"name": "epoll_create1"},{"import": 1533,"src": 3626,"name": "EpollCtlError"},{"import": 1533,"src": 3627,"name": "epoll_ctl"},{"import": 1533,"src": 3628,"name": "epoll_wait"},{"import": 1533,"src": 3629,"name": "EventFdError"},{"import": 1533,"src": 3630,"name": "eventfd"},{"import": 1533,"src": 3631,"name": "GetSockNameError"},{"import": 1533,"src": 3632,"name": "getsockname"},{"import": 1533,"src": 3633,"name": "getpeername"},{"import": 1533,"src": 3634,"name": "ConnectError"},{"import": 1533,"src": 3635,"name": "connect"},{"import": 1533,"src": 3636,"name": "getsockoptError"},{"import": 1533,"src": 3637,"name": "WaitPidResult"},{"import": 1533,"src": 3638,"name": "waitpid"},{"import": 1533,"src": 3639,"name": "FStatError","kind": "const","type": 709,"value": 1412},{"import": 1533,"src": 280,"name": "fstat","kind": "const","type": 369,"value": 404},{"import": 1533,"src": 3640,"name": "FStatAtError"},{"import": 1533,"src": 3641,"name": "fstatat"},{"import": 1533,"src": 3642,"name": "fstatatC"},{"import": 1533,"src": 3643,"name": "fstatatWasi"},{"import": 1533,"src": 3644,"name": "fstatatZ"},{"import": 1533,"src": 3645,"name": "KQueueError"},{"import": 1533,"src": 3646,"name": "kqueue"},{"import": 1533,"src": 3647,"name": "KEventError"},{"import": 1533,"src": 3648,"name": "kevent"},{"import": 1533,"src": 3649,"name": "INotifyInitError"},{"import": 1533,"src": 3650,"name": "inotify_init1"},{"import": 1533,"src": 3651,"name": "INotifyAddWatchError"},{"import": 1533,"src": 3652,"name": "inotify_add_watch"},{"import": 1533,"src": 3653,"name": "inotify_add_watchC"},{"import": 1533,"src": 3654,"name": "inotify_add_watchZ"},{"import": 1533,"src": 3655,"name": "inotify_rm_watch"},{"import": 1533,"src": 3656,"name": "MProtectError"},{"import": 1533,"src": 3657,"name": "mprotect"},{"import": 1533,"src": 3658,"name": "ForkError"},{"import": 1533,"src": 3659,"name": "fork"},{"import": 1533,"src": 3660,"name": "MMapError","kind": "const","type": 709,"value": 1572},{"import": 1533,"src": 63,"name": "mmap","kind": "const","type": 61,"value": 68},{"import": 1533,"src": 268,"name": "munmap","kind": "const","type": 357,"value": 390},{"import": 1533,"src": 3661,"name": "AccessError","kind": "const","type": 709,"value": 2026},{"import": 1533,"src": 3662,"name": "access"},{"import": 1533,"src": 3663,"name": "accessC"},{"import": 1533,"src": 3664,"name": "accessZ"},{"import": 1533,"src": 3665,"name": "accessW"},{"import": 1533,"src": 3666,"name": "faccessat"},{"import": 1533,"src": 3667,"name": "faccessatZ"},{"import": 1533,"src": 3668,"name": "faccessatW"},{"import": 1533,"src": 3669,"name": "PipeError"},{"import": 1533,"src": 3670,"name": "pipe"},{"import": 1533,"src": 3671,"name": "pipe2"},{"import": 1533,"src": 3672,"name": "SysCtlError","kind": "const","type": 709,"value": 2027},{"import": 1533,"src": 3673,"name": "sysctl"},{"import": 1533,"src": 3674,"name": "sysctlbynameC"},{"import": 1533,"src": 3675,"name": "sysctlbynameZ"},{"import": 1533,"src": 3676,"name": "gettimeofday"},{"import": 1533,"src": 3677,"name": "SeekError","kind": "const","type": 709,"value": 2028},{"import": 1533,"src": 3678,"name": "lseek_SET"},{"import": 1533,"src": 3679,"name": "lseek_CUR"},{"import": 1533,"src": 3680,"name": "lseek_END"},{"import": 1533,"src": 3681,"name": "lseek_CUR_get"},{"import": 1533,"src": 3682,"name": "FcntlError"},{"import": 1533,"src": 3683,"name": "fcntl"},{"import": 1533,"src": 3684,"name": "FlockError","kind": "const","type": 709,"value": 1716},{"import": 1533,"src": 278,"name": "flock","kind": "const","type": 367,"value": 402},{"import": 1533,"src": 3685,"name": "RealPathError","kind": "const","type": 709,"value": 2029},{"import": 1533,"src": 3686,"name": "realpath"},{"import": 1533,"src": 3687,"name": "realpathC"},{"import": 1533,"src": 3688,"name": "realpathZ"},{"import": 1533,"src": 3689,"name": "realpathW"},{"import": 1533,"src": 3690,"name": "getFdPath"},{"import": 1533,"src": 3691,"name": "nanosleep"},{"import": 1533,"src": 51,"name": "dl_iterate_phdr","kind": "const","type": 2030,"value": 1012},{"import": 1533,"src": 3692,"name": "ClockGetTimeError"},{"import": 1533,"src": 3693,"name": "clock_gettime"},{"import": 1533,"src": 3694,"name": "clock_getres"},{"import": 1533,"src": 3695,"name": "SchedGetAffinityError"},{"import": 1533,"src": 3696,"name": "sched_getaffinity"},{"import": 1533,"src": 209,"name": "toPosixPath","kind": "const","type": 276,"value": 295},{"import": 1533,"src": 3697,"name": "unexpected_error_tracing","kind": "const","type": 720,"value": "true"},{"import": 1533,"src": 3698,"name": "UnexpectedError","kind": "const","type": 709,"value": 1148},{"import": 1533,"src": 175,"name": "unexpectedErrno","kind": "const","type": 242,"value": 258},{"import": 1533,"src": 3699,"name": "SigaltstackError"},{"import": 1533,"src": 3700,"name": "sigaltstack"},{"import": 1533,"src": 27,"name": "sigaction","kind": "const","type": 23,"value": 29},{"import": 1533,"src": 3701,"name": "FutimensError"},{"import": 1533,"src": 3702,"name": "futimens"},{"import": 1533,"src": 3703,"name": "GetHostNameError"},{"import": 1533,"src": 3704,"name": "gethostname"},{"import": 1533,"src": 3705,"name": "uname"},{"import": 1533,"src": 3706,"name": "res_mkquery"},{"import": 1533,"src": 3707,"name": "SendError"},{"import": 1533,"src": 3708,"name": "SendMsgError"},{"import": 1533,"src": 3709,"name": "sendmsg"},{"import": 1533,"src": 3710,"name": "SendToError"},{"import": 1533,"src": 3711,"name": "sendto"},{"import": 1533,"src": 3712,"name": "send"},{"import": 1533,"src": 3713,"name": "SendFileError"},{"import": 1533,"src": 3714,"name": "sendfile"},{"import": 1533,"src": 3715,"name": "CopyFileRangeError"},{"import": 1533,"src": 3716,"name": "copy_file_range"},{"import": 1533,"src": 3717,"name": "PollError"},{"import": 1533,"src": 3718,"name": "poll"},{"import": 1533,"src": 3719,"name": "PPollError"},{"import": 1533,"src": 3720,"name": "ppoll"},{"import": 1533,"src": 3721,"name": "RecvFromError"},{"import": 1533,"src": 3722,"name": "recv"},{"import": 1533,"src": 3723,"name": "recvfrom"},{"import": 1533,"src": 3724,"name": "DnExpandError"},{"import": 1533,"src": 3725,"name": "dn_expand"},{"import": 1533,"src": 3726,"name": "SchedYieldError"},{"import": 1533,"src": 3727,"name": "sched_yield"},{"import": 1533,"src": 3728,"name": "SetSockOptError"},{"import": 1533,"src": 3729,"name": "setsockopt"},{"import": 1533,"src": 3730,"name": "MemFdCreateError"},{"import": 1533,"src": 3731,"name": "memfd_createC"},{"import": 1533,"src": 3732,"name": "memfd_createZ"},{"import": 1533,"src": 3733,"name": "MFD_NAME_PREFIX"},{"import": 1533,"src": 3734,"name": "MFD_MAX_NAME_LEN"},{"import": 1533,"src": 3735,"name": "memfd_create"},{"import": 1533,"src": 3736,"name": "getrusage"},{"import": 1533,"src": 3737,"name": "TermiosGetError"},{"import": 1533,"src": 3738,"name": "tcgetattr"},{"import": 1533,"src": 3739,"name": "TermiosSetError"},{"import": 1533,"src": 3740,"name": "tcsetattr"},{"import": 1533,"src": 3741,"name": "IoCtl_SIOCGIFINDEX_Error"},{"import": 1533,"src": 3742,"name": "ioctl_SIOCGIFINDEX"},{"import": 1533,"src": 3743,"name": "signalfd"},{"import": 1533,"src": 3744,"name": "SyncError"},{"import": 1533,"src": 3745,"name": "sync"},{"import": 1533,"src": 3746,"name": "syncfs"},{"import": 1533,"src": 3747,"name": "fsync"},{"import": 1533,"src": 3748,"name": "fdatasync"},{"import": 1533,"src": 3749,"name": "PrctlError"},{"import": 1533,"src": 3750,"name": "prctl"},{"import": 1533,"src": 3751,"name": "GetrlimitError"},{"import": 1533,"src": 3752,"name": "getrlimit"},{"import": 1533,"src": 3753,"name": "SetrlimitError","kind": "const","type": 709,"value": 1665},{"import": 1533,"src": 167,"name": "setrlimit","kind": "const","type": 235,"value": 250},{"import": 1533,"src": 3754,"name": "MadviseError"},{"import": 1533,"src": 3755,"name": "madvise"},{"import": 1533,"src": 3756,"name": "PerfEventOpenError"},{"import": 1533,"src": 3757,"name": "perf_event_open"},{"import": 1533,"src": 3758,"name": "root","kind": "const","type": 709,"value": 948},{"import": 1533,"src": 3759,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1533,"src": 3760,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1533,"src": 3761,"name": "assert","kind": "const","type": 29,"value": 36},{"import": 1533,"src": 3762,"name": "math"},{"import": 1533,"src": 3763,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1533,"src": 3764,"name": "elf","kind": "const","type": 709,"value": 1523},{"import": 1533,"src": 3765,"name": "dl","kind": "const","type": 709,"value": 2031},{"import": 1533,"src": 3766,"name": "MAX_PATH_BYTES","kind": "const","type": 778,"value": null},{"import": 1533,"src": 3767,"name": "is_windows","kind": "const","type": 720,"value": "false"},{"import": 1533,"src": 3768,"name": "getRandomBytesDevURandom"},{"import": 1533,"src": 3769,"name": "openOptionsFromFlags"},{"import": 1533,"src": 3770,"name": "setSockFlags"},{"import": 1533,"src": 3771,"name": "count_iovec_bytes"},{"import": 1533,"src": 3772,"name": "has_copy_file_range_syscall"},{"import": 1533,"src": 3773,"name": "toMemFdPath"},{"import": 1534,"src": 3774,"name": "DbiStreamHeader"},{"import": 1534,"src": 3775,"name": "SectionContribEntry","kind": "const","type": 709,"value": 2032},{"import": 1534,"src": 3776,"name": "ModInfo","kind": "const","type": 709,"value": 2033},{"import": 1534,"src": 3777,"name": "SectionMapHeader"},{"import": 1534,"src": 3778,"name": "SectionMapEntry"},{"import": 1534,"src": 3779,"name": "StreamType"},{"import": 1534,"src": 3780,"name": "SymbolKind"},{"import": 1534,"src": 3781,"name": "TypeIndex"},{"import": 1534,"src": 3782,"name": "ProcSym"},{"import": 1534,"src": 3783,"name": "ProcSymFlags"},{"import": 1534,"src": 3784,"name": "SectionContrSubstreamVersion"},{"import": 1534,"src": 3785,"name": "RecordPrefix"},{"import": 1534,"src": 3786,"name": "LineFragmentHeader"},{"import": 1534,"src": 3787,"name": "LineFlags"},{"import": 1534,"src": 3788,"name": "LineBlockFragmentHeader"},{"import": 1534,"src": 3789,"name": "LineNumberEntry"},{"import": 1534,"src": 3790,"name": "ColumnNumberEntry"},{"import": 1534,"src": 3791,"name": "FileChecksumEntryHeader"},{"import": 1534,"src": 3792,"name": "DebugSubsectionKind"},{"import": 1534,"src": 3793,"name": "DebugSubsectionHeader"},{"import": 1534,"src": 3794,"name": "PDBStringTableHeader"},{"import": 1534,"src": 3795,"name": "Pdb","kind": "const","type": 709,"value": 2034},{"import": 1534,"src": 3796,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1534,"src": 3797,"name": "io"},{"import": 1534,"src": 3798,"name": "math"},{"import": 1534,"src": 3799,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1534,"src": 3800,"name": "os"},{"import": 1534,"src": 3801,"name": "warn"},{"import": 1534,"src": 3802,"name": "coff"},{"import": 1534,"src": 3803,"name": "fs"},{"import": 1534,"src": 3804,"name": "File","kind": "const","type": 709,"value": 724},{"import": 1534,"src": 3805,"name": "debug"},{"import": 1534,"src": 3806,"name": "ArrayList"},{"import": 1534,"src": 3807,"name": "readSparseBitVector"},{"import": 1534,"src": 3808,"name": "Msf","kind": "const","type": 709,"value": 2035},{"import": 1534,"src": 3809,"name": "blockCountFromSize"},{"import": 1534,"src": 3810,"name": "SuperBlock"},{"import": 1534,"src": 3811,"name": "MsfStream","kind": "const","type": 709,"value": 2036},{"import": 1535,"src": 3812,"name": "abort"},{"import": 1535,"src": 3813,"name": "exit"},{"import": 1535,"src": 3814,"name": "changeCurDir"},{"import": 1535,"src": 3815,"name": "changeCurDirC"},{"import": 1535,"src": 3816,"name": "getCwd"},{"import": 1535,"src": 3817,"name": "getCwdAlloc"},{"import": 1535,"src": 3818,"name": "getEnvMap"},{"import": 1535,"src": 3819,"name": "GetEnvVarOwnedError"},{"import": 1535,"src": 3820,"name": "getEnvVarOwned"},{"import": 1535,"src": 200,"name": "hasEnvVarConstant","kind": "const","type": 2037,"value": 1013},{"import": 1535,"src": 3821,"name": "hasEnvVar"},{"import": 1535,"src": 3822,"name": "ArgIteratorPosix"},{"import": 1535,"src": 3823,"name": "ArgIteratorWasi"},{"import": 1535,"src": 3824,"name": "ArgIteratorWindows"},{"import": 1535,"src": 3825,"name": "ArgIterator"},{"import": 1535,"src": 3826,"name": "args"},{"import": 1535,"src": 3827,"name": "argsWithAllocator"},{"import": 1535,"src": 3828,"name": "argsAlloc"},{"import": 1535,"src": 3829,"name": "argsFree"},{"import": 1535,"src": 3830,"name": "UserInfo"},{"import": 1535,"src": 3831,"name": "getUserInfo"},{"import": 1535,"src": 3832,"name": "posixGetUserInfo"},{"import": 1535,"src": 203,"name": "getBaseAddress","kind": "const","type": 270,"value": 289},{"import": 1535,"src": 3833,"name": "getSelfExeSharedLibPaths"},{"import": 1535,"src": 3834,"name": "can_execv"},{"import": 1535,"src": 3835,"name": "ExecvError"},{"import": 1535,"src": 3836,"name": "execv"},{"import": 1535,"src": 3837,"name": "execve"},{"import": 1535,"src": 3838,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1535,"src": 3839,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1535,"src": 3840,"name": "os","kind": "const","type": 709,"value": 1533},{"import": 1535,"src": 3841,"name": "fs"},{"import": 1535,"src": 3842,"name": "BufMap"},{"import": 1535,"src": 3843,"name": "mem"},{"import": 1535,"src": 3844,"name": "math"},{"import": 1535,"src": 3845,"name": "Allocator"},{"import": 1535,"src": 3846,"name": "assert"},{"import": 1535,"src": 3847,"name": "testing"},{"import": 1535,"src": 3848,"name": "child_process"},{"import": 1535,"src": 3849,"name": "testWindowsCmdLine"},{"import": 1536,"src": 3850,"name": "binarySearch"},{"import": 1536,"src": 426,"name": "insertionSort","kind": "const","type": 2038,"value": 1014},{"import": 1536,"src": 388,"name": "sort","kind": "const","type": 2039,"value": 1015},{"import": 1536,"src": 503,"name": "asc","kind": "const","type": 892,"value": 901},{"import": 1536,"src": 3851,"name": "desc"},{"import": 1536,"src": 3852,"name": "argMin"},{"import": 1536,"src": 3853,"name": "min"},{"import": 1536,"src": 3854,"name": "argMax"},{"import": 1536,"src": 3855,"name": "max"},{"import": 1536,"src": 3856,"name": "isSorted"},{"import": 1536,"src": 3857,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1536,"src": 3858,"name": "assert"},{"import": 1536,"src": 3859,"name": "testing"},{"import": 1536,"src": 3860,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1536,"src": 3861,"name": "math","kind": "const","type": 709,"value": 1531},{"import": 1536,"src": 3862,"name": "Range","kind": "const","type": 709,"value": 1367},{"import": 1536,"src": 3863,"name": "Iterator","kind": "const","type": 709,"value": 1365},{"import": 1536,"src": 3864,"name": "Pull","kind": "const","type": 709,"value": 2040},{"import": 1536,"src": 425,"name": "mergeInPlace","kind": "const","type": 2041,"value": 1016},{"import": 1536,"src": 424,"name": "mergeInternal","kind": "const","type": 2042,"value": 1017},{"import": 1536,"src": 422,"name": "blockSwap","kind": "const","type": 2043,"value": 1018},{"import": 1536,"src": 427,"name": "findFirstForward","kind": "const","type": 2044,"value": 1019},{"import": 1536,"src": 421,"name": "findFirstBackward","kind": "const","type": 2045,"value": 1020},{"import": 1536,"src": 420,"name": "findLastForward","kind": "const","type": 2046,"value": 1021},{"import": 1536,"src": 428,"name": "findLastBackward","kind": "const","type": 2047,"value": 1022},{"import": 1536,"src": 423,"name": "binaryFirst","kind": "const","type": 2048,"value": 1023},{"import": 1536,"src": 446,"name": "binaryLast","kind": "const","type": 2049,"value": 1024},{"import": 1536,"src": 414,"name": "mergeInto","kind": "const","type": 2050,"value": 1025},{"import": 1536,"src": 418,"name": "mergeExternal","kind": "const","type": 2051,"value": 1026},{"import": 1536,"src": 411,"name": "swap","kind": "const","type": 2052,"value": 1027},{"import": 1536,"src": 3865,"name": "testStableSort"},{"import": 1536,"src": 3866,"name": "IdAndValue"},{"import": 1536,"src": 3867,"name": "cmpByValue"},{"import": 1536,"src": 3868,"name": "asc_u8"},{"import": 1536,"src": 3869,"name": "asc_i32"},{"import": 1536,"src": 3870,"name": "desc_u8"},{"import": 1536,"src": 3871,"name": "desc_i32"},{"import": 1536,"src": 3872,"name": "fixed_buffer_mem"},{"import": 1536,"src": 3873,"name": "fuzzTest"},{"import": 1537,"src": 3874,"name": "epoch"},{"import": 1537,"src": 3875,"name": "sleep"},{"import": 1537,"src": 3876,"name": "timestamp"},{"import": 1537,"src": 3877,"name": "milliTimestamp"},{"import": 1537,"src": 3878,"name": "nanoTimestamp"},{"import": 1537,"src": 3879,"name": "ns_per_us","kind": "const","type": 778,"value": null},{"import": 1537,"src": 3880,"name": "ns_per_ms","kind": "const","type": 778,"value": null},{"import": 1537,"src": 3881,"name": "ns_per_s","kind": "const","type": 778,"value": null},{"import": 1537,"src": 3882,"name": "ns_per_min"},{"import": 1537,"src": 3883,"name": "ns_per_hour"},{"import": 1537,"src": 3884,"name": "ns_per_day"},{"import": 1537,"src": 3885,"name": "ns_per_week"},{"import": 1537,"src": 3886,"name": "us_per_ms"},{"import": 1537,"src": 3887,"name": "us_per_s"},{"import": 1537,"src": 3888,"name": "us_per_min"},{"import": 1537,"src": 3889,"name": "us_per_hour"},{"import": 1537,"src": 3890,"name": "us_per_day"},{"import": 1537,"src": 3891,"name": "us_per_week"},{"import": 1537,"src": 3892,"name": "ms_per_s"},{"import": 1537,"src": 3893,"name": "ms_per_min"},{"import": 1537,"src": 3894,"name": "ms_per_hour"},{"import": 1537,"src": 3895,"name": "ms_per_day"},{"import": 1537,"src": 3896,"name": "ms_per_week"},{"import": 1537,"src": 3897,"name": "s_per_min"},{"import": 1537,"src": 3898,"name": "s_per_hour"},{"import": 1537,"src": 3899,"name": "s_per_day"},{"import": 1537,"src": 3900,"name": "s_per_week"},{"import": 1537,"src": 3901,"name": "Timer","kind": "const","type": 709,"value": 2053},{"import": 1537,"src": 3902,"name": "std"},{"import": 1537,"src": 3903,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1537,"src": 3904,"name": "assert"},{"import": 1537,"src": 3905,"name": "testing"},{"import": 1537,"src": 3906,"name": "os"},{"import": 1537,"src": 3907,"name": "math"},{"import": 1537,"src": 3908,"name": "is_windows"},{"import": 1537,"src": 3909,"name": "safeMulDiv"},{"import": 1538,"src": 3910,"name": "utf8CodepointSequenceLength"},{"import": 1538,"src": 186,"name": "utf8ByteSequenceLength","kind": "const","type": 252,"value": 269},{"import": 1538,"src": 3911,"name": "utf8Encode"},{"import": 1538,"src": 187,"name": "utf8Decode","kind": "const","type": 253,"value": 270},{"import": 1538,"src": 260,"name": "utf8Decode2","kind": "const","type": 351,"value": 382},{"import": 1538,"src": 261,"name": "utf8Decode3","kind": "const","type": 352,"value": 383},{"import": 1538,"src": 262,"name": "utf8Decode4","kind": "const","type": 353,"value": 384},{"import": 1538,"src": 3912,"name": "utf8ValidCodepoint"},{"import": 1538,"src": 184,"name": "utf8CountCodepoints","kind": "const","type": 250,"value": 267},{"import": 1538,"src": 3913,"name": "utf8ValidateSlice"},{"import": 1538,"src": 3914,"name": "Utf8View"},{"import": 1538,"src": 3915,"name": "Utf8Iterator"},{"import": 1538,"src": 3916,"name": "Utf16LeIterator"},{"import": 1538,"src": 3917,"name": "utf16leToUtf8Alloc"},{"import": 1538,"src": 3918,"name": "utf16leToUtf8AllocZ"},{"import": 1538,"src": 3919,"name": "utf16leToUtf8"},{"import": 1538,"src": 3920,"name": "utf8ToUtf16LeWithNull"},{"import": 1538,"src": 3921,"name": "utf8ToUtf16Le"},{"import": 1538,"src": 3922,"name": "utf8ToUtf16LeStringLiteral"},{"import": 1538,"src": 3923,"name": "fmtUtf16le"},{"import": 1538,"src": 3924,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1538,"src": 3925,"name": "assert","kind": "const","type": 29,"value": 36},{"import": 1538,"src": 3926,"name": "testing"},{"import": 1538,"src": 3927,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1538,"src": 3928,"name": "Utf8DecodeError","kind": "const","type": 709,"value": 1673},{"import": 1538,"src": 3929,"name": "Utf8Decode2Error","kind": "const","type": 709,"value": 1709},{"import": 1538,"src": 3930,"name": "Utf8Decode3Error","kind": "const","type": 709,"value": 1710},{"import": 1538,"src": 3931,"name": "Utf8Decode4Error","kind": "const","type": 709,"value": 1711},{"import": 1538,"src": 3932,"name": "testUtf8Encode"},{"import": 1538,"src": 3933,"name": "testUtf8EncodeError"},{"import": 1538,"src": 3934,"name": "testErrorEncode"},{"import": 1538,"src": 3935,"name": "testUtf8IteratorOnAscii"},{"import": 1538,"src": 3936,"name": "testUtf8ViewBad"},{"import": 1538,"src": 3937,"name": "testUtf8ViewOk"},{"import": 1538,"src": 3938,"name": "testBadUtf8Slice"},{"import": 1538,"src": 3939,"name": "testValidUtf8"},{"import": 1538,"src": 3940,"name": "testInvalidUtf8ContinuationBytes"},{"import": 1538,"src": 3941,"name": "testOverlongUtf8Codepoint"},{"import": 1538,"src": 3942,"name": "testMiscInvalidUtf8"},{"import": 1538,"src": 3943,"name": "testUtf8Peeking"},{"import": 1538,"src": 3944,"name": "testError"},{"import": 1538,"src": 3945,"name": "testValid"},{"import": 1538,"src": 3946,"name": "testDecode"},{"import": 1538,"src": 3947,"name": "calcUtf16LeLen"},{"import": 1538,"src": 3948,"name": "formatUtf16le"},{"import": 1538,"src": 3949,"name": "testUtf8CountCodepoints"},{"import": 1538,"src": 3950,"name": "testUtf8ValidCodepoint"},{"import": 1539,"src": 252,"name": "callMain","kind": "const","type": 342,"value": 373},{"import": 1539,"src": 3951,"name": "call_wWinMain"},{"import": 1539,"src": 3952,"name": "root","kind": "const","type": 709,"value": 948},{"import": 1539,"src": 3953,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1539,"src": 3954,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1539,"src": 3955,"name": "assert","kind": "const","type": 29,"value": 36},{"import": 1539,"src": 3956,"name": "uefi"},{"import": 1539,"src": 3957,"name": "elf","kind": "const","type": 709,"value": 1523},{"import": 1539,"src": 3958,"name": "tlcsprng"},{"import": 1539,"src": 3959,"name": "native_arch","kind": "const","type": 721,"value": null},{"import": 1539,"src": 3960,"name": "native_os","kind": "const","type": 755,"value": null},{"import": 1539,"src": 3961,"name": "argc_argv_ptr","kind": "var","type": 1088,"value": "undefined"},{"import": 1539,"src": 3962,"name": "start_sym_name","kind": "const","type": 2054,"value": null},{"import": 1539,"src": 3963,"name": "main2"},{"import": 1539,"src": 3964,"name": "_start2"},{"import": 1539,"src": 3965,"name": "callMain2"},{"import": 1539,"src": 3966,"name": "wasmMain2"},{"import": 1539,"src": 3967,"name": "wWinMainCRTStartup2"},{"import": 1539,"src": 3968,"name": "exit2"},{"import": 1539,"src": 3969,"name": "ExitProcess"},{"import": 1539,"src": 3970,"name": "_DllMainCRTStartup"},{"import": 1539,"src": 3971,"name": "wasm_freestanding_start"},{"import": 1539,"src": 3972,"name": "wasi_start"},{"import": 1539,"src": 3973,"name": "EfiMain"},{"import": 1539,"src": 6,"name": "_start","kind": "const","type": 5,"value": 6},{"import": 1539,"src": 3974,"name": "WinStartup"},{"import": 1539,"src": 3975,"name": "wWinMainCRTStartup"},{"import": 1539,"src": 8,"name": "posixCallMainAndExit","kind": "const","type": 7,"value": 8},{"import": 1539,"src": 23,"name": "expandStackSize","kind": "const","type": 20,"value": 25},{"import": 1539,"src": 25,"name": "callMainWithArgs","kind": "const","type": 22,"value": 27},{"import": 1539,"src": 3976,"name": "main"},{"import": 1539,"src": 3977,"name": "mainWithoutEnv"},{"import": 1539,"src": 3978,"name": "bad_main_ret"},{"import": 1539,"src": 170,"name": "initEventLoopAndCallMain","kind": "const","type": 237,"value": 253},{"import": 1539,"src": 3979,"name": "initEventLoopAndCallWinMain"},{"import": 1539,"src": 3980,"name": "callMainAsync"},{"import": 1546,"src": 3981,"name": "Impl","kind": "const","type": 709,"value": 1663},{"import": 1546,"src": 3982,"name": "set"},{"import": 1546,"src": 20,"name": "wait","kind": "const","type": 18,"value": 21},{"import": 1546,"src": 3983,"name": "reset"},{"import": 1546,"src": 3984,"name": "TimedWaitResult","kind": "const","type": 709,"value": 1202},{"import": 1546,"src": 3985,"name": "timedWait"},{"import": 1546,"src": 3986,"name": "DebugEvent"},{"import": 1546,"src": 3987,"name": "AtomicEvent","kind": "const","type": 709,"value": 1663},{"import": 1546,"src": 3988,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1546,"src": 3989,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1546,"src": 3990,"name": "StaticResetEvent","kind": "const","type": 709,"value": 1546},{"import": 1546,"src": 3991,"name": "assert"},{"import": 1546,"src": 3992,"name": "os"},{"import": 1546,"src": 3993,"name": "time","kind": "const","type": 709,"value": 1537},{"import": 1546,"src": 3994,"name": "linux","kind": "const","type": 709,"value": 1870},{"import": 1546,"src": 3995,"name": "windows"},{"import": 1546,"src": 3996,"name": "testing"},{"import": 1465,"src": 3997,"name": "tryLock"},{"import": 1465,"src": 28,"name": "lock","kind": "const","type": 24,"value": 30},{"import": 1465,"src": 162,"name": "unlock","kind": "const","type": 24,"value": 244},{"import": 1465,"src": 3998,"name": "State","kind": "const","type": 709,"value": 1147},{"import": 1465,"src": 173,"name": "lockSlow","kind": "const","type": 240,"value": 256},{"import": 1465,"src": 244,"name": "unlockSlow","kind": "const","type": 24,"value": 364},{"import": 1557,"src": 3999,"name": "Error","kind": "const","type": 709,"value": 1566},{"import": 1557,"src": 4000,"name": "noResize"},{"import": 1557,"src": 287,"name": "reallocBytes","kind": "const","type": 377,"value": 414},{"import": 1557,"src": 53,"name": "create","kind": "const","type": 2055,"value": 1028},{"import": 1557,"src": 57,"name": "destroy","kind": "const","type": 2056,"value": 1029},{"import": 1557,"src": 142,"name": "alloc","kind": "const","type": 2057,"value": 1030},{"import": 1557,"src": 4001,"name": "allocWithOptions"},{"import": 1557,"src": 4002,"name": "allocWithOptionsRetAddr"},{"import": 1557,"src": 4003,"name": "allocSentinel"},{"import": 1557,"src": 126,"name": "alignedAlloc","kind": "const","type": 2058,"value": 1031},{"import": 1557,"src": 4004,"name": "allocAdvanced"},{"import": 1557,"src": 4005,"name": "Exact","kind": "const","type": 709,"value": 1170},{"import": 1557,"src": 208,"name": "allocAdvancedWithRetAddr","kind": "const","type": 2059,"value": 1032},{"import": 1557,"src": 310,"name": "resize","kind": "const","type": 2060,"value": 1033},{"import": 1557,"src": 392,"name": "realloc","kind": "const","type": 2061,"value": 1034},{"import": 1557,"src": 101,"name": "reallocAtLeast","kind": "const","type": 2062,"value": 1035},{"import": 1557,"src": 4006,"name": "reallocAdvanced"},{"import": 1557,"src": 220,"name": "reallocAdvancedWithRetAddr","kind": "const","type": 2063,"value": 1036},{"import": 1557,"src": 241,"name": "shrink","kind": "const","type": 2064,"value": 1037},{"import": 1557,"src": 4007,"name": "alignedShrink"},{"import": 1557,"src": 295,"name": "alignedShrinkWithRetAddr","kind": "const","type": 2065,"value": 1038},{"import": 1557,"src": 143,"name": "free","kind": "const","type": 2066,"value": 1039},{"import": 1557,"src": 154,"name": "dupe","kind": "const","type": 2067,"value": 1040},{"import": 1557,"src": 4008,"name": "dupeZ"},{"import": 1557,"src": 213,"name": "shrinkBytes","kind": "const","type": 280,"value": 299},{"import": 1557,"src": 4009,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1557,"src": 4010,"name": "assert","kind": "const","type": 29,"value": 36},{"import": 1557,"src": 4011,"name": "math","kind": "const","type": 709,"value": 1531},{"import": 1557,"src": 4012,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1557,"src": 4013,"name": "Allocator","kind": "const","type": 709,"value": 1557},{"import": 1557,"src": 323,"name": "moveBytes","kind": "const","type": 377,"value": 497},{"import": 1557,"src": 4014,"name": "AllocWithOptionsPayload"},{"import": 1504,"src": 108,"name": "getAttrString","kind": "const","type": 132,"value": 142},{"import": 1504,"src": 4015,"name": "Attr","kind": "const","type": 709,"value": 752},{"import": 1504,"src": 107,"name": "getAttr","kind": "const","type": 131,"value": 141},{"import": 1504,"src": 111,"name": "getAttrAddr","kind": "const","type": 136,"value": 146},{"import": 1504,"src": 138,"name": "getAttrSecOffset","kind": "const","type": 175,"value": 188},{"import": 1504,"src": 4016,"name": "getAttrUnsignedLe"},{"import": 1504,"src": 110,"name": "getAttrRef","kind": "const","type": 135,"value": 145},{"import": 1504,"src": 112,"name": "asUnsignedLe","kind": "const","type": 137,"value": 147},{"import": 1546,"src": 4017,"name": "init"},{"import": 1546,"src": 4018,"name": "deinit"},{"import": 1546,"src": 4019,"name": "set"},{"import": 1546,"src": 163,"name": "wait","kind": "const","type": 231,"value": 245},{"import": 1546,"src": 245,"name": "timedWait","kind": "const","type": 335,"value": 365},{"import": 1546,"src": 4020,"name": "reset"},{"import": 1546,"src": 4021,"name": "Futex","kind": "const","type": 709,"value": 2070},{"import": 1546,"src": 4022,"name": "SpinFutex"},{"import": 1546,"src": 4023,"name": "LinuxFutex","kind": "const","type": 709,"value": 2070},{"import": 1546,"src": 4024,"name": "WindowsFutex"},{"import": 1546,"src": 4025,"name": "WAKE","kind": "const","type": 778,"value": null},{"import": 1546,"src": 4026,"name": "WAIT","kind": "const","type": 778,"value": null},{"import": 1678,"src": 4027,"name": "ArenaAllocator","kind": "const","type": 709,"value": 1161},{"import": 1678,"src": 4028,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1678,"src": 4029,"name": "assert"},{"import": 1678,"src": 4030,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1678,"src": 4031,"name": "Allocator","kind": "const","type": 709,"value": 1557},{"import": 2031,"src": 205,"name": "end","kind": "const","type": 272,"value": 291},{"import": 2031,"src": 206,"name": "next","kind": "const","type": 273,"value": 292},{"import": 1730,"src": 4032,"name": "Wyhash","kind": "const","type": 709,"value": 1361},{"import": 1730,"src": 4033,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1730,"src": 4034,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1730,"src": 4035,"name": "primes","kind": "const","type": 1933,"value": null},{"import": 1730,"src": 355,"name": "read_bytes","kind": "const","type": 2075,"value": 1041},{"import": 1730,"src": 356,"name": "read_8bytes_swapped","kind": "const","type": 492,"value": 563},{"import": 1730,"src": 358,"name": "mum","kind": "const","type": 493,"value": 565},{"import": 1730,"src": 354,"name": "mix0","kind": "const","type": 491,"value": 559},{"import": 1730,"src": 357,"name": "mix1","kind": "const","type": 491,"value": 564},{"import": 1730,"src": 4036,"name": "WyhashStateless","kind": "const","type": 709,"value": 1239},{"import": 1730,"src": 4037,"name": "expectEqual"},{"import": 1437,"src": 4038,"name": "Range","kind": "const","type": 709,"value": 2076},{"import": 1437,"src": 4039,"name": "order"},{"import": 1437,"src": 4040,"name": "parse"},{"import": 1437,"src": 4041,"name": "format"},{"import": 1841,"src": 4042,"name": "TraitFn","kind": "const","type": 709,"value": 2077},{"import": 1841,"src": 4043,"name": "multiTrait"},{"import": 1841,"src": 476,"name": "hasFn","kind": "const","type": 786,"value": 870},{"import": 1841,"src": 4044,"name": "hasField"},{"import": 1841,"src": 480,"name": "is","kind": "const","type": 798,"value": 878},{"import": 1841,"src": 494,"name": "isPtrTo","kind": "const","type": 839,"value": 892},{"import": 1841,"src": 4045,"name": "isSliceOf"},{"import": 1841,"src": 4046,"name": "isExtern"},{"import": 1841,"src": 4047,"name": "isPacked"},{"import": 1841,"src": 4048,"name": "isUnsignedInt"},{"import": 1841,"src": 4049,"name": "isSignedInt"},{"import": 1841,"src": 482,"name": "isSingleItemPtr","kind": "const","type": 802,"value": 880},{"import": 1841,"src": 4050,"name": "isManyItemPtr"},{"import": 1841,"src": 488,"name": "isSlice","kind": "const","type": 817,"value": 886},{"import": 1841,"src": 4051,"name": "isIndexable"},{"import": 1841,"src": 512,"name": "isNumber","kind": "const","type": 942,"value": 913},{"import": 1841,"src": 510,"name": "isIntegral","kind": "const","type": 938,"value": 911},{"import": 1841,"src": 4052,"name": "isFloat"},{"import": 1841,"src": 4053,"name": "isConstPtr"},{"import": 1841,"src": 478,"name": "isContainer","kind": "const","type": 789,"value": 872},{"import": 1841,"src": 4054,"name": "isTuple"},{"import": 1841,"src": 4055,"name": "isZigString"},{"import": 1841,"src": 4056,"name": "hasDecls"},{"import": 1841,"src": 4057,"name": "hasFields"},{"import": 1841,"src": 4058,"name": "hasFunctions"},{"import": 1841,"src": 437,"name": "hasUniqueRepresentation","kind": "const","type": 794,"value": 876},{"import": 1841,"src": 4059,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1841,"src": 4060,"name": "mem"},{"import": 1841,"src": 4061,"name": "debug"},{"import": 1841,"src": 4062,"name": "testing"},{"import": 1841,"src": 4063,"name": "warn"},{"import": 1841,"src": 4064,"name": "meta"},{"import": 1403,"src": 4065,"name": "latest"},{"import": 1403,"src": 4066,"name": "known_win10_build_numbers"},{"import": 1403,"src": 4067,"name": "isAtLeast"},{"import": 1403,"src": 4068,"name": "Range","kind": "const","type": 709,"value": 2078},{"import": 1403,"src": 4069,"name": "format"},{"import": 1403,"src": 4070,"name": "includesVersion"},{"import": 1403,"src": 4071,"name": "isAtLeast"},{"import": 1403,"src": 4072,"name": "default"},{"import": 1427,"src": 4073,"name": "_i386"},{"import": 1427,"src": 4074,"name": "_i486"},{"import": 1427,"src": 4075,"name": "_i586"},{"import": 1427,"src": 4076,"name": "_i686"},{"import": 1427,"src": 4077,"name": "alderlake"},{"import": 1427,"src": 4078,"name": "amdfam10"},{"import": 1427,"src": 4079,"name": "athlon"},{"import": 1427,"src": 4080,"name": "athlon64"},{"import": 1427,"src": 4081,"name": "athlon64_sse3"},{"import": 1427,"src": 4082,"name": "athlon_4"},{"import": 1427,"src": 4083,"name": "athlon_fx"},{"import": 1427,"src": 4084,"name": "athlon_mp"},{"import": 1427,"src": 4085,"name": "athlon_tbird"},{"import": 1427,"src": 4086,"name": "athlon_xp"},{"import": 1427,"src": 4087,"name": "atom"},{"import": 1427,"src": 4088,"name": "barcelona"},{"import": 1427,"src": 4089,"name": "bdver1"},{"import": 1427,"src": 4090,"name": "bdver2"},{"import": 1427,"src": 4091,"name": "bdver3"},{"import": 1427,"src": 4092,"name": "bdver4"},{"import": 1427,"src": 4093,"name": "bonnell"},{"import": 1427,"src": 4094,"name": "broadwell"},{"import": 1427,"src": 4095,"name": "btver1"},{"import": 1427,"src": 4096,"name": "btver2"},{"import": 1427,"src": 4097,"name": "c3"},{"import": 1427,"src": 4098,"name": "c3_2"},{"import": 1427,"src": 4099,"name": "cannonlake"},{"import": 1427,"src": 4100,"name": "cascadelake"},{"import": 1427,"src": 4101,"name": "cooperlake"},{"import": 1427,"src": 4102,"name": "core2"},{"import": 1427,"src": 4103,"name": "core_avx2"},{"import": 1427,"src": 4104,"name": "core_avx_i"},{"import": 1427,"src": 4105,"name": "corei7"},{"import": 1427,"src": 4106,"name": "corei7_avx"},{"import": 1427,"src": 4107,"name": "generic"},{"import": 1427,"src": 4108,"name": "geode"},{"import": 1427,"src": 4109,"name": "goldmont"},{"import": 1427,"src": 4110,"name": "goldmont_plus"},{"import": 1427,"src": 4111,"name": "haswell"},{"import": 1427,"src": 4112,"name": "icelake_client"},{"import": 1427,"src": 4113,"name": "icelake_server"},{"import": 1427,"src": 4114,"name": "ivybridge"},{"import": 1427,"src": 4115,"name": "k6"},{"import": 1427,"src": 4116,"name": "k6_2"},{"import": 1427,"src": 4117,"name": "k6_3"},{"import": 1427,"src": 4118,"name": "k8"},{"import": 1427,"src": 4119,"name": "k8_sse3"},{"import": 1427,"src": 4120,"name": "knl"},{"import": 1427,"src": 4121,"name": "knm"},{"import": 1427,"src": 4122,"name": "lakemont"},{"import": 1427,"src": 4123,"name": "nehalem"},{"import": 1427,"src": 4124,"name": "nocona"},{"import": 1427,"src": 4125,"name": "opteron"},{"import": 1427,"src": 4126,"name": "opteron_sse3"},{"import": 1427,"src": 4127,"name": "penryn"},{"import": 1427,"src": 4128,"name": "pentium"},{"import": 1427,"src": 4129,"name": "pentium2"},{"import": 1427,"src": 4130,"name": "pentium3"},{"import": 1427,"src": 4131,"name": "pentium3m"},{"import": 1427,"src": 4132,"name": "pentium4"},{"import": 1427,"src": 4133,"name": "pentium4m"},{"import": 1427,"src": 4134,"name": "pentium_m"},{"import": 1427,"src": 4135,"name": "pentium_mmx"},{"import": 1427,"src": 4136,"name": "pentiumpro"},{"import": 1427,"src": 4137,"name": "prescott"},{"import": 1427,"src": 4138,"name": "rocketlake"},{"import": 1427,"src": 4139,"name": "sandybridge"},{"import": 1427,"src": 4140,"name": "sapphirerapids"},{"import": 1427,"src": 4141,"name": "silvermont"},{"import": 1427,"src": 4142,"name": "skx"},{"import": 1427,"src": 4143,"name": "skylake"},{"import": 1427,"src": 4144,"name": "skylake_avx512"},{"import": 1427,"src": 4145,"name": "slm"},{"import": 1427,"src": 4146,"name": "tigerlake"},{"import": 1427,"src": 4147,"name": "tremont"},{"import": 1427,"src": 4148,"name": "westmere"},{"import": 1427,"src": 4149,"name": "winchip2"},{"import": 1427,"src": 4150,"name": "winchip_c6"},{"import": 1427,"src": 4151,"name": "x86_64"},{"import": 1427,"src": 4152,"name": "x86_64_v2"},{"import": 1427,"src": 4153,"name": "x86_64_v3"},{"import": 1427,"src": 4154,"name": "x86_64_v4"},{"import": 1427,"src": 4155,"name": "yonah"},{"import": 1427,"src": 4156,"name": "znver1"},{"import": 1427,"src": 4157,"name": "znver2"},{"import": 1427,"src": 4158,"name": "znver3","kind": "const","type": 1849,"value": null},{"import": 1403,"src": 4159,"name": "Set","kind": "const","type": 709,"value": 953},{"import": 1403,"src": 453,"name": "feature_set_fns","kind": "const","type": 708,"value": 845},{"import": 1403,"src": 4160,"name": "toCpu"},{"import": 1403,"src": 4161,"name": "generic"},{"import": 1403,"src": 4162,"name": "baseline"},{"import": 1437,"src": 4163,"name": "Modifier","kind": "const","type": 709,"value": 2079},{"import": 1437,"src": 4164,"name": "FnDecl","kind": "const","type": 709,"value": 2081},{"import": 1870,"src": 4165,"name": "syscall0","kind": "const","type": 350,"value": 381},{"import": 1870,"src": 4166,"name": "syscall1","kind": "const","type": 341,"value": 371},{"import": 1870,"src": 4167,"name": "syscall2","kind": "const","type": 339,"value": 369},{"import": 1870,"src": 4168,"name": "syscall3","kind": "const","type": 348,"value": 379},{"import": 1870,"src": 4169,"name": "syscall4","kind": "const","type": 344,"value": 375},{"import": 1870,"src": 4170,"name": "syscall5"},{"import": 1870,"src": 4171,"name": "syscall6","kind": "const","type": 372,"value": 409},{"import": 1870,"src": 4172,"name": "syscall7"},{"import": 1870,"src": 4173,"name": "restore","kind": "const","type": 343,"value": 374},{"import": 1870,"src": 4174,"name": "restore_rt","kind": "const","type": 343,"value": 374},{"import": 1870,"src": 4175,"name": "socketcall"},{"import": 1870,"src": 4176,"name": "syscall_pipe"},{"import": 1870,"src": 4177,"name": "syscall_fork"},{"import": 1870,"src": 4178,"name": "ARCH","kind": "const","type": 709,"value": 1894},{"import": 1870,"src": 4179,"name": "Elf_Symndx"},{"import": 1870,"src": 4180,"name": "F"},{"import": 1870,"src": 4181,"name": "Flock"},{"import": 1870,"src": 4182,"name": "HWCAP"},{"import": 1870,"src": 4183,"name": "LOCK","kind": "const","type": 709,"value": 1896},{"import": 1870,"src": 4184,"name": "MMAP2_UNIT"},{"import": 1870,"src": 4185,"name": "REG","kind": "const","type": 709,"value": 1895},{"import": 1870,"src": 4186,"name": "SC"},{"import": 1870,"src": 4187,"name": "SYS","kind": "const","type": 709,"value": 1206},{"import": 1870,"src": 4188,"name": "Stat","kind": "const","type": 709,"value": 870},{"import": 1870,"src": 4189,"name": "VDSO"},{"import": 1870,"src": 4190,"name": "blkcnt_t"},{"import": 1870,"src": 4191,"name": "blksize_t"},{"import": 1870,"src": 4192,"name": "clone"},{"import": 1870,"src": 4193,"name": "dev_t"},{"import": 1870,"src": 4194,"name": "ino_t","kind": "const","type": 709,"value": 732},{"import": 1870,"src": 4195,"name": "mcontext_t"},{"import": 1870,"src": 4196,"name": "mode_t","kind": "const","type": 709,"value": 719},{"import": 1870,"src": 4197,"name": "msghdr"},{"import": 1870,"src": 4198,"name": "msghdr_const"},{"import": 1870,"src": 4199,"name": "nlink_t"},{"import": 1870,"src": 4200,"name": "off_t"},{"import": 1870,"src": 4201,"name": "time_t"},{"import": 1870,"src": 4202,"name": "timeval"},{"import": 1870,"src": 4203,"name": "timezone"},{"import": 1870,"src": 4204,"name": "ucontext_t","kind": "const","type": 709,"value": 1901},{"import": 1870,"src": 4205,"name": "user_desc"},{"import": 1870,"src": 4206,"name": "tls","kind": "const","type": 709,"value": 2082},{"import": 1870,"src": 4207,"name": "pie"},{"import": 1870,"src": 4208,"name": "BPF"},{"import": 1870,"src": 4209,"name": "IOCTL"},{"import": 1870,"src": 4210,"name": "MAP","kind": "const","type": 709,"value": 2014},{"import": 1870,"src": 4211,"name": "O","kind": "const","type": 709,"value": 2015},{"import": 1870,"src": 4212,"name": "elf_aux_maybe","kind": "var","type": 2083,"value": "null"},{"import": 1870,"src": 273,"name": "getauxval","kind": "const","type": 363,"value": 397},{"import": 1870,"src": 171,"name": "getErrno","kind": "const","type": 238,"value": 254},{"import": 1870,"src": 4213,"name": "dup"},{"import": 1870,"src": 4214,"name": "dup2"},{"import": 1870,"src": 4215,"name": "dup3"},{"import": 1870,"src": 4216,"name": "chdir"},{"import": 1870,"src": 4217,"name": "fchdir"},{"import": 1870,"src": 4218,"name": "chroot"},{"import": 1870,"src": 4219,"name": "execve"},{"import": 1870,"src": 4220,"name": "fork"},{"import": 1870,"src": 4221,"name": "vfork"},{"import": 1870,"src": 4222,"name": "futimens"},{"import": 1870,"src": 4223,"name": "utimensat"},{"import": 1870,"src": 4224,"name": "fallocate"},{"import": 1870,"src": 256,"name": "futex_wait","kind": "const","type": 347,"value": 378},{"import": 1870,"src": 298,"name": "futex_wake","kind": "const","type": 424,"value": 470},{"import": 1870,"src": 4225,"name": "getcwd"},{"import": 1870,"src": 4226,"name": "getdents"},{"import": 1870,"src": 4227,"name": "getdents64"},{"import": 1870,"src": 4228,"name": "inotify_init1"},{"import": 1870,"src": 4229,"name": "inotify_add_watch"},{"import": 1870,"src": 4230,"name": "inotify_rm_watch"},{"import": 1870,"src": 4231,"name": "readlink"},{"import": 1870,"src": 4232,"name": "readlinkat"},{"import": 1870,"src": 4233,"name": "mkdir"},{"import": 1870,"src": 4234,"name": "mkdirat"},{"import": 1870,"src": 4235,"name": "mknod"},{"import": 1870,"src": 4236,"name": "mknodat"},{"import": 1870,"src": 4237,"name": "mount"},{"import": 1870,"src": 4238,"name": "umount"},{"import": 1870,"src": 4239,"name": "umount2"},{"import": 1870,"src": 216,"name": "mmap","kind": "const","type": 283,"value": 302},{"import": 1870,"src": 4240,"name": "mprotect"},{"import": 1870,"src": 314,"name": "munmap","kind": "const","type": 439,"value": 487},{"import": 1870,"src": 4241,"name": "poll"},{"import": 1870,"src": 4242,"name": "ppoll"},{"import": 1870,"src": 324,"name": "read","kind": "const","type": 456,"value": 517},{"import": 1870,"src": 4243,"name": "preadv"},{"import": 1870,"src": 4244,"name": "preadv2"},{"import": 1870,"src": 4245,"name": "readv"},{"import": 1870,"src": 4246,"name": "writev"},{"import": 1870,"src": 4247,"name": "pwritev"},{"import": 1870,"src": 4248,"name": "pwritev2"},{"import": 1870,"src": 4249,"name": "rmdir"},{"import": 1870,"src": 4250,"name": "symlink"},{"import": 1870,"src": 4251,"name": "symlinkat"},{"import": 1870,"src": 4252,"name": "pread"},{"import": 1870,"src": 4253,"name": "access"},{"import": 1870,"src": 4254,"name": "faccessat"},{"import": 1870,"src": 4255,"name": "pipe"},{"import": 1870,"src": 4256,"name": "pipe2"},{"import": 1870,"src": 174,"name": "write","kind": "const","type": 241,"value": 257},{"import": 1870,"src": 4257,"name": "ftruncate"},{"import": 1870,"src": 4258,"name": "pwrite"},{"import": 1870,"src": 4259,"name": "rename"},{"import": 1870,"src": 4260,"name": "renameat"},{"import": 1870,"src": 4261,"name": "renameat2"},{"import": 1870,"src": 4262,"name": "open"},{"import": 1870,"src": 4263,"name": "create"},{"import": 1870,"src": 318,"name": "openat","kind": "const","type": 441,"value": 491},{"import": 1870,"src": 4264,"name": "clone5"},{"import": 1870,"src": 4265,"name": "clone2"},{"import": 1870,"src": 284,"name": "close","kind": "const","type": 371,"value": 408},{"import": 1870,"src": 4266,"name": "fchmod"},{"import": 1870,"src": 4267,"name": "fchown"},{"import": 1870,"src": 4268,"name": "llseek"},{"import": 1870,"src": 4269,"name": "lseek"},{"import": 1870,"src": 4270,"name": "exit"},{"import": 1870,"src": 168,"name": "exit_group","kind": "const","type": 236,"value": 251},{"import": 1870,"src": 4271,"name": "getrandom"},{"import": 1870,"src": 4272,"name": "kill"},{"import": 1870,"src": 190,"name": "tkill","kind": "const","type": 256,"value": 273},{"import": 1870,"src": 4273,"name": "tgkill"},{"import": 1870,"src": 4274,"name": "link"},{"import": 1870,"src": 4275,"name": "linkat"},{"import": 1870,"src": 4276,"name": "unlink"},{"import": 1870,"src": 4277,"name": "unlinkat"},{"import": 1870,"src": 4278,"name": "waitpid"},{"import": 1870,"src": 4279,"name": "waitid"},{"import": 1870,"src": 4280,"name": "fcntl"},{"import": 1870,"src": 319,"name": "flock","kind": "const","type": 256,"value": 492},{"import": 1870,"src": 4281,"name": "clock_gettime"},{"import": 1870,"src": 4282,"name": "clock_getres"},{"import": 1870,"src": 4283,"name": "clock_settime"},{"import": 1870,"src": 4284,"name": "gettimeofday"},{"import": 1870,"src": 4285,"name": "settimeofday"},{"import": 1870,"src": 4286,"name": "nanosleep"},{"import": 1870,"src": 4287,"name": "setuid"},{"import": 1870,"src": 4288,"name": "setgid"},{"import": 1870,"src": 4289,"name": "setreuid"},{"import": 1870,"src": 4290,"name": "setregid"},{"import": 1870,"src": 4291,"name": "getuid"},{"import": 1870,"src": 4292,"name": "getgid"},{"import": 1870,"src": 4293,"name": "geteuid"},{"import": 1870,"src": 4294,"name": "getegid"},{"import": 1870,"src": 4295,"name": "seteuid"},{"import": 1870,"src": 4296,"name": "setegid"},{"import": 1870,"src": 4297,"name": "getresuid"},{"import": 1870,"src": 4298,"name": "getresgid"},{"import": 1870,"src": 4299,"name": "setresuid"},{"import": 1870,"src": 4300,"name": "setresgid"},{"import": 1870,"src": 4301,"name": "getgroups"},{"import": 1870,"src": 4302,"name": "setgroups"},{"import": 1870,"src": 4303,"name": "getpid"},{"import": 1870,"src": 176,"name": "gettid","kind": "const","type": 25,"value": 259},{"import": 1870,"src": 189,"name": "sigprocmask","kind": "const","type": 255,"value": 272},{"import": 1870,"src": 172,"name": "sigaction","kind": "const","type": 239,"value": 255},{"import": 1870,"src": 4304,"name": "sigaddset"},{"import": 1870,"src": 4305,"name": "sigismember"},{"import": 1870,"src": 4306,"name": "getsockname"},{"import": 1870,"src": 4307,"name": "getpeername"},{"import": 1870,"src": 4308,"name": "socket"},{"import": 1870,"src": 4309,"name": "setsockopt"},{"import": 1870,"src": 4310,"name": "getsockopt"},{"import": 1870,"src": 4311,"name": "sendmsg"},{"import": 1870,"src": 4312,"name": "sendmmsg"},{"import": 1870,"src": 4313,"name": "connect"},{"import": 1870,"src": 4314,"name": "recvmsg"},{"import": 1870,"src": 4315,"name": "recvfrom"},{"import": 1870,"src": 4316,"name": "shutdown"},{"import": 1870,"src": 4317,"name": "bind"},{"import": 1870,"src": 4318,"name": "listen"},{"import": 1870,"src": 4319,"name": "sendto"},{"import": 1870,"src": 4320,"name": "sendfile"},{"import": 1870,"src": 4321,"name": "socketpair"},{"import": 1870,"src": 4322,"name": "accept"},{"import": 1870,"src": 4323,"name": "accept4"},{"import": 1870,"src": 321,"name": "fstat","kind": "const","type": 442,"value": 494},{"import": 1870,"src": 4324,"name": "stat"},{"import": 1870,"src": 4325,"name": "lstat"},{"import": 1870,"src": 4326,"name": "fstatat"},{"import": 1870,"src": 4327,"name": "statx"},{"import": 1870,"src": 4328,"name": "listxattr"},{"import": 1870,"src": 4329,"name": "llistxattr"},{"import": 1870,"src": 4330,"name": "flistxattr"},{"import": 1870,"src": 4331,"name": "getxattr"},{"import": 1870,"src": 4332,"name": "lgetxattr"},{"import": 1870,"src": 4333,"name": "fgetxattr"},{"import": 1870,"src": 4334,"name": "setxattr"},{"import": 1870,"src": 4335,"name": "lsetxattr"},{"import": 1870,"src": 4336,"name": "fsetxattr"},{"import": 1870,"src": 4337,"name": "removexattr"},{"import": 1870,"src": 4338,"name": "lremovexattr"},{"import": 1870,"src": 4339,"name": "fremovexattr"},{"import": 1870,"src": 4340,"name": "sched_yield"},{"import": 1870,"src": 4341,"name": "sched_getaffinity"},{"import": 1870,"src": 4342,"name": "epoll_create"},{"import": 1870,"src": 4343,"name": "epoll_create1"},{"import": 1870,"src": 4344,"name": "epoll_ctl"},{"import": 1870,"src": 4345,"name": "epoll_wait"},{"import": 1870,"src": 4346,"name": "epoll_pwait"},{"import": 1870,"src": 4347,"name": "eventfd"},{"import": 1870,"src": 4348,"name": "timerfd_create"},{"import": 1870,"src": 4349,"name": "itimerspec"},{"import": 1870,"src": 4350,"name": "timerfd_gettime"},{"import": 1870,"src": 4351,"name": "timerfd_settime"},{"import": 1870,"src": 4352,"name": "unshare"},{"import": 1870,"src": 4353,"name": "capget"},{"import": 1870,"src": 4354,"name": "capset"},{"import": 1870,"src": 4355,"name": "sigaltstack"},{"import": 1870,"src": 4356,"name": "uname"},{"import": 1870,"src": 4357,"name": "io_uring_setup"},{"import": 1870,"src": 4358,"name": "io_uring_enter"},{"import": 1870,"src": 4359,"name": "io_uring_register"},{"import": 1870,"src": 4360,"name": "memfd_create"},{"import": 1870,"src": 4361,"name": "getrusage"},{"import": 1870,"src": 4362,"name": "tcgetattr"},{"import": 1870,"src": 4363,"name": "tcsetattr"},{"import": 1870,"src": 4364,"name": "ioctl"},{"import": 1870,"src": 4365,"name": "signalfd"},{"import": 1870,"src": 4366,"name": "copy_file_range"},{"import": 1870,"src": 4367,"name": "bpf"},{"import": 1870,"src": 4368,"name": "sync"},{"import": 1870,"src": 4369,"name": "syncfs"},{"import": 1870,"src": 4370,"name": "fsync"},{"import": 1870,"src": 4371,"name": "fdatasync"},{"import": 1870,"src": 4372,"name": "prctl"},{"import": 1870,"src": 4373,"name": "getrlimit"},{"import": 1870,"src": 249,"name": "setrlimit","kind": "const","type": 340,"value": 370},{"import": 1870,"src": 300,"name": "prlimit","kind": "const","type": 426,"value": 472},{"import": 1870,"src": 4374,"name": "madvise"},{"import": 1870,"src": 4375,"name": "pidfd_open"},{"import": 1870,"src": 4376,"name": "pidfd_getfd"},{"import": 1870,"src": 4377,"name": "pidfd_send_signal"},{"import": 1870,"src": 4378,"name": "process_vm_readv"},{"import": 1870,"src": 4379,"name": "process_vm_writev"},{"import": 1870,"src": 4380,"name": "fadvise"},{"import": 1870,"src": 4381,"name": "perf_event_open"},{"import": 1870,"src": 4382,"name": "E","kind": "const","type": 709,"value": 1146},{"import": 1870,"src": 4383,"name": "pid_t","kind": "const","type": 709,"value": 829},{"import": 1870,"src": 4384,"name": "fd_t","kind": "const","type": 709,"value": 829},{"import": 1870,"src": 4385,"name": "uid_t","kind": "const","type": 709,"value": 893},{"import": 1870,"src": 4386,"name": "gid_t","kind": "const","type": 709,"value": 893},{"import": 1870,"src": 4387,"name": "clock_t","kind": "const","type": 709,"value": 819},{"import": 1870,"src": 4388,"name": "NAME_MAX"},{"import": 1870,"src": 4389,"name": "PATH_MAX","kind": "const","type": 778,"value": null},{"import": 1870,"src": 4390,"name": "IOV_MAX"},{"import": 1870,"src": 4391,"name": "MAX_ADDR_LEN"},{"import": 1870,"src": 4392,"name": "STDIN_FILENO"},{"import": 1870,"src": 4393,"name": "STDOUT_FILENO","kind": "const","type": 778,"value": null},{"import": 1870,"src": 4394,"name": "STDERR_FILENO","kind": "const","type": 778,"value": null},{"import": 1870,"src": 4395,"name": "AT","kind": "const","type": 709,"value": 2013},{"import": 1870,"src": 4396,"name": "FALLOC"},{"import": 1870,"src": 4397,"name": "FUTEX","kind": "const","type": 709,"value": 2084},{"import": 1870,"src": 4398,"name": "PROT","kind": "const","type": 709,"value": 2016},{"import": 1870,"src": 4399,"name": "FD_CLOEXEC"},{"import": 1870,"src": 4400,"name": "F_OK"},{"import": 1870,"src": 4401,"name": "X_OK"},{"import": 1870,"src": 4402,"name": "W_OK"},{"import": 1870,"src": 4403,"name": "R_OK"},{"import": 1870,"src": 4404,"name": "W"},{"import": 1870,"src": 4405,"name": "P"},{"import": 1870,"src": 4406,"name": "SA","kind": "const","type": 709,"value": 2018},{"import": 1870,"src": 4407,"name": "SIG","kind": "const","type": 709,"value": 2019},{"import": 1870,"src": 4408,"name": "kernel_rwf"},{"import": 1870,"src": 4409,"name": "RWF"},{"import": 1870,"src": 4410,"name": "SEEK"},{"import": 1870,"src": 4411,"name": "SHUT"},{"import": 1870,"src": 4412,"name": "SOCK"},{"import": 1870,"src": 4413,"name": "TCP"},{"import": 1870,"src": 4414,"name": "PF"},{"import": 1870,"src": 4415,"name": "AF"},{"import": 1870,"src": 4416,"name": "SO"},{"import": 1870,"src": 4417,"name": "SCM"},{"import": 1870,"src": 4418,"name": "SOL"},{"import": 1870,"src": 4419,"name": "SOMAXCONN"},{"import": 1870,"src": 4420,"name": "IP"},{"import": 1870,"src": 4421,"name": "IPV6"},{"import": 1870,"src": 4422,"name": "MSG"},{"import": 1870,"src": 4423,"name": "DT"},{"import": 1870,"src": 4424,"name": "T","kind": "const","type": 709,"value": 2085},{"import": 1870,"src": 4425,"name": "EPOLL"},{"import": 1870,"src": 4426,"name": "CLOCK"},{"import": 1870,"src": 4427,"name": "CSIGNAL"},{"import": 1870,"src": 4428,"name": "CLONE"},{"import": 1870,"src": 4429,"name": "EFD"},{"import": 1870,"src": 4430,"name": "MS"},{"import": 1870,"src": 4431,"name": "MNT"},{"import": 1870,"src": 4432,"name": "UMOUNT_NOFOLLOW"},{"import": 1870,"src": 4433,"name": "IN"},{"import": 1870,"src": 4434,"name": "S","kind": "const","type": 709,"value": 2017},{"import": 1870,"src": 4435,"name": "UTIME"},{"import": 1870,"src": 4436,"name": "TFD"},{"import": 1870,"src": 4437,"name": "winsize","kind": "const","type": 709,"value": 2086},{"import": 1870,"src": 4438,"name": "NSIG","kind": "const","type": 778,"value": null},{"import": 1870,"src": 4439,"name": "sigset_t","kind": "const","type": 709,"value": 1903},{"import": 1870,"src": 4440,"name": "all_mask"},{"import": 1870,"src": 4441,"name": "app_mask","kind": "const","type": 1903,"value": null},{"import": 1870,"src": 4442,"name": "k_sigaction","kind": "const","type": 709,"value": 2087},{"import": 1870,"src": 4443,"name": "Sigaction","kind": "const","type": 709,"value": 2020},{"import": 1870,"src": 4444,"name": "empty_sigset","kind": "const","type": 1903,"value": null},{"import": 1870,"src": 4445,"name": "SFD"},{"import": 1870,"src": 4446,"name": "signalfd_siginfo"},{"import": 1870,"src": 4447,"name": "in_port_t"},{"import": 1870,"src": 4448,"name": "sa_family_t"},{"import": 1870,"src": 4449,"name": "socklen_t"},{"import": 1870,"src": 4450,"name": "sockaddr"},{"import": 1870,"src": 4451,"name": "mmsghdr"},{"import": 1870,"src": 4452,"name": "mmsghdr_const"},{"import": 1870,"src": 4453,"name": "epoll_data","kind": "const","type": 709,"value": 2088},{"import": 1870,"src": 4454,"name": "epoll_event","kind": "const","type": 709,"value": 2089},{"import": 1870,"src": 4455,"name": "VFS_CAP_REVISION_MASK"},{"import": 1870,"src": 4456,"name": "VFS_CAP_REVISION_SHIFT"},{"import": 1870,"src": 4457,"name": "VFS_CAP_FLAGS_MASK"},{"import": 1870,"src": 4458,"name": "VFS_CAP_FLAGS_EFFECTIVE"},{"import": 1870,"src": 4459,"name": "VFS_CAP_REVISION_1"},{"import": 1870,"src": 4460,"name": "VFS_CAP_U32_1"},{"import": 1870,"src": 4461,"name": "XATTR_CAPS_SZ_1"},{"import": 1870,"src": 4462,"name": "VFS_CAP_REVISION_2"},{"import": 1870,"src": 4463,"name": "VFS_CAP_U32_2"},{"import": 1870,"src": 4464,"name": "XATTR_CAPS_SZ_2"},{"import": 1870,"src": 4465,"name": "XATTR_CAPS_SZ"},{"import": 1870,"src": 4466,"name": "VFS_CAP_U32"},{"import": 1870,"src": 4467,"name": "VFS_CAP_REVISION"},{"import": 1870,"src": 4468,"name": "vfs_cap_data"},{"import": 1870,"src": 4469,"name": "CAP"},{"import": 1870,"src": 4470,"name": "cap_t"},{"import": 1870,"src": 4471,"name": "cap_user_header_t"},{"import": 1870,"src": 4472,"name": "cap_user_data_t"},{"import": 1870,"src": 4473,"name": "inotify_event"},{"import": 1870,"src": 4474,"name": "dirent64"},{"import": 1870,"src": 4475,"name": "dl_phdr_info","kind": "const","type": 709,"value": 1564},{"import": 1870,"src": 4476,"name": "CPU_SETSIZE"},{"import": 1870,"src": 4477,"name": "cpu_set_t"},{"import": 1870,"src": 4478,"name": "cpu_count_t"},{"import": 1870,"src": 4479,"name": "CPU_COUNT"},{"import": 1870,"src": 4480,"name": "MINSIGSTKSZ"},{"import": 1870,"src": 4481,"name": "SIGSTKSZ"},{"import": 1870,"src": 4482,"name": "SS_ONSTACK"},{"import": 1870,"src": 4483,"name": "SS_DISABLE"},{"import": 1870,"src": 4484,"name": "SS_AUTODISARM"},{"import": 1870,"src": 4485,"name": "stack_t","kind": "const","type": 709,"value": 1902},{"import": 1870,"src": 4486,"name": "sigval","kind": "const","type": 709,"value": 2090},{"import": 1870,"src": 4487,"name": "siginfo_t","kind": "const","type": 709,"value": 1728},{"import": 1870,"src": 4488,"name": "io_uring_params"},{"import": 1870,"src": 4489,"name": "IORING_FEAT_SINGLE_MMAP"},{"import": 1870,"src": 4490,"name": "IORING_FEAT_NODROP"},{"import": 1870,"src": 4491,"name": "IORING_FEAT_SUBMIT_STABLE"},{"import": 1870,"src": 4492,"name": "IORING_FEAT_RW_CUR_POS"},{"import": 1870,"src": 4493,"name": "IORING_FEAT_CUR_PERSONALITY"},{"import": 1870,"src": 4494,"name": "IORING_FEAT_FAST_POLL"},{"import": 1870,"src": 4495,"name": "IORING_FEAT_POLL_32BITS"},{"import": 1870,"src": 4496,"name": "IORING_SETUP_IOPOLL"},{"import": 1870,"src": 4497,"name": "IORING_SETUP_SQPOLL"},{"import": 1870,"src": 4498,"name": "IORING_SETUP_SQ_AFF"},{"import": 1870,"src": 4499,"name": "IORING_SETUP_CQSIZE"},{"import": 1870,"src": 4500,"name": "IORING_SETUP_CLAMP"},{"import": 1870,"src": 4501,"name": "IORING_SETUP_ATTACH_WQ"},{"import": 1870,"src": 4502,"name": "IORING_SETUP_R_DISABLED"},{"import": 1870,"src": 4503,"name": "io_sqring_offsets"},{"import": 1870,"src": 4504,"name": "IORING_SQ_NEED_WAKEUP"},{"import": 1870,"src": 4505,"name": "IORING_SQ_CQ_OVERFLOW"},{"import": 1870,"src": 4506,"name": "io_cqring_offsets"},{"import": 1870,"src": 4507,"name": "io_uring_sqe"},{"import": 1870,"src": 4508,"name": "IOSQE_BIT"},{"import": 1870,"src": 4509,"name": "IOSQE_FIXED_FILE"},{"import": 1870,"src": 4510,"name": "IOSQE_IO_DRAIN"},{"import": 1870,"src": 4511,"name": "IOSQE_IO_LINK"},{"import": 1870,"src": 4512,"name": "IOSQE_IO_HARDLINK"},{"import": 1870,"src": 4513,"name": "IOSQE_ASYNC"},{"import": 1870,"src": 4514,"name": "IOSQE_BUFFER_SELECT"},{"import": 1870,"src": 4515,"name": "IORING_OP"},{"import": 1870,"src": 4516,"name": "IORING_FSYNC_DATASYNC"},{"import": 1870,"src": 4517,"name": "IORING_TIMEOUT_ABS"},{"import": 1870,"src": 4518,"name": "io_uring_cqe"},{"import": 1870,"src": 4519,"name": "IORING_CQE_F_BUFFER"},{"import": 1870,"src": 4520,"name": "IORING_OFF_SQ_RING"},{"import": 1870,"src": 4521,"name": "IORING_OFF_CQ_RING"},{"import": 1870,"src": 4522,"name": "IORING_OFF_SQES"},{"import": 1870,"src": 4523,"name": "IORING_ENTER_GETEVENTS"},{"import": 1870,"src": 4524,"name": "IORING_ENTER_SQ_WAKEUP"},{"import": 1870,"src": 4525,"name": "IORING_REGISTER"},{"import": 1870,"src": 4526,"name": "io_uring_files_update"},{"import": 1870,"src": 4527,"name": "IO_URING_OP_SUPPORTED"},{"import": 1870,"src": 4528,"name": "io_uring_probe_op"},{"import": 1870,"src": 4529,"name": "io_uring_probe"},{"import": 1870,"src": 4530,"name": "io_uring_restriction"},{"import": 1870,"src": 4531,"name": "IORING_RESTRICTION"},{"import": 1870,"src": 4532,"name": "utsname"},{"import": 1870,"src": 4533,"name": "HOST_NAME_MAX"},{"import": 1870,"src": 4534,"name": "STATX_TYPE"},{"import": 1870,"src": 4535,"name": "STATX_MODE"},{"import": 1870,"src": 4536,"name": "STATX_NLINK"},{"import": 1870,"src": 4537,"name": "STATX_UID"},{"import": 1870,"src": 4538,"name": "STATX_GID"},{"import": 1870,"src": 4539,"name": "STATX_ATIME"},{"import": 1870,"src": 4540,"name": "STATX_MTIME"},{"import": 1870,"src": 4541,"name": "STATX_CTIME"},{"import": 1870,"src": 4542,"name": "STATX_INO"},{"import": 1870,"src": 4543,"name": "STATX_SIZE"},{"import": 1870,"src": 4544,"name": "STATX_BLOCKS"},{"import": 1870,"src": 4545,"name": "STATX_BASIC_STATS"},{"import": 1870,"src": 4546,"name": "STATX_BTIME"},{"import": 1870,"src": 4547,"name": "STATX_ATTR_COMPRESSED"},{"import": 1870,"src": 4548,"name": "STATX_ATTR_IMMUTABLE"},{"import": 1870,"src": 4549,"name": "STATX_ATTR_APPEND"},{"import": 1870,"src": 4550,"name": "STATX_ATTR_NODUMP"},{"import": 1870,"src": 4551,"name": "STATX_ATTR_ENCRYPTED"},{"import": 1870,"src": 4552,"name": "STATX_ATTR_AUTOMOUNT"},{"import": 1870,"src": 4553,"name": "statx_timestamp"},{"import": 1870,"src": 4554,"name": "Statx"},{"import": 1870,"src": 4555,"name": "addrinfo"},{"import": 1870,"src": 4556,"name": "IPPORT_RESERVED"},{"import": 1870,"src": 4557,"name": "IPPROTO"},{"import": 1870,"src": 4558,"name": "RR"},{"import": 1870,"src": 4559,"name": "tcp_repair_opt"},{"import": 1870,"src": 4560,"name": "tcp_repair_window"},{"import": 1870,"src": 4561,"name": "TcpRepairOption"},{"import": 1870,"src": 4562,"name": "tcp_fastopen_client_fail"},{"import": 1870,"src": 4563,"name": "TCPI_OPT_TIMESTAMPS"},{"import": 1870,"src": 4564,"name": "TCPI_OPT_SACK"},{"import": 1870,"src": 4565,"name": "TCPI_OPT_WSCALE"},{"import": 1870,"src": 4566,"name": "TCPI_OPT_ECN"},{"import": 1870,"src": 4567,"name": "TCPI_OPT_ECN_SEEN"},{"import": 1870,"src": 4568,"name": "TCPI_OPT_SYN_DATA"},{"import": 1870,"src": 4569,"name": "nfds_t"},{"import": 1870,"src": 4570,"name": "pollfd"},{"import": 1870,"src": 4571,"name": "POLL"},{"import": 1870,"src": 4572,"name": "MFD_CLOEXEC"},{"import": 1870,"src": 4573,"name": "MFD_ALLOW_SEALING"},{"import": 1870,"src": 4574,"name": "MFD_HUGETLB"},{"import": 1870,"src": 4575,"name": "MFD_ALL_FLAGS"},{"import": 1870,"src": 4576,"name": "HUGETLB_FLAG_ENCODE_SHIFT"},{"import": 1870,"src": 4577,"name": "HUGETLB_FLAG_ENCODE_MASK"},{"import": 1870,"src": 4578,"name": "HUGETLB_FLAG_ENCODE_64KB"},{"import": 1870,"src": 4579,"name": "HUGETLB_FLAG_ENCODE_512KB"},{"import": 1870,"src": 4580,"name": "HUGETLB_FLAG_ENCODE_1MB"},{"import": 1870,"src": 4581,"name": "HUGETLB_FLAG_ENCODE_2MB"},{"import": 1870,"src": 4582,"name": "HUGETLB_FLAG_ENCODE_8MB"},{"import": 1870,"src": 4583,"name": "HUGETLB_FLAG_ENCODE_16MB"},{"import": 1870,"src": 4584,"name": "HUGETLB_FLAG_ENCODE_32MB"},{"import": 1870,"src": 4585,"name": "HUGETLB_FLAG_ENCODE_256MB"},{"import": 1870,"src": 4586,"name": "HUGETLB_FLAG_ENCODE_512MB"},{"import": 1870,"src": 4587,"name": "HUGETLB_FLAG_ENCODE_1GB"},{"import": 1870,"src": 4588,"name": "HUGETLB_FLAG_ENCODE_2GB"},{"import": 1870,"src": 4589,"name": "HUGETLB_FLAG_ENCODE_16GB"},{"import": 1870,"src": 4590,"name": "MFD_HUGE_SHIFT"},{"import": 1870,"src": 4591,"name": "MFD_HUGE_MASK"},{"import": 1870,"src": 4592,"name": "MFD_HUGE_64KB"},{"import": 1870,"src": 4593,"name": "MFD_HUGE_512KB"},{"import": 1870,"src": 4594,"name": "MFD_HUGE_1MB"},{"import": 1870,"src": 4595,"name": "MFD_HUGE_2MB"},{"import": 1870,"src": 4596,"name": "MFD_HUGE_8MB"},{"import": 1870,"src": 4597,"name": "MFD_HUGE_16MB"},{"import": 1870,"src": 4598,"name": "MFD_HUGE_32MB"},{"import": 1870,"src": 4599,"name": "MFD_HUGE_256MB"},{"import": 1870,"src": 4600,"name": "MFD_HUGE_512MB"},{"import": 1870,"src": 4601,"name": "MFD_HUGE_1GB"},{"import": 1870,"src": 4602,"name": "MFD_HUGE_2GB"},{"import": 1870,"src": 4603,"name": "MFD_HUGE_16GB"},{"import": 1870,"src": 4604,"name": "rusage"},{"import": 1870,"src": 4605,"name": "cc_t"},{"import": 1870,"src": 4606,"name": "speed_t"},{"import": 1870,"src": 4607,"name": "tcflag_t"},{"import": 1870,"src": 4608,"name": "NCCS"},{"import": 1870,"src": 4609,"name": "B0"},{"import": 1870,"src": 4610,"name": "B50"},{"import": 1870,"src": 4611,"name": "B75"},{"import": 1870,"src": 4612,"name": "B110"},{"import": 1870,"src": 4613,"name": "B134"},{"import": 1870,"src": 4614,"name": "B150"},{"import": 1870,"src": 4615,"name": "B200"},{"import": 1870,"src": 4616,"name": "B300"},{"import": 1870,"src": 4617,"name": "B600"},{"import": 1870,"src": 4618,"name": "B1200"},{"import": 1870,"src": 4619,"name": "B1800"},{"import": 1870,"src": 4620,"name": "B2400"},{"import": 1870,"src": 4621,"name": "B4800"},{"import": 1870,"src": 4622,"name": "B9600"},{"import": 1870,"src": 4623,"name": "B19200"},{"import": 1870,"src": 4624,"name": "B38400"},{"import": 1870,"src": 4625,"name": "BOTHER"},{"import": 1870,"src": 4626,"name": "B57600"},{"import": 1870,"src": 4627,"name": "B115200"},{"import": 1870,"src": 4628,"name": "B230400"},{"import": 1870,"src": 4629,"name": "B460800"},{"import": 1870,"src": 4630,"name": "B500000"},{"import": 1870,"src": 4631,"name": "B576000"},{"import": 1870,"src": 4632,"name": "B921600"},{"import": 1870,"src": 4633,"name": "B1000000"},{"import": 1870,"src": 4634,"name": "B1152000"},{"import": 1870,"src": 4635,"name": "B1500000"},{"import": 1870,"src": 4636,"name": "B2000000"},{"import": 1870,"src": 4637,"name": "B2500000"},{"import": 1870,"src": 4638,"name": "B3000000"},{"import": 1870,"src": 4639,"name": "B3500000"},{"import": 1870,"src": 4640,"name": "B4000000"},{"import": 1870,"src": 4641,"name": "V"},{"import": 1870,"src": 4642,"name": "IGNBRK"},{"import": 1870,"src": 4643,"name": "BRKINT"},{"import": 1870,"src": 4644,"name": "IGNPAR"},{"import": 1870,"src": 4645,"name": "PARMRK"},{"import": 1870,"src": 4646,"name": "INPCK"},{"import": 1870,"src": 4647,"name": "ISTRIP"},{"import": 1870,"src": 4648,"name": "INLCR"},{"import": 1870,"src": 4649,"name": "IGNCR"},{"import": 1870,"src": 4650,"name": "ICRNL"},{"import": 1870,"src": 4651,"name": "IUCLC"},{"import": 1870,"src": 4652,"name": "IXON"},{"import": 1870,"src": 4653,"name": "IXANY"},{"import": 1870,"src": 4654,"name": "IXOFF"},{"import": 1870,"src": 4655,"name": "IMAXBEL"},{"import": 1870,"src": 4656,"name": "IUTF8"},{"import": 1870,"src": 4657,"name": "OPOST"},{"import": 1870,"src": 4658,"name": "OLCUC"},{"import": 1870,"src": 4659,"name": "ONLCR"},{"import": 1870,"src": 4660,"name": "OCRNL"},{"import": 1870,"src": 4661,"name": "ONOCR"},{"import": 1870,"src": 4662,"name": "ONLRET"},{"import": 1870,"src": 4663,"name": "OFILL"},{"import": 1870,"src": 4664,"name": "OFDEL"},{"import": 1870,"src": 4665,"name": "VTDLY"},{"import": 1870,"src": 4666,"name": "VT0"},{"import": 1870,"src": 4667,"name": "VT1"},{"import": 1870,"src": 4668,"name": "CSIZE"},{"import": 1870,"src": 4669,"name": "CS5"},{"import": 1870,"src": 4670,"name": "CS6"},{"import": 1870,"src": 4671,"name": "CS7"},{"import": 1870,"src": 4672,"name": "CS8"},{"import": 1870,"src": 4673,"name": "CSTOPB"},{"import": 1870,"src": 4674,"name": "CREAD"},{"import": 1870,"src": 4675,"name": "PARENB"},{"import": 1870,"src": 4676,"name": "PARODD"},{"import": 1870,"src": 4677,"name": "HUPCL"},{"import": 1870,"src": 4678,"name": "CLOCAL"},{"import": 1870,"src": 4679,"name": "ISIG"},{"import": 1870,"src": 4680,"name": "ICANON"},{"import": 1870,"src": 4681,"name": "ECHO"},{"import": 1870,"src": 4682,"name": "ECHOE"},{"import": 1870,"src": 4683,"name": "ECHOK"},{"import": 1870,"src": 4684,"name": "ECHONL"},{"import": 1870,"src": 4685,"name": "NOFLSH"},{"import": 1870,"src": 4686,"name": "TOSTOP"},{"import": 1870,"src": 4687,"name": "IEXTEN"},{"import": 1870,"src": 4688,"name": "TCSA"},{"import": 1870,"src": 4689,"name": "termios"},{"import": 1870,"src": 4690,"name": "SIOCGIFINDEX"},{"import": 1870,"src": 4691,"name": "IFNAMESIZE"},{"import": 1870,"src": 4692,"name": "ifmap"},{"import": 1870,"src": 4693,"name": "ifreq"},{"import": 1870,"src": 4694,"name": "rlimit_resource","kind": "const","type": 709,"value": 1144},{"import": 1870,"src": 4695,"name": "rlim_t","kind": "const","type": 709,"value": 732},{"import": 1870,"src": 4696,"name": "RLIM"},{"import": 1870,"src": 4697,"name": "rlimit","kind": "const","type": 709,"value": 1145},{"import": 1870,"src": 4698,"name": "MADV"},{"import": 1870,"src": 4699,"name": "POSIX_FADV"},{"import": 1870,"src": 4700,"name": "kernel_timespec"},{"import": 1870,"src": 4701,"name": "timespec","kind": "const","type": 709,"value": 1222},{"import": 1870,"src": 4702,"name": "XDP"},{"import": 1870,"src": 4703,"name": "xdp_ring_offset"},{"import": 1870,"src": 4704,"name": "xdp_mmap_offsets"},{"import": 1870,"src": 4705,"name": "xdp_umem_reg"},{"import": 1870,"src": 4706,"name": "xdp_statistics"},{"import": 1870,"src": 4707,"name": "xdp_options"},{"import": 1870,"src": 4708,"name": "XSK_UNALIGNED_BUF_OFFSET_SHIFT"},{"import": 1870,"src": 4709,"name": "XSK_UNALIGNED_BUF_ADDR_MASK"},{"import": 1870,"src": 4710,"name": "xdp_desc"},{"import": 1870,"src": 4711,"name": "SECUREBITS_DEFAULT"},{"import": 1870,"src": 4712,"name": "SECURE_NOROOT"},{"import": 1870,"src": 4713,"name": "SECURE_NOROOT_LOCKED"},{"import": 1870,"src": 4714,"name": "SECBIT_NOROOT"},{"import": 1870,"src": 4715,"name": "SECBIT_NOROOT_LOCKED"},{"import": 1870,"src": 4716,"name": "SECURE_NO_SETUID_FIXUP"},{"import": 1870,"src": 4717,"name": "SECURE_NO_SETUID_FIXUP_LOCKED"},{"import": 1870,"src": 4718,"name": "SECBIT_NO_SETUID_FIXUP"},{"import": 1870,"src": 4719,"name": "SECBIT_NO_SETUID_FIXUP_LOCKED"},{"import": 1870,"src": 4720,"name": "SECURE_KEEP_CAPS"},{"import": 1870,"src": 4721,"name": "SECURE_KEEP_CAPS_LOCKED"},{"import": 1870,"src": 4722,"name": "SECBIT_KEEP_CAPS"},{"import": 1870,"src": 4723,"name": "SECBIT_KEEP_CAPS_LOCKED"},{"import": 1870,"src": 4724,"name": "SECURE_NO_CAP_AMBIENT_RAISE"},{"import": 1870,"src": 4725,"name": "SECURE_NO_CAP_AMBIENT_RAISE_LOCKED"},{"import": 1870,"src": 4726,"name": "SECBIT_NO_CAP_AMBIENT_RAISE"},{"import": 1870,"src": 4727,"name": "SECBIT_NO_CAP_AMBIENT_RAISE_LOCKED"},{"import": 1870,"src": 4728,"name": "SECURE_ALL_BITS"},{"import": 1870,"src": 4729,"name": "SECURE_ALL_LOCKS"},{"import": 1870,"src": 4730,"name": "PR"},{"import": 1870,"src": 4731,"name": "prctl_mm_map"},{"import": 1870,"src": 4732,"name": "NETLINK"},{"import": 1870,"src": 4733,"name": "NLM_F_REQUEST"},{"import": 1870,"src": 4734,"name": "NLM_F_MULTI"},{"import": 1870,"src": 4735,"name": "NLM_F_ACK"},{"import": 1870,"src": 4736,"name": "NLM_F_ECHO"},{"import": 1870,"src": 4737,"name": "NLM_F_DUMP_INTR"},{"import": 1870,"src": 4738,"name": "NLM_F_DUMP_FILTERED"},{"import": 1870,"src": 4739,"name": "NLM_F_ROOT"},{"import": 1870,"src": 4740,"name": "NLM_F_MATCH"},{"import": 1870,"src": 4741,"name": "NLM_F_ATOMIC"},{"import": 1870,"src": 4742,"name": "NLM_F_DUMP"},{"import": 1870,"src": 4743,"name": "NLM_F_REPLACE"},{"import": 1870,"src": 4744,"name": "NLM_F_EXCL"},{"import": 1870,"src": 4745,"name": "NLM_F_CREATE"},{"import": 1870,"src": 4746,"name": "NLM_F_APPEND"},{"import": 1870,"src": 4747,"name": "NLM_F_NONREC"},{"import": 1870,"src": 4748,"name": "NLM_F_CAPPED"},{"import": 1870,"src": 4749,"name": "NLM_F_ACK_TLVS"},{"import": 1870,"src": 4750,"name": "NetlinkMessageType"},{"import": 1870,"src": 4751,"name": "nlmsghdr"},{"import": 1870,"src": 4752,"name": "ifinfomsg"},{"import": 1870,"src": 4753,"name": "rtattr"},{"import": 1870,"src": 4754,"name": "IFLA"},{"import": 1870,"src": 4755,"name": "rtnl_link_ifmap"},{"import": 1870,"src": 4756,"name": "rtnl_link_stats"},{"import": 1870,"src": 4757,"name": "rtnl_link_stats64"},{"import": 1870,"src": 4758,"name": "perf_event_attr"},{"import": 1870,"src": 4759,"name": "PERF"},{"import": 2091,"src": 4760,"name": "IO_Uring"},{"import": 2091,"src": 4761,"name": "SubmissionQueue"},{"import": 2091,"src": 4762,"name": "CompletionQueue"},{"import": 2091,"src": 4763,"name": "io_uring_prep_nop"},{"import": 2091,"src": 4764,"name": "io_uring_prep_fsync"},{"import": 2091,"src": 4765,"name": "io_uring_prep_rw"},{"import": 2091,"src": 4766,"name": "io_uring_prep_read"},{"import": 2091,"src": 4767,"name": "io_uring_prep_write"},{"import": 2091,"src": 4768,"name": "io_uring_prep_readv"},{"import": 2091,"src": 4769,"name": "io_uring_prep_writev"},{"import": 2091,"src": 4770,"name": "io_uring_prep_read_fixed"},{"import": 2091,"src": 4771,"name": "io_uring_prep_write_fixed"},{"import": 2091,"src": 4772,"name": "__io_uring_prep_poll_mask"},{"import": 2091,"src": 4773,"name": "io_uring_prep_accept"},{"import": 2091,"src": 4774,"name": "io_uring_prep_connect"},{"import": 2091,"src": 4775,"name": "io_uring_prep_epoll_ctl"},{"import": 2091,"src": 4776,"name": "io_uring_prep_recv"},{"import": 2091,"src": 4777,"name": "io_uring_prep_send"},{"import": 2091,"src": 4778,"name": "io_uring_prep_openat"},{"import": 2091,"src": 4779,"name": "io_uring_prep_close"},{"import": 2091,"src": 4780,"name": "io_uring_prep_timeout"},{"import": 2091,"src": 4781,"name": "io_uring_prep_timeout_remove"},{"import": 2091,"src": 4782,"name": "io_uring_prep_link_timeout"},{"import": 2091,"src": 4783,"name": "io_uring_prep_poll_add"},{"import": 2091,"src": 4784,"name": "io_uring_prep_poll_remove"},{"import": 2091,"src": 4785,"name": "io_uring_prep_poll_update"},{"import": 2091,"src": 4786,"name": "io_uring_prep_fallocate"},{"import": 2091,"src": 4787,"name": "io_uring_prep_statx"},{"import": 2091,"src": 4788,"name": "io_uring_prep_cancel"},{"import": 1870,"src": 4789,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1870,"src": 4790,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1870,"src": 4791,"name": "assert","kind": "const","type": 29,"value": 36},{"import": 1870,"src": 4792,"name": "maxInt"},{"import": 1870,"src": 4793,"name": "elf"},{"import": 1870,"src": 4794,"name": "vdso"},{"import": 1870,"src": 4795,"name": "dl"},{"import": 1870,"src": 4796,"name": "native_arch","kind": "const","type": 721,"value": null},{"import": 1870,"src": 4797,"name": "native_endian"},{"import": 1870,"src": 4798,"name": "is_mips","kind": "const","type": 720,"value": "false"},{"import": 1870,"src": 4799,"name": "is_ppc"},{"import": 1870,"src": 4800,"name": "is_ppc64","kind": "const","type": 720,"value": "false"},{"import": 1870,"src": 4801,"name": "is_sparc","kind": "const","type": 720,"value": "false"},{"import": 1870,"src": 4802,"name": "iovec"},{"import": 1870,"src": 4803,"name": "iovec_const"},{"import": 1870,"src": 4804,"name": "syscall_bits","kind": "const","type": 709,"value": 1480},{"import": 1870,"src": 4805,"name": "arch_bits","kind": "const","type": 709,"value": 1480},{"import": 1870,"src": 4806,"name": "require_aligned_register_pair"},{"import": 1870,"src": 4807,"name": "splitValueLE64"},{"import": 1870,"src": 4808,"name": "splitValueBE64"},{"import": 1870,"src": 4809,"name": "splitValue64"},{"import": 1870,"src": 4810,"name": "vdso_clock_gettime"},{"import": 1870,"src": 4811,"name": "vdso_clock_gettime_ty"},{"import": 1870,"src": 4812,"name": "init_vdso_clock_gettime"},{"import": 1870,"src": 4813,"name": "usize_bits"},{"import": 1870,"src": 4814,"name": "siginfo_fields_union","kind": "const","type": 709,"value": 2073},{"import": 1870,"src": 4815,"name": "issecure_mask"},{"import": 1469,"src": 4816,"name": "NextTickNode","kind": "const","type": 709,"value": 1463},{"import": 1469,"src": 4817,"name": "ResumeNode","kind": "const","type": 709,"value": 1475},{"import": 1469,"src": 4818,"name": "instance","kind": "const","type": 2092,"value": "null"},{"import": 1469,"src": 4819,"name": "init"},{"import": 1469,"src": 4820,"name": "initSingleThreaded"},{"import": 1469,"src": 4821,"name": "initMultiThreaded"},{"import": 1469,"src": 4822,"name": "initThreadPool"},{"import": 1469,"src": 4823,"name": "deinit"},{"import": 1469,"src": 4824,"name": "linuxAddFd"},{"import": 1469,"src": 4825,"name": "linuxModFd"},{"import": 1469,"src": 4826,"name": "linuxRemoveFd"},{"import": 1469,"src": 4827,"name": "linuxWaitFd"},{"import": 1469,"src": 4828,"name": "waitUntilFdReadable"},{"import": 1469,"src": 4829,"name": "waitUntilFdWritable"},{"import": 1469,"src": 4830,"name": "waitUntilFdWritableOrReadable"},{"import": 1469,"src": 4831,"name": "bsdWaitKev"},{"import": 1469,"src": 4832,"name": "bsdAddKev"},{"import": 1469,"src": 4833,"name": "bsdRemoveKev"},{"import": 1469,"src": 4834,"name": "onNextTick"},{"import": 1469,"src": 4835,"name": "cancelOnNextTick"},{"import": 1469,"src": 4836,"name": "run"},{"import": 1469,"src": 4837,"name": "runDetached"},{"import": 1469,"src": 4838,"name": "yield"},{"import": 1469,"src": 4839,"name": "startCpuBoundOperation"},{"import": 1469,"src": 4840,"name": "beginOneEvent"},{"import": 1469,"src": 4841,"name": "finishOneEvent"},{"import": 1469,"src": 4842,"name": "sleep"},{"import": 1469,"src": 4843,"name": "accept"},{"import": 1469,"src": 4844,"name": "connect"},{"import": 1469,"src": 4845,"name": "openZ"},{"import": 1469,"src": 4846,"name": "openatZ"},{"import": 1469,"src": 4847,"name": "close"},{"import": 1469,"src": 4848,"name": "read"},{"import": 1469,"src": 4849,"name": "readv"},{"import": 1469,"src": 4850,"name": "pread"},{"import": 1469,"src": 4851,"name": "preadv"},{"import": 1469,"src": 4852,"name": "write"},{"import": 1469,"src": 4853,"name": "writev"},{"import": 1469,"src": 4854,"name": "pwrite"},{"import": 1469,"src": 4855,"name": "pwritev"},{"import": 1469,"src": 4856,"name": "sendto"},{"import": 1469,"src": 4857,"name": "recvfrom"},{"import": 1469,"src": 4858,"name": "faccessatZ"},{"import": 1469,"src": 4859,"name": "Request","kind": "const","type": 709,"value": 831},{"import": 1469,"src": 4860,"name": "global_instance_state"},{"import": 1469,"src": 4861,"name": "default_instance","kind": "const","type": 2092,"value": "null"},{"import": 1469,"src": 4862,"name": "InitOsDataError"},{"import": 1469,"src": 4863,"name": "wakeup_bytes"},{"import": 1469,"src": 4864,"name": "initOsData"},{"import": 1469,"src": 4865,"name": "deinitOsData"},{"import": 1469,"src": 4866,"name": "dispatch"},{"import": 1469,"src": 4867,"name": "DelayQueue","kind": "const","type": 709,"value": 2093},{"import": 1469,"src": 4868,"name": "workerRun"},{"import": 1469,"src": 4869,"name": "posixFsRequest"},{"import": 1469,"src": 4870,"name": "posixFsCancel"},{"import": 1469,"src": 4871,"name": "posixFsRun"},{"import": 1469,"src": 4872,"name": "OsData","kind": "const","type": 709,"value": 2094},{"import": 1469,"src": 4873,"name": "KEventData"},{"import": 1469,"src": 4874,"name": "LinuxOsData","kind": "const","type": 709,"value": 2094},{"import": 1873,"src": 4875,"name": "advapi32"},{"import": 1873,"src": 4876,"name": "kernel32"},{"import": 1873,"src": 4877,"name": "ntdll"},{"import": 1873,"src": 4878,"name": "ole32"},{"import": 1873,"src": 4879,"name": "psapi"},{"import": 1873,"src": 4880,"name": "shell32"},{"import": 1873,"src": 4881,"name": "user32"},{"import": 1873,"src": 4882,"name": "ws2_32"},{"import": 1873,"src": 4883,"name": "gdi32"},{"import": 1873,"src": 4884,"name": "winmm"},{"import": 1873,"src": 4885,"name": "self_process_handle"},{"import": 1873,"src": 4886,"name": "OpenError"},{"import": 1873,"src": 4887,"name": "OpenFileOptions"},{"import": 1873,"src": 4888,"name": "OpenFile"},{"import": 1873,"src": 4889,"name": "CreatePipeError"},{"import": 1873,"src": 4890,"name": "CreatePipe"},{"import": 1873,"src": 4891,"name": "CreateEventEx"},{"import": 1873,"src": 4892,"name": "CreateEventExW"},{"import": 1873,"src": 4893,"name": "DeviceIoControlError"},{"import": 1873,"src": 4894,"name": "DeviceIoControl"},{"import": 1873,"src": 4895,"name": "GetOverlappedResult"},{"import": 1873,"src": 4896,"name": "SetHandleInformationError"},{"import": 1873,"src": 4897,"name": "SetHandleInformation"},{"import": 1873,"src": 4898,"name": "RtlGenRandomError"},{"import": 1873,"src": 4899,"name": "RtlGenRandom"},{"import": 1873,"src": 4900,"name": "WaitForSingleObjectError"},{"import": 1873,"src": 4901,"name": "WaitForSingleObject"},{"import": 1873,"src": 4902,"name": "WaitForSingleObjectEx"},{"import": 1873,"src": 4903,"name": "WaitForMultipleObjectsEx"},{"import": 1873,"src": 4904,"name": "CreateIoCompletionPortError"},{"import": 1873,"src": 4905,"name": "CreateIoCompletionPort"},{"import": 1873,"src": 4906,"name": "PostQueuedCompletionStatusError"},{"import": 1873,"src": 4907,"name": "PostQueuedCompletionStatus"},{"import": 1873,"src": 4908,"name": "GetQueuedCompletionStatusResult"},{"import": 1873,"src": 4909,"name": "GetQueuedCompletionStatus"},{"import": 1873,"src": 4910,"name": "GetQueuedCompletionStatusError"},{"import": 1873,"src": 4911,"name": "GetQueuedCompletionStatusEx"},{"import": 1873,"src": 4912,"name": "CloseHandle"},{"import": 1873,"src": 4913,"name": "FindClose"},{"import": 1873,"src": 4914,"name": "ReadFileError"},{"import": 1873,"src": 4915,"name": "ReadFile"},{"import": 1873,"src": 4916,"name": "WriteFileError"},{"import": 1873,"src": 4917,"name": "WriteFile"},{"import": 1873,"src": 4918,"name": "SetCurrentDirectoryError"},{"import": 1873,"src": 4919,"name": "SetCurrentDirectory"},{"import": 1873,"src": 4920,"name": "GetCurrentDirectoryError"},{"import": 1873,"src": 4921,"name": "GetCurrentDirectory"},{"import": 1873,"src": 4922,"name": "CreateSymbolicLinkError"},{"import": 1873,"src": 4923,"name": "CreateSymbolicLink"},{"import": 1873,"src": 4924,"name": "ReadLinkError"},{"import": 1873,"src": 4925,"name": "ReadLink"},{"import": 1873,"src": 4926,"name": "DeleteFileError"},{"import": 1873,"src": 4927,"name": "DeleteFileOptions"},{"import": 1873,"src": 4928,"name": "DeleteFile"},{"import": 1873,"src": 4929,"name": "MoveFileError"},{"import": 1873,"src": 4930,"name": "MoveFileEx"},{"import": 1873,"src": 4931,"name": "MoveFileExW"},{"import": 1873,"src": 4932,"name": "GetStdHandleError"},{"import": 1873,"src": 4933,"name": "GetStdHandle"},{"import": 1873,"src": 4934,"name": "SetFilePointerError"},{"import": 1873,"src": 4935,"name": "SetFilePointerEx_BEGIN"},{"import": 1873,"src": 4936,"name": "SetFilePointerEx_CURRENT"},{"import": 1873,"src": 4937,"name": "SetFilePointerEx_END"},{"import": 1873,"src": 4938,"name": "SetFilePointerEx_CURRENT_get"},{"import": 1873,"src": 4939,"name": "QueryObjectName"},{"import": 1873,"src": 4940,"name": "GetFinalPathNameByHandleError"},{"import": 1873,"src": 4941,"name": "GetFinalPathNameByHandleFormat"},{"import": 1873,"src": 4942,"name": "GetFinalPathNameByHandle"},{"import": 1873,"src": 4943,"name": "QueryInformationFileError"},{"import": 1873,"src": 4944,"name": "QueryInformationFile"},{"import": 1873,"src": 4945,"name": "GetFileSizeError"},{"import": 1873,"src": 4946,"name": "GetFileSizeEx"},{"import": 1873,"src": 4947,"name": "GetFileAttributesError"},{"import": 1873,"src": 4948,"name": "GetFileAttributes"},{"import": 1873,"src": 4949,"name": "GetFileAttributesW"},{"import": 1873,"src": 4950,"name": "WSAStartup"},{"import": 1873,"src": 4951,"name": "WSACleanup"},{"import": 1873,"src": 4952,"name": "WSASocketW"},{"import": 1873,"src": 4953,"name": "bind"},{"import": 1873,"src": 4954,"name": "listen"},{"import": 1873,"src": 4955,"name": "closesocket"},{"import": 1873,"src": 4956,"name": "accept"},{"import": 1873,"src": 4957,"name": "getsockname"},{"import": 1873,"src": 4958,"name": "getpeername"},{"import": 1873,"src": 4959,"name": "sendmsg"},{"import": 1873,"src": 4960,"name": "sendto"},{"import": 1873,"src": 4961,"name": "recvfrom"},{"import": 1873,"src": 4962,"name": "poll"},{"import": 1873,"src": 4963,"name": "WSAIoctl"},{"import": 1873,"src": 4964,"name": "GetModuleFileNameW"},{"import": 1873,"src": 4965,"name": "TerminateProcessError"},{"import": 1873,"src": 4966,"name": "TerminateProcess"},{"import": 1873,"src": 4967,"name": "VirtualAllocError"},{"import": 1873,"src": 4968,"name": "VirtualAlloc"},{"import": 1873,"src": 4969,"name": "VirtualFree"},{"import": 1873,"src": 4970,"name": "SetConsoleTextAttributeError"},{"import": 1873,"src": 4971,"name": "SetConsoleTextAttribute"},{"import": 1873,"src": 4972,"name": "SetConsoleCtrlHandler"},{"import": 1873,"src": 4973,"name": "SetFileCompletionNotificationModes"},{"import": 1873,"src": 4974,"name": "GetEnvironmentStringsError"},{"import": 1873,"src": 4975,"name": "GetEnvironmentStringsW"},{"import": 1873,"src": 4976,"name": "FreeEnvironmentStringsW"},{"import": 1873,"src": 4977,"name": "GetEnvironmentVariableError"},{"import": 1873,"src": 4978,"name": "GetEnvironmentVariableW"},{"import": 1873,"src": 4979,"name": "CreateProcessError"},{"import": 1873,"src": 4980,"name": "CreateProcessW"},{"import": 1873,"src": 4981,"name": "LoadLibraryError"},{"import": 1873,"src": 4982,"name": "LoadLibraryW"},{"import": 1873,"src": 4983,"name": "FreeLibrary"},{"import": 1873,"src": 4984,"name": "QueryPerformanceFrequency"},{"import": 1873,"src": 4985,"name": "QueryPerformanceCounter"},{"import": 1873,"src": 4986,"name": "InitOnceExecuteOnce"},{"import": 1873,"src": 4987,"name": "HeapFree"},{"import": 1873,"src": 4988,"name": "HeapDestroy"},{"import": 1873,"src": 4989,"name": "LocalFree"},{"import": 1873,"src": 4990,"name": "GetFileInformationByHandleError"},{"import": 1873,"src": 4991,"name": "GetFileInformationByHandle"},{"import": 1873,"src": 4992,"name": "SetFileTimeError"},{"import": 1873,"src": 4993,"name": "SetFileTime"},{"import": 1873,"src": 4994,"name": "LockFileError"},{"import": 1873,"src": 4995,"name": "LockFile"},{"import": 1873,"src": 4996,"name": "UnlockFileError"},{"import": 1873,"src": 4997,"name": "UnlockFile"},{"import": 1873,"src": 4998,"name": "teb"},{"import": 1873,"src": 4999,"name": "peb"},{"import": 1873,"src": 5000,"name": "fromSysTime"},{"import": 1873,"src": 5001,"name": "toSysTime"},{"import": 1873,"src": 5002,"name": "fileTimeToNanoSeconds"},{"import": 1873,"src": 5003,"name": "nanoSecondsToFileTime"},{"import": 1873,"src": 5004,"name": "PathSpace"},{"import": 1873,"src": 5005,"name": "RemoveDotDirsError"},{"import": 1873,"src": 5006,"name": "removeDotDirsSanitized"},{"import": 1873,"src": 5007,"name": "normalizePath"},{"import": 1873,"src": 5008,"name": "cStrToPrefixedFileW"},{"import": 1873,"src": 5009,"name": "sliceToPrefixedFileW"},{"import": 1873,"src": 5010,"name": "wToPrefixedFileW"},{"import": 1873,"src": 5011,"name": "loadWinsockExtensionFunction"},{"import": 1873,"src": 5012,"name": "unexpectedError"},{"import": 1873,"src": 5013,"name": "unexpectedWSAError"},{"import": 1873,"src": 5014,"name": "unexpectedStatus"},{"import": 1873,"src": 5015,"name": "SetThreadDescription"},{"import": 1873,"src": 5016,"name": "GetThreadDescription"},{"import": 1873,"src": 5017,"name": "Win32Error"},{"import": 1873,"src": 5018,"name": "NTSTATUS"},{"import": 1873,"src": 5019,"name": "LANG"},{"import": 1873,"src": 5020,"name": "SUBLANG"},{"import": 1873,"src": 5021,"name": "STD_INPUT_HANDLE"},{"import": 1873,"src": 5022,"name": "STD_OUTPUT_HANDLE"},{"import": 1873,"src": 5023,"name": "STD_ERROR_HANDLE"},{"import": 1873,"src": 5024,"name": "WINAPI"},{"import": 1873,"src": 5025,"name": "BOOL"},{"import": 1873,"src": 5026,"name": "BOOLEAN"},{"import": 1873,"src": 5027,"name": "BYTE"},{"import": 1873,"src": 5028,"name": "CHAR"},{"import": 1873,"src": 5029,"name": "UCHAR"},{"import": 1873,"src": 5030,"name": "FLOAT"},{"import": 1873,"src": 5031,"name": "HANDLE","kind": "const","type": 709,"value": 2097},{"import": 1873,"src": 5032,"name": "HCRYPTPROV"},{"import": 1873,"src": 5033,"name": "ATOM"},{"import": 1873,"src": 5034,"name": "HBRUSH"},{"import": 1873,"src": 5035,"name": "HCURSOR"},{"import": 1873,"src": 5036,"name": "HICON"},{"import": 1873,"src": 5037,"name": "HINSTANCE"},{"import": 1873,"src": 5038,"name": "HMENU"},{"import": 1873,"src": 5039,"name": "HMODULE"},{"import": 1873,"src": 5040,"name": "HWND"},{"import": 1873,"src": 5041,"name": "HDC"},{"import": 1873,"src": 5042,"name": "HGLRC"},{"import": 1873,"src": 5043,"name": "FARPROC"},{"import": 1873,"src": 5044,"name": "INT"},{"import": 1873,"src": 5045,"name": "LPCSTR"},{"import": 1873,"src": 5046,"name": "LPCVOID"},{"import": 1873,"src": 5047,"name": "LPSTR"},{"import": 1873,"src": 5048,"name": "LPVOID"},{"import": 1873,"src": 5049,"name": "LPWSTR"},{"import": 1873,"src": 5050,"name": "LPCWSTR"},{"import": 1873,"src": 5051,"name": "PVOID"},{"import": 1873,"src": 5052,"name": "PWSTR"},{"import": 1873,"src": 5053,"name": "SIZE_T"},{"import": 1873,"src": 5054,"name": "UINT"},{"import": 1873,"src": 5055,"name": "ULONG_PTR"},{"import": 1873,"src": 5056,"name": "LONG_PTR"},{"import": 1873,"src": 5057,"name": "DWORD_PTR"},{"import": 1873,"src": 5058,"name": "WCHAR"},{"import": 1873,"src": 5059,"name": "WORD"},{"import": 1873,"src": 5060,"name": "DWORD"},{"import": 1873,"src": 5061,"name": "DWORD64"},{"import": 1873,"src": 5062,"name": "LARGE_INTEGER"},{"import": 1873,"src": 5063,"name": "ULARGE_INTEGER"},{"import": 1873,"src": 5064,"name": "USHORT"},{"import": 1873,"src": 5065,"name": "SHORT"},{"import": 1873,"src": 5066,"name": "ULONG"},{"import": 1873,"src": 5067,"name": "LONG"},{"import": 1873,"src": 5068,"name": "ULONGLONG"},{"import": 1873,"src": 5069,"name": "LONGLONG"},{"import": 1873,"src": 5070,"name": "HLOCAL"},{"import": 1873,"src": 5071,"name": "LANGID"},{"import": 1873,"src": 5072,"name": "WPARAM"},{"import": 1873,"src": 5073,"name": "LPARAM"},{"import": 1873,"src": 5074,"name": "LRESULT"},{"import": 1873,"src": 5075,"name": "va_list"},{"import": 1873,"src": 5076,"name": "TRUE"},{"import": 1873,"src": 5077,"name": "FALSE"},{"import": 1873,"src": 5078,"name": "DEVICE_TYPE"},{"import": 1873,"src": 5079,"name": "FILE_DEVICE_BEEP"},{"import": 1873,"src": 5080,"name": "FILE_DEVICE_CD_ROM"},{"import": 1873,"src": 5081,"name": "FILE_DEVICE_CD_ROM_FILE_SYSTEM"},{"import": 1873,"src": 5082,"name": "FILE_DEVICE_CONTROLLER"},{"import": 1873,"src": 5083,"name": "FILE_DEVICE_DATALINK"},{"import": 1873,"src": 5084,"name": "FILE_DEVICE_DFS"},{"import": 1873,"src": 5085,"name": "FILE_DEVICE_DISK"},{"import": 1873,"src": 5086,"name": "FILE_DEVICE_DISK_FILE_SYSTEM"},{"import": 1873,"src": 5087,"name": "FILE_DEVICE_FILE_SYSTEM"},{"import": 1873,"src": 5088,"name": "FILE_DEVICE_INPORT_PORT"},{"import": 1873,"src": 5089,"name": "FILE_DEVICE_KEYBOARD"},{"import": 1873,"src": 5090,"name": "FILE_DEVICE_MAILSLOT"},{"import": 1873,"src": 5091,"name": "FILE_DEVICE_MIDI_IN"},{"import": 1873,"src": 5092,"name": "FILE_DEVICE_MIDI_OUT"},{"import": 1873,"src": 5093,"name": "FILE_DEVICE_MOUSE"},{"import": 1873,"src": 5094,"name": "FILE_DEVICE_MULTI_UNC_PROVIDER"},{"import": 1873,"src": 5095,"name": "FILE_DEVICE_NAMED_PIPE"},{"import": 1873,"src": 5096,"name": "FILE_DEVICE_NETWORK"},{"import": 1873,"src": 5097,"name": "FILE_DEVICE_NETWORK_BROWSER"},{"import": 1873,"src": 5098,"name": "FILE_DEVICE_NETWORK_FILE_SYSTEM"},{"import": 1873,"src": 5099,"name": "FILE_DEVICE_NULL"},{"import": 1873,"src": 5100,"name": "FILE_DEVICE_PARALLEL_PORT"},{"import": 1873,"src": 5101,"name": "FILE_DEVICE_PHYSICAL_NETCARD"},{"import": 1873,"src": 5102,"name": "FILE_DEVICE_PRINTER"},{"import": 1873,"src": 5103,"name": "FILE_DEVICE_SCANNER"},{"import": 1873,"src": 5104,"name": "FILE_DEVICE_SERIAL_MOUSE_PORT"},{"import": 1873,"src": 5105,"name": "FILE_DEVICE_SERIAL_PORT"},{"import": 1873,"src": 5106,"name": "FILE_DEVICE_SCREEN"},{"import": 1873,"src": 5107,"name": "FILE_DEVICE_SOUND"},{"import": 1873,"src": 5108,"name": "FILE_DEVICE_STREAMS"},{"import": 1873,"src": 5109,"name": "FILE_DEVICE_TAPE"},{"import": 1873,"src": 5110,"name": "FILE_DEVICE_TAPE_FILE_SYSTEM"},{"import": 1873,"src": 5111,"name": "FILE_DEVICE_TRANSPORT"},{"import": 1873,"src": 5112,"name": "FILE_DEVICE_UNKNOWN"},{"import": 1873,"src": 5113,"name": "FILE_DEVICE_VIDEO"},{"import": 1873,"src": 5114,"name": "FILE_DEVICE_VIRTUAL_DISK"},{"import": 1873,"src": 5115,"name": "FILE_DEVICE_WAVE_IN"},{"import": 1873,"src": 5116,"name": "FILE_DEVICE_WAVE_OUT"},{"import": 1873,"src": 5117,"name": "FILE_DEVICE_8042_PORT"},{"import": 1873,"src": 5118,"name": "FILE_DEVICE_NETWORK_REDIRECTOR"},{"import": 1873,"src": 5119,"name": "FILE_DEVICE_BATTERY"},{"import": 1873,"src": 5120,"name": "FILE_DEVICE_BUS_EXTENDER"},{"import": 1873,"src": 5121,"name": "FILE_DEVICE_MODEM"},{"import": 1873,"src": 5122,"name": "FILE_DEVICE_VDM"},{"import": 1873,"src": 5123,"name": "FILE_DEVICE_MASS_STORAGE"},{"import": 1873,"src": 5124,"name": "FILE_DEVICE_SMB"},{"import": 1873,"src": 5125,"name": "FILE_DEVICE_KS"},{"import": 1873,"src": 5126,"name": "FILE_DEVICE_CHANGER"},{"import": 1873,"src": 5127,"name": "FILE_DEVICE_SMARTCARD"},{"import": 1873,"src": 5128,"name": "FILE_DEVICE_ACPI"},{"import": 1873,"src": 5129,"name": "FILE_DEVICE_DVD"},{"import": 1873,"src": 5130,"name": "FILE_DEVICE_FULLSCREEN_VIDEO"},{"import": 1873,"src": 5131,"name": "FILE_DEVICE_DFS_FILE_SYSTEM"},{"import": 1873,"src": 5132,"name": "FILE_DEVICE_DFS_VOLUME"},{"import": 1873,"src": 5133,"name": "FILE_DEVICE_SERENUM"},{"import": 1873,"src": 5134,"name": "FILE_DEVICE_TERMSRV"},{"import": 1873,"src": 5135,"name": "FILE_DEVICE_KSEC"},{"import": 1873,"src": 5136,"name": "FILE_DEVICE_FIPS"},{"import": 1873,"src": 5137,"name": "FILE_DEVICE_INFINIBAND"},{"import": 1873,"src": 5138,"name": "FILE_DEVICE_VMBUS"},{"import": 1873,"src": 5139,"name": "FILE_DEVICE_CRYPT_PROVIDER"},{"import": 1873,"src": 5140,"name": "FILE_DEVICE_WPD"},{"import": 1873,"src": 5141,"name": "FILE_DEVICE_BLUETOOTH"},{"import": 1873,"src": 5142,"name": "FILE_DEVICE_MT_COMPOSITE"},{"import": 1873,"src": 5143,"name": "FILE_DEVICE_MT_TRANSPORT"},{"import": 1873,"src": 5144,"name": "FILE_DEVICE_BIOMETRIC"},{"import": 1873,"src": 5145,"name": "FILE_DEVICE_PMI"},{"import": 1873,"src": 5146,"name": "FILE_DEVICE_EHSTOR"},{"import": 1873,"src": 5147,"name": "FILE_DEVICE_DEVAPI"},{"import": 1873,"src": 5148,"name": "FILE_DEVICE_GPIO"},{"import": 1873,"src": 5149,"name": "FILE_DEVICE_USBEX"},{"import": 1873,"src": 5150,"name": "FILE_DEVICE_CONSOLE"},{"import": 1873,"src": 5151,"name": "FILE_DEVICE_NFP"},{"import": 1873,"src": 5152,"name": "FILE_DEVICE_SYSENV"},{"import": 1873,"src": 5153,"name": "FILE_DEVICE_VIRTUAL_BLOCK"},{"import": 1873,"src": 5154,"name": "FILE_DEVICE_POINT_OF_SERVICE"},{"import": 1873,"src": 5155,"name": "FILE_DEVICE_STORAGE_REPLICATION"},{"import": 1873,"src": 5156,"name": "FILE_DEVICE_TRUST_ENV"},{"import": 1873,"src": 5157,"name": "FILE_DEVICE_UCM"},{"import": 1873,"src": 5158,"name": "FILE_DEVICE_UCMTCPCI"},{"import": 1873,"src": 5159,"name": "FILE_DEVICE_PERSISTENT_MEMORY"},{"import": 1873,"src": 5160,"name": "FILE_DEVICE_NVDIMM"},{"import": 1873,"src": 5161,"name": "FILE_DEVICE_HOLOGRAPHIC"},{"import": 1873,"src": 5162,"name": "FILE_DEVICE_SDFXHCI"},{"import": 1873,"src": 5163,"name": "TransferType"},{"import": 1873,"src": 5164,"name": "FILE_ANY_ACCESS"},{"import": 1873,"src": 5165,"name": "FILE_READ_ACCESS"},{"import": 1873,"src": 5166,"name": "FILE_WRITE_ACCESS"},{"import": 1873,"src": 5167,"name": "CTL_CODE"},{"import": 1873,"src": 5168,"name": "INVALID_HANDLE_VALUE"},{"import": 1873,"src": 5169,"name": "INVALID_FILE_ATTRIBUTES"},{"import": 1873,"src": 5170,"name": "FILE_ALL_INFORMATION"},{"import": 1873,"src": 5171,"name": "FILE_BASIC_INFORMATION"},{"import": 1873,"src": 5172,"name": "FILE_STANDARD_INFORMATION"},{"import": 1873,"src": 5173,"name": "FILE_INTERNAL_INFORMATION"},{"import": 1873,"src": 5174,"name": "FILE_EA_INFORMATION"},{"import": 1873,"src": 5175,"name": "FILE_ACCESS_INFORMATION"},{"import": 1873,"src": 5176,"name": "FILE_POSITION_INFORMATION"},{"import": 1873,"src": 5177,"name": "FILE_END_OF_FILE_INFORMATION"},{"import": 1873,"src": 5178,"name": "FILE_MODE_INFORMATION"},{"import": 1873,"src": 5179,"name": "FILE_ALIGNMENT_INFORMATION"},{"import": 1873,"src": 5180,"name": "FILE_NAME_INFORMATION"},{"import": 1873,"src": 5181,"name": "FILE_RENAME_INFORMATION"},{"import": 1873,"src": 5182,"name": "IO_STATUS_BLOCK"},{"import": 1873,"src": 5183,"name": "FILE_INFORMATION_CLASS"},{"import": 1873,"src": 5184,"name": "OVERLAPPED"},{"import": 1873,"src": 5185,"name": "OVERLAPPED_ENTRY"},{"import": 1873,"src": 5186,"name": "MAX_PATH"},{"import": 1873,"src": 5187,"name": "FILE_INFO_BY_HANDLE_CLASS"},{"import": 1873,"src": 5188,"name": "FileBasicInfo"},{"import": 1873,"src": 5189,"name": "FileStandardInfo"},{"import": 1873,"src": 5190,"name": "FileNameInfo"},{"import": 1873,"src": 5191,"name": "FileRenameInfo"},{"import": 1873,"src": 5192,"name": "FileDispositionInfo"},{"import": 1873,"src": 5193,"name": "FileAllocationInfo"},{"import": 1873,"src": 5194,"name": "FileEndOfFileInfo"},{"import": 1873,"src": 5195,"name": "FileStreamInfo"},{"import": 1873,"src": 5196,"name": "FileCompressionInfo"},{"import": 1873,"src": 5197,"name": "FileAttributeTagInfo"},{"import": 1873,"src": 5198,"name": "FileIdBothDirectoryInfo"},{"import": 1873,"src": 5199,"name": "FileIdBothDirectoryRestartInfo"},{"import": 1873,"src": 5200,"name": "FileIoPriorityHintInfo"},{"import": 1873,"src": 5201,"name": "FileRemoteProtocolInfo"},{"import": 1873,"src": 5202,"name": "FileFullDirectoryInfo"},{"import": 1873,"src": 5203,"name": "FileFullDirectoryRestartInfo"},{"import": 1873,"src": 5204,"name": "FileStorageInfo"},{"import": 1873,"src": 5205,"name": "FileAlignmentInfo"},{"import": 1873,"src": 5206,"name": "FileIdInfo"},{"import": 1873,"src": 5207,"name": "FileIdExtdDirectoryInfo"},{"import": 1873,"src": 5208,"name": "FileIdExtdDirectoryRestartInfo"},{"import": 1873,"src": 5209,"name": "BY_HANDLE_FILE_INFORMATION"},{"import": 1873,"src": 5210,"name": "FILE_NAME_INFO"},{"import": 1873,"src": 5211,"name": "FILE_NAME_NORMALIZED"},{"import": 1873,"src": 5212,"name": "FILE_NAME_OPENED"},{"import": 1873,"src": 5213,"name": "VOLUME_NAME_DOS"},{"import": 1873,"src": 5214,"name": "VOLUME_NAME_GUID"},{"import": 1873,"src": 5215,"name": "VOLUME_NAME_NONE"},{"import": 1873,"src": 5216,"name": "VOLUME_NAME_NT"},{"import": 1873,"src": 5217,"name": "SECURITY_ATTRIBUTES"},{"import": 1873,"src": 5218,"name": "PIPE_ACCESS_INBOUND"},{"import": 1873,"src": 5219,"name": "PIPE_ACCESS_OUTBOUND"},{"import": 1873,"src": 5220,"name": "PIPE_ACCESS_DUPLEX"},{"import": 1873,"src": 5221,"name": "PIPE_TYPE_BYTE"},{"import": 1873,"src": 5222,"name": "PIPE_TYPE_MESSAGE"},{"import": 1873,"src": 5223,"name": "PIPE_READMODE_BYTE"},{"import": 1873,"src": 5224,"name": "PIPE_READMODE_MESSAGE"},{"import": 1873,"src": 5225,"name": "PIPE_WAIT"},{"import": 1873,"src": 5226,"name": "PIPE_NOWAIT"},{"import": 1873,"src": 5227,"name": "GENERIC_READ"},{"import": 1873,"src": 5228,"name": "GENERIC_WRITE"},{"import": 1873,"src": 5229,"name": "GENERIC_EXECUTE"},{"import": 1873,"src": 5230,"name": "GENERIC_ALL"},{"import": 1873,"src": 5231,"name": "FILE_SHARE_DELETE"},{"import": 1873,"src": 5232,"name": "FILE_SHARE_READ"},{"import": 1873,"src": 5233,"name": "FILE_SHARE_WRITE"},{"import": 1873,"src": 5234,"name": "DELETE"},{"import": 1873,"src": 5235,"name": "READ_CONTROL"},{"import": 1873,"src": 5236,"name": "WRITE_DAC"},{"import": 1873,"src": 5237,"name": "WRITE_OWNER"},{"import": 1873,"src": 5238,"name": "SYNCHRONIZE"},{"import": 1873,"src": 5239,"name": "STANDARD_RIGHTS_READ"},{"import": 1873,"src": 5240,"name": "STANDARD_RIGHTS_WRITE"},{"import": 1873,"src": 5241,"name": "STANDARD_RIGHTS_EXECUTE"},{"import": 1873,"src": 5242,"name": "STANDARD_RIGHTS_REQUIRED"},{"import": 1873,"src": 5243,"name": "FILE_SUPERSEDE"},{"import": 1873,"src": 5244,"name": "FILE_OPEN"},{"import": 1873,"src": 5245,"name": "FILE_CREATE"},{"import": 1873,"src": 5246,"name": "FILE_OPEN_IF"},{"import": 1873,"src": 5247,"name": "FILE_OVERWRITE"},{"import": 1873,"src": 5248,"name": "FILE_OVERWRITE_IF"},{"import": 1873,"src": 5249,"name": "FILE_MAXIMUM_DISPOSITION"},{"import": 1873,"src": 5250,"name": "FILE_READ_DATA"},{"import": 1873,"src": 5251,"name": "FILE_LIST_DIRECTORY"},{"import": 1873,"src": 5252,"name": "FILE_WRITE_DATA"},{"import": 1873,"src": 5253,"name": "FILE_ADD_FILE"},{"import": 1873,"src": 5254,"name": "FILE_APPEND_DATA"},{"import": 1873,"src": 5255,"name": "FILE_ADD_SUBDIRECTORY"},{"import": 1873,"src": 5256,"name": "FILE_CREATE_PIPE_INSTANCE"},{"import": 1873,"src": 5257,"name": "FILE_READ_EA"},{"import": 1873,"src": 5258,"name": "FILE_WRITE_EA"},{"import": 1873,"src": 5259,"name": "FILE_EXECUTE"},{"import": 1873,"src": 5260,"name": "FILE_TRAVERSE"},{"import": 1873,"src": 5261,"name": "FILE_DELETE_CHILD"},{"import": 1873,"src": 5262,"name": "FILE_READ_ATTRIBUTES"},{"import": 1873,"src": 5263,"name": "FILE_WRITE_ATTRIBUTES"},{"import": 1873,"src": 5264,"name": "FILE_DIRECTORY_FILE"},{"import": 1873,"src": 5265,"name": "FILE_WRITE_THROUGH"},{"import": 1873,"src": 5266,"name": "FILE_SEQUENTIAL_ONLY"},{"import": 1873,"src": 5267,"name": "FILE_NO_INTERMEDIATE_BUFFERING"},{"import": 1873,"src": 5268,"name": "FILE_SYNCHRONOUS_IO_ALERT"},{"import": 1873,"src": 5269,"name": "FILE_SYNCHRONOUS_IO_NONALERT"},{"import": 1873,"src": 5270,"name": "FILE_NON_DIRECTORY_FILE"},{"import": 1873,"src": 5271,"name": "FILE_CREATE_TREE_CONNECTION"},{"import": 1873,"src": 5272,"name": "FILE_COMPLETE_IF_OPLOCKED"},{"import": 1873,"src": 5273,"name": "FILE_NO_EA_KNOWLEDGE"},{"import": 1873,"src": 5274,"name": "FILE_OPEN_FOR_RECOVERY"},{"import": 1873,"src": 5275,"name": "FILE_RANDOM_ACCESS"},{"import": 1873,"src": 5276,"name": "FILE_DELETE_ON_CLOSE"},{"import": 1873,"src": 5277,"name": "FILE_OPEN_BY_FILE_ID"},{"import": 1873,"src": 5278,"name": "FILE_OPEN_FOR_BACKUP_INTENT"},{"import": 1873,"src": 5279,"name": "FILE_NO_COMPRESSION"},{"import": 1873,"src": 5280,"name": "FILE_RESERVE_OPFILTER"},{"import": 1873,"src": 5281,"name": "FILE_OPEN_REPARSE_POINT"},{"import": 1873,"src": 5282,"name": "FILE_OPEN_OFFLINE_FILE"},{"import": 1873,"src": 5283,"name": "FILE_OPEN_FOR_FREE_SPACE_QUERY"},{"import": 1873,"src": 5284,"name": "CREATE_ALWAYS"},{"import": 1873,"src": 5285,"name": "CREATE_NEW"},{"import": 1873,"src": 5286,"name": "OPEN_ALWAYS"},{"import": 1873,"src": 5287,"name": "OPEN_EXISTING"},{"import": 1873,"src": 5288,"name": "TRUNCATE_EXISTING"},{"import": 1873,"src": 5289,"name": "FILE_ATTRIBUTE_ARCHIVE"},{"import": 1873,"src": 5290,"name": "FILE_ATTRIBUTE_COMPRESSED"},{"import": 1873,"src": 5291,"name": "FILE_ATTRIBUTE_DEVICE"},{"import": 1873,"src": 5292,"name": "FILE_ATTRIBUTE_DIRECTORY"},{"import": 1873,"src": 5293,"name": "FILE_ATTRIBUTE_ENCRYPTED"},{"import": 1873,"src": 5294,"name": "FILE_ATTRIBUTE_HIDDEN"},{"import": 1873,"src": 5295,"name": "FILE_ATTRIBUTE_INTEGRITY_STREAM"},{"import": 1873,"src": 5296,"name": "FILE_ATTRIBUTE_NORMAL"},{"import": 1873,"src": 5297,"name": "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"},{"import": 1873,"src": 5298,"name": "FILE_ATTRIBUTE_NO_SCRUB_DATA"},{"import": 1873,"src": 5299,"name": "FILE_ATTRIBUTE_OFFLINE"},{"import": 1873,"src": 5300,"name": "FILE_ATTRIBUTE_READONLY"},{"import": 1873,"src": 5301,"name": "FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS"},{"import": 1873,"src": 5302,"name": "FILE_ATTRIBUTE_RECALL_ON_OPEN"},{"import": 1873,"src": 5303,"name": "FILE_ATTRIBUTE_REPARSE_POINT"},{"import": 1873,"src": 5304,"name": "FILE_ATTRIBUTE_SPARSE_FILE"},{"import": 1873,"src": 5305,"name": "FILE_ATTRIBUTE_SYSTEM"},{"import": 1873,"src": 5306,"name": "FILE_ATTRIBUTE_TEMPORARY"},{"import": 1873,"src": 5307,"name": "FILE_ATTRIBUTE_VIRTUAL"},{"import": 1873,"src": 5308,"name": "CREATE_EVENT_INITIAL_SET"},{"import": 1873,"src": 5309,"name": "CREATE_EVENT_MANUAL_RESET"},{"import": 1873,"src": 5310,"name": "EVENT_ALL_ACCESS"},{"import": 1873,"src": 5311,"name": "EVENT_MODIFY_STATE"},{"import": 1873,"src": 5312,"name": "PROCESS_INFORMATION"},{"import": 1873,"src": 5313,"name": "STARTUPINFOW"},{"import": 1873,"src": 5314,"name": "STARTF_FORCEONFEEDBACK"},{"import": 1873,"src": 5315,"name": "STARTF_FORCEOFFFEEDBACK"},{"import": 1873,"src": 5316,"name": "STARTF_PREVENTPINNING"},{"import": 1873,"src": 5317,"name": "STARTF_RUNFULLSCREEN"},{"import": 1873,"src": 5318,"name": "STARTF_TITLEISAPPID"},{"import": 1873,"src": 5319,"name": "STARTF_TITLEISLINKNAME"},{"import": 1873,"src": 5320,"name": "STARTF_UNTRUSTEDSOURCE"},{"import": 1873,"src": 5321,"name": "STARTF_USECOUNTCHARS"},{"import": 1873,"src": 5322,"name": "STARTF_USEFILLATTRIBUTE"},{"import": 1873,"src": 5323,"name": "STARTF_USEHOTKEY"},{"import": 1873,"src": 5324,"name": "STARTF_USEPOSITION"},{"import": 1873,"src": 5325,"name": "STARTF_USESHOWWINDOW"},{"import": 1873,"src": 5326,"name": "STARTF_USESIZE"},{"import": 1873,"src": 5327,"name": "STARTF_USESTDHANDLES"},{"import": 1873,"src": 5328,"name": "INFINITE"},{"import": 1873,"src": 5329,"name": "MAXIMUM_WAIT_OBJECTS"},{"import": 1873,"src": 5330,"name": "WAIT_ABANDONED"},{"import": 1873,"src": 5331,"name": "WAIT_ABANDONED_0"},{"import": 1873,"src": 5332,"name": "WAIT_OBJECT_0"},{"import": 1873,"src": 5333,"name": "WAIT_TIMEOUT"},{"import": 1873,"src": 5334,"name": "WAIT_FAILED"},{"import": 1873,"src": 5335,"name": "HANDLE_FLAG_INHERIT"},{"import": 1873,"src": 5336,"name": "HANDLE_FLAG_PROTECT_FROM_CLOSE"},{"import": 1873,"src": 5337,"name": "MOVEFILE_COPY_ALLOWED"},{"import": 1873,"src": 5338,"name": "MOVEFILE_CREATE_HARDLINK"},{"import": 1873,"src": 5339,"name": "MOVEFILE_DELAY_UNTIL_REBOOT"},{"import": 1873,"src": 5340,"name": "MOVEFILE_FAIL_IF_NOT_TRACKABLE"},{"import": 1873,"src": 5341,"name": "MOVEFILE_REPLACE_EXISTING"},{"import": 1873,"src": 5342,"name": "MOVEFILE_WRITE_THROUGH"},{"import": 1873,"src": 5343,"name": "FILE_BEGIN"},{"import": 1873,"src": 5344,"name": "FILE_CURRENT"},{"import": 1873,"src": 5345,"name": "FILE_END"},{"import": 1873,"src": 5346,"name": "HEAP_CREATE_ENABLE_EXECUTE"},{"import": 1873,"src": 5347,"name": "HEAP_REALLOC_IN_PLACE_ONLY"},{"import": 1873,"src": 5348,"name": "HEAP_GENERATE_EXCEPTIONS"},{"import": 1873,"src": 5349,"name": "HEAP_NO_SERIALIZE"},{"import": 1873,"src": 5350,"name": "MEM_COMMIT"},{"import": 1873,"src": 5351,"name": "MEM_RESERVE"},{"import": 1873,"src": 5352,"name": "MEM_RESET"},{"import": 1873,"src": 5353,"name": "MEM_RESET_UNDO"},{"import": 1873,"src": 5354,"name": "MEM_LARGE_PAGES"},{"import": 1873,"src": 5355,"name": "MEM_PHYSICAL"},{"import": 1873,"src": 5356,"name": "MEM_TOP_DOWN"},{"import": 1873,"src": 5357,"name": "MEM_WRITE_WATCH"},{"import": 1873,"src": 5358,"name": "PAGE_EXECUTE"},{"import": 1873,"src": 5359,"name": "PAGE_EXECUTE_READ"},{"import": 1873,"src": 5360,"name": "PAGE_EXECUTE_READWRITE"},{"import": 1873,"src": 5361,"name": "PAGE_EXECUTE_WRITECOPY"},{"import": 1873,"src": 5362,"name": "PAGE_NOACCESS"},{"import": 1873,"src": 5363,"name": "PAGE_READONLY"},{"import": 1873,"src": 5364,"name": "PAGE_READWRITE"},{"import": 1873,"src": 5365,"name": "PAGE_WRITECOPY"},{"import": 1873,"src": 5366,"name": "PAGE_TARGETS_INVALID"},{"import": 1873,"src": 5367,"name": "PAGE_TARGETS_NO_UPDATE"},{"import": 1873,"src": 5368,"name": "PAGE_GUARD"},{"import": 1873,"src": 5369,"name": "PAGE_NOCACHE"},{"import": 1873,"src": 5370,"name": "PAGE_WRITECOMBINE"},{"import": 1873,"src": 5371,"name": "MEM_COALESCE_PLACEHOLDERS"},{"import": 1873,"src": 5372,"name": "MEM_RESERVE_PLACEHOLDERS"},{"import": 1873,"src": 5373,"name": "MEM_DECOMMIT"},{"import": 1873,"src": 5374,"name": "MEM_RELEASE"},{"import": 1873,"src": 5375,"name": "PTHREAD_START_ROUTINE"},{"import": 1873,"src": 5376,"name": "LPTHREAD_START_ROUTINE"},{"import": 1873,"src": 5377,"name": "WIN32_FIND_DATAW"},{"import": 1873,"src": 5378,"name": "FILETIME"},{"import": 1873,"src": 5379,"name": "SYSTEM_INFO"},{"import": 1873,"src": 5380,"name": "HRESULT"},{"import": 1873,"src": 5381,"name": "KNOWNFOLDERID"},{"import": 1873,"src": 5382,"name": "GUID"},{"import": 1873,"src": 5383,"name": "FOLDERID_LocalAppData"},{"import": 1873,"src": 5384,"name": "KF_FLAG_DEFAULT"},{"import": 1873,"src": 5385,"name": "KF_FLAG_NO_APPCONTAINER_REDIRECTION"},{"import": 1873,"src": 5386,"name": "KF_FLAG_CREATE"},{"import": 1873,"src": 5387,"name": "KF_FLAG_DONT_VERIFY"},{"import": 1873,"src": 5388,"name": "KF_FLAG_DONT_UNEXPAND"},{"import": 1873,"src": 5389,"name": "KF_FLAG_NO_ALIAS"},{"import": 1873,"src": 5390,"name": "KF_FLAG_INIT"},{"import": 1873,"src": 5391,"name": "KF_FLAG_DEFAULT_PATH"},{"import": 1873,"src": 5392,"name": "KF_FLAG_NOT_PARENT_RELATIVE"},{"import": 1873,"src": 5393,"name": "KF_FLAG_SIMPLE_IDLIST"},{"import": 1873,"src": 5394,"name": "KF_FLAG_ALIAS_ONLY"},{"import": 1873,"src": 5395,"name": "S_OK"},{"import": 1873,"src": 5396,"name": "E_NOTIMPL"},{"import": 1873,"src": 5397,"name": "E_NOINTERFACE"},{"import": 1873,"src": 5398,"name": "E_POINTER"},{"import": 1873,"src": 5399,"name": "E_ABORT"},{"import": 1873,"src": 5400,"name": "E_FAIL"},{"import": 1873,"src": 5401,"name": "E_UNEXPECTED"},{"import": 1873,"src": 5402,"name": "E_ACCESSDENIED"},{"import": 1873,"src": 5403,"name": "E_HANDLE"},{"import": 1873,"src": 5404,"name": "E_OUTOFMEMORY"},{"import": 1873,"src": 5405,"name": "E_INVALIDARG"},{"import": 1873,"src": 5406,"name": "FILE_FLAG_BACKUP_SEMANTICS"},{"import": 1873,"src": 5407,"name": "FILE_FLAG_DELETE_ON_CLOSE"},{"import": 1873,"src": 5408,"name": "FILE_FLAG_NO_BUFFERING"},{"import": 1873,"src": 5409,"name": "FILE_FLAG_OPEN_NO_RECALL"},{"import": 1873,"src": 5410,"name": "FILE_FLAG_OPEN_REPARSE_POINT"},{"import": 1873,"src": 5411,"name": "FILE_FLAG_OVERLAPPED"},{"import": 1873,"src": 5412,"name": "FILE_FLAG_POSIX_SEMANTICS"},{"import": 1873,"src": 5413,"name": "FILE_FLAG_RANDOM_ACCESS"},{"import": 1873,"src": 5414,"name": "FILE_FLAG_SESSION_AWARE"},{"import": 1873,"src": 5415,"name": "FILE_FLAG_SEQUENTIAL_SCAN"},{"import": 1873,"src": 5416,"name": "FILE_FLAG_WRITE_THROUGH"},{"import": 1873,"src": 5417,"name": "RECT"},{"import": 1873,"src": 5418,"name": "SMALL_RECT"},{"import": 1873,"src": 5419,"name": "POINT"},{"import": 1873,"src": 5420,"name": "COORD"},{"import": 1873,"src": 5421,"name": "CREATE_UNICODE_ENVIRONMENT"},{"import": 1873,"src": 5422,"name": "TLS_OUT_OF_INDEXES"},{"import": 1873,"src": 5423,"name": "IMAGE_TLS_DIRECTORY"},{"import": 1873,"src": 5424,"name": "IMAGE_TLS_DIRECTORY64"},{"import": 1873,"src": 5425,"name": "IMAGE_TLS_DIRECTORY32"},{"import": 1873,"src": 5426,"name": "PIMAGE_TLS_CALLBACK"},{"import": 1873,"src": 5427,"name": "PROV_RSA_FULL"},{"import": 1873,"src": 5428,"name": "REGSAM"},{"import": 1873,"src": 5429,"name": "ACCESS_MASK"},{"import": 1873,"src": 5430,"name": "HKEY"},{"import": 1873,"src": 5431,"name": "HKEY__"},{"import": 1873,"src": 5432,"name": "LSTATUS"},{"import": 1873,"src": 5433,"name": "FILE_NOTIFY_INFORMATION"},{"import": 1873,"src": 5434,"name": "FILE_ACTION_ADDED"},{"import": 1873,"src": 5435,"name": "FILE_ACTION_REMOVED"},{"import": 1873,"src": 5436,"name": "FILE_ACTION_MODIFIED"},{"import": 1873,"src": 5437,"name": "FILE_ACTION_RENAMED_OLD_NAME"},{"import": 1873,"src": 5438,"name": "FILE_ACTION_RENAMED_NEW_NAME"},{"import": 1873,"src": 5439,"name": "LPOVERLAPPED_COMPLETION_ROUTINE"},{"import": 1873,"src": 5440,"name": "FILE_NOTIFY_CHANGE_CREATION"},{"import": 1873,"src": 5441,"name": "FILE_NOTIFY_CHANGE_SIZE"},{"import": 1873,"src": 5442,"name": "FILE_NOTIFY_CHANGE_SECURITY"},{"import": 1873,"src": 5443,"name": "FILE_NOTIFY_CHANGE_LAST_ACCESS"},{"import": 1873,"src": 5444,"name": "FILE_NOTIFY_CHANGE_LAST_WRITE"},{"import": 1873,"src": 5445,"name": "FILE_NOTIFY_CHANGE_DIR_NAME"},{"import": 1873,"src": 5446,"name": "FILE_NOTIFY_CHANGE_FILE_NAME"},{"import": 1873,"src": 5447,"name": "FILE_NOTIFY_CHANGE_ATTRIBUTES"},{"import": 1873,"src": 5448,"name": "CONSOLE_SCREEN_BUFFER_INFO"},{"import": 1873,"src": 5449,"name": "FOREGROUND_BLUE"},{"import": 1873,"src": 5450,"name": "FOREGROUND_GREEN"},{"import": 1873,"src": 5451,"name": "FOREGROUND_RED"},{"import": 1873,"src": 5452,"name": "FOREGROUND_INTENSITY"},{"import": 1873,"src": 5453,"name": "LIST_ENTRY"},{"import": 1873,"src": 5454,"name": "RTL_CRITICAL_SECTION_DEBUG"},{"import": 1873,"src": 5455,"name": "RTL_CRITICAL_SECTION"},{"import": 1873,"src": 5456,"name": "CRITICAL_SECTION"},{"import": 1873,"src": 5457,"name": "INIT_ONCE"},{"import": 1873,"src": 5458,"name": "INIT_ONCE_STATIC_INIT"},{"import": 1873,"src": 5459,"name": "INIT_ONCE_FN"},{"import": 1873,"src": 5460,"name": "RTL_RUN_ONCE"},{"import": 1873,"src": 5461,"name": "RTL_RUN_ONCE_INIT"},{"import": 1873,"src": 5462,"name": "COINIT_APARTMENTTHREADED"},{"import": 1873,"src": 5463,"name": "COINIT_MULTITHREADED"},{"import": 1873,"src": 5464,"name": "COINIT_DISABLE_OLE1DDE"},{"import": 1873,"src": 5465,"name": "COINIT_SPEED_OVER_MEMORY"},{"import": 1873,"src": 5466,"name": "COINIT"},{"import": 1873,"src": 5467,"name": "PATH_MAX_WIDE"},{"import": 1873,"src": 5468,"name": "FORMAT_MESSAGE_ALLOCATE_BUFFER"},{"import": 1873,"src": 5469,"name": "FORMAT_MESSAGE_ARGUMENT_ARRAY"},{"import": 1873,"src": 5470,"name": "FORMAT_MESSAGE_FROM_HMODULE"},{"import": 1873,"src": 5471,"name": "FORMAT_MESSAGE_FROM_STRING"},{"import": 1873,"src": 5472,"name": "FORMAT_MESSAGE_FROM_SYSTEM"},{"import": 1873,"src": 5473,"name": "FORMAT_MESSAGE_IGNORE_INSERTS"},{"import": 1873,"src": 5474,"name": "FORMAT_MESSAGE_MAX_WIDTH_MASK"},{"import": 1873,"src": 5475,"name": "EXCEPTION_DATATYPE_MISALIGNMENT"},{"import": 1873,"src": 5476,"name": "EXCEPTION_ACCESS_VIOLATION"},{"import": 1873,"src": 5477,"name": "EXCEPTION_ILLEGAL_INSTRUCTION"},{"import": 1873,"src": 5478,"name": "EXCEPTION_STACK_OVERFLOW"},{"import": 1873,"src": 5479,"name": "EXCEPTION_CONTINUE_SEARCH"},{"import": 1873,"src": 5480,"name": "EXCEPTION_RECORD"},{"import": 1873,"src": 5481,"name": "EXCEPTION_POINTERS"},{"import": 1873,"src": 5482,"name": "VECTORED_EXCEPTION_HANDLER"},{"import": 1873,"src": 5483,"name": "OBJECT_ATTRIBUTES"},{"import": 1873,"src": 5484,"name": "OBJ_INHERIT"},{"import": 1873,"src": 5485,"name": "OBJ_PERMANENT"},{"import": 1873,"src": 5486,"name": "OBJ_EXCLUSIVE"},{"import": 1873,"src": 5487,"name": "OBJ_CASE_INSENSITIVE"},{"import": 1873,"src": 5488,"name": "OBJ_OPENIF"},{"import": 1873,"src": 5489,"name": "OBJ_OPENLINK"},{"import": 1873,"src": 5490,"name": "OBJ_KERNEL_HANDLE"},{"import": 1873,"src": 5491,"name": "OBJ_VALID_ATTRIBUTES"},{"import": 1873,"src": 5492,"name": "UNICODE_STRING"},{"import": 1873,"src": 5493,"name": "ACTIVATION_CONTEXT_DATA"},{"import": 1873,"src": 5494,"name": "ASSEMBLY_STORAGE_MAP"},{"import": 1873,"src": 5495,"name": "FLS_CALLBACK_INFO"},{"import": 1873,"src": 5496,"name": "RTL_BITMAP"},{"import": 1873,"src": 5497,"name": "KAFFINITY"},{"import": 1873,"src": 5498,"name": "TEB"},{"import": 1873,"src": 5499,"name": "PEB"},{"import": 1873,"src": 5500,"name": "PEB_LDR_DATA"},{"import": 1873,"src": 5501,"name": "RTL_USER_PROCESS_PARAMETERS"},{"import": 1873,"src": 5502,"name": "RTL_DRIVE_LETTER_CURDIR"},{"import": 1873,"src": 5503,"name": "PPS_POST_PROCESS_INIT_ROUTINE"},{"import": 1873,"src": 5504,"name": "FILE_BOTH_DIR_INFORMATION"},{"import": 1873,"src": 5505,"name": "FILE_BOTH_DIRECTORY_INFORMATION"},{"import": 1873,"src": 5506,"name": "IO_APC_ROUTINE"},{"import": 1873,"src": 5507,"name": "CURDIR"},{"import": 1873,"src": 5508,"name": "DUPLICATE_SAME_ACCESS"},{"import": 1873,"src": 5509,"name": "MODULEINFO"},{"import": 1873,"src": 5510,"name": "PSAPI_WS_WATCH_INFORMATION"},{"import": 1873,"src": 5511,"name": "PROCESS_MEMORY_COUNTERS"},{"import": 1873,"src": 5512,"name": "PROCESS_MEMORY_COUNTERS_EX"},{"import": 1873,"src": 5513,"name": "PERFORMANCE_INFORMATION"},{"import": 1873,"src": 5514,"name": "ENUM_PAGE_FILE_INFORMATION"},{"import": 1873,"src": 5515,"name": "PENUM_PAGE_FILE_CALLBACKW"},{"import": 1873,"src": 5516,"name": "PENUM_PAGE_FILE_CALLBACKA"},{"import": 1873,"src": 5517,"name": "PSAPI_WS_WATCH_INFORMATION_EX"},{"import": 1873,"src": 5518,"name": "OSVERSIONINFOW"},{"import": 1873,"src": 5519,"name": "RTL_OSVERSIONINFOW"},{"import": 1873,"src": 5520,"name": "REPARSE_DATA_BUFFER"},{"import": 1873,"src": 5521,"name": "SYMBOLIC_LINK_REPARSE_BUFFER"},{"import": 1873,"src": 5522,"name": "MOUNT_POINT_REPARSE_BUFFER"},{"import": 1873,"src": 5523,"name": "MAXIMUM_REPARSE_DATA_BUFFER_SIZE"},{"import": 1873,"src": 5524,"name": "FSCTL_SET_REPARSE_POINT"},{"import": 1873,"src": 5525,"name": "FSCTL_GET_REPARSE_POINT"},{"import": 1873,"src": 5526,"name": "IO_REPARSE_TAG_SYMLINK"},{"import": 1873,"src": 5527,"name": "IO_REPARSE_TAG_MOUNT_POINT"},{"import": 1873,"src": 5528,"name": "SYMLINK_FLAG_RELATIVE"},{"import": 1873,"src": 5529,"name": "SYMBOLIC_LINK_FLAG_DIRECTORY"},{"import": 1873,"src": 5530,"name": "SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE"},{"import": 1873,"src": 5531,"name": "MOUNTMGR_MOUNT_POINT"},{"import": 1873,"src": 5532,"name": "MOUNTMGR_MOUNT_POINTS"},{"import": 1873,"src": 5533,"name": "IOCTL_MOUNTMGR_QUERY_POINTS"},{"import": 1873,"src": 5534,"name": "OBJECT_INFORMATION_CLASS"},{"import": 1873,"src": 5535,"name": "OBJECT_NAME_INFORMATION"},{"import": 1873,"src": 5536,"name": "SRWLOCK"},{"import": 1873,"src": 5537,"name": "SRWLOCK_INIT"},{"import": 1873,"src": 5538,"name": "CONDITION_VARIABLE"},{"import": 1873,"src": 5539,"name": "CONDITION_VARIABLE_INIT"},{"import": 1873,"src": 5540,"name": "FILE_SKIP_COMPLETION_PORT_ON_SUCCESS"},{"import": 1873,"src": 5541,"name": "FILE_SKIP_SET_EVENT_ON_HANDLE"},{"import": 1873,"src": 5542,"name": "CTRL_C_EVENT"},{"import": 1873,"src": 5543,"name": "CTRL_BREAK_EVENT"},{"import": 1873,"src": 5544,"name": "CTRL_CLOSE_EVENT"},{"import": 1873,"src": 5545,"name": "CTRL_LOGOFF_EVENT"},{"import": 1873,"src": 5546,"name": "CTRL_SHUTDOWN_EVENT"},{"import": 1873,"src": 5547,"name": "HANDLER_ROUTINE"},{"import": 1873,"src": 5548,"name": "M128A"},{"import": 1873,"src": 5549,"name": "XMM_SAVE_AREA32"},{"import": 1873,"src": 5550,"name": "CONTEXT"},{"import": 1873,"src": 5551,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1873,"src": 5552,"name": "std"},{"import": 1873,"src": 5553,"name": "mem"},{"import": 1873,"src": 5554,"name": "assert"},{"import": 1873,"src": 5555,"name": "math"},{"import": 1873,"src": 5556,"name": "maxInt"},{"import": 1873,"src": 5557,"name": "native_arch","kind": "const","type": 721,"value": null},{"import": 1873,"src": 5558,"name": "parseReadlinkPath"},{"import": 1873,"src": 5559,"name": "wsa_startup_mutex"},{"import": 1873,"src": 5560,"name": "GetModuleFileNameError"},{"import": 1873,"src": 5561,"name": "getFullPathNameW"},{"import": 1873,"src": 5562,"name": "MAKELANGID"},{"import": 1469,"src": 5563,"name": "Error","kind": "const","type": 709,"value": 867},{"import": 1469,"src": 5564,"name": "Error","kind": "const","type": 709,"value": 867},{"import": 1469,"src": 5565,"name": "Error","kind": "const","type": 709,"value": 725},{"import": 1469,"src": 5566,"name": "Error","kind": "const","type": 709,"value": 725},{"import": 1469,"src": 5567,"name": "Error","kind": "const","type": 709,"value": 2024},{"import": 1469,"src": 5568,"name": "Error","kind": "const","type": 709,"value": 2024},{"import": 1469,"src": 5569,"name": "Error","kind": "const","type": 709,"value": 2023},{"import": 1469,"src": 5570,"name": "Error","kind": "const","type": 709,"value": 2023},{"import": 1469,"src": 5571,"name": "Error","kind": "const","type": 709,"value": 1715},{"import": 1469,"src": 5572,"name": "Error","kind": "const","type": 709,"value": 1715},{"import": 1469,"src": 5573,"name": "Error","kind": "const","type": 709,"value": 2026},{"import": 1480,"src": 5574,"name": "CREAT"},{"import": 1480,"src": 5575,"name": "EXCL"},{"import": 1480,"src": 5576,"name": "NOCTTY","kind": "const","type": 778,"value": null},{"import": 1480,"src": 5577,"name": "TRUNC"},{"import": 1480,"src": 5578,"name": "APPEND"},{"import": 1480,"src": 5579,"name": "NONBLOCK"},{"import": 1480,"src": 5580,"name": "DSYNC"},{"import": 1480,"src": 5581,"name": "SYNC"},{"import": 1480,"src": 5582,"name": "RSYNC"},{"import": 1480,"src": 5583,"name": "DIRECTORY"},{"import": 1480,"src": 5584,"name": "NOFOLLOW"},{"import": 1480,"src": 5585,"name": "CLOEXEC","kind": "const","type": 778,"value": null},{"import": 1480,"src": 5586,"name": "ASYNC"},{"import": 1480,"src": 5587,"name": "DIRECT"},{"import": 1480,"src": 5588,"name": "LARGEFILE","kind": "const","type": 778,"value": null},{"import": 1480,"src": 5589,"name": "NOATIME"},{"import": 1480,"src": 5590,"name": "PATH"},{"import": 1480,"src": 5591,"name": "TMPFILE"},{"import": 1480,"src": 5592,"name": "NDELAY"},{"import": 1480,"src": 5593,"name": "32BIT"},{"import": 1480,"src": 5594,"name": "GROWSDOWN"},{"import": 1480,"src": 5595,"name": "DENYWRITE"},{"import": 1480,"src": 5596,"name": "EXECUTABLE"},{"import": 1480,"src": 5597,"name": "LOCKED"},{"import": 1480,"src": 5598,"name": "NORESERVE"},{"import": 1480,"src": 5599,"name": "SET_GS"},{"import": 1480,"src": 5600,"name": "SET_FS","kind": "const","type": 778,"value": null},{"import": 1480,"src": 5601,"name": "GET_FS"},{"import": 1480,"src": 5602,"name": "GET_GS"},{"import": 1480,"src": 5603,"name": "R8"},{"import": 1480,"src": 5604,"name": "R9"},{"import": 1480,"src": 5605,"name": "R10"},{"import": 1480,"src": 5606,"name": "R11"},{"import": 1480,"src": 5607,"name": "R12"},{"import": 1480,"src": 5608,"name": "R13"},{"import": 1480,"src": 5609,"name": "R14"},{"import": 1480,"src": 5610,"name": "R15"},{"import": 1480,"src": 5611,"name": "RDI"},{"import": 1480,"src": 5612,"name": "RSI"},{"import": 1480,"src": 5613,"name": "RBP","kind": "const","type": 778,"value": null},{"import": 1480,"src": 5614,"name": "RBX"},{"import": 1480,"src": 5615,"name": "RDX"},{"import": 1480,"src": 5616,"name": "RAX"},{"import": 1480,"src": 5617,"name": "RCX"},{"import": 1480,"src": 5618,"name": "RSP"},{"import": 1480,"src": 5619,"name": "RIP","kind": "const","type": 778,"value": null},{"import": 1480,"src": 5620,"name": "EFL"},{"import": 1480,"src": 5621,"name": "CSGSFS"},{"import": 1480,"src": 5622,"name": "ERR"},{"import": 1480,"src": 5623,"name": "TRAPNO"},{"import": 1480,"src": 5624,"name": "OLDMASK"},{"import": 1480,"src": 5625,"name": "CR2"},{"import": 1480,"src": 5626,"name": "SH","kind": "const","type": 778,"value": null},{"import": 1480,"src": 5627,"name": "EX","kind": "const","type": 778,"value": null},{"import": 1480,"src": 5628,"name": "NB","kind": "const","type": 778,"value": null},{"import": 1480,"src": 5629,"name": "UN"},{"import": 1937,"src": 5630,"name": "padding"},{"import": 1937,"src": 5631,"name": "array_type"},{"import": 1937,"src": 5632,"name": "class_type"},{"import": 1937,"src": 5633,"name": "entry_point","kind": "const","type": 778,"value": null},{"import": 1937,"src": 5634,"name": "enumeration_type"},{"import": 1937,"src": 5635,"name": "formal_parameter"},{"import": 1937,"src": 5636,"name": "imported_declaration"},{"import": 1937,"src": 5637,"name": "label"},{"import": 1937,"src": 5638,"name": "lexical_block"},{"import": 1937,"src": 5639,"name": "member"},{"import": 1937,"src": 5640,"name": "pointer_type"},{"import": 1937,"src": 5641,"name": "reference_type"},{"import": 1937,"src": 5642,"name": "compile_unit","kind": "const","type": 778,"value": null},{"import": 1937,"src": 5643,"name": "string_type"},{"import": 1937,"src": 5644,"name": "structure_type"},{"import": 1937,"src": 5645,"name": "subroutine","kind": "const","type": 778,"value": null},{"import": 1937,"src": 5646,"name": "subroutine_type"},{"import": 1937,"src": 5647,"name": "typedef"},{"import": 1937,"src": 5648,"name": "union_type"},{"import": 1937,"src": 5649,"name": "unspecified_parameters"},{"import": 1937,"src": 5650,"name": "variant"},{"import": 1937,"src": 5651,"name": "common_block"},{"import": 1937,"src": 5652,"name": "common_inclusion"},{"import": 1937,"src": 5653,"name": "inheritance"},{"import": 1937,"src": 5654,"name": "inlined_subroutine","kind": "const","type": 778,"value": null},{"import": 1937,"src": 5655,"name": "module"},{"import": 1937,"src": 5656,"name": "ptr_to_member_type"},{"import": 1937,"src": 5657,"name": "set_type"},{"import": 1937,"src": 5658,"name": "subrange_type"},{"import": 1937,"src": 5659,"name": "with_stmt"},{"import": 1937,"src": 5660,"name": "access_declaration"},{"import": 1937,"src": 5661,"name": "base_type"},{"import": 1937,"src": 5662,"name": "catch_block"},{"import": 1937,"src": 5663,"name": "const_type"},{"import": 1937,"src": 5664,"name": "constant"},{"import": 1937,"src": 5665,"name": "enumerator"},{"import": 1937,"src": 5666,"name": "file_type"},{"import": 1937,"src": 5667,"name": "friend"},{"import": 1937,"src": 5668,"name": "namelist"},{"import": 1937,"src": 5669,"name": "namelist_item"},{"import": 1937,"src": 5670,"name": "packed_type"},{"import": 1937,"src": 5671,"name": "subprogram","kind": "const","type": 778,"value": null},{"import": 1937,"src": 5672,"name": "template_type_param"},{"import": 1937,"src": 5673,"name": "template_value_param"},{"import": 1937,"src": 5674,"name": "thrown_type"},{"import": 1937,"src": 5675,"name": "try_block"},{"import": 1937,"src": 5676,"name": "variant_part"},{"import": 1937,"src": 5677,"name": "variable"},{"import": 1937,"src": 5678,"name": "volatile_type"},{"import": 1937,"src": 5679,"name": "dwarf_procedure"},{"import": 1937,"src": 5680,"name": "restrict_type"},{"import": 1937,"src": 5681,"name": "interface_type"},{"import": 1937,"src": 5682,"name": "namespace"},{"import": 1937,"src": 5683,"name": "imported_module"},{"import": 1937,"src": 5684,"name": "unspecified_type"},{"import": 1937,"src": 5685,"name": "partial_unit"},{"import": 1937,"src": 5686,"name": "imported_unit"},{"import": 1937,"src": 5687,"name": "condition"},{"import": 1937,"src": 5688,"name": "shared_type"},{"import": 1937,"src": 5689,"name": "type_unit"},{"import": 1937,"src": 5690,"name": "rvalue_reference_type"},{"import": 1937,"src": 5691,"name": "template_alias"},{"import": 1937,"src": 5692,"name": "lo_user"},{"import": 1937,"src": 5693,"name": "hi_user"},{"import": 1937,"src": 5694,"name": "MIPS_loop"},{"import": 1937,"src": 5695,"name": "HP_array_descriptor"},{"import": 1937,"src": 5696,"name": "HP_Bliss_field"},{"import": 1937,"src": 5697,"name": "HP_Bliss_field_set"},{"import": 1937,"src": 5698,"name": "format_label"},{"import": 1937,"src": 5699,"name": "function_template"},{"import": 1937,"src": 5700,"name": "class_template"},{"import": 1937,"src": 5701,"name": "GNU_BINCL"},{"import": 1937,"src": 5702,"name": "GNU_EINCL"},{"import": 1937,"src": 5703,"name": "GNU_template_template_param"},{"import": 1937,"src": 5704,"name": "GNU_template_parameter_pack"},{"import": 1937,"src": 5705,"name": "GNU_formal_parameter_pack"},{"import": 1937,"src": 5706,"name": "GNU_call_site"},{"import": 1937,"src": 5707,"name": "GNU_call_site_parameter"},{"import": 1937,"src": 5708,"name": "upc_shared_type"},{"import": 1937,"src": 5709,"name": "upc_strict_type"},{"import": 1937,"src": 5710,"name": "upc_relaxed_type"},{"import": 1937,"src": 5711,"name": "PGI_kanji_type"},{"import": 1937,"src": 5712,"name": "PGI_interface_block"},{"import": 1938,"src": 5713,"name": "sibling"},{"import": 1938,"src": 5714,"name": "location"},{"import": 1938,"src": 5715,"name": "name","kind": "const","type": 778,"value": null},{"import": 1938,"src": 5716,"name": "ordering"},{"import": 1938,"src": 5717,"name": "subscr_data"},{"import": 1938,"src": 5718,"name": "byte_size"},{"import": 1938,"src": 5719,"name": "bit_offset"},{"import": 1938,"src": 5720,"name": "bit_size"},{"import": 1938,"src": 5721,"name": "element_list"},{"import": 1938,"src": 5722,"name": "stmt_list","kind": "const","type": 778,"value": null},{"import": 1938,"src": 5723,"name": "low_pc","kind": "const","type": 778,"value": null},{"import": 1938,"src": 5724,"name": "high_pc","kind": "const","type": 778,"value": null},{"import": 1938,"src": 5725,"name": "language"},{"import": 1938,"src": 5726,"name": "member"},{"import": 1938,"src": 5727,"name": "discr"},{"import": 1938,"src": 5728,"name": "discr_value"},{"import": 1938,"src": 5729,"name": "visibility"},{"import": 1938,"src": 5730,"name": "import"},{"import": 1938,"src": 5731,"name": "string_length"},{"import": 1938,"src": 5732,"name": "common_reference"},{"import": 1938,"src": 5733,"name": "comp_dir","kind": "const","type": 778,"value": null},{"import": 1938,"src": 5734,"name": "const_value"},{"import": 1938,"src": 5735,"name": "containing_type"},{"import": 1938,"src": 5736,"name": "default_value"},{"import": 1938,"src": 5737,"name": "inline"},{"import": 1938,"src": 5738,"name": "is_optional"},{"import": 1938,"src": 5739,"name": "lower_bound"},{"import": 1938,"src": 5740,"name": "producer"},{"import": 1938,"src": 5741,"name": "prototyped"},{"import": 1938,"src": 5742,"name": "return_addr"},{"import": 1938,"src": 5743,"name": "start_scope"},{"import": 1938,"src": 5744,"name": "bit_stride"},{"import": 1938,"src": 5745,"name": "upper_bound"},{"import": 1938,"src": 5746,"name": "abstract_origin","kind": "const","type": 778,"value": null},{"import": 1938,"src": 5747,"name": "accessibility"},{"import": 1938,"src": 5748,"name": "address_class"},{"import": 1938,"src": 5749,"name": "artificial"},{"import": 1938,"src": 5750,"name": "base_types"},{"import": 1938,"src": 5751,"name": "calling_convention"},{"import": 1938,"src": 5752,"name": "count"},{"import": 1938,"src": 5753,"name": "data_member_location"},{"import": 1938,"src": 5754,"name": "decl_column"},{"import": 1938,"src": 5755,"name": "decl_file"},{"import": 1938,"src": 5756,"name": "decl_line"},{"import": 1938,"src": 5757,"name": "declaration"},{"import": 1938,"src": 5758,"name": "discr_list"},{"import": 1938,"src": 5759,"name": "encoding"},{"import": 1938,"src": 5760,"name": "external"},{"import": 1938,"src": 5761,"name": "frame_base"},{"import": 1938,"src": 5762,"name": "friend"},{"import": 1938,"src": 5763,"name": "identifier_case"},{"import": 1938,"src": 5764,"name": "macro_info"},{"import": 1938,"src": 5765,"name": "namelist_items"},{"import": 1938,"src": 5766,"name": "priority"},{"import": 1938,"src": 5767,"name": "segment"},{"import": 1938,"src": 5768,"name": "specification","kind": "const","type": 778,"value": null},{"import": 1938,"src": 5769,"name": "static_link"},{"import": 1938,"src": 5770,"name": "type"},{"import": 1938,"src": 5771,"name": "use_location"},{"import": 1938,"src": 5772,"name": "variable_parameter"},{"import": 1938,"src": 5773,"name": "virtuality"},{"import": 1938,"src": 5774,"name": "vtable_elem_location"},{"import": 1938,"src": 5775,"name": "allocated"},{"import": 1938,"src": 5776,"name": "associated"},{"import": 1938,"src": 5777,"name": "data_location"},{"import": 1938,"src": 5778,"name": "byte_stride"},{"import": 1938,"src": 5779,"name": "entry_pc"},{"import": 1938,"src": 5780,"name": "use_UTF8"},{"import": 1938,"src": 5781,"name": "extension"},{"import": 1938,"src": 5782,"name": "ranges","kind": "const","type": 778,"value": null},{"import": 1938,"src": 5783,"name": "trampoline"},{"import": 1938,"src": 5784,"name": "call_column"},{"import": 1938,"src": 5785,"name": "call_file"},{"import": 1938,"src": 5786,"name": "call_line"},{"import": 1938,"src": 5787,"name": "description"},{"import": 1938,"src": 5788,"name": "binary_scale"},{"import": 1938,"src": 5789,"name": "decimal_scale"},{"import": 1938,"src": 5790,"name": "small"},{"import": 1938,"src": 5791,"name": "decimal_sign"},{"import": 1938,"src": 5792,"name": "digit_count"},{"import": 1938,"src": 5793,"name": "picture_string"},{"import": 1938,"src": 5794,"name": "mutable"},{"import": 1938,"src": 5795,"name": "threads_scaled"},{"import": 1938,"src": 5796,"name": "explicit"},{"import": 1938,"src": 5797,"name": "object_pointer"},{"import": 1938,"src": 5798,"name": "endianity"},{"import": 1938,"src": 5799,"name": "elemental"},{"import": 1938,"src": 5800,"name": "pure"},{"import": 1938,"src": 5801,"name": "recursive"},{"import": 1938,"src": 5802,"name": "signature"},{"import": 1938,"src": 5803,"name": "main_subprogram"},{"import": 1938,"src": 5804,"name": "data_bit_offset"},{"import": 1938,"src": 5805,"name": "const_expr"},{"import": 1938,"src": 5806,"name": "enum_class"},{"import": 1938,"src": 5807,"name": "linkage_name"},{"import": 1938,"src": 5808,"name": "alignment"},{"import": 1938,"src": 5809,"name": "lo_user"},{"import": 1938,"src": 5810,"name": "hi_user"},{"import": 1938,"src": 5811,"name": "MIPS_fde"},{"import": 1938,"src": 5812,"name": "MIPS_loop_begin"},{"import": 1938,"src": 5813,"name": "MIPS_tail_loop_begin"},{"import": 1938,"src": 5814,"name": "MIPS_epilog_begin"},{"import": 1938,"src": 5815,"name": "MIPS_loop_unroll_factor"},{"import": 1938,"src": 5816,"name": "MIPS_software_pipeline_depth"},{"import": 1938,"src": 5817,"name": "MIPS_linkage_name"},{"import": 1938,"src": 5818,"name": "MIPS_stride"},{"import": 1938,"src": 5819,"name": "MIPS_abstract_name"},{"import": 1938,"src": 5820,"name": "MIPS_clone_origin"},{"import": 1938,"src": 5821,"name": "MIPS_has_inlines"},{"import": 1938,"src": 5822,"name": "HP_block_index"},{"import": 1938,"src": 5823,"name": "HP_unmodifiable"},{"import": 1938,"src": 5824,"name": "HP_prologue"},{"import": 1938,"src": 5825,"name": "HP_epilogue"},{"import": 1938,"src": 5826,"name": "HP_actuals_stmt_list"},{"import": 1938,"src": 5827,"name": "HP_proc_per_section"},{"import": 1938,"src": 5828,"name": "HP_raw_data_ptr"},{"import": 1938,"src": 5829,"name": "HP_pass_by_reference"},{"import": 1938,"src": 5830,"name": "HP_opt_level"},{"import": 1938,"src": 5831,"name": "HP_prof_version_id"},{"import": 1938,"src": 5832,"name": "HP_opt_flags"},{"import": 1938,"src": 5833,"name": "HP_cold_region_low_pc"},{"import": 1938,"src": 5834,"name": "HP_cold_region_high_pc"},{"import": 1938,"src": 5835,"name": "HP_all_variables_modifiable"},{"import": 1938,"src": 5836,"name": "HP_linkage_name"},{"import": 1938,"src": 5837,"name": "HP_prof_flags"},{"import": 1938,"src": 5838,"name": "HP_unit_name"},{"import": 1938,"src": 5839,"name": "HP_unit_size"},{"import": 1938,"src": 5840,"name": "HP_widened_byte_size"},{"import": 1938,"src": 5841,"name": "HP_definition_points"},{"import": 1938,"src": 5842,"name": "HP_default_location"},{"import": 1938,"src": 5843,"name": "HP_is_result_param"},{"import": 1938,"src": 5844,"name": "sf_names"},{"import": 1938,"src": 5845,"name": "src_info"},{"import": 1938,"src": 5846,"name": "mac_info"},{"import": 1938,"src": 5847,"name": "src_coords"},{"import": 1938,"src": 5848,"name": "body_begin"},{"import": 1938,"src": 5849,"name": "body_end"},{"import": 1938,"src": 5850,"name": "GNU_vector"},{"import": 1938,"src": 5851,"name": "GNU_guarded_by"},{"import": 1938,"src": 5852,"name": "GNU_pt_guarded_by"},{"import": 1938,"src": 5853,"name": "GNU_guarded"},{"import": 1938,"src": 5854,"name": "GNU_pt_guarded"},{"import": 1938,"src": 5855,"name": "GNU_locks_excluded"},{"import": 1938,"src": 5856,"name": "GNU_exclusive_locks_required"},{"import": 1938,"src": 5857,"name": "GNU_shared_locks_required"},{"import": 1938,"src": 5858,"name": "GNU_odr_signature"},{"import": 1938,"src": 5859,"name": "GNU_template_name"},{"import": 1938,"src": 5860,"name": "GNU_call_site_value"},{"import": 1938,"src": 5861,"name": "GNU_call_site_data_value"},{"import": 1938,"src": 5862,"name": "GNU_call_site_target"},{"import": 1938,"src": 5863,"name": "GNU_call_site_target_clobbered"},{"import": 1938,"src": 5864,"name": "GNU_tail_call"},{"import": 1938,"src": 5865,"name": "GNU_all_tail_call_sites"},{"import": 1938,"src": 5866,"name": "GNU_all_call_sites"},{"import": 1938,"src": 5867,"name": "GNU_all_source_call_sites"},{"import": 1938,"src": 5868,"name": "GNU_macros"},{"import": 1938,"src": 5869,"name": "GNU_dwo_name"},{"import": 1938,"src": 5870,"name": "GNU_dwo_id"},{"import": 1938,"src": 5871,"name": "GNU_ranges_base"},{"import": 1938,"src": 5872,"name": "GNU_addr_base"},{"import": 1938,"src": 5873,"name": "GNU_pubnames"},{"import": 1938,"src": 5874,"name": "GNU_pubtypes"},{"import": 1938,"src": 5875,"name": "VMS_rtnbeg_pd_address"},{"import": 1938,"src": 5876,"name": "use_GNAT_descriptive_type"},{"import": 1938,"src": 5877,"name": "GNAT_descriptive_type"},{"import": 1938,"src": 5878,"name": "upc_threads_scaled"},{"import": 1938,"src": 5879,"name": "PGI_lbase"},{"import": 1938,"src": 5880,"name": "PGI_soffset"},{"import": 1938,"src": 5881,"name": "PGI_lstride"},{"import": 1504,"src": 5882,"name": "addr","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5883,"name": "block2","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5884,"name": "block4","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5885,"name": "data2","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5886,"name": "data4","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5887,"name": "data8","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5888,"name": "string","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5889,"name": "block","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5890,"name": "block1","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5891,"name": "data1","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5892,"name": "flag","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5893,"name": "sdata","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5894,"name": "strp","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5895,"name": "udata","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5896,"name": "ref_addr","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5897,"name": "ref1","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5898,"name": "ref2","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5899,"name": "ref4","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5900,"name": "ref8","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5901,"name": "ref_udata","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5902,"name": "indirect","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5903,"name": "sec_offset","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5904,"name": "exprloc","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5905,"name": "flag_present","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5906,"name": "ref_sig8","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5907,"name": "GNU_addr_index"},{"import": 1504,"src": 5908,"name": "GNU_str_index"},{"import": 1504,"src": 5909,"name": "GNU_ref_alt"},{"import": 1504,"src": 5910,"name": "GNU_strp_alt"},{"import": 1504,"src": 5911,"name": "no"},{"import": 1504,"src": 5912,"name": "yes","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5913,"name": "extended_op","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5914,"name": "copy","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5915,"name": "advance_pc","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5916,"name": "advance_line","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5917,"name": "set_file","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5918,"name": "set_column","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5919,"name": "negate_stmt","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5920,"name": "set_basic_block","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5921,"name": "const_add_pc","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5922,"name": "fixed_advance_pc","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5923,"name": "set_prologue_end","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5924,"name": "set_epilogue_begin"},{"import": 1504,"src": 5925,"name": "set_isa"},{"import": 1504,"src": 5926,"name": "end_sequence","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5927,"name": "set_address","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5928,"name": "define_file","kind": "const","type": 778,"value": null},{"import": 1504,"src": 5929,"name": "set_discriminator"},{"import": 1504,"src": 5930,"name": "lo_user"},{"import": 1504,"src": 5931,"name": "hi_user"},{"import": 1943,"src": 95,"name": "readULEB128","kind": "const","type": 2109,"value": 1042},{"import": 1943,"src": 5932,"name": "writeULEB128"},{"import": 1943,"src": 157,"name": "readILEB128","kind": "const","type": 2110,"value": 1043},{"import": 1943,"src": 5933,"name": "writeILEB128"},{"import": 1943,"src": 5934,"name": "writeUnsignedFixed"},{"import": 1943,"src": 5935,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1943,"src": 5936,"name": "testing"},{"import": 1943,"src": 5937,"name": "test_read_stream_ileb128"},{"import": 1943,"src": 5938,"name": "test_read_stream_uleb128"},{"import": 1943,"src": 5939,"name": "test_read_ileb128"},{"import": 1943,"src": 5940,"name": "test_read_uleb128"},{"import": 1943,"src": 5941,"name": "test_read_ileb128_seq"},{"import": 1943,"src": 5942,"name": "test_read_uleb128_seq"},{"import": 1943,"src": 5943,"name": "test_write_leb128"},{"import": 1954,"src": 5944,"name": "wait"},{"import": 1954,"src": 5945,"name": "timedWait"},{"import": 1954,"src": 5946,"name": "set"},{"import": 1954,"src": 5947,"name": "std"},{"import": 1954,"src": 5948,"name": "builtin"},{"import": 1954,"src": 5949,"name": "testing"},{"import": 1954,"src": 5950,"name": "assert"},{"import": 1954,"src": 5951,"name": "StaticResetEvent"},{"import": 1954,"src": 5952,"name": "AutoResetEvent"},{"import": 1954,"src": 5953,"name": "UNSET"},{"import": 1954,"src": 5954,"name": "SET"},{"import": 1954,"src": 5955,"name": "event_align"},{"import": 1954,"src": 5956,"name": "waitFor"},{"import": 1955,"src": 5957,"name": "Impl","kind": "const","type": 709,"value": 1663},{"import": 1955,"src": 5958,"name": "InitError"},{"import": 1955,"src": 5959,"name": "init"},{"import": 1955,"src": 5960,"name": "deinit"},{"import": 1955,"src": 5961,"name": "set"},{"import": 1955,"src": 5962,"name": "reset"},{"import": 1955,"src": 5963,"name": "wait"},{"import": 1955,"src": 5964,"name": "TimedWaitResult","kind": "const","type": 709,"value": 1202},{"import": 1955,"src": 5965,"name": "timedWait"},{"import": 1955,"src": 5966,"name": "DarwinEvent"},{"import": 1955,"src": 5967,"name": "PosixEvent"},{"import": 1955,"src": 5968,"name": "ResetEvent"},{"import": 1955,"src": 5969,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1955,"src": 5970,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1955,"src": 5971,"name": "testing"},{"import": 1955,"src": 5972,"name": "assert"},{"import": 1955,"src": 5973,"name": "c"},{"import": 1955,"src": 5974,"name": "os"},{"import": 1955,"src": 5975,"name": "time"},{"import": 1519,"src": 5976,"name": "ThreadHandle"},{"import": 1519,"src": 5977,"name": "linux","kind": "const","type": 709,"value": 1870},{"import": 1519,"src": 5978,"name": "tls_thread_id","kind": "var","threadlocal": true,"type": 1203,"value": "null"},{"import": 1519,"src": 31,"name": "getCurrentId","kind": "const","type": 13,"value": 33},{"import": 1519,"src": 5979,"name": "getCpuCount"},{"import": 1519,"src": 5980,"name": "ThreadCompletion","kind": "const","type": 709,"value": 2111},{"import": 1519,"src": 5981,"name": "spawn"},{"import": 1519,"src": 5982,"name": "getHandle"},{"import": 1519,"src": 5983,"name": "detach"},{"import": 1519,"src": 5984,"name": "join"},{"import": 1521,"src": 5985,"name": "init"},{"import": 1521,"src": 5986,"name": "loadHeader"},{"import": 1521,"src": 5987,"name": "getPdbPath"},{"import": 1521,"src": 5988,"name": "loadSections"},{"import": 1521,"src": 5989,"name": "getSection"},{"import": 1521,"src": 5990,"name": "getSectionData"},{"import": 1521,"src": 5991,"name": "readStringFromTable"},{"import": 1521,"src": 5992,"name": "loadOptionalHeader"},{"import": 1521,"src": 5993,"name": "DataDirectory","kind": "const","type": 709,"value": 2114},{"import": 1522,"src": 5994,"name": "Color","kind": "const","type": 709,"value": 1193},{"import": 1522,"src": 5995,"name": "Config","kind": "const","type": 709,"value": 979},{"import": 1522,"src": 5996,"name": "address"},{"import": 1522,"src": 5997,"name": "addressLessThan"},{"import": 1523,"src": 5998,"name": "LOPROC"},{"import": 1523,"src": 5999,"name": "HIPROC"},{"import": 1993,"src": 6000,"name": "sep_windows"},{"import": 1993,"src": 6001,"name": "sep_posix","kind": "const","type": 778,"value": null},{"import": 1993,"src": 6002,"name": "sep","kind": "const","type": 778,"value": null},{"import": 1993,"src": 6003,"name": "sep_str_windows"},{"import": 1993,"src": 6004,"name": "sep_str_posix"},{"import": 1993,"src": 6005,"name": "sep_str"},{"import": 1993,"src": 6006,"name": "delimiter_windows"},{"import": 1993,"src": 6007,"name": "delimiter_posix"},{"import": 1993,"src": 6008,"name": "delimiter"},{"import": 1993,"src": 153,"name": "isSep","kind": "const","type": 219,"value": 232},{"import": 1993,"src": 151,"name": "join","kind": "const","type": 217,"value": 230},{"import": 1993,"src": 6009,"name": "joinZ"},{"import": 1993,"src": 6010,"name": "isAbsoluteC"},{"import": 1993,"src": 279,"name": "isAbsoluteZ","kind": "const","type": 368,"value": 403},{"import": 1993,"src": 6011,"name": "isAbsolute"},{"import": 1993,"src": 6012,"name": "isAbsoluteWindows"},{"import": 1993,"src": 6013,"name": "isAbsoluteWindowsW"},{"import": 1993,"src": 6014,"name": "isAbsoluteWindowsWTF16"},{"import": 1993,"src": 6015,"name": "isAbsoluteWindowsC"},{"import": 1993,"src": 6016,"name": "isAbsoluteWindowsZ"},{"import": 1993,"src": 361,"name": "isAbsolutePosix","kind": "const","type": 494,"value": 569},{"import": 1993,"src": 6017,"name": "isAbsolutePosixC"},{"import": 1993,"src": 320,"name": "isAbsolutePosixZ","kind": "const","type": 368,"value": 493},{"import": 1993,"src": 6018,"name": "WindowsPath"},{"import": 1993,"src": 6019,"name": "windowsParsePath"},{"import": 1993,"src": 6020,"name": "diskDesignator"},{"import": 1993,"src": 6021,"name": "diskDesignatorWindows"},{"import": 1993,"src": 6022,"name": "resolve"},{"import": 1993,"src": 6023,"name": "resolveWindows"},{"import": 1993,"src": 6024,"name": "resolvePosix"},{"import": 1993,"src": 6025,"name": "dirname"},{"import": 1993,"src": 6026,"name": "dirnameWindows"},{"import": 1993,"src": 6027,"name": "dirnamePosix"},{"import": 1993,"src": 6028,"name": "basename"},{"import": 1993,"src": 6029,"name": "basenamePosix"},{"import": 1993,"src": 6030,"name": "basenameWindows"},{"import": 1993,"src": 6031,"name": "relative"},{"import": 1993,"src": 6032,"name": "relativeWindows"},{"import": 1993,"src": 6033,"name": "relativePosix"},{"import": 1993,"src": 6034,"name": "extension"},{"import": 1993,"src": 6035,"name": "builtin","kind": "const","type": 709,"value": 950},{"import": 1993,"src": 6036,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1993,"src": 6037,"name": "debug","kind": "const","type": 709,"value": 1522},{"import": 1993,"src": 6038,"name": "assert","kind": "const","type": 29,"value": 36},{"import": 1993,"src": 6039,"name": "testing"},{"import": 1993,"src": 6040,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1993,"src": 6041,"name": "fmt"},{"import": 1993,"src": 6042,"name": "Allocator","kind": "const","type": 709,"value": 1557},{"import": 1993,"src": 6043,"name": "math"},{"import": 1993,"src": 6044,"name": "windows"},{"import": 1993,"src": 6045,"name": "fs"},{"import": 1993,"src": 6046,"name": "process"},{"import": 1993,"src": 6047,"name": "native_os","kind": "const","type": 755,"value": null},{"import": 1993,"src": 152,"name": "joinSepMaybeZ","kind": "const","type": 218,"value": 231},{"import": 1993,"src": 6048,"name": "testJoinMaybeZWindows"},{"import": 1993,"src": 6049,"name": "testJoinMaybeZPosix"},{"import": 1993,"src": 6050,"name": "isAbsoluteWindowsImpl"},{"import": 1993,"src": 6051,"name": "testIsAbsoluteWindows"},{"import": 1993,"src": 6052,"name": "testIsAbsolutePosix"},{"import": 1993,"src": 6053,"name": "networkShareServersEql"},{"import": 1993,"src": 6054,"name": "compareDiskDesignators"},{"import": 1993,"src": 6055,"name": "asciiUpper"},{"import": 1993,"src": 6056,"name": "asciiEqlIgnoreCase"},{"import": 1993,"src": 6057,"name": "testResolveWindows"},{"import": 1993,"src": 6058,"name": "testResolvePosix"},{"import": 1993,"src": 6059,"name": "testDirnamePosix"},{"import": 1993,"src": 6060,"name": "testDirnameWindows"},{"import": 1993,"src": 6061,"name": "testBasename"},{"import": 1993,"src": 6062,"name": "testBasenamePosix"},{"import": 1993,"src": 6063,"name": "testBasenameWindows"},{"import": 1993,"src": 6064,"name": "testRelativePosix"},{"import": 1993,"src": 6065,"name": "testRelativeWindows"},{"import": 1993,"src": 6066,"name": "testExtension"},{"import": 1995,"src": 6067,"name": "HashStrategy","kind": "const","type": 709,"value": 2121},{"import": 1995,"src": 6068,"name": "hashPointer"},{"import": 1995,"src": 6069,"name": "hashArray"},{"import": 1995,"src": 442,"name": "hash","kind": "const","type": 2122,"value": 1044},{"import": 1995,"src": 405,"name": "autoHash","kind": "const","type": 1840,"value": 938},{"import": 1995,"src": 6070,"name": "std","kind": "const","type": 709,"value": 949},{"import": 1995,"src": 6071,"name": "assert"},{"import": 1995,"src": 6072,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 1995,"src": 6073,"name": "meta","kind": "const","type": 709,"value": 1532},{"import": 1995,"src": 508,"name": "typeContainsSlice","kind": "const","type": 921,"value": 909},{"import": 1995,"src": 6074,"name": "testing"},{"import": 1995,"src": 6075,"name": "Wyhash"},{"import": 1995,"src": 6076,"name": "testHash"},{"import": 1995,"src": 6077,"name": "testHashShallow"},{"import": 1995,"src": 6078,"name": "testHashDeep"},{"import": 1995,"src": 6079,"name": "testHashDeepRecursive"},{"import": 1528,"src": 198,"name": "alloc","kind": "const","type": 263,"value": 281},{"import": 1528,"src": 199,"name": "resize","kind": "const","type": 264,"value": 282},{"import": 1870,"src": 6080,"name": "FDCWD","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6081,"name": "SYMLINK_NOFOLLOW"},{"import": 1870,"src": 6082,"name": "REMOVEDIR"},{"import": 1870,"src": 6083,"name": "SYMLINK_FOLLOW"},{"import": 1870,"src": 6084,"name": "NO_AUTOMOUNT"},{"import": 1870,"src": 6085,"name": "EMPTY_PATH"},{"import": 1870,"src": 6086,"name": "STATX_SYNC_TYPE"},{"import": 1870,"src": 6087,"name": "STATX_SYNC_AS_STAT"},{"import": 1870,"src": 6088,"name": "STATX_FORCE_SYNC"},{"import": 1870,"src": 6089,"name": "STATX_DONT_SYNC"},{"import": 1870,"src": 6090,"name": "RECURSIVE"},{"import": 1870,"src": 6091,"name": "SHARED","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6092,"name": "PRIVATE","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6093,"name": "SHARED_VALIDATE"},{"import": 1870,"src": 6094,"name": "TYPE"},{"import": 1870,"src": 6095,"name": "FIXED"},{"import": 1870,"src": 6096,"name": "ANONYMOUS","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6097,"name": "POPULATE"},{"import": 1870,"src": 6098,"name": "NONBLOCK"},{"import": 1870,"src": 6099,"name": "STACK"},{"import": 1870,"src": 6100,"name": "HUGETLB"},{"import": 1870,"src": 6101,"name": "SYNC"},{"import": 1870,"src": 6102,"name": "FIXED_NOREPLACE"},{"import": 1870,"src": 6103,"name": "UNINITIALIZED"},{"import": 1870,"src": 6104,"name": "RDONLY","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6105,"name": "WRONLY","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6106,"name": "RDWR","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6107,"name": "NONE"},{"import": 1870,"src": 6108,"name": "READ","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6109,"name": "WRITE","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6110,"name": "EXEC"},{"import": 1870,"src": 6111,"name": "SEM"},{"import": 1870,"src": 6112,"name": "GROWSDOWN"},{"import": 1870,"src": 6113,"name": "GROWSUP"},{"import": 1870,"src": 6114,"name": "IFMT","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6115,"name": "IFDIR","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6116,"name": "IFCHR","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6117,"name": "IFBLK","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6118,"name": "IFREG","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6119,"name": "IFIFO","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6120,"name": "IFLNK","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6121,"name": "IFSOCK","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6122,"name": "ISUID"},{"import": 1870,"src": 6123,"name": "ISGID"},{"import": 1870,"src": 6124,"name": "ISVTX"},{"import": 1870,"src": 6125,"name": "IRUSR"},{"import": 1870,"src": 6126,"name": "IWUSR"},{"import": 1870,"src": 6127,"name": "IXUSR"},{"import": 1870,"src": 6128,"name": "IRWXU"},{"import": 1870,"src": 6129,"name": "IRGRP"},{"import": 1870,"src": 6130,"name": "IWGRP"},{"import": 1870,"src": 6131,"name": "IXGRP"},{"import": 1870,"src": 6132,"name": "IRWXG"},{"import": 1870,"src": 6133,"name": "IROTH"},{"import": 1870,"src": 6134,"name": "IWOTH"},{"import": 1870,"src": 6135,"name": "IXOTH"},{"import": 1870,"src": 6136,"name": "IRWXO"},{"import": 1870,"src": 6137,"name": "ISREG"},{"import": 1870,"src": 6138,"name": "ISDIR"},{"import": 1870,"src": 6139,"name": "ISCHR"},{"import": 1870,"src": 6140,"name": "ISBLK"},{"import": 1870,"src": 6141,"name": "ISFIFO"},{"import": 1870,"src": 6142,"name": "ISLNK"},{"import": 1870,"src": 6143,"name": "ISSOCK"},{"import": 1870,"src": 6144,"name": "NOCLDSTOP"},{"import": 1870,"src": 6145,"name": "NOCLDWAIT"},{"import": 1870,"src": 6146,"name": "SIGINFO","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6147,"name": "RESTART","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6148,"name": "RESETHAND","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6149,"name": "ONSTACK"},{"import": 1870,"src": 6150,"name": "NODEFER"},{"import": 1870,"src": 6151,"name": "RESTORER","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6152,"name": "BLOCK","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6153,"name": "UNBLOCK"},{"import": 1870,"src": 6154,"name": "SETMASK","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6155,"name": "HUP"},{"import": 1870,"src": 6156,"name": "INT"},{"import": 1870,"src": 6157,"name": "QUIT"},{"import": 1870,"src": 6158,"name": "ILL","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6159,"name": "TRAP"},{"import": 1870,"src": 6160,"name": "ABRT","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6161,"name": "IOT"},{"import": 1870,"src": 6162,"name": "BUS","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6163,"name": "FPE"},{"import": 1870,"src": 6164,"name": "KILL","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6165,"name": "USR1"},{"import": 1870,"src": 6166,"name": "SEGV","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6167,"name": "USR2"},{"import": 1870,"src": 6168,"name": "PIPE"},{"import": 1870,"src": 6169,"name": "ALRM"},{"import": 1870,"src": 6170,"name": "TERM"},{"import": 1870,"src": 6171,"name": "STKFLT"},{"import": 1870,"src": 6172,"name": "CHLD"},{"import": 1870,"src": 6173,"name": "CONT"},{"import": 1870,"src": 6174,"name": "STOP","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6175,"name": "TSTP"},{"import": 1870,"src": 6176,"name": "TTIN"},{"import": 1870,"src": 6177,"name": "TTOU"},{"import": 1870,"src": 6178,"name": "URG"},{"import": 1870,"src": 6179,"name": "XCPU"},{"import": 1870,"src": 6180,"name": "XFSZ"},{"import": 1870,"src": 6181,"name": "VTALRM"},{"import": 1870,"src": 6182,"name": "PROF"},{"import": 1870,"src": 6183,"name": "WINCH"},{"import": 1870,"src": 6184,"name": "IO"},{"import": 1870,"src": 6185,"name": "POLL"},{"import": 1870,"src": 6186,"name": "PWR"},{"import": 1870,"src": 6187,"name": "SYS"},{"import": 1870,"src": 6188,"name": "UNUSED"},{"import": 1870,"src": 6189,"name": "ERR"},{"import": 1870,"src": 6190,"name": "DFL","kind": "const","type": 2123,"value": "null"},{"import": 1870,"src": 6191,"name": "IGN"},{"import": 1870,"src": 6192,"name": "handler_fn","kind": "const","type": 709,"value": 2124},{"import": 1870,"src": 6193,"name": "sigaction_fn","kind": "const","type": 709,"value": 2125},{"import": 2031,"src": 6194,"name": "DynLib"},{"import": 2031,"src": 274,"name": "get_DYNAMIC","kind": "const","type": 364,"value": 398},{"import": 2031,"src": 204,"name": "linkmap_iterator","kind": "const","type": 271,"value": 290},{"import": 2031,"src": 6195,"name": "ElfDynLib"},{"import": 2031,"src": 6196,"name": "WindowsDynLib"},{"import": 2031,"src": 6197,"name": "DlDynlib"},{"import": 2031,"src": 6198,"name": "std","kind": "const","type": 709,"value": 949},{"import": 2031,"src": 6199,"name": "builtin"},{"import": 2031,"src": 6200,"name": "mem"},{"import": 2031,"src": 6201,"name": "os"},{"import": 2031,"src": 6202,"name": "assert"},{"import": 2031,"src": 6203,"name": "testing"},{"import": 2031,"src": 6204,"name": "elf","kind": "const","type": 709,"value": 1523},{"import": 2031,"src": 6205,"name": "windows"},{"import": 2031,"src": 6206,"name": "system"},{"import": 2031,"src": 6207,"name": "maxInt"},{"import": 2031,"src": 6208,"name": "max"},{"import": 2031,"src": 6209,"name": "LinkMap","kind": "const","type": 709,"value": 2071},{"import": 2031,"src": 6210,"name": "RDebug","kind": "const","type": 709,"value": 2129},{"import": 2031,"src": 6211,"name": "checkver"},{"import": 1534,"src": 6212,"name": "Module","kind": "const","type": 709,"value": 2130},{"import": 1534,"src": 6213,"name": "init"},{"import": 1534,"src": 6214,"name": "deinit"},{"import": 1534,"src": 6215,"name": "parseDbiStream"},{"import": 1534,"src": 6216,"name": "parseInfoStream"},{"import": 1534,"src": 6217,"name": "getSymbolName"},{"import": 1534,"src": 6218,"name": "getLineNumberInfo"},{"import": 1534,"src": 6219,"name": "getModule"},{"import": 1534,"src": 6220,"name": "getStreamById"},{"import": 1534,"src": 6221,"name": "getStream"},{"import": 1534,"src": 6222,"name": "init"},{"import": 1534,"src": 6223,"name": "Error"},{"import": 1534,"src": 6224,"name": "seekBy"},{"import": 1534,"src": 6225,"name": "seekTo"},{"import": 1534,"src": 6226,"name": "reader"},{"import": 1534,"src": 6227,"name": "init"},{"import": 1534,"src": 6228,"name": "read"},{"import": 1534,"src": 6229,"name": "getSize"},{"import": 1534,"src": 6230,"name": "getFilePos"},{"import": 1537,"src": 6231,"name": "Error"},{"import": 1537,"src": 6232,"name": "start"},{"import": 1537,"src": 6233,"name": "read"},{"import": 1537,"src": 6234,"name": "reset"},{"import": 1537,"src": 6235,"name": "lap"},{"import": 1537,"src": 6236,"name": "monotonic_clock_id"},{"import": 1537,"src": 6237,"name": "clockNative"},{"import": 1537,"src": 6238,"name": "nativeDurationToNanos"},{"import": 1546,"src": 6239,"name": "wake"},{"import": 1546,"src": 299,"name": "wait","kind": "const","type": 425,"value": 471},{"import": 2031,"src": 6240,"name": "Iterator","kind": "const","type": 709,"value": 1682},{"import": 1437,"src": 6241,"name": "includesVersion"},{"import": 1437,"src": 6242,"name": "isAtLeast"},{"import": 1403,"src": 6243,"name": "includesVersion"},{"import": 1403,"src": 6244,"name": "isAtLeast"},{"import": 2082,"src": 6245,"name": "tls_image","kind": "var","type": 2144,"value": null},{"import": 2082,"src": 166,"name": "setThreadPointer","kind": "const","type": 234,"value": 249},{"import": 2082,"src": 165,"name": "prepareTLS","kind": "const","type": 233,"value": 248},{"import": 2082,"src": 22,"name": "initStaticTLS","kind": "const","type": 20,"value": 24},{"import": 2082,"src": 6246,"name": "std","kind": "const","type": 709,"value": 949},{"import": 2082,"src": 6247,"name": "os","kind": "const","type": 709,"value": 1533},{"import": 2082,"src": 6248,"name": "mem","kind": "const","type": 709,"value": 1482},{"import": 2082,"src": 6249,"name": "elf","kind": "const","type": 709,"value": 1523},{"import": 2082,"src": 6250,"name": "math"},{"import": 2082,"src": 6251,"name": "assert","kind": "const","type": 29,"value": 36},{"import": 2082,"src": 6252,"name": "native_arch","kind": "const","type": 721,"value": null},{"import": 2082,"src": 6253,"name": "TLSVariant","kind": "const","type": 709,"value": 2145},{"import": 2082,"src": 6254,"name": "tls_variant","kind": "const","type": 2145,"value": null},{"import": 2082,"src": 6255,"name": "tls_tcb_size","kind": "const","type": 778,"value": null},{"import": 2082,"src": 6256,"name": "tls_tp_points_past_tcb","kind": "const","type": 720,"value": "false"},{"import": 2082,"src": 6257,"name": "tls_tp_offset","kind": "const","type": 778,"value": null},{"import": 2082,"src": 6258,"name": "tls_dtv_offset","kind": "const","type": 778,"value": null},{"import": 2082,"src": 6259,"name": "CustomData","kind": "const","type": 709,"value": 2146},{"import": 2082,"src": 6260,"name": "DTV","kind": "const","type": 709,"value": 1707},{"import": 2082,"src": 6261,"name": "TLSImage","kind": "const","type": 709,"value": 2144},{"import": 2082,"src": 164,"name": "initTLS","kind": "const","type": 20,"value": 247},{"import": 2082,"src": 247,"name": "alignPtrCast","kind": "const","type": 2147,"value": 1045},{"import": 2082,"src": 6262,"name": "main_thread_tls_buffer","kind": "var","type": 2148,"value": "undefined"},{"import": 1870,"src": 6263,"name": "WAIT","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6264,"name": "WAKE","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6265,"name": "FD"},{"import": 1870,"src": 6266,"name": "REQUEUE"},{"import": 1870,"src": 6267,"name": "CMP_REQUEUE"},{"import": 1870,"src": 6268,"name": "WAKE_OP"},{"import": 1870,"src": 6269,"name": "LOCK_PI"},{"import": 1870,"src": 6270,"name": "UNLOCK_PI"},{"import": 1870,"src": 6271,"name": "TRYLOCK_PI"},{"import": 1870,"src": 6272,"name": "WAIT_BITSET"},{"import": 1870,"src": 6273,"name": "WAKE_BITSET"},{"import": 1870,"src": 6274,"name": "WAIT_REQUEUE_PI"},{"import": 1870,"src": 6275,"name": "CMP_REQUEUE_PI"},{"import": 1870,"src": 6276,"name": "PRIVATE_FLAG","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6277,"name": "CLOCK_REALTIME"},{"import": 1870,"src": 6278,"name": "CGETS"},{"import": 1870,"src": 6279,"name": "CSETS"},{"import": 1870,"src": 6280,"name": "CSETSW"},{"import": 1870,"src": 6281,"name": "CSETSF"},{"import": 1870,"src": 6282,"name": "CGETA"},{"import": 1870,"src": 6283,"name": "CSETA"},{"import": 1870,"src": 6284,"name": "CSETAW"},{"import": 1870,"src": 6285,"name": "CSETAF"},{"import": 1870,"src": 6286,"name": "CSBRK"},{"import": 1870,"src": 6287,"name": "CXONC"},{"import": 1870,"src": 6288,"name": "CFLSH"},{"import": 1870,"src": 6289,"name": "IOCEXCL"},{"import": 1870,"src": 6290,"name": "IOCNXCL"},{"import": 1870,"src": 6291,"name": "IOCSCTTY"},{"import": 1870,"src": 6292,"name": "IOCGPGRP"},{"import": 1870,"src": 6293,"name": "IOCSPGRP"},{"import": 1870,"src": 6294,"name": "IOCOUTQ"},{"import": 1870,"src": 6295,"name": "IOCSTI"},{"import": 1870,"src": 6296,"name": "IOCGWINSZ","kind": "const","type": 778,"value": null},{"import": 1870,"src": 6297,"name": "IOCSWINSZ"},{"import": 1870,"src": 6298,"name": "IOCMGET"},{"import": 1870,"src": 6299,"name": "IOCMBIS"},{"import": 1870,"src": 6300,"name": "IOCMBIC"},{"import": 1870,"src": 6301,"name": "IOCMSET"},{"import": 1870,"src": 6302,"name": "IOCGSOFTCAR"},{"import": 1870,"src": 6303,"name": "IOCSSOFTCAR"},{"import": 1870,"src": 6304,"name": "FIONREAD"},{"import": 1870,"src": 6305,"name": "IOCINQ"},{"import": 1870,"src": 6306,"name": "IOCLINUX"},{"import": 1870,"src": 6307,"name": "IOCCONS"},{"import": 1870,"src": 6308,"name": "IOCGSERIAL"},{"import": 1870,"src": 6309,"name": "IOCSSERIAL"},{"import": 1870,"src": 6310,"name": "IOCPKT"},{"import": 1870,"src": 6311,"name": "FIONBIO"},{"import": 1870,"src": 6312,"name": "IOCNOTTY"},{"import": 1870,"src": 6313,"name": "IOCSETD"},{"import": 1870,"src": 6314,"name": "IOCGETD"},{"import": 1870,"src": 6315,"name": "CSBRKP"},{"import": 1870,"src": 6316,"name": "IOCSBRK"},{"import": 1870,"src": 6317,"name": "IOCCBRK"},{"import": 1870,"src": 6318,"name": "IOCGSID"},{"import": 1870,"src": 6319,"name": "IOCGRS485"},{"import": 1870,"src": 6320,"name": "IOCSRS485"},{"import": 1870,"src": 6321,"name": "IOCGPTN"},{"import": 1870,"src": 6322,"name": "IOCSPTLCK"},{"import": 1870,"src": 6323,"name": "IOCGDEV"},{"import": 1870,"src": 6324,"name": "CGETX"},{"import": 1870,"src": 6325,"name": "CSETX"},{"import": 1870,"src": 6326,"name": "CSETXF"},{"import": 1870,"src": 6327,"name": "CSETXW"},{"import": 1870,"src": 6328,"name": "IOCSIG"},{"import": 1870,"src": 6329,"name": "IOCVHANGUP"},{"import": 1870,"src": 6330,"name": "IOCGPKT"},{"import": 1870,"src": 6331,"name": "IOCGPTLCK"},{"import": 1870,"src": 6332,"name": "IOCGEXCL"},{"import": 2091,"src": 6333,"name": "std"},{"import": 2091,"src": 6334,"name": "builtin"},{"import": 2091,"src": 6335,"name": "assert"},{"import": 2091,"src": 6336,"name": "mem"},{"import": 2091,"src": 6337,"name": "net"},{"import": 2091,"src": 6338,"name": "os"},{"import": 2091,"src": 6339,"name": "linux"},{"import": 2091,"src": 6340,"name": "testing"},{"import": 2091,"src": 6341,"name": "io_uring_params"},{"import": 2091,"src": 6342,"name": "io_uring_sqe"},{"import": 2091,"src": 6343,"name": "io_uring_cqe"},{"import": 1469,"src": 6344,"name": "init"},{"import": 1469,"src": 6345,"name": "run"},{"import": 1469,"src": 6346,"name": "Waiters","kind": "const","type": 709,"value": 2155},{"import": 1519,"src": 6347,"name": "freeAndExit"},{"import": 1469,"src": 6348,"name": "Entry"},{"import": 1469,"src": 6349,"name": "insert"},{"import": 1469,"src": 6350,"name": "popExpired"},{"import": 1469,"src": 6351,"name": "nextExpire"},{"import": 1469,"src": 6352,"name": "peekExpiringEntry"}],"fns": [{"src": 0,"type": 0,"decl": 2121},{"src": 1,"type": 1,"decl": 0},{"src": 2,"type": 2,"decl": 1798},{"src": 3,"type": 3,"decl": 1801},{"src": 4,"type": 4,"decl": 8},{"src": 5,"type": 4,"decl": 10},{"src": 6,"type": 5,"decl": 4663},{"src": 7,"type": 6,"decl": 2638},{"src": 8,"type": 7,"decl": 4666},{"src": 9,"type": 8,"decl": 2702},{"src": 10,"type": 9,"decl": 2151},{"src": 11,"type": 10,"decl": 3394},{"src": 12,"type": 11,"decl": 86},{"src": 13,"type": 12,"decl": 104},{"src": 14,"type": 13,"decl": 2555},{"src": 15,"type": 14},{"src": 16,"type": 7,"decl": 4148},{"src": 15,"type": 15},{"src": 17,"type": 16,"decl": 2634},{"src": 18,"type": 17,"decl": 2631},{"src": 19,"type": 9,"decl": 2152},{"src": 20,"type": 18,"decl": 4677},{"src": 15,"type": 19},{"src": 21,"type": 4,"decl": 5},{"src": 22,"type": 20,"decl": 7024},{"src": 23,"type": 20,"decl": 4667},{"src": 24,"type": 21,"decl": 4153},{"src": 25,"type": 22,"decl": 4668},{"src": 26,"type": 4,"decl": 13},{"src": 27,"type": 23,"decl": 4364},{"src": 28,"type": 24,"decl": 4693},{"src": 29,"type": 25,"decl": 3445},{"src": 30,"type": 26,"decl": 4163},{"src": 31,"type": 13,"decl": 6740},{"src": 32,"type": 27},{"src": 33,"type": 28,"decl": 27},{"src": 34,"type": 29,"decl": 2635},{"src": 35,"type": 30},{"src": 36,"type": 31,"decl": 4150},{"src": 32,"type": 32},{"src": 35,"type": 33},{"src": 37,"type": 34},{"src": 38,"type": 35},{"src": 39,"type": 36,"decl": 2629},{"src": 40,"type": 37,"decl": 2646},{"src": 41,"type": 38,"decl": 2700},{"src": 15,"type": 39},{"src": 42,"type": 40,"decl": 2630},{"src": 43,"type": 41},{"src": 44,"type": 42},{"src": 45,"type": 43},{"src": 46,"type": 44,"decl": 1913},{"src": 47,"type": 45,"decl": 605},{"src": 48,"type": 46,"decl": 559},{"src": 49,"type": 47,"decl": 1916},{"src": 50,"type": 48},{"src": 51,"type": 49},{"src": 52,"type": 50,"decl": 152},{"src": 53,"type": 51},{"src": 54,"type": 52,"decl": 3265},{"src": 55,"type": 53,"decl": 1818},{"src": 56,"type": 54,"decl": 3298},{"src": 57,"type": 55},{"src": 58,"type": 56,"decl": 2647},{"src": 59,"type": 57,"decl": 2696},{"src": 60,"type": 58,"decl": 60},{"src": 61,"type": 59,"decl": 49},{"src": 62,"type": 60},{"src": 63,"type": 61,"decl": 4318},{"src": 64,"type": 62},{"src": 65,"type": 63,"decl": 19},{"src": 66,"type": 64},{"src": 67,"type": 65},{"src": 68,"type": 66,"decl": 2692},{"src": 69,"type": 67,"decl": 2463},{"src": 70,"type": 68,"decl": 260},{"src": 70,"type": 69,"decl": 410},{"src": 70,"type": 70,"decl": 510},{"src": 71,"type": 71,"decl": 1508},{"src": 72,"type": 72},{"src": 73,"type": 73,"decl": 629},{"src": 74,"type": 74,"decl": 626},{"src": 75,"type": 75,"decl": 631},{"src": 76,"type": 76,"decl": 632},{"src": 77,"type": 77,"decl": 634},{"src": 78,"type": 77,"decl": 633},{"src": 79,"type": 78,"decl": 628},{"src": 80,"type": 79,"decl": 671},{"src": 81,"type": 80,"decl": 669},{"src": 82,"type": 81},{"src": 83,"type": 82},{"src": 84,"type": 83},{"src": 85,"type": 84,"decl": 641},{"src": 86,"type": 85,"decl": 640},{"src": 87,"type": 86},{"src": 83,"type": 87},{"src": 84,"type": 88},{"src": 87,"type": 89},{"src": 83,"type": 90},{"src": 84,"type": 91},{"src": 87,"type": 92},{"src": 88,"type": 93,"decl": 652},{"src": 89,"type": 85,"decl": 639},{"src": 90,"type": 79,"decl": 672},{"src": 91,"type": 94,"decl": 1510},{"src": 92,"type": 95,"decl": 279},{"src": 93,"type": 96,"decl": 1511},{"src": 70,"type": 97,"decl": 310},{"src": 94,"type": 98,"decl": 1504},{"src": 95,"type": 99},{"src": 96,"type": 100,"decl": 312},{"src": 92,"type": 101,"decl": 329},{"src": 70,"type": 102,"decl": 360},{"src": 97,"type": 103,"decl": 349},{"src": 98,"type": 104,"decl": 345},{"src": 99,"type": 105,"decl": 346},{"src": 100,"type": 106,"decl": 355},{"src": 101,"type": 107},{"src": 102,"type": 108,"decl": 350},{"src": 92,"type": 109,"decl": 379},{"src": 97,"type": 110,"decl": 399},{"src": 98,"type": 111,"decl": 395},{"src": 99,"type": 112,"decl": 396},{"src": 100,"type": 113,"decl": 405},{"src": 101,"type": 114},{"src": 102,"type": 115,"decl": 400},{"src": 97,"type": 116,"decl": 299},{"src": 98,"type": 117,"decl": 295},{"src": 99,"type": 118,"decl": 296},{"src": 100,"type": 119,"decl": 305},{"src": 101,"type": 120},{"src": 102,"type": 121,"decl": 300},{"src": 103,"type": 122},{"src": 104,"type": 123,"decl": 2492},{"src": 70,"type": 124,"decl": 460},{"src": 105,"type": 125,"decl": 489},{"src": 98,"type": 126,"decl": 495},{"src": 99,"type": 127,"decl": 496},{"src": 100,"type": 128,"decl": 505},{"src": 101,"type": 129},{"src": 106,"type": 130},{"src": 107,"type": 131,"decl": 4732},{"src": 108,"type": 132,"decl": 4730},{"src": 109,"type": 133,"decl": 1513},{"src": 96,"type": 134,"decl": 462},{"src": 110,"type": 135,"decl": 4736},{"src": 111,"type": 136,"decl": 4733},{"src": 112,"type": 137,"decl": 4737},{"src": 92,"type": 138,"decl": 529},{"src": 97,"type": 139,"decl": 549},{"src": 98,"type": 140,"decl": 545},{"src": 99,"type": 141,"decl": 546},{"src": 100,"type": 142,"decl": 555},{"src": 101,"type": 143},{"src": 102,"type": 144,"decl": 550},{"src": 113,"type": 145,"decl": 1509},{"src": 53,"type": 146},{"src": 92,"type": 147,"decl": 429},{"src": 97,"type": 148,"decl": 449},{"src": 98,"type": 149,"decl": 445},{"src": 99,"type": 150,"decl": 446},{"src": 100,"type": 151,"decl": 455},{"src": 101,"type": 152},{"src": 102,"type": 153,"decl": 450},{"src": 114,"type": 154,"decl": 145},{"src": 115,"type": 155,"decl": 196},{"src": 116,"type": 156,"decl": 235},{"src": 117,"type": 157,"decl": 255},{"src": 118,"type": 158,"decl": 256},{"src": 119,"type": 159,"decl": 248},{"src": 120,"type": 160,"decl": 254},{"src": 121,"type": 159},{"src": 122,"type": 160,"decl": 191},{"src": 123,"type": 161},{"src": 124,"type": 162,"decl": 257},{"src": 125,"type": 42,"decl": 2397},{"src": 126,"type": 163},{"src": 127,"type": 164,"decl": 182},{"src": 128,"type": 165,"decl": 253},{"src": 129,"type": 166,"decl": 250},{"src": 130,"type": 167,"decl": 251},{"src": 131,"type": 168,"decl": 1893},{"src": 132,"type": 169,"decl": 200},{"src": 133,"type": 170},{"src": 134,"type": 171},{"src": 135,"type": 172,"decl": 2018},{"src": 136,"type": 173,"decl": 2697},{"src": 137,"type": 174,"decl": 1506},{"src": 138,"type": 175,"decl": 4734},{"src": 83,"type": 176},{"src": 87,"type": 177},{"src": 139,"type": 178,"decl": 1505},{"src": 140,"type": 179,"decl": 1507},{"src": 141,"type": 180,"decl": 653},{"src": 142,"type": 181},{"src": 143,"type": 182},{"src": 70,"type": 183,"decl": 675},{"src": 92,"type": 184,"decl": 694},{"src": 97,"type": 185,"decl": 714},{"src": 98,"type": 186,"decl": 710},{"src": 99,"type": 187,"decl": 711},{"src": 100,"type": 188,"decl": 720},{"src": 101,"type": 189},{"src": 102,"type": 190,"decl": 715},{"src": 144,"type": 191,"decl": 647},{"src": 70,"type": 192,"decl": 725},{"src": 145,"type": 193,"decl": 646},{"src": 146,"type": 194,"decl": 756},{"src": 92,"type": 195,"decl": 744},{"src": 97,"type": 196,"decl": 764},{"src": 98,"type": 197,"decl": 760},{"src": 99,"type": 198,"decl": 761},{"src": 100,"type": 199,"decl": 770},{"src": 101,"type": 200},{"src": 102,"type": 201,"decl": 765},{"src": 96,"type": 202,"decl": 727},{"src": 147,"type": 203,"decl": 739},{"src": 70,"type": 204,"decl": 775},{"src": 148,"type": 205,"decl": 1902},{"src": 95,"type": 206},{"src": 92,"type": 207,"decl": 794},{"src": 97,"type": 208,"decl": 814},{"src": 98,"type": 209,"decl": 810},{"src": 99,"type": 210,"decl": 811},{"src": 100,"type": 211,"decl": 820},{"src": 101,"type": 212},{"src": 102,"type": 213,"decl": 815},{"src": 62,"type": 214},{"src": 149,"type": 215,"decl": 670},{"src": 150,"type": 216,"decl": 1903},{"src": 151,"type": 217,"decl": 6772},{"src": 152,"type": 218,"decl": 6815},{"src": 153,"type": 219,"decl": 6771},{"src": 154,"type": 220},{"src": 155,"type": 221},{"src": 156,"type": 222,"decl": 1901},{"src": 157,"type": 223},{"src": 158,"type": 224,"decl": 1904},{"src": 15,"type": 225},{"src": 15,"type": 226},{"src": 159,"type": 227},{"src": 160,"type": 228,"decl": 1905},{"src": 161,"type": 229,"decl": 1906},{"src": 15,"type": 230},{"src": 162,"type": 24,"decl": 4694},{"src": 163,"type": 231,"decl": 4741},{"src": 32,"type": 232},{"src": 164,"type": 20,"decl": 7041},{"src": 165,"type": 233,"decl": 7023},{"src": 166,"type": 234,"decl": 7022},{"src": 167,"type": 235,"decl": 4418},{"src": 168,"type": 236,"decl": 5021},{"src": 169,"type": 8,"decl": 2652},{"src": 170,"type": 237,"decl": 4672},{"src": 171,"type": 238,"decl": 4954},{"src": 172,"type": 239,"decl": 5059},{"src": 173,"type": 240,"decl": 4696},{"src": 174,"type": 241,"decl": 5004},{"src": 175,"type": 242,"decl": 4361},{"src": 176,"type": 25,"decl": 5057},{"src": 177,"type": 243,"decl": 26},{"src": 178,"type": 244},{"src": 179,"type": 245},{"src": 180,"type": 246},{"src": 181,"type": 247},{"src": 182,"type": 248,"decl": 3187},{"src": 183,"type": 249},{"src": 184,"type": 250,"decl": 4600},{"src": 185,"type": 251},{"src": 186,"type": 252,"decl": 4593},{"src": 187,"type": 253,"decl": 4595},{"src": 188,"type": 254,"decl": 30},{"src": 189,"type": 255,"decl": 5058},{"src": 190,"type": 256,"decl": 5024},{"src": 191,"type": 257},{"src": 192,"type": 258,"decl": 1958},{"src": 193,"type": 259},{"src": 194,"type": 260},{"src": 195,"type": 261,"decl": 1911},{"src": 196,"type": 262,"decl": 1919},{"src": 197,"type": 45,"decl": 604},{"src": 198,"type": 263,"decl": 6851},{"src": 199,"type": 264,"decl": 6852},{"src": 32,"type": 265},{"src": 35,"type": 266},{"src": 200,"type": 267},{"src": 200,"type": 267},{"src": 201,"type": 268,"decl": 51},{"src": 202,"type": 269},{"src": 203,"type": 270,"decl": 4499},{"src": 204,"type": 271,"decl": 6969},{"src": 205,"type": 272,"decl": 4755},{"src": 206,"type": 273,"decl": 4756},{"src": 207,"type": 274,"decl": 223},{"src": 208,"type": 275},{"src": 209,"type": 276,"decl": 4358},{"src": 210,"type": 277},{"src": 211,"type": 278,"decl": 1821},{"src": 212,"type": 279,"decl": 3271},{"src": 213,"type": 280,"decl": 4722},{"src": 214,"type": 281,"decl": 65},{"src": 215,"type": 282,"decl": 4141},{"src": 216,"type": 283,"decl": 4984},{"src": 217,"type": 284},{"src": 67,"type": 285},{"src": 181,"type": 286},{"src": 62,"type": 287},{"src": 218,"type": 288},{"src": 185,"type": 289},{"src": 219,"type": 289},{"src": 185,"type": 290},{"src": 219,"type": 290},{"src": 185,"type": 291},{"src": 219,"type": 291},{"src": 143,"type": 292},{"src": 220,"type": 293},{"src": 220,"type": 294},{"src": 220,"type": 295},{"src": 220,"type": 296},{"src": 221,"type": 297},{"src": 222,"type": 298},{"src": 223,"type": 299},{"src": 224,"type": 300},{"src": 224,"type": 301},{"src": 224,"type": 302},{"src": 224,"type": 303},{"src": 224,"type": 304},{"src": 225,"type": 305},{"src": 226,"type": 306},{"src": 53,"type": 307},{"src": 57,"type": 308},{"src": 227,"type": 309},{"src": 143,"type": 310},{"src": 220,"type": 311},{"src": 208,"type": 312},{"src": 220,"type": 313},{"src": 228,"type": 156},{"src": 229,"type": 314},{"src": 230,"type": 315,"decl": 249},{"src": 231,"type": 42},{"src": 208,"type": 316},{"src": 232,"type": 164,"decl": 258},{"src": 233,"type": 168,"decl": 1894},{"src": 234,"type": 317,"decl": 1895},{"src": 235,"type": 318,"decl": 1896},{"src": 236,"type": 319},{"src": 15,"type": 320},{"src": 15,"type": 321},{"src": 237,"type": 322},{"src": 238,"type": 323,"decl": 76},{"src": 239,"type": 324,"decl": 29},{"src": 219,"type": 251},{"src": 208,"type": 325},{"src": 240,"type": 326},{"src": 220,"type": 327},{"src": 220,"type": 328},{"src": 241,"type": 329},{"src": 220,"type": 330},{"src": 242,"type": 331,"decl": 1925},{"src": 32,"type": 332},{"src": 35,"type": 266},{"src": 32,"type": 333},{"src": 243,"type": 229,"decl": 1910},{"src": 32,"type": 334},{"src": 244,"type": 24,"decl": 4697},{"src": 245,"type": 335,"decl": 4742},{"src": 246,"type": 336},{"src": 247,"type": 337},{"src": 247,"type": 338},{"src": 248,"type": 339,"decl": 2245},{"src": 249,"type": 340,"decl": 5131},{"src": 250,"type": 341,"decl": 2244},{"src": 251,"type": 8,"decl": 2653},{"src": 252,"type": 342,"decl": 4639},{"src": 253,"type": 343,"decl": 2252},{"src": 254,"type": 344,"decl": 2247},{"src": 44,"type": 345},{"src": 255,"type": 346,"decl": 2588},{"src": 256,"type": 347,"decl": 4967},{"src": 257,"type": 348,"decl": 2246},{"src": 258,"type": 349},{"src": 259,"type": 350,"decl": 2243},{"src": 260,"type": 351,"decl": 4596},{"src": 261,"type": 352,"decl": 4597},{"src": 262,"type": 353,"decl": 4598},{"src": 263,"type": 258,"decl": 1930},{"src": 264,"type": 354,"decl": 126},{"src": 265,"type": 355,"decl": 1926},{"src": 266,"type": 260,"decl": 2405},{"src": 267,"type": 356},{"src": 268,"type": 357,"decl": 4319},{"src": 269,"type": 358,"decl": 3354},{"src": 191,"type": 359},{"src": 270,"type": 360,"decl": 4187},{"src": 271,"type": 268,"decl": 50},{"src": 272,"type": 361,"decl": 4189},{"src": 202,"type": 362},{"src": 273,"type": 363,"decl": 4953},{"src": 274,"type": 364,"decl": 6968},{"src": 275,"type": 274},{"src": 276,"type": 365},{"src": 277,"type": 366,"decl": 4176},{"src": 278,"type": 367,"decl": 4344},{"src": 279,"type": 368,"decl": 6775},{"src": 280,"type": 369,"decl": 4296},{"src": 281,"type": 370,"decl": 975},{"src": 282,"type": 370,"decl": 976},{"src": 283,"type": 370,"decl": 977},{"src": 284,"type": 371,"decl": 5015},{"src": 285,"type": 372,"decl": 2249},{"src": 286,"type": 373},{"src": 217,"type": 374},{"src": 240,"type": 375},{"src": 208,"type": 376},{"src": 287,"type": 377,"decl": 4700},{"src": 288,"type": 378},{"src": 208,"type": 379},{"src": 143,"type": 380},{"src": 240,"type": 381},{"src": 288,"type": 382},{"src": 208,"type": 383},{"src": 143,"type": 384},{"src": 240,"type": 385},{"src": 288,"type": 386},{"src": 208,"type": 387},{"src": 240,"type": 388},{"src": 288,"type": 389},{"src": 289,"type": 390},{"src": 290,"type": 391},{"src": 83,"type": 392},{"src": 84,"type": 393},{"src": 87,"type": 394},{"src": 208,"type": 395},{"src": 208,"type": 396},{"src": 143,"type": 397},{"src": 240,"type": 398},{"src": 288,"type": 399},{"src": 208,"type": 400},{"src": 143,"type": 401},{"src": 240,"type": 402},{"src": 288,"type": 403},{"src": 291,"type": 404},{"src": 292,"type": 405},{"src": 293,"type": 42},{"src": 288,"type": 406},{"src": 143,"type": 407},{"src": 32,"type": 408},{"src": 35,"type": 33},{"src": 35,"type": 30},{"src": 35,"type": 30},{"src": 32,"type": 409},{"src": 35,"type": 410},{"src": 35,"type": 33},{"src": 35,"type": 33},{"src": 294,"type": 411,"decl": 4155},{"src": 208,"type": 412},{"src": 143,"type": 413},{"src": 240,"type": 414},{"src": 288,"type": 415},{"src": 208,"type": 325},{"src": 288,"type": 326},{"src": 295,"type": 416},{"src": 208,"type": 417},{"src": 143,"type": 418},{"src": 240,"type": 419},{"src": 288,"type": 420},{"src": 143,"type": 421},{"src": 191,"type": 422},{"src": 296,"type": 4,"decl": 9},{"src": 297,"type": 423},{"src": 298,"type": 424,"decl": 4968},{"src": 299,"type": 425,"decl": 7015},{"src": 300,"type": 426,"decl": 5132},{"src": 301,"type": 427,"decl": 2703},{"src": 302,"type": 428,"decl": 1669},{"src": 303,"type": 429},{"src": 15,"type": 430},{"src": 304,"type": 431,"decl": 1927},{"src": 305,"type": 432,"decl": 1928},{"src": 306,"type": 433,"decl": 1929},{"src": 307,"type": 434,"decl": 1923},{"src": 308,"type": 435,"decl": 1922},{"src": 309,"type": 436,"decl": 847},{"src": 310,"type": 200},{"src": 311,"type": 264,"decl": 1924},{"src": 312,"type": 437},{"src": 313,"type": 438},{"src": 314,"type": 439,"decl": 4986},{"src": 315,"type": 358,"decl": 2302},{"src": 316,"type": 440,"decl": 4266},{"src": 317,"type": 373},{"src": 318,"type": 441,"decl": 5012},{"src": 319,"type": 256,"decl": 5033},{"src": 320,"type": 368,"decl": 6784},{"src": 321,"type": 442,"decl": 5080},{"src": 322,"type": 443},{"src": 208,"type": 376},{"src": 323,"type": 377,"decl": 4728},{"src": 208,"type": 379},{"src": 208,"type": 383},{"src": 208,"type": 387},{"src": 185,"type": 444},{"src": 219,"type": 444},{"src": 208,"type": 396},{"src": 208,"type": 400},{"src": 240,"type": 406},{"src": 191,"type": 445},{"src": 178,"type": 446},{"src": 179,"type": 447},{"src": 178,"type": 448},{"src": 179,"type": 449},{"src": 178,"type": 450},{"src": 179,"type": 451},{"src": 180,"type": 452},{"src": 181,"type": 453},{"src": 191,"type": 454},{"src": 191,"type": 455},{"src": 324,"type": 456,"decl": 4989},{"src": 208,"type": 412},{"src": 208,"type": 417},{"src": 240,"type": 285},{"src": 15,"type": 457},{"src": 15,"type": 458},{"src": 15,"type": 459},{"src": 325,"type": 460,"decl": 2632},{"src": 326,"type": 461,"decl": 2502},{"src": 327,"type": 462,"decl": 2503},{"src": 328,"type": 463,"decl": 2506},{"src": 329,"type": 464,"decl": 2507},{"src": 330,"type": 465,"decl": 2510},{"src": 331,"type": 466,"decl": 2511},{"src": 332,"type": 467,"decl": 2440},{"src": 333,"type": 468,"decl": 2441},{"src": 334,"type": 469,"decl": 2514},{"src": 335,"type": 470,"decl": 2515},{"src": 336,"type": 471,"decl": 2522},{"src": 337,"type": 472,"decl": 2523},{"src": 338,"type": 473,"decl": 2529},{"src": 339,"type": 474,"decl": 2530},{"src": 340,"type": 475,"decl": 2534},{"src": 341,"type": 476,"decl": 2535},{"src": 342,"type": 477},{"src": 343,"type": 478,"decl": 1870},{"src": 344,"type": 479},{"src": 345,"type": 480},{"src": 346,"type": 481,"decl": 726},{"src": 347,"type": 482,"decl": 102},{"src": 348,"type": 483},{"src": 44,"type": 363},{"src": 349,"type": 484,"decl": 763},{"src": 86,"type": 485,"decl": 948},{"src": 350,"type": 194,"decl": 755},{"src": 351,"type": 486},{"src": 351,"type": 487},{"src": 351,"type": 488},{"src": 352,"type": 429},{"src": 32,"type": 489},{"src": 35,"type": 490},{"src": 353,"type": 432,"decl": 1931},{"src": 354,"type": 491,"decl": 4764},{"src": 355,"type": 492},{"src": 355,"type": 492},{"src": 355,"type": 492},{"src": 356,"type": 492,"decl": 4762},{"src": 357,"type": 491,"decl": 4765},{"src": 358,"type": 493,"decl": 4763},{"src": 293,"type": 493},{"src": 359,"type": 42,"decl": 2400},{"src": 360,"type": 4,"decl": 12},{"src": 361,"type": 494,"decl": 6782},{"src": 193,"type": 495},{"src": 32,"type": 496},{"src": 35,"type": 410},{"src": 32,"type": 497},{"src": 35,"type": 410},{"src": 32,"type": 498},{"src": 35,"type": 410},{"src": 15,"type": 499},{"src": 362,"type": 500},{"src": 363,"type": 501,"decl": 978},{"src": 364,"type": 502},{"src": 365,"type": 503},{"src": 366,"type": 504,"decl": 981},{"src": 364,"type": 492},{"src": 367,"type": 505},{"src": 368,"type": 506},{"src": 70,"type": 507,"decl": 990},{"src": 369,"type": 508,"decl": 1040},{"src": 370,"type": 509,"decl": 984},{"src": 92,"type": 510,"decl": 1009},{"src": 97,"type": 511,"decl": 1029},{"src": 98,"type": 512,"decl": 1025},{"src": 99,"type": 513,"decl": 1026},{"src": 100,"type": 514,"decl": 1035},{"src": 101,"type": 515},{"src": 102,"type": 516,"decl": 1030},{"src": 96,"type": 517,"decl": 992},{"src": 371,"type": 518,"decl": 1041},{"src": 37,"type": 519},{"src": 38,"type": 520},{"src": 372,"type": 521,"decl": 1934},{"src": 44,"type": 522},{"src": 121,"type": 522},{"src": 373,"type": 523,"decl": 1936},{"src": 374,"type": 524,"decl": 1065},{"src": 375,"type": 525,"decl": 1156},{"src": 376,"type": 526},{"src": 117,"type": 527,"decl": 1185},{"src": 118,"type": 528,"decl": 1186},{"src": 119,"type": 159,"decl": 1178},{"src": 120,"type": 529,"decl": 1184},{"src": 122,"type": 529,"decl": 1121},{"src": 124,"type": 530,"decl": 1187},{"src": 126,"type": 531},{"src": 127,"type": 532,"decl": 1112},{"src": 128,"type": 533,"decl": 1183},{"src": 129,"type": 534,"decl": 1180},{"src": 130,"type": 535,"decl": 1181},{"src": 131,"type": 536,"decl": 1939},{"src": 132,"type": 537,"decl": 1130},{"src": 133,"type": 538},{"src": 291,"type": 539},{"src": 377,"type": 540},{"src": 378,"type": 541,"decl": 1935},{"src": 379,"type": 542,"decl": 1938},{"src": 380,"type": 543,"decl": 2521},{"src": 381,"type": 543,"decl": 2520},{"src": 382,"type": 544,"decl": 2528},{"src": 37,"type": 545},{"src": 38,"type": 546},{"src": 264,"type": 547,"decl": 1200},{"src": 52,"type": 548,"decl": 1226},{"src": 383,"type": 549,"decl": 2527},{"src": 384,"type": 550,"decl": 1202},{"src": 385,"type": 551,"decl": 1218},{"src": 386,"type": 552,"decl": 1286},{"src": 375,"type": 553,"decl": 1300},{"src": 376,"type": 554},{"src": 117,"type": 555,"decl": 1329},{"src": 118,"type": 556,"decl": 1330},{"src": 119,"type": 159,"decl": 1322},{"src": 120,"type": 557,"decl": 1328},{"src": 122,"type": 557,"decl": 1265},{"src": 124,"type": 558,"decl": 1331},{"src": 127,"type": 559,"decl": 1256},{"src": 128,"type": 560,"decl": 1327},{"src": 129,"type": 561,"decl": 1324},{"src": 130,"type": 562,"decl": 1325},{"src": 131,"type": 563,"decl": 1947},{"src": 132,"type": 564,"decl": 1274},{"src": 133,"type": 565},{"src": 291,"type": 566},{"src": 377,"type": 567},{"src": 70,"type": 568,"decl": 1334},{"src": 92,"type": 569,"decl": 1353},{"src": 97,"type": 570,"decl": 1373},{"src": 98,"type": 571,"decl": 1369},{"src": 99,"type": 572,"decl": 1370},{"src": 100,"type": 573,"decl": 1379},{"src": 101,"type": 574},{"src": 102,"type": 575,"decl": 1374},{"src": 96,"type": 576,"decl": 1336},{"src": 387,"type": 577},{"src": 388,"type": 578},{"src": 389,"type": 543,"decl": 2533},{"src": 390,"type": 579},{"src": 391,"type": 580},{"src": 89,"type": 485,"decl": 947},{"src": 392,"type": 200},{"src": 352,"type": 486},{"src": 352,"type": 487},{"src": 352,"type": 488},{"src": 393,"type": 429},{"src": 178,"type": 581},{"src": 179,"type": 582},{"src": 180,"type": 583},{"src": 181,"type": 584},{"src": 355,"type": 492},{"src": 394,"type": 585},{"src": 395,"type": 42,"decl": 2401},{"src": 178,"type": 586},{"src": 179,"type": 587},{"src": 178,"type": 588},{"src": 179,"type": 589},{"src": 178,"type": 590},{"src": 179,"type": 591},{"src": 32,"type": 592},{"src": 35,"type": 266},{"src": 396,"type": 593},{"src": 397,"type": 594},{"src": 397,"type": 595},{"src": 322,"type": 596},{"src": 398,"type": 597,"decl": 988},{"src": 220,"type": 598},{"src": 143,"type": 599},{"src": 399,"type": 600,"decl": 1042},{"src": 400,"type": 600,"decl": 1043},{"src": 401,"type": 601,"decl": 1044},{"src": 193,"type": 602},{"src": 194,"type": 603},{"src": 264,"type": 604,"decl": 1056},{"src": 230,"type": 605,"decl": 1179},{"src": 208,"type": 606},{"src": 232,"type": 532,"decl": 1188},{"src": 116,"type": 607,"decl": 1165},{"src": 233,"type": 536,"decl": 1940},{"src": 234,"type": 317,"decl": 1941},{"src": 235,"type": 608,"decl": 1942},{"src": 384,"type": 609,"decl": 1058},{"src": 402,"type": 610,"decl": 1064},{"src": 403,"type": 611,"decl": 1383},{"src": 404,"type": 612,"decl": 1955},{"src": 405,"type": 613},{"src": 406,"type": 614,"decl": 1957},{"src": 194,"type": 615},{"src": 207,"type": 616,"decl": 1297},{"src": 230,"type": 617,"decl": 1323},{"src": 232,"type": 559,"decl": 1332},{"src": 116,"type": 618,"decl": 1309},{"src": 233,"type": 563,"decl": 1948},{"src": 234,"type": 317,"decl": 1949},{"src": 235,"type": 619,"decl": 1950},{"src": 220,"type": 620},{"src": 143,"type": 621},{"src": 133,"type": 622},{"src": 407,"type": 623,"decl": 1959},{"src": 408,"type": 624,"decl": 1962},{"src": 409,"type": 625,"decl": 1961},{"src": 410,"type": 626,"decl": 1966},{"src": 411,"type": 627},{"src": 412,"type": 628,"decl": 1964},{"src": 413,"type": 629,"decl": 1960},{"src": 155,"type": 630},{"src": 414,"type": 631},{"src": 415,"type": 632,"decl": 1965},{"src": 416,"type": 624,"decl": 1963},{"src": 417,"type": 633},{"src": 418,"type": 631},{"src": 419,"type": 634},{"src": 420,"type": 635},{"src": 421,"type": 635},{"src": 422,"type": 636},{"src": 423,"type": 637},{"src": 424,"type": 638},{"src": 425,"type": 639},{"src": 426,"type": 578},{"src": 427,"type": 635},{"src": 428,"type": 635},{"src": 429,"type": 640,"decl": 3448},{"src": 430,"type": 641},{"src": 431,"type": 642,"decl": 1399},{"src": 432,"type": 643,"decl": 1400},{"src": 32,"type": 644},{"src": 33,"type": 645,"decl": 1404},{"src": 35,"type": 646},{"src": 72,"type": 647},{"src": 433,"type": 648,"decl": 1426},{"src": 434,"type": 649,"decl": 1423},{"src": 32,"type": 650},{"src": 33,"type": 651,"decl": 1436},{"src": 35,"type": 652},{"src": 435,"type": 653,"decl": 1431},{"src": 393,"type": 486},{"src": 393,"type": 487},{"src": 393,"type": 488},{"src": 436,"type": 654,"decl": 2628},{"src": 15,"type": 655},{"src": 191,"type": 656},{"src": 437,"type": 267},{"src": 438,"type": 593},{"src": 439,"type": 657,"decl": 2425},{"src": 440,"type": 594},{"src": 440,"type": 594},{"src": 440,"type": 594},{"src": 440,"type": 595},{"src": 440,"type": 595},{"src": 440,"type": 595},{"src": 208,"type": 658},{"src": 240,"type": 659},{"src": 288,"type": 660},{"src": 194,"type": 661},{"src": 288,"type": 662},{"src": 143,"type": 663},{"src": 228,"type": 607},{"src": 441,"type": 664,"decl": 1124},{"src": 442,"type": 613},{"src": 275,"type": 616},{"src": 228,"type": 618},{"src": 208,"type": 665},{"src": 240,"type": 666},{"src": 288,"type": 667},{"src": 443,"type": 363},{"src": 133,"type": 668},{"src": 444,"type": 669},{"src": 445,"type": 634},{"src": 121,"type": 42},{"src": 446,"type": 637},{"src": 177,"type": 670,"decl": 1385},{"src": 177,"type": 671,"decl": 1403},{"src": 178,"type": 672},{"src": 179,"type": 673},{"src": 180,"type": 674},{"src": 183,"type": 675},{"src": 188,"type": 676,"decl": 1407},{"src": 67,"type": 326},{"src": 177,"type": 677,"decl": 1435},{"src": 178,"type": 678},{"src": 179,"type": 679},{"src": 180,"type": 680},{"src": 183,"type": 681},{"src": 188,"type": 682,"decl": 1439},{"src": 15,"type": 683},{"src": 15,"type": 684},{"src": 15,"type": 685},{"src": 32,"type": 686},{"src": 35,"type": 266},{"src": 123,"type": 267},{"src": 447,"type": 687,"decl": 3186},{"src": 62,"type": 688},{"src": 276,"type": 689},{"src": 218,"type": 690},{"src": 297,"type": 691},{"src": 62,"type": 692},{"src": 276,"type": 693},{"src": 218,"type": 694},{"src": 297,"type": 695},{"src": 208,"type": 658},{"src": 240,"type": 662},{"src": 442,"type": 696},{"src": 442,"type": 697},{"src": 208,"type": 665},{"src": 217,"type": 233},{"src": 32,"type": 698},{"src": 35,"type": 410},{"src": 32,"type": 699},{"src": 32,"type": 700},{"src": 191,"type": 701},{"src": 448,"type": 702,"decl": 1956},{"src": 193,"type": 703},{"src": 178,"type": 704},{"src": 179,"type": 705},{"src": 449,"type": 706,"decl": 1448},{"src": 450,"type": 707,"decl": 1449},{"src": 451,"type": 492,"decl": 1996},{"src": 452,"type": 62,"decl": 1995},{"src": 453,"type": 708,"decl": 4899},{"src": 454,"type": 712,"decl": 3991},{"src": 455,"type": 717,"decl": 3913},{"src": 456,"type": 722,"decl": 1971},{"src": 457,"type": 727,"decl": 1991},{"src": 458,"type": 729,"decl": 1987},{"src": 459,"type": 730,"decl": 1988},{"src": 460,"type": 731,"decl": 2001},{"src": 461,"type": 733,"decl": 2002},{"src": 462,"type": 736,"decl": 1989},{"src": 463,"type": 737,"decl": 2003},{"src": 464,"type": 739,"decl": 3898},{"src": 465,"type": 740,"decl": 2020},{"src": 466,"type": 744,"decl": 2019},{"src": 467,"type": 758,"decl": 3969},{"src": 468,"type": 761,"decl": 3971},{"src": 469,"type": 763,"decl": 2314},{"src": 470,"type": 766,"decl": 2065},{"src": 471,"type": 767,"decl": 2058},{"src": 472,"type": 769,"decl": 2066},{"src": 473,"type": 773,"decl": 2072},{"src": 121,"type": 777,"decl": 3901},{"src": 474,"type": 779,"decl": 3902},{"src": 475,"type": 780,"decl": 3937},{"src": 64,"type": 785,"decl": 2310},{"src": 476,"type": 786,"decl": 4774},{"src": 477,"type": 788},{"src": 478,"type": 789,"decl": 4791},{"src": 227,"type": 790,"decl": 2329},{"src": 210,"type": 792,"decl": 2327},{"src": 123,"type": 793,"decl": 3929},{"src": 437,"type": 794,"decl": 4797},{"src": 479,"type": 795,"decl": 3981},{"src": 480,"type": 798,"decl": 4776},{"src": 481,"type": 800},{"src": 482,"type": 802,"decl": 4783},{"src": 483,"type": 803,"decl": 3968},{"src": 484,"type": 804,"decl": 2430},{"src": 485,"type": 808,"decl": 2431},{"src": 486,"type": 809,"decl": 2127},{"src": 487,"type": 816,"decl": 3938},{"src": 488,"type": 817,"decl": 4785},{"src": 489,"type": 818,"decl": 2434},{"src": 490,"type": 820,"decl": 2140},{"src": 491,"type": 823,"decl": 2128},{"src": 492,"type": 825,"decl": 2169},{"src": 493,"type": 833,"decl": 2206},{"src": 494,"type": 839,"decl": 4777},{"src": 495,"type": 841},{"src": 496,"type": 842,"decl": 2433},{"src": 497,"type": 849,"decl": 3970},{"src": 498,"type": 854,"decl": 2228},{"src": 499,"type": 868,"decl": 3973},{"src": 500,"type": 875,"decl": 2368},{"src": 501,"type": 877,"decl": 2437},{"src": 502,"type": 879,"decl": 2367},{"src": 503,"type": 892,"decl": 4520},{"src": 504,"type": 897,"decl": 1176},{"src": 505,"type": 899},{"src": 506,"type": 903,"decl": 2445},{"src": 507,"type": 911,"decl": 1447},{"src": 322,"type": 914,"decl": 2306},{"src": 481,"type": 918},{"src": 481,"type": 920},{"src": 508,"type": 921,"decl": 6844},{"src": 509,"type": 934,"decl": 1992},{"src": 510,"type": 938,"decl": 4788},{"src": 511,"type": 939,"decl": 883},{"src": 512,"type": 942,"decl": 4787},{"src": 511,"type": 945,"decl": 906},{"src": 15,"type": 1405,"decl": 28},{"src": 345,"type": 1413,"decl": 73},{"src": 275,"type": 1417,"decl": 224},{"src": 228,"type": 1418,"decl": 236},{"src": 291,"type": 1420,"decl": 252},{"src": 84,"type": 1433,"decl": 654},{"src": 83,"type": 1434,"decl": 659},{"src": 289,"type": 1435,"decl": 660},{"src": 303,"type": 1477,"decl": 941},{"src": 351,"type": 1478,"decl": 944},{"src": 348,"type": 1479,"decl": 952},{"src": 376,"type": 1487,"decl": 1158},{"src": 377,"type": 1488,"decl": 1161},{"src": 228,"type": 1489,"decl": 1166},{"src": 291,"type": 1491,"decl": 1182},{"src": 275,"type": 1493,"decl": 1298},{"src": 376,"type": 1494,"decl": 1302},{"src": 377,"type": 1495,"decl": 1305},{"src": 228,"type": 1496,"decl": 1310},{"src": 291,"type": 1498,"decl": 1326},{"src": 103,"type": 1505,"decl": 1512},{"src": 236,"type": 1558,"decl": 1810},{"src": 344,"type": 1567,"decl": 1871},{"src": 405,"type": 1840,"decl": 6839},{"src": 72,"type": 1851,"decl": 2059},{"src": 393,"type": 1889,"decl": 2227},{"src": 352,"type": 1891,"decl": 2242},{"src": 155,"type": 1904,"decl": 2303},{"src": 246,"type": 1905,"decl": 2305},{"src": 67,"type": 1906,"decl": 2315},{"src": 202,"type": 1907,"decl": 2316},{"src": 217,"type": 1908,"decl": 2318},{"src": 317,"type": 1909,"decl": 2319},{"src": 286,"type": 1910,"decl": 2320},{"src": 367,"type": 1911,"decl": 2325},{"src": 438,"type": 1912,"decl": 2335},{"src": 396,"type": 1913,"decl": 2337},{"src": 290,"type": 1914,"decl": 2340},{"src": 185,"type": 1915,"decl": 2341},{"src": 219,"type": 1916,"decl": 2342},{"src": 87,"type": 1917,"decl": 2349},{"src": 368,"type": 1918,"decl": 2362},{"src": 362,"type": 1919,"decl": 2363},{"src": 133,"type": 1920,"decl": 2374},{"src": 444,"type": 1921,"decl": 2375},{"src": 417,"type": 1922,"decl": 2376},{"src": 313,"type": 1923,"decl": 2389},{"src": 267,"type": 1924,"decl": 2390},{"src": 193,"type": 1925,"decl": 2391},{"src": 288,"type": 1926,"decl": 2395},{"src": 240,"type": 1927,"decl": 2396},{"src": 231,"type": 1928,"decl": 2398},{"src": 293,"type": 1929,"decl": 2402},{"src": 312,"type": 1930,"decl": 2406},{"src": 364,"type": 1931,"decl": 2436},{"src": 365,"type": 1932,"decl": 2438},{"src": 430,"type": 1936,"decl": 2446},{"src": 82,"type": 1944,"decl": 2484},{"src": 225,"type": 1945,"decl": 2485},{"src": 221,"type": 1946,"decl": 2486},{"src": 223,"type": 1947,"decl": 2487},{"src": 222,"type": 1948,"decl": 2488},{"src": 224,"type": 1949,"decl": 2489},{"src": 226,"type": 1950,"decl": 2490},{"src": 106,"type": 1951,"decl": 2491},{"src": 258,"type": 1960,"decl": 2627},{"src": 43,"type": 1961,"decl": 2639},{"src": 159,"type": 1962,"decl": 2641},{"src": 45,"type": 1964,"decl": 2644},{"src": 134,"type": 1968,"decl": 2690},{"src": 237,"type": 1969,"decl": 2694},{"src": 32,"type": 1980,"decl": 3157},{"src": 35,"type": 1981,"decl": 3159},{"src": 179,"type": 1982,"decl": 3160},{"src": 191,"type": 1983,"decl": 3168},{"src": 183,"type": 1984,"decl": 3171},{"src": 180,"type": 1985,"decl": 3175},{"src": 397,"type": 1986,"decl": 3181},{"src": 391,"type": 1987,"decl": 3189},{"src": 390,"type": 1988,"decl": 3191},{"src": 342,"type": 1989,"decl": 3193},{"src": 178,"type": 1991,"decl": 3213},{"src": 440,"type": 1992,"decl": 3226},{"src": 419,"type": 1999},{"src": 44,"type": 2000,"decl": 3899},{"src": 276,"type": 2001,"decl": 3904},{"src": 218,"type": 2002,"decl": 3905},{"src": 297,"type": 2003,"decl": 3906},{"src": 181,"type": 2004,"decl": 3924},{"src": 62,"type": 2005,"decl": 3926},{"src": 443,"type": 2006,"decl": 3930},{"src": 292,"type": 2007,"decl": 3931},{"src": 229,"type": 2008,"decl": 3932},{"src": 394,"type": 2009,"decl": 3939},{"src": 66,"type": 2010,"decl": 3972},{"src": 3333,"type": 2011,"decl": 3976},{"src": 194,"type": 2012,"decl": 3984},{"src": 51,"type": 2030,"decl": 4352},{"src": 200,"type": 2037,"decl": 4486},{"src": 426,"type": 2038,"decl": 4518},{"src": 388,"type": 2039,"decl": 4519},{"src": 425,"type": 2041,"decl": 4535},{"src": 424,"type": 2042,"decl": 4536},{"src": 422,"type": 2043,"decl": 4537},{"src": 427,"type": 2044,"decl": 4538},{"src": 421,"type": 2045,"decl": 4539},{"src": 420,"type": 2046,"decl": 4540},{"src": 428,"type": 2047,"decl": 4541},{"src": 423,"type": 2048,"decl": 4542},{"src": 446,"type": 2049,"decl": 4543},{"src": 414,"type": 2050,"decl": 4544},{"src": 418,"type": 2051,"decl": 4545},{"src": 411,"type": 2052,"decl": 4546},{"src": 53,"type": 2055,"decl": 4701},{"src": 57,"type": 2056,"decl": 4702},{"src": 142,"type": 2057,"decl": 4703},{"src": 126,"type": 2058,"decl": 4707},{"src": 208,"type": 2059,"decl": 4710},{"src": 310,"type": 2060,"decl": 4711},{"src": 392,"type": 2061,"decl": 4712},{"src": 101,"type": 2062,"decl": 4713},{"src": 220,"type": 2063,"decl": 4715},{"src": 241,"type": 2064,"decl": 4716},{"src": 295,"type": 2065,"decl": 4718},{"src": 143,"type": 2066,"decl": 4719},{"src": 154,"type": 2067,"decl": 4720},{"src": 355,"type": 2075,"decl": 4761},{"src": 95,"type": 2109,"decl": 6691},{"src": 157,"type": 2110,"decl": 6693},{"src": 442,"type": 2122,"decl": 6838},{"src": 247,"type": 2147,"decl": 7042}],"errors": [{"src": 6353,"name": "DiskQuota"},{"src": 6354,"name": "FileTooBig"},{"src": 6355,"name": "InputOutput"},{"src": 6356,"name": "NoSpaceLeft"},{"src": 6357,"name": "AccessDenied"},{"src": 6358,"name": "BrokenPipe"},{"src": 6359,"name": "SystemResources"},{"src": 6360,"name": "OperationAborted"},{"src": 6361,"name": "NotOpenForWriting"},{"src": 6362,"name": "WouldBlock"},{"src": 6363,"name": "ConnectionResetByPeer"},{"src": 6364,"name": "Unexpected"},{"src": 6365,"name": "InputOutput"},{"src": 6366,"name": "SystemResources"},{"src": 6367,"name": "IsDir"},{"src": 6368,"name": "OperationAborted"},{"src": 6369,"name": "BrokenPipe"},{"src": 6370,"name": "ConnectionResetByPeer"},{"src": 6371,"name": "ConnectionTimedOut"},{"src": 6372,"name": "NotOpenForReading"},{"src": 6373,"name": "WouldBlock"},{"src": 6374,"name": "AccessDenied"},{"src": 6375,"name": "NoSpaceLeft"},{"src": 6376,"name": "SharingViolation"},{"src": 6377,"name": "PathAlreadyExists"},{"src": 6378,"name": "FileNotFound"},{"src": 6379,"name": "AccessDenied"},{"src": 6380,"name": "PipeBusy"},{"src": 6381,"name": "NameTooLong"},{"src": 6382,"name": "InvalidUtf8"},{"src": 6383,"name": "BadPathName"},{"src": 6384,"name": "Unexpected"},{"src": 6385,"name": "SymLinkLoop"},{"src": 6386,"name": "ProcessFdQuotaExceeded"},{"src": 6387,"name": "SystemFdQuotaExceeded"},{"src": 6388,"name": "NoDevice"},{"src": 6389,"name": "SystemResources"},{"src": 6390,"name": "FileTooBig"},{"src": 6391,"name": "IsDir"},{"src": 6392,"name": "NoSpaceLeft"},{"src": 6393,"name": "NotDir"},{"src": 6394,"name": "DeviceBusy"},{"src": 6395,"name": "FileLocksNotSupported"},{"src": 6396,"name": "WouldBlock"},{"src": 6397,"name": "Unseekable"},{"src": 6398,"name": "AccessDenied"},{"src": 6399,"name": "SystemResources"},{"src": 6400,"name": "AccessDenied"},{"src": 6401,"name": "Found"},{"src": 6402,"name": "OutOfMemory"},{"src": 6403,"name": "SharingViolation"},{"src": 6404,"name": "PathAlreadyExists"},{"src": 6405,"name": "FileNotFound"},{"src": 6406,"name": "AccessDenied"},{"src": 6407,"name": "PipeBusy"},{"src": 6408,"name": "NameTooLong"},{"src": 6409,"name": "InvalidUtf8"},{"src": 6410,"name": "BadPathName"},{"src": 6411,"name": "Unexpected"},{"src": 6412,"name": "FileSystem"},{"src": 6413,"name": "NotLink"},{"src": 6414,"name": "UnsupportedReparsePointType"},{"src": 6415,"name": "PermissionDenied"},{"src": 6416,"name": "UnknownName"},{"src": 6417,"name": "NotSupported"},{"src": 6418,"name": "InputOutput"},{"src": 6419,"name": "MemoryMappingNotSupported"},{"src": 6420,"name": "AccessDenied"},{"src": 6421,"name": "PermissionDenied"},{"src": 6422,"name": "LockedMemoryLimitExceeded"},{"src": 6423,"name": "OutOfMemory"},{"src": 6424,"name": "Overflow"},{"src": 6425,"name": "EndOfStream"},{"src": 6426,"name": "InvalidDebugInfo"},{"src": 6427,"name": "MissingDebugInfo"},{"src": 6428,"name": "EndOfFile"},{"src": 6429,"name": "StreamTooLong"},{"src": 6424,"name": "Overflow"},{"src": 6430,"name": "PermissionDenied"},{"src": 6431,"name": "LimitTooBig"},{"src": 6432,"name": "Utf8ExpectedContinuation"},{"src": 6433,"name": "Utf8OverlongEncoding"},{"src": 6434,"name": "Utf8EncodesSurrogateHalf"},{"src": 6435,"name": "Utf8CodepointTooLarge"},{"src": 6436,"name": "TruncatedInput"},{"src": 6437,"name": "Utf8InvalidStartByte"},{"src": 6438,"name": "OutOfMemory"},{"src": 6439,"name": "InvalidExe"},{"src": 6424,"name": "Overflow"},{"src": 6440,"name": "Overflow"},{"src": 6441,"name": "Overflow"},{"src": 6442,"name": "Utf8ExpectedContinuation"},{"src": 6443,"name": "Utf8OverlongEncoding"},{"src": 6444,"name": "Utf8ExpectedContinuation"},{"src": 6445,"name": "Utf8OverlongEncoding"},{"src": 6446,"name": "Overflow"},{"src": 6447,"name": "AccessDenied"},{"src": 6448,"name": "FileNotFound"},{"src": 6449,"name": "NameTooLong"},{"src": 6450,"name": "PathAlreadyExists"},{"src": 6451,"name": "BadPathName"},{"src": 6452,"name": "InvalidUtf8"},{"src": 6453,"name": "WouldBlock"},{"src": 6454,"name": "SystemResources"},{"src": 6455,"name": "FileLocksNotSupported"},{"src": 6456,"name": "Overflow"},{"src": 6457,"name": "TimedOut"},{"src": 6458,"name": "OutOfMemory"},{"src": 6459,"name": "NoSpaceLeft"},{"src": 6460,"name": "Overflow"},{"src": 6461,"name": "InvalidCharacter"},{"src": 6462,"name": "InvalidCharacter"},{"src": 6424,"name": "Overflow"},{"src": 6446,"name": "Overflow"},{"src": 6440,"name": "Overflow"},{"src": 6456,"name": "Overflow"},{"src": 6424,"name": "Overflow"},{"src": 6446,"name": "Overflow"},{"src": 6440,"name": "Overflow"},{"src": 6456,"name": "Overflow"},{"src": 6463,"name": "AccessDenied"},{"src": 6464,"name": "SymLinkLoop"},{"src": 6465,"name": "NameTooLong"},{"src": 6466,"name": "FileNotFound"},{"src": 6467,"name": "SystemResources"},{"src": 6468,"name": "NotDir"},{"src": 6469,"name": "InvalidUtf8"},{"src": 6470,"name": "BadPathName"},{"src": 6471,"name": "FileTooBig"},{"src": 6472,"name": "IsDir"},{"src": 6473,"name": "ProcessFdQuotaExceeded"},{"src": 6474,"name": "SystemFdQuotaExceeded"},{"src": 6475,"name": "NoDevice"},{"src": 6476,"name": "NoSpaceLeft"},{"src": 6477,"name": "DeviceBusy"},{"src": 6478,"name": "SharingViolation"},{"src": 6479,"name": "PipeBusy"},{"src": 6480,"name": "PathAlreadyExists"},{"src": 6481,"name": "Unseekable"},{"src": 6482,"name": "Unseekable"},{"src": 6483,"name": "PermissionDenied"},{"src": 6484,"name": "FileNotFound"},{"src": 6485,"name": "NameTooLong"},{"src": 6486,"name": "InputOutput"},{"src": 6487,"name": "SystemResources"},{"src": 6488,"name": "BadPathName"},{"src": 6489,"name": "FileBusy"},{"src": 6490,"name": "SymLinkLoop"},{"src": 6491,"name": "ReadOnlyFileSystem"},{"src": 6492,"name": "InvalidUtf8"},{"src": 6493,"name": "SystemResources"},{"src": 6494,"name": "NameTooLong"},{"src": 6495,"name": "FileNotFound"},{"src": 6496,"name": "AccessDenied"},{"src": 6497,"name": "NameTooLong"},{"src": 6498,"name": "NotDir"},{"src": 6499,"name": "SymLinkLoop"},{"src": 6500,"name": "SystemResources"},{"src": 6501,"name": "FileSystem"},{"src": 6502,"name": "BadPathName"},{"src": 6503,"name": "InvalidUtf8"}],"astNodes": [{"file": 12,"line": 693,"col": 4,"docs": " This function is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation.","fields": [6504,6505]},{"file": 3,"line": 725,"col": 24,"docs": " Populates only the feature bits specified.","fields": [6506]},{"file": 3,"line": 647,"col": 20,"fields": []},{"file": 3,"line": 664,"col": 20,"docs": " Adds the specified feature but not its dependencies.","fields": [6507,6508]},{"file": 3,"line": 848,"col": 16,"fields": [6509]},{"file": 3,"line": 862,"col": 16,"fields": [6510]},{"file": 53,"line": 248,"col": 0,"fields": []},{"file": 36,"line": 271,"col": 4,"fields": [6511,6512,6513]},{"file": 53,"line": 348,"col": 0,"fields": []},{"file": 36,"line": 1534,"col": 0,"fields": []},{"file": 15,"line": 42,"col": 4,"docs": " Acquire the mutex. Deadlocks if the mutex is already held by the calling thread.","fields": [6514]},{"file": 43,"line": 73,"col": 4,"docs": " This returns a `File` that is configured to block with every write, in order to facilitate better debugging. This can be changed by modifying the `intended_io_mode` field.","fields": []},{"file": 5,"line": 604,"col": 8,"fields": [6515,6516]},{"file": 5,"line": 868,"col": 8,"fields": [6517]},{"file": 33,"line": 230,"col": 4,"docs": " Returns the platform ID of the callers thread. Attempts to use thread locals and avoid syscalls when possible.","fields": []},{"file": 4,"line": 26,"col": 12,"fields": [6518,6519,6520]},{"file": 47,"line": 414,"col": 4,"docs": " Causes abnormal process termination. If linking against libc, this calls the abort() libc function. Otherwise it raises SIGABRT followed by SIGKILL and finally lo","fields": []},{"file": 36,"line": 196,"col": 4,"docs": " Tries to print a stack trace to stderr, unbuffered, and ignores any error returned. TODO multithreaded awareness","fields": [6521]},{"file": 36,"line": 105,"col": 4,"docs": " Tries to print the current stack trace to stderr, unbuffered, and ignores any error returned. TODO multithreaded awareness","fields": [6522]},{"file": 15,"line": 46,"col": 4,"fields": [6523]},{"file": 54,"line": 38,"col": 4,"docs": " Wait for the event to be set by blocking the current thread. Thread-safe. No spurious wakeups. Upon return from `wait`, the only function available to be called in `StaticResetEvent` is `reset`.","fields": [6524]},{"file": 3,"line": 827,"col": 16,"fields": [6525]},{"file": 69,"line": 308,"col": 4,"fields": [6526]},{"file": 53,"line": 411,"col": 0,"fields": [6527]},{"file": 47,"line": 487,"col": 4,"docs": " Exits the program cleanly with the specified status code.","fields": [6528]},{"file": 53,"line": 438,"col": 0,"fields": [6529,6530,6531]},{"file": 3,"line": 883,"col": 16,"fields": [6532]},{"file": 47,"line": 5025,"col": 4,"docs": " Examine and change a signal action.","fields": [6533,6534,6535]},{"file": 15,"line": 79,"col": 8,"fields": [6536]},{"file": 43,"line": 59,"col": 0,"fields": []},{"file": 47,"line": 922,"col": 4,"docs": " Write to a file descriptor. Retries when interrupted by a signal. Returns the number of bytes written. If nonzero bytes were supplied, this will be nonzero. Note that a successful write() may transfer fewer than count bytes.  Such partial  writes  can occur  for  various reasons; for example, because there was insufficient space on the disk device to write all of the requested bytes, or because a blocked write() to a socket,  pipe,  or similar  was  interrupted by a signal handler after it had transferred some, but before it had transferred all of the requested bytes.  In the event of a partial write, the caller can  make another  write() call to transfer the remaining bytes.  The subsequent call will either transfer further bytes or may result in an error (e.g., if the disk is now full). For POSIX systems, if `fd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received. On Windows, if the application has a global event loop enabled, I/O Completion Ports are used to perform the I/O. `error.WouldBlock` is not possible on Windows. Linux has a limit on how many bytes may be transferred in one `write` call, which is `0x7ffff000` on both 64-bit and 32-bit systems. This is due to using a signed C int as the return value, as well as stuffing the errno codes into the last `4096` values. This is noted on the `write` man page. The limit on Darwin is `0x7fffffff`, trying to read more than that returns EINVAL. The corresponding POSIX limit is `math.maxInt(isize)`.","fields": [6537,6538]},{"file": 33,"line": 677,"col": 4,"fields": []},{"file": 39,"line": 72,"col": 4,"docs": " Renders fmt string with args, calling output with slices of bytes. If `output` returns an error, the error is returned from `format` and `output` is not called again. The format string must be comptime known and may contain placeholders following this format: `{[argument][specifier]:[fill][alignment][width].[precision]}` Each word between `[` and `]` is a parameter you have to replace with something: - *argument* is either the index or the name of the argument that should be inserted - *specifier* is a type-dependent formatting option that determines how a type should formatted (see below) - *fill* is a single character which is used to pad the formatted text - *alignment* is one of the three characters `<`, `^` or `>`. they define if the text is *left*, *center*, or *right* aligned - *width* is the total width of the field in characters - *precision* specifies how many decimals a formatted number should have Note that most of the parameters are optional and may be omitted. Also you can leave out separators like `:` and `.` when all parameters after the separator are omitted. Only exception is the *fill* parameter. If *fill* is required, one has to specify *alignment* as well, as otherwise the digits after `:` is interpreted as *width*, not *fill*. The *specifier* has several options for types: - `x` and `X`: output numeric value in hexadecimal notation - `s`:   - for pointer-to-many and C pointers of u8, print as a C-string using zero-termination   - for slices of u8, print the entire slice as a string without zero-termination - `e`: output floating point value in scientific notation - `d`: output numeric value in decimal notation - `b`: output integer value in binary notation - `o`: output integer value in octal notation - `c`: output integer as an ASCII character. Integer type must have 8 bits at max. - `u`: output integer as an UTF-8 sequence. Integer type must have 21 bits at max. - `*`: output the address of the value instead of the value itself. - `any`: output a value of any type using its default format If a formatted user type contains a function of the type ``` pub fn format(value: ?, comptime fmt: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void ``` with `?` being the type formatted, this function will be called instead of the default implementation. This allows user types to be formatted in a logical manner instead of dumping all fields of the type. A user type may be a `struct`, `vector`, `union` or `enum` type. To print literal curly braces, escape them by writing them twice, e.g. `{{` or `}}`.","fields": [6539,6540,6541]},{"file": 4,"line": 19,"col": 12,"fields": [6542,6543]},{"file": 36,"line": 224,"col": 4,"docs": " This function invokes undefined behavior when `ok` is `false`. In Debug and ReleaseSafe modes, calls to this function are always generated, and the `unreachable` statement triggers a panic. In ReleaseFast and ReleaseSmall modes, calls to this function are optimized away, and in fact the optimizer is able to use the assertion in its heuristics. Inside a test block, it is best to use the `std.testing` module rather than this function, because this function may not detect a test failure in ReleaseFast and ReleaseSmall mode. Outside of a test block, this assert function is the correct function to use.","fields": [6544]},{"file": 39,"line": 411,"col": 4,"fields": [6545,6546,6547,6548,6549]},{"file": 47,"line": 446,"col": 4,"fields": [6550]},{"file": 6,"line": 25,"col": 8,"fields": [6551,6552]},{"file": 6,"line": 40,"col": 8,"fields": [6553,6554,6555]},{"file": 36,"line": 77,"col": 4,"fields": []},{"file": 36,"line": 666,"col": 4,"docs": " TODO resources https://github.com/ziglang/zig/issues/4353","fields": [6556]},{"file": 36,"line": 1486,"col": 0,"fields": []},{"file": 36,"line": 86,"col": 4,"fields": []},{"file": 36,"line": 340,"col": 4,"fields": [6557,6558,6559,6560,6561]},{"file": 45,"line": 333,"col": 4,"docs": " Returns the smaller number. When one parameter's type's full range fits in the other, the return type is the smaller type.","fields": [6562,6563]},{"file": 36,"line": 580,"col": 4,"docs": " TODO resources https://github.com/ziglang/zig/issues/4353","fields": [6564,6565,6566,6567]},{"file": 36,"line": 1003,"col": 8,"fields": [6568,6569]},{"file": 3,"line": 1422,"col": 8,"fields": [6570]},{"file": 3,"line": 59,"col": 16,"fields": [6571]},{"file": 36,"line": 1153,"col": 4,"fields": [6572,6573]},{"file": 36,"line": 1164,"col": 12,"fields": [6574,6575,6576]},{"file": 47,"line": 4807,"col": 4,"fields": [6577,6578,6579]},{"file": 6,"line": 577,"col": 12,"docs": " Finds the value associated with a key in the map","fields": [6580,6581]},{"file": 55,"line": 155,"col": 4,"docs": " Returns a pointer to undefined memory. Call `destroy` with the result to free the memory.","fields": [6582,6583]},{"file": 40,"line": 2226,"col": 4,"docs": " Returns a handle to the current working directory. It is not opened with iteration capability. Closing the returned `Dir` is checked illegal behavior. Iterating over the result is illegal behavior. On POSIX targets, this function is comptime-callable.","fields": []},{"file": 40,"line": 930,"col": 8,"docs": " Opens a file for reading or writing, without attempting to create a new file. To create a new file, see `createFile`. Call `File.close` to release the resource. Asserts that the path parameter has no null bytes.","fields": [6584,6585,6586]},{"file": 40,"line": 2480,"col": 4,"fields": [6587]},{"file": 55,"line": 163,"col": 4,"docs": " `ptr` should be the return value of `create`, or otherwise have the same address and alignment property.","fields": [6588,6589]},{"file": 36,"line": 759,"col": 4,"docs": " This takes ownership of elf_file: users of this function should not close it themselves, even on error. TODO resources https://github.com/ziglang/zig/issues/4353 TODO it's weird to take ownership even on error, rework this code.","fields": [6590,6591]},{"file": 36,"line": 968,"col": 0,"docs": " `file` is expected to have been opened with .intended_io_mode == .blocking. Takes ownership of file, even on error. TODO it's weird to take ownership even on error, rework this code.","fields": [6592]},{"file": 5,"line": 257,"col": 8,"docs": " TODO: integrate with async I/O","fields": [6593]},{"file": 5,"line": 181,"col": 8,"docs": " Upon success, the stream is in an uninitialized state. To continue using it, you must use the open() function.","fields": [6594]},{"file": 45,"line": 992,"col": 4,"docs": " Cast an integer to a different integer type. If the value doesn't fit, return an error. TODO make this an optional not an error.","fields": [6595,6596]},{"file": 47,"line": 3975,"col": 4,"docs": " Map files or devices into memory. `length` does not need to be aligned. Use of a mapped region can result in these signals: * SIGSEGV - Attempted write into a region mapped as read-only. * SIGBUS - Attempted  access to a portion of the buffer that does not correspond to the file","fields": [6597,6598,6599,6600,6601,6602]},{"file": 21,"line": 527,"col": 4,"docs": " Compares two slices and returns whether they are equal.","fields": [6603,6604,6605]},{"file": 3,"line": 1035,"col": 16,"fields": [6606]},{"file": 46,"line": 293,"col": 4,"docs": " Takes a Slice or Many Pointer and returns it with the Type modified to have the given sentinel value. This function assumes the caller has verified the memory contains the sentinel value.","fields": [6607,6608]},{"file": 21,"line": 621,"col": 4,"docs": " Takes a pointer to an array, a sentinel-terminated pointer, or a slice, and returns a slice. If there is a sentinel on the input type, there will be a sentinel on the output type. The constness of the output type matches the constness of the input type. When there is both a sentinel and an array length or slice length, the length value is used instead of the sentinel.","fields": [6609]},{"file": 36,"line": 749,"col": 0,"fields": [6610,6611,6612]},{"file": 25,"line": 1094,"col": 4,"docs": " Initialize DWARF info. The caller has the responsibility to initialize most the DwarfInfo fields before calling. These fields can be left undefined: * abbrev_table_list * compile_unit_list","fields": [6613,6614]},{"file": 7,"line": 49,"col": 12,"docs": " Deinitialize with `deinit` or use `toOwnedSlice`.","fields": [6615]},{"file": 25,"line": 622,"col": 4,"fields": [6616]},{"file": 9,"line": 115,"col": 4,"fields": [6617]},{"file": 9,"line": 46,"col": 12,"fields": [6618,6619]},{"file": 9,"line": 34,"col": 12,"fields": [6620]},{"file": 9,"line": 77,"col": 12,"fields": [6621,6622]},{"file": 9,"line": 81,"col": 12,"fields": [6623,6624]},{"file": 9,"line": 101,"col": 12,"fields": [6625]},{"file": 9,"line": 97,"col": 12,"fields": [6626]},{"file": 9,"line": 42,"col": 12,"fields": [6627]},{"file": 11,"line": 26,"col": 12,"fields": [6628]},{"file": 11,"line": 18,"col": 12,"fields": [6629,6630]},{"file": 25,"line": 455,"col": 0,"fields": [6631,6632,6633]},{"file": 10,"line": 266,"col": 12,"fields": [6634,6635,6636]},{"file": 10,"line": 238,"col": 12,"docs": " Reads exactly `num_bytes` bytes and returns as an array. `num_bytes` must be comptime-known","fields": [6637,6638]},{"file": 10,"line": 42,"col": 12,"docs": " If the number read would be smaller than `buf.len`, `error.EndOfStream` is returned instead.","fields": [6639,6640]},{"file": 10,"line": 31,"col": 12,"docs": " Returns the number of bytes read. If the number read is smaller than `buffer.len`, it means the stream reached the end. Reaching the end of a stream is not an error condition.","fields": [6641,6642]},{"file": 21,"line": 1387,"col": 4,"docs": " Reads an integer from memory with bit count specified by T. The bit count of T must be evenly divisible by 8. This function cannot fail and cannot cause undefined behavior.","fields": [6643,6644,6645]},{"file": 10,"line": 224,"col": 12,"docs": " Reads 1 byte from the stream or returns `error.EndOfStream`.","fields": [6646]},{"file": 10,"line": 24,"col": 12,"docs": " Returns the number of bytes read. It may be less than buffer.len. If the number of bytes read is 0, it means end of stream. End of stream is not an error condition.","fields": [6647,6648]},{"file": 11,"line": 30,"col": 12,"fields": [6649]},{"file": 25,"line": 841,"col": 4,"docs": " Gets an already existing AbbrevTable given the abbrev_offset, or if not found, seeks in the stream and parses it.","fields": [6650,6651]},{"file": 7,"line": 173,"col": 12,"docs": " Extend the list by 1 element. Allocates more memory as necessary.","fields": [6652,6653]},{"file": 25,"line": 854,"col": 4,"fields": [6654,6655]},{"file": 25,"line": 606,"col": 8,"fields": [6656]},{"file": 63,"line": 5,"col": 4,"docs": " Read a single unsigned LEB128 value from the given reader as type T, or error.Overflow if the value cannot fit.","fields": [6657,6658]},{"file": 7,"line": 67,"col": 12,"docs": " Release all allocated memory.","fields": [6659]},{"file": 7,"line": 361,"col": 12,"docs": " Increase length by 1, returning pointer to the new item. The returned pointer becomes invalid when the list resized.","fields": [6660]},{"file": 7,"line": 314,"col": 12,"docs": " Modify the array so that it can hold at least `new_capacity` items. Invalidates pointers if additional memory is needed.","fields": [6661,6662]},{"file": 7,"line": 334,"col": 12,"docs": " Modify the array so that it can hold at least `new_capacity` items. Like `ensureTotalCapacity`, but the resulting capacity is much more likely (but not guaranteed) to be equal to `new_capacity`. Invalidates pointers if additional memory is needed.","fields": [6663,6664]},{"file": 7,"line": 419,"col": 12,"docs": " Returns a slice of all the items plus the extra capacity, whose memory contents are `undefined`.","fields": [6665]},{"file": 55,"line": 337,"col": 4,"fields": [6666,6667,6668]},{"file": 7,"line": 371,"col": 12,"docs": " Increase length by 1, returning pointer to the new item. Asserts that there is already space for the new item without allocating more. The returned pointer becomes invalid when the list is resized. **Does not** invalidate element pointers.","fields": [6669]},{"file": 25,"line": 885,"col": 4,"fields": [6670,6671,6672,6673]},{"file": 25,"line": 586,"col": 0,"fields": [6674,6675]},{"file": 7,"line": 267,"col": 12,"docs": " Adjust the list's length to `new_len`. Does not initialize added items if any.","fields": [6676,6677]},{"file": 25,"line": 537,"col": 0,"fields": [6678,6679,6680,6681,6682]},{"file": 25,"line": 298,"col": 4,"fields": [6683,6684]},{"file": 25,"line": 338,"col": 8,"fields": [6685,6686,6687]},{"file": 25,"line": 1075,"col": 4,"fields": [6688,6689]},{"file": 25,"line": 330,"col": 4,"fields": [6690,6691]},{"file": 25,"line": 305,"col": 4,"fields": [6692,6693]},{"file": 25,"line": 282,"col": 4,"fields": [6694]},{"file": 25,"line": 726,"col": 4,"fields": [6695]},{"file": 6,"line": 538,"col": 12,"docs": " Inserts a key-value pair into the hash map, asserting that no previous entry with the same key is already present","fields": [6696,6697,6698]},{"file": 6,"line": 973,"col": 12,"fields": [6699,6700,6701,6702,6703]},{"file": 6,"line": 1367,"col": 12,"fields": [6704,6705,6706]},{"file": 6,"line": 1409,"col": 8,"fields": [6707,6708,6709,6710]},{"file": 6,"line": 1445,"col": 8,"fields": [6711,6712,6713,6714]},{"file": 6,"line": 869,"col": 8,"fields": [6715]},{"file": 6,"line": 1403,"col": 8,"fields": [6716]},{"file": 45,"line": 402,"col": 4,"docs": " Returns the maximum of two numbers. Return type is the one with the larger range.","fields": [6717,6718]},{"file": 6,"line": 925,"col": 12,"fields": [6719]},{"file": 45,"line": 1025,"col": 4,"fields": [6720]},{"file": 6,"line": 1476,"col": 8,"fields": [6721,6722,6723]},{"file": 21,"line": 2925,"col": 4,"docs": " Round an address up to the nearest aligned address The alignment must be a power of 2 and greater than 0.","fields": [6724,6725]},{"file": 55,"line": 238,"col": 4,"docs": " Deprecated: use `allocAdvanced`","fields": [6726,6727,6728,6729]},{"file": 6,"line": 864,"col": 12,"fields": [6730,6731]},{"file": 6,"line": 1397,"col": 8,"fields": [6732]},{"file": 6,"line": 917,"col": 8,"fields": [6733]},{"file": 6,"line": 921,"col": 8,"fields": [6734]},{"file": 6,"line": 755,"col": 16,"fields": [6735]},{"file": 6,"line": 1000,"col": 12,"fields": [6736,6737,6738,6739]},{"file": 21,"line": 2238,"col": 4,"fields": [6740,6741,6742]},{"file": 36,"line": 610,"col": 0,"fields": [6743,6744,6745,6746,6747,6748,6749]},{"file": 36,"line": 1453,"col": 12,"fields": [6750,6751]},{"file": 36,"line": 1462,"col": 0,"fields": [6752,6753]},{"file": 25,"line": 793,"col": 8,"fields": [6754,6755]},{"file": 25,"line": 313,"col": 4,"fields": [6756,6757]},{"file": 25,"line": 610,"col": 8,"fields": [6758,6759]},{"file": 25,"line": 905,"col": 8,"fields": [6760,6761,6762]},{"file": 10,"line": 232,"col": 12,"docs": " Same as `readByte` except the returned byte is signed.","fields": [6763]},{"file": 55,"line": 179,"col": 4,"docs": " Allocates an array of `n` items of type `T` and sets all the items to `undefined`. Depending on the Allocator implementation, it may be required to call `free` once the memory is no longer needed, to avoid a resource leak. If the `Allocator` implementation is unknown, then correct code will call `free` when done. For allocating a single item, see `create`.","fields": [6764,6765,6766]},{"file": 55,"line": 443,"col": 4,"docs": " Free an array allocated with `alloc`. To free a single item, see `destroy`.","fields": [6767,6768]},{"file": 10,"line": 127,"col": 12,"docs": " Allocates enough memory to read until `delimiter`. If the allocated memory would be greater than `max_size`, returns `error.StreamTooLong`. Caller owns returned memory. If this function returns an error, the contents from the stream read so far are lost.","fields": [6769,6770,6771,6772]},{"file": 10,"line": 101,"col": 12,"docs": " Replaces the `std.ArrayList` contents by reading from the stream until `delimiter` is found. Does not include the delimiter in the result. If the `std.ArrayList` length would exceed `max_size`, `error.StreamTooLong` is returned and the `std.ArrayList` is populated with `max_size` bytes from the stream.","fields": [6773,6774,6775,6776]},{"file": 7,"line": 292,"col": 12,"docs": " Reduce length to `new_len`. Invalidates pointers for the elements `items[new_len..]`.","fields": [6777,6778]},{"file": 7,"line": 110,"col": 12,"docs": " The caller owns the returned memory. Empties this ArrayList.","fields": [6779]},{"file": 25,"line": 398,"col": 8,"fields": [6780,6781,6782,6783]},{"file": 11,"line": 22,"col": 12,"fields": [6784,6785]},{"file": 25,"line": 422,"col": 8,"fields": [6786]},{"file": 66,"line": 101,"col": 4,"docs": " Naively combines a series of paths with the native path seperator. Allocates memory for the result, which must be freed by the caller.","fields": [6787,6788]},{"file": 66,"line": 37,"col": 0,"docs": " This is different from mem.join in that the separator will not be repeated if it is found at the end or beginning of a pair of consecutive paths.","fields": [6789,6790,6791,6792,6793]},{"file": 66,"line": 27,"col": 4,"docs": " Returns if the given byte is a valid path separator","fields": [6794]},{"file": 55,"line": 455,"col": 4,"docs": " Copies `m` to newly allocated memory. Caller owns the memory.","fields": [6795,6796,6797]},{"file": 21,"line": 193,"col": 4,"docs": " Copy all of source into dest at position 0. dest.len must be >= source.len. If the slices overlap, dest.ptr must be <= src.ptr.","fields": [6798,6799,6800]},{"file": 25,"line": 379,"col": 8,"fields": [6801]},{"file": 63,"line": 54,"col": 4,"docs": " Read a single signed LEB128 value from the given reader as type T, or error.Overflow if the value cannot fit.","fields": [6802,6803]},{"file": 36,"line": 44,"col": 8,"fields": [6804]},{"file": 36,"line": 449,"col": 4,"fields": [6805,6806,6807,6808]},{"file": 36,"line": 367,"col": 8,"fields": [6809,6810]},{"file": 36,"line": 405,"col": 8,"fields": [6811]},{"file": 15,"line": 86,"col": 8,"fields": [6812]},{"file": 54,"line": 140,"col": 8,"fields": [6813]},{"file": 69,"line": 187,"col": 0,"fields": [6814]},{"file": 69,"line": 275,"col": 4,"docs": " Initializes all the fields of the static TLS area and returns the computed architecture-specific value of the thread-pointer register","fields": [6815]},{"file": 69,"line": 110,"col": 4,"fields": [6816]},{"file": 47,"line": 6375,"col": 4,"fields": [6817,6818]},{"file": 59,"line": 767,"col": 4,"fields": [6819]},{"file": 36,"line": 1506,"col": 4,"fields": []},{"file": 53,"line": 472,"col": 0,"fields": []},{"file": 59,"line": 189,"col": 4,"docs": " Get the errno from a syscall return value, or 0 for no error.","fields": [6820]},{"file": 59,"line": 1046,"col": 4,"fields": [6821,6822,6823]},{"file": 15,"line": 94,"col": 4,"fields": [6824,6825]},{"file": 59,"line": 584,"col": 4,"fields": [6826,6827,6828]},{"file": 47,"line": 4997,"col": 4,"docs": " Call this when you made a syscall or something that sets errno and you get an unexpected error.","fields": [6829]},{"file": 59,"line": 1038,"col": 4,"fields": []},{"file": 4,"line": 15,"col": 12,"fields": [6830,6831]},{"file": 39,"line": 633,"col": 0,"fields": [6832,6833,6834,6835]},{"file": 39,"line": 654,"col": 4,"fields": [6836,6837,6838,6839]},{"file": 39,"line": 1312,"col": 4,"fields": [6840,6841,6842,6843,6844]},{"file": 45,"line": 933,"col": 4,"docs": " Returns the absolute value of the integer parameter. Result is an unsigned integer.","fields": [6845]},{"file": 39,"line": 1773,"col": 4,"fields": [6846,6847]},{"file": 39,"line": 932,"col": 4,"fields": [6848,6849,6850]},{"file": 52,"line": 162,"col": 4,"docs": " Returns the length of a supplied UTF-8 string literal in terms of unicode codepoints. Asserts that the data is valid UTF-8.","fields": [6851]},{"file": 21,"line": 1333,"col": 4,"docs": " Reads an integer from memory with bit count specified by T. The bit count of T must be evenly divisible by 8. This function cannot fail and cannot cause undefined behavior. Assumes the endianness of memory is native. This means the function can simply pointer cast memory.","fields": [6852,6853]},{"file": 52,"line": 18,"col": 4,"docs": " Given the first byte of a UTF-8 codepoint, returns a number 1-4 indicating the total length of the codepoint in bytes. If this byte does not match the form of a UTF-8 start byte, returns Utf8InvalidStartByte.","fields": [6854]},{"file": 52,"line": 70,"col": 4,"docs": " Decodes the UTF-8 codepoint encoded in the given slice of bytes. bytes.len must be equal to utf8ByteSequenceLength(bytes[0]) catch unreachable. If you already know the length at comptime, you can call one of utf8Decode2,utf8Decode3,utf8Decode4 directly instead of this function.","fields": [6855]},{"file": 4,"line": 35,"col": 12,"fields": [6856,6857,6858]},{"file": 59,"line": 1042,"col": 4,"fields": [6859,6860,6861]},{"file": 59,"line": 780,"col": 4,"fields": [6862,6863]},{"file": 39,"line": 883,"col": 4,"fields": [6864,6865,6866,6867]},{"file": 57,"line": 168,"col": 8,"fields": [6868,6869]},{"file": 21,"line": 2569,"col": 4,"docs": " Given a pointer to a single item, returns a slice of the underlying bytes, preserving pointer attributes.","fields": [6870]},{"file": 46,"line": 676,"col": 4,"docs": " Compares two of any type for equality. Containers are compared on a field-by-field basis, where possible. Pointers are not followed.","fields": [6871,6872]},{"file": 36,"line": 991,"col": 8,"fields": [6873]},{"file": 56,"line": 33,"col": 8,"fields": [6874]},{"file": 3,"line": 1418,"col": 8,"fields": [6875]},{"file": 42,"line": 238,"col": 4,"fields": [6876,6877,6878,6879,6880]},{"file": 42,"line": 336,"col": 4,"fields": [6881,6882,6883,6884,6885,6886]},{"file": 49,"line": 176,"col": 4,"fields": [6887]},{"file": 5,"line": 198,"col": 8,"docs": " Test whether ANSI escape codes will be treated as such.","fields": [6888]},{"file": 21,"line": 650,"col": 4,"docs": " Deprecated: use std.mem.span() or std.mem.sliceTo() Same as `span`, except when there is both a sentinel and an array length or slice length, scans the memory for the sentinel value rather than using the length.","fields": [6889]},{"file": 49,"line": 720,"col": 4,"fields": []},{"file": 68,"line": 61,"col": 4,"fields": [6890]},{"file": 68,"line": 34,"col": 12,"fields": [6891]},{"file": 68,"line": 38,"col": 12,"fields": [6892]},{"file": 6,"line": 1227,"col": 12,"fields": [6893,6894,6895]},{"file": 55,"line": 261,"col": 4,"fields": [6896,6897,6898,6899,6900,6901]},{"file": 47,"line": 4972,"col": 4,"docs": " Used to convert a slice to a null terminated slice on the stack. TODO https://github.com/ziglang/zig/issues/287","fields": [6902]},{"file": 21,"line": 1032,"col": 4,"docs": " Linear search for the index of a scalar value inside a slice.","fields": [6903,6904,6905]},{"file": 40,"line": 970,"col": 8,"docs": " Same as `openFile` but the path parameter is null-terminated.","fields": [6906,6907,6908]},{"file": 40,"line": 2280,"col": 4,"docs": " Same as `openFileAbsolute` but the path parameter is null-terminated.","fields": [6909,6910]},{"file": 55,"line": 473,"col": 4,"docs": " Call `resizeFn`, but caller guarantees that `new_len` <= `buf.len` meaning error.OutOfMemory should be impossible. This function allows a runtime `buf_align` value. Callers should generally prefer to call `shrink` directly.","fields": [6911,6912,6913,6914,6915,6916]},{"file": 5,"line": 299,"col": 8,"docs": " TODO: integrate with async I/O","fields": [6917]},{"file": 47,"line": 235,"col": 4,"docs": " Closes the file descriptor. This function is not capable of returning any indication of failure. An application which wants to ensure writes have succeeded before closing must call `fsync` before `close`. Note: The Zig standard library does not support POSIX thread cancellation.","fields": [6918]},{"file": 59,"line": 376,"col": 4,"fields": [6919,6920,6921,6922,6923,6924]},{"file": 21,"line": 865,"col": 4,"docs": " Takes a pointer to an array, an array, a vector, a sentinel-terminated pointer, a slice or a tuple, and returns the length. In the case of a sentinel-terminated array, it uses the array length. For C pointers it assumes it is a pointer-to-many with a 0 sentinel.","fields": [6925]},{"file": 45,"line": 454,"col": 4,"docs": " Returns the sum of a and b. Returns an error on overflow.","fields": [6926,6927,6928]},{"file": 21,"line": 1341,"col": 4,"docs": " Reads an integer from memory with bit count specified by T. The bit count of T must be evenly divisible by 8. This function cannot fail and cannot cause undefined behavior. Assumes the endianness of memory is foreign, so it must byte-swap.","fields": [6929,6930]},{"file": 55,"line": 358,"col": 4,"fields": [6931,6932,6933,6934,6935,6936]},{"file": 25,"line": 476,"col": 0,"fields": [6937,6938,6939]},{"file": 25,"line": 489,"col": 0,"fields": [6940,6941,6942,6943]},{"file": 25,"line": 483,"col": 0,"fields": [6944,6945,6946]},{"file": 25,"line": 494,"col": 0,"fields": [6947,6948,6949,6950,6951]},{"file": 25,"line": 468,"col": 0,"fields": [6952,6953,6954]},{"file": 25,"line": 522,"col": 0,"fields": [6955,6956,6957,6958]},{"file": 21,"line": 1046,"col": 4,"fields": [6959,6960,6961,6962]},{"file": 6,"line": 1370,"col": 12,"fields": [6963,6964,6965]},{"file": 45,"line": 1072,"col": 4,"docs": " Returns the next power of two (if the value is not already a power of two). Only unsigned integers can be used. Zero is not an allowed input. If the value doesn't fit, returns an error.","fields": [6966,6967]},{"file": 6,"line": 913,"col": 8,"fields": [6968]},{"file": 21,"line": 2931,"col": 4,"docs": " Round an address up to the nearest aligned address The alignment must be a power of 2 and greater than 0.","fields": [6969,6970,6971]},{"file": 6,"line": 1509,"col": 8,"fields": [6972,6973]},{"file": 6,"line": 759,"col": 16,"fields": [6974]},{"file": 6,"line": 763,"col": 16,"fields": [6975]},{"file": 6,"line": 769,"col": 16,"fields": [6976,6977]},{"file": 36,"line": 506,"col": 12,"fields": [6978,6979,6980]},{"file": 36,"line": 916,"col": 0,"fields": [6981,6982]},{"file": 5,"line": 467,"col": 8,"fields": [6983,6984]},{"file": 4,"line": 30,"col": 12,"fields": [6985,6986]},{"file": 21,"line": 2828,"col": 4,"docs": " Given a slice, returns a slice of the underlying bytes, preserving pointer attributes.","fields": [6987]},{"file": 55,"line": 392,"col": 4,"docs": " Prefer calling realloc to shrink if you can tolerate failure, such as in an ArrayList data structure with a storage capacity. Shrink always succeeds, and `new_n` must be <= `old_mem.len`. Returned slice has same alignment as old_mem. Shrinking to 0 is the same as calling `free`.","fields": [6988,6989,6990]},{"file": 36,"line": 33,"col": 8,"fields": [6991]},{"file": 36,"line": 418,"col": 4,"fields": [6992]},{"file": 15,"line": 145,"col": 4,"fields": [6993]},{"file": 54,"line": 147,"col": 8,"fields": [6994,6995]},{"file": 21,"line": 220,"col": 4,"docs": " Sets all elements of `dest` to `value`.","fields": [6996,6997,6998]},{"file": 69,"line": 269,"col": 0,"fields": [6999,7000]},{"file": 20,"line": 33,"col": 4,"fields": [7001,7002,7003]},{"file": 59,"line": 1523,"col": 4,"fields": [7004,7005]},{"file": 20,"line": 24,"col": 4,"fields": [7006,7007]},{"file": 36,"line": 1515,"col": 4,"docs": " Attaches a global SIGSEGV handler which calls @panic(\"segmentation fault\");","fields": []},{"file": 53,"line": 536,"col": 4,"fields": []},{"file": 20,"line": 106,"col": 4,"fields": []},{"file": 20,"line": 54,"col": 4,"fields": [7008,7009,7010,7011,7012]},{"file": 34,"line": 41,"col": 4,"docs": " Signals to the processor that the caller is inside a busy-wait spin-loop.","fields": []},{"file": 59,"line": 286,"col": 4,"fields": [7013,7014,7015,7016]},{"file": 20,"line": 43,"col": 4,"fields": [7017,7018,7019,7020]},{"file": 36,"line": 63,"col": 4,"docs": " Print to stderr, unbuffered, and silently returning on failure. Intended for use in \"printf debugging.\" Use `std.log` functions for proper logging.","fields": [7021,7022]},{"file": 20,"line": 16,"col": 4,"fields": [7023]},{"file": 52,"line": 84,"col": 4,"fields": [7024]},{"file": 52,"line": 103,"col": 4,"fields": [7025]},{"file": 52,"line": 127,"col": 4,"fields": [7026]},{"file": 57,"line": 119,"col": 8,"fields": [7027,7028]},{"file": 6,"line": 394,"col": 12,"docs": " Create a managed hash map with an empty context. If the context is not zero-sized, you must use initContext(allocator, ctx) instead.","fields": [7029]},{"file": 56,"line": 19,"col": 12,"fields": [7030,7031]},{"file": 21,"line": 3001,"col": 4,"docs": " Given an address and an alignment, return true if the address is a multiple of the alignment The alignment must be a power of 2 and greater than 0.","fields": [7032,7033]},{"file": 21,"line": 2517,"col": 4,"docs": " Aligns a given pointer value to a specified alignment factor. Returns an aligned pointer or null if one of the following conditions is met: - The aligned pointer would not fit the address space, - The delta required to align the pointer is not a multiple of the pointee's   type.","fields": [7034,7035]},{"file": 47,"line": 4019,"col": 4,"docs": " Deletes the mappings for the specified address range, causing further references to addresses within the range to generate invalid memory references. Note that while POSIX allows unmapping a region in the middle of an existing mapping, Zig's munmap function does not, for two reasons: * It violates the Zig principle that resource deallocation must succeed. * The Windows function, VirtualFree, has this restriction.","fields": [7036]},{"file": 42,"line": 228,"col": 4,"docs": " Verifies that the adjusted length will still map to the full length","fields": [7037,7038,7039]},{"file": 47,"line": 1637,"col": 4,"docs": " Get an environment variable. See also `getenvZ`.","fields": [7040]},{"file": 5,"line": 193,"col": 8,"docs": " Test whether the file refers to a terminal. See also `supportsAnsiEscapeCodes`.","fields": [7041]},{"file": 47,"line": 1686,"col": 4,"docs": " Get an environment variable with a null-terminated name. See also `getenv`.","fields": [7042]},{"file": 59,"line": 140,"col": 4,"docs": " See `std.elf` for the constants.","fields": [7043]},{"file": 68,"line": 57,"col": 4,"docs": " TODO make it possible to reference this same external symbol 2x so we don't need this helper function.","fields": []},{"file": 6,"line": 1230,"col": 12,"fields": [7044,7045,7046]},{"file": 45,"line": 448,"col": 4,"docs": " Returns the product of a and b. Returns an error on overflow.","fields": [7047,7048,7049]},{"file": 47,"line": 1436,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted. `file_path` is relative to the open directory handle `dir_fd`. See also `openat`.","fields": [7050,7051,7052,7053]},{"file": 47,"line": 4592,"col": 4,"docs": " Depending on the operating system `flock` may or may not interact with `fcntl` locks made by other processes.","fields": [7054,7055]},{"file": 66,"line": 191,"col": 4,"fields": [7056]},{"file": 47,"line": 3690,"col": 4,"docs": " Return information about a file descriptor.","fields": [7057]},{"file": 20,"line": 648,"col": 8,"fields": [7058]},{"file": 20,"line": 652,"col": 8,"fields": [7059]},{"file": 20,"line": 656,"col": 8,"fields": [7060]},{"file": 59,"line": 731,"col": 4,"fields": [7061]},{"file": 20,"line": 79,"col": 4,"fields": [7062,7063,7064,7065,7066,7067,7068]},{"file": 21,"line": 975,"col": 4,"fields": [7069,7070,7071]},{"file": 55,"line": 82,"col": 4,"docs": " Realloc is used to modify the size or alignment of an existing allocation, as well as to provide the allocator with an opportunity to move an allocation to a better location. When the size/alignment is greater than the previous allocation, this function returns `error.OutOfMemory` when the requested new allocation could not be granted. When the size/alignment is less than or equal to the previous allocation, this function returns `error.OutOfMemory` when the allocator decides the client would be better off keeping the extra alignment/size. Clients will call `resizeFn` when they require the allocator to track a new alignment/size, and so this function should only return success when the allocator considers the reallocation desirable from the allocator's perspective. As an example, `std.ArrayList` tracks a \"capacity\", and therefore can handle reallocation failure, even when `new_n` <= `old_mem.len`. A `FixedBufferAllocator` would always return `error.OutOfMemory` for `reallocFn` when the size/alignment is less than or equal to the old allocation, because it cannot reclaim the memory, and thus the `std.ArrayList` would be better off retaining its capacity. When `reallocFn` returns, `return_value[0..min(old_mem.len, new_byte_count)]` must be the same as `old_mem` was when `reallocFn` is called. The bytes of `return_value[old_mem.len..]` have undefined values. The returned slice must have its pointer aligned at least to `new_alignment` bytes.","fields": [7072,7073,7074,7075,7076,7077,7078]},{"file": 21,"line": 2740,"col": 4,"docs": " Given a slice of bytes, returns a slice of the specified type backed by those bytes, preserving pointer attributes.","fields": [7079,7080]},{"file": 10,"line": 271,"col": 12,"fields": [7081,7082,7083,7084]},{"file": 21,"line": 1310,"col": 4,"docs": " Reads an integer from memory with size equal to bytes.len. T specifies the return type, which must be large enough to store the result.","fields": [7085,7086,7087]},{"file": 6,"line": 1101,"col": 8,"docs": " Find the index containing the data for the given key. Whether this function returns null is almost always branched on after this function returns, and this function returns null/not null from separate code paths.  We want the optimizer to remove that branch and instead directly fuse the basic blocks after the branch to the basic blocks from this function.  To encourage that, this function is marked as inline.","fields": [7088,7089,7090]},{"file": 45,"line": 1060,"col": 4,"docs": " Returns the next power of two (if the value is not already a power of two). Only unsigned integers can be used. Zero is not an allowed input. Result is a type with 1 more bit than the input type.","fields": [7091,7092]},{"file": 21,"line": 2978,"col": 4,"docs": " Round an address up to the previous aligned address The alignment must be a power of 2 and greater than 0.","fields": [7093,7094,7095]},{"file": 47,"line": 541,"col": 4,"docs": " Returns the number of bytes that were read, which can be less than buf.len. If 0 bytes were read, that means EOF. If `fd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received. Linux has a limit on how many bytes may be transferred in one `read` call, which is `0x7ffff000` on both 64-bit and 32-bit systems. This is due to using a signed C int as the return value, as well as stuffing the errno codes into the last `4096` values. This is noted on the `read` man page. The limit on Darwin is `0x7fffffff`, trying to read more than that returns EINVAL. The corresponding POSIX limit is `math.maxInt(isize)`.","fields": [7096,7097]},{"file": 55,"line": 415,"col": 4,"docs": " This is the same as `alignedShrink`, except caller may additionally pass the return address of the first stack frame, which may be relevant for allocators which collect stack traces.","fields": [7098,7099,7100,7101,7102]},{"file": 3,"line": 855,"col": 16,"fields": [7103]},{"file": 45,"line": 461,"col": 4,"docs": " Returns a - b, or an error on overflow.","fields": [7104,7105,7106]},{"file": 59,"line": 290,"col": 4,"fields": [7107,7108,7109]},{"file": 54,"line": 201,"col": 8,"fields": [7110,7111]},{"file": 59,"line": 1528,"col": 4,"fields": [7112,7113,7114,7115]},{"file": 36,"line": 1552,"col": 0,"fields": [7116,7117,7118]},{"file": 0,"line": 13,"col": 4,"fields": []},{"file": 19,"line": 188,"col": 12,"docs": " Log an error message. This log level is intended to be used when something has gone wrong. This might be recoverable or might be followed by the program exiting.","fields": [7119,7120]},{"file": 57,"line": 41,"col": 8,"fields": [7121]},{"file": 57,"line": 62,"col": 8,"fields": [7122,7123]},{"file": 57,"line": 73,"col": 8,"fields": [7124,7125]},{"file": 56,"line": 62,"col": 4,"fields": [7126,7127,7128,7129,7130]},{"file": 56,"line": 47,"col": 4,"fields": [7131,7132,7133]},{"file": 13,"line": 73,"col": 12,"docs": " Insert a new node at the head. Arguments:     new_node: Pointer to the new node to insert.","fields": [7134,7135]},{"file": 55,"line": 304,"col": 4,"docs": " Increases or decreases the size of an allocation. It is guaranteed to not move the pointer.","fields": [7136,7137,7138]},{"file": 56,"line": 93,"col": 4,"fields": [7139,7140,7141,7142,7143,7144]},{"file": 21,"line": 3005,"col": 4,"fields": [7145,7146,7147]},{"file": 21,"line": 2485,"col": 4,"docs": " Returns the number of elements that, if added to the given pointer, align it to a multiple of the given quantity, or `null` if one of the following conditions is met: - The aligned pointer would not fit the address space, - The delta required to align the pointer is not a multiple of the pointee's   type.","fields": [7148,7149]},{"file": 59,"line": 408,"col": 4,"fields": [7150,7151]},{"file": 21,"line": 121,"col": 4,"docs": " An allocator helper function.  Adjusts an allocation length satisfy `len_align`. `full_len` should be the full capacity of the allocation which may be greater than the `len` that was requsted.  This function should only be used by allocators that are unaffected by `len_align`.","fields": [7152,7153,7154]},{"file": 47,"line": 2861,"col": 4,"docs": " Test whether a file descriptor refers to a terminal.","fields": [7155]},{"file": 21,"line": 925,"col": 4,"docs": " Deprecated: use std.mem.len() or std.mem.sliceTo().len Takes a pointer to an array, an array, a sentinel-terminated pointer, or a slice, and returns the length. In the case of a sentinel-terminated array, it scans the array for a sentinel and uses that for the length, rather than using the array length. For C pointers it assumes it is a pointer-to-many with a 0 sentinel.","fields": [7156]},{"file": 59,"line": 716,"col": 4,"fields": [7157,7158,7159,7160]},{"file": 59,"line": 843,"col": 4,"fields": [7161,7162]},{"file": 66,"line": 254,"col": 4,"fields": [7163]},{"file": 59,"line": 1272,"col": 4,"fields": [7164,7165]},{"file": 21,"line": 231,"col": 4,"docs": " Generally, Zig users are encouraged to explicitly initialize all fields of a struct explicitly rather than using this function. However, it is recognized that there are sometimes use cases for initializing all fields to a \"zero\" value. For example, when interfacing with a C API where this practice is more common and relied upon. If you are performing code review and see this function used, examine closely - it may be a code smell. Zero initializes the type. This can be used to zero initialize a any type for which it makes sense. Structs will be initialized recursively.","fields": [7166]},{"file": 55,"line": 134,"col": 0,"docs": " Move the given memory to a new location in the given allocator to accomodate a new size and alignment.","fields": [7167,7168,7169,7170,7171,7172,7173]},{"file": 59,"line": 437,"col": 4,"fields": [7174,7175,7176]},{"file": 36,"line": 126,"col": 4,"docs": " Tries to print the stack trace starting from the supplied base pointer to stderr, unbuffered, and ignores any error returned. TODO multithreaded awareness","fields": [7177,7178]},{"file": 26,"line": 3,"col": 4,"fields": [7179]},{"file": 26,"line": 20,"col": 4,"fields": [7180]},{"file": 27,"line": 3,"col": 4,"fields": [7181]},{"file": 27,"line": 27,"col": 4,"fields": [7182]},{"file": 28,"line": 3,"col": 4,"fields": [7183]},{"file": 28,"line": 8,"col": 4,"fields": [7184]},{"file": 23,"line": 62,"col": 4,"fields": [7185]},{"file": 23,"line": 98,"col": 4,"fields": [7186]},{"file": 29,"line": 44,"col": 4,"fields": [7187]},{"file": 29,"line": 112,"col": 4,"fields": [7188]},{"file": 30,"line": 44,"col": 4,"fields": [7189]},{"file": 30,"line": 48,"col": 4,"fields": [7190]},{"file": 31,"line": 11,"col": 4,"fields": [7191]},{"file": 31,"line": 40,"col": 4,"fields": [7192]},{"file": 32,"line": 21,"col": 4,"fields": [7193]},{"file": 32,"line": 40,"col": 4,"fields": [7194]},{"file": 39,"line": 1805,"col": 4,"fields": [7195,7196,7197]},{"file": 40,"line": 1827,"col": 8,"docs": " On success, caller owns returned buffer. If the file is larger than `max_bytes`, returns `error.FileTooBig`.","fields": [7198,7199,7200,7201]},{"file": 40,"line": 1836,"col": 8,"docs": " On success, caller owns returned buffer. If the file is larger than `max_bytes`, returns `error.FileTooBig`. If `size_hint` is specified the initial buffer size is calculated using that value, otherwise the effective file size is used instead. Allows specifying alignment and a sentinel value.","fields": [7202,7203,7204,7205,7206,7207,7208]},{"file": 5,"line": 432,"col": 8,"docs": " Reads all the bytes from the current position to the end of the file. On success, caller owns returned buffer. If the file is larger than `max_bytes`, returns `error.FileTooBig`. If `size_hint` is specified the initial buffer size is calculated using that value, otherwise an arbitrary value is used instead. Allows specifying alignment and a sentinel value.","fields": [7209,7210,7211,7212,7213,7214]},{"file": 7,"line": 60,"col": 12,"docs": " Initialize with capacity to hold at least `num` elements. The resulting capacity is likely to be equal to `num`. Deinitialize with `deinit` or use `toOwnedSlice`.","fields": [7215,7216]},{"file": 5,"line": 862,"col": 8,"fields": [7217]},{"file": 10,"line": 56,"col": 12,"fields": [7218,7219,7220,7221]},{"file": 7,"line": 355,"col": 12,"docs": " Increases the array's length to match the full capacity that is already allocated. The new elements have `undefined` values. **Does not** invalidate pointers.","fields": [7222]},{"file": 7,"line": 274,"col": 12,"docs": " Reduce allocated capacity to `new_len`. May invalidate element pointers.","fields": [7223,7224]},{"file": 19,"line": 211,"col": 12,"docs": " Log an info message. This log level is intended to be used for general messages about the state of the program.","fields": [7225,7226]},{"file": 19,"line": 126,"col": 0,"fields": [7227,7228,7229,7230]},{"file": 57,"line": 48,"col": 4,"fields": [7231,7232]},{"file": 57,"line": 26,"col": 0,"fields": [7233,7234,7235]},{"file": 57,"line": 11,"col": 0,"fields": [7236,7237]},{"file": 57,"line": 16,"col": 0,"fields": [7238]},{"file": 57,"line": 30,"col": 0,"fields": [7239,7240,7241]},{"file": 57,"line": 20,"col": 0,"fields": [7242,7243]},{"file": 21,"line": 2963,"col": 4,"docs": " Round an address up to the previous aligned address Unlike `alignBackward`, `alignment` can be any positive number, not just a power of 2.","fields": [7244,7245]},{"file": 3,"line": 876,"col": 16,"fields": [7246]},{"file": 66,"line": 248,"col": 4,"fields": [7247]},{"file": 21,"line": 1720,"col": 4,"docs": " Returns an iterator that iterates over the slices of `buffer` that are separated by bytes in `delimiter`. split(u8, \"abc|def||ghi\", \"|\") will return slices for \"abc\", \"def\", \"\", \"ghi\", null, in that order. If `delimiter` does not exist in buffer, the iterator will return `buffer`, null, in that order. The delimiter length must not be zero. See also the related function `tokenize`.","fields": [7248,7249,7250]},{"file": 21,"line": 1858,"col": 12,"docs": " Returns a slice of the next field, or null if splitting is complete.","fields": [7251]},{"file": 22,"line": 2,"col": 4,"fields": [7252,7253]},{"file": 22,"line": 24,"col": 4,"fields": [7254,7255]},{"file": 22,"line": 14,"col": 12,"fields": [7256]},{"file": 21,"line": 1009,"col": 4,"docs": " Remove values from the end of a slice.","fields": [7257,7258,7259]},{"file": 21,"line": 1626,"col": 4,"docs": " Returns an iterator that iterates over the slices of `buffer` that are not any of the bytes in `delimiter_bytes`. tokenize(u8, \"   abc def    ghi  \", \" \") Will return slices for \"abc\", \"def\", \"ghi\", null, in that order. If `buffer` is empty, the iterator will return null. If `delimiter_bytes` does not exist in buffer, the iterator will return `buffer`, null, in that order. See also the related function `split`.","fields": [7260,7261,7262]},{"file": 23,"line": 10,"col": 4,"fields": []},{"file": 21,"line": 1810,"col": 12,"docs": " Returns a slice of the next token, or null if tokenization is complete.","fields": [7263]},{"file": 23,"line": 14,"col": 4,"fields": [7264,7265]},{"file": 29,"line": 11,"col": 4,"fields": []},{"file": 29,"line": 21,"col": 4,"fields": [7266,7267,7268]},{"file": 6,"line": 468,"col": 12,"docs": " If key exists this function cannot fail. If there is an existing item with `key`, then the result `Entry` pointers point to it, and found_existing is true. Otherwise, puts a new item with undefined value, and the `Entry` pointers point to it. Caller should then initialize the value (but not the key).","fields": [7269,7270]},{"file": 6,"line": 1242,"col": 12,"fields": [7271,7272,7273,7274]},{"file": 6,"line": 1254,"col": 12,"fields": [7275,7276,7277,7278,7279]},{"file": 6,"line": 1281,"col": 12,"fields": [7280,7281,7282]},{"file": 29,"line": 17,"col": 4,"fields": [7283]},{"file": 29,"line": 34,"col": 4,"fields": [7284]},{"file": 29,"line": 104,"col": 0,"fields": [7285]},{"file": 29,"line": 94,"col": 0,"fields": [7286]},{"file": 30,"line": 24,"col": 0,"fields": [7287,7288]},{"file": 30,"line": 5,"col": 0,"fields": [7289,7290,7291]},{"file": 6,"line": 418,"col": 12,"docs": " Release the backing array and invalidate this map. This does *not* deinit keys, values, or the context! If your keys or values need to be released, ensure that that is done before calling this function.","fields": [7292]},{"file": 6,"line": 532,"col": 12,"docs": " Clobbers any existing data. To detect if a put would clobber existing data, see `getOrPut`.","fields": [7293,7294,7295]},{"file": 6,"line": 1168,"col": 12,"fields": [7296,7297,7298,7299,7300]},{"file": 50,"line": 1130,"col": 8,"fields": [7301,7302,7303]},{"file": 50,"line": 182,"col": 4,"docs": " Stable in-place sort. O(n) best case, O(n*log(n)) worst case and average case. O(1) memory (no allocator required). Currently implemented as block sort.","fields": [7304,7305,7306,7307]},{"file": 31,"line": 3,"col": 0,"fields": [7308]},{"file": 39,"line": 1797,"col": 4,"docs": " Count the characters needed for format. Useful for preallocating memory","fields": [7309,7310]},{"file": 39,"line": 1785,"col": 4,"fields": [7311,7312,7313]},{"file": 55,"line": 329,"col": 4,"docs": " This function requests a new byte size for an existing allocation, which can be larger, smaller, or the same size as the old memory allocation. This function is preferred over `shrink`, because it can fail, even when shrinking. This gives the allocator a chance to perform a cheap shrink operation if possible, or otherwise return OutOfMemory, indicating that the caller should keep their capacity, for example in `std.ArrayList.shrink`. If you need guaranteed success, call `shrink`. If `new_n` is 0, this is the same as `free` and it always succeeds.","fields": [7314,7315,7316]},{"file": 19,"line": 152,"col": 4,"docs": " The default implementation for root.log.  root.log may forward log messages to this function.","fields": [7317,7318,7319,7320]},{"file": 45,"line": 1273,"col": 4,"docs": " Multiply a and b. Return type is wide enough to guarantee no overflow.","fields": [7321,7322,7323]},{"file": 21,"line": 2972,"col": 4,"docs": " Round an address up to the previous aligned address The alignment must be a power of 2 and greater than 0.","fields": [7324,7325]},{"file": 21,"line": 1162,"col": 4,"docs": " Uses Boyer-moore-horspool algorithm on large inputs; `indexOfPosLinear` on small inputs.","fields": [7326,7327,7328,7329]},{"file": 39,"line": 1589,"col": 4,"docs": " Parses the string `buf` as signed or unsigned representation in the specified radix of an integral value of type `T`. When `radix` is zero the string prefix is examined to detect the true radix:  * A prefix of \"0b\" implies radix=2,  * A prefix of \"0o\" implies radix=8,  * A prefix of \"0x\" implies radix=16,  * Otherwise radix=10 is assumed. Ignores '_' character in `buf`. See also `parseUnsigned`.","fields": [7330,7331,7332]},{"file": 21,"line": 1838,"col": 8,"fields": [7333,7334]},{"file": 23,"line": 31,"col": 4,"fields": [7335,7336]},{"file": 23,"line": 40,"col": 4,"fields": [7337,7338]},{"file": 23,"line": 49,"col": 4,"fields": [7339]},{"file": 6,"line": 458,"col": 12,"docs": " Create an iterator over the values in the map. The iterator is invalidated if the map is modified.","fields": [7340]},{"file": 6,"line": 822,"col": 20,"fields": [7341]},{"file": 57,"line": 136,"col": 8,"fields": [7342]},{"file": 67,"line": 191,"col": 4,"docs": " Provides generic hashing for any eligible type. Only hashes `key` itself, pointers are not followed. Slices as well as unions and structs containing slices are rejected to avoid ambiguity on the user's intention.","fields": [7343,7344]},{"file": 57,"line": 162,"col": 8,"fields": [7345]},{"file": 50,"line": 118,"col": 4,"fields": [7346,7347]},{"file": 50,"line": 153,"col": 4,"fields": [7348]},{"file": 50,"line": 137,"col": 4,"fields": [7349]},{"file": 50,"line": 104,"col": 4,"fields": [7350]},{"file": 50,"line": 1112,"col": 0,"fields": [7351,7352,7353,7354,7355,7356,7357]},{"file": 50,"line": 168,"col": 4,"fields": [7358]},{"file": 50,"line": 132,"col": 4,"fields": [7359]},{"file": 50,"line": 1038,"col": 0,"fields": [7360,7361,7362,7363,7364,7365,7366]},{"file": 50,"line": 97,"col": 4,"fields": [7367,7368]},{"file": 50,"line": 157,"col": 4,"fields": [7369]},{"file": 21,"line": 2262,"col": 4,"docs": " In-place rotation of the values in an array ([0 1 2 3] becomes [1 2 3 0] if we rotate by 1) Assumes 0 <= amount <= items.len","fields": [7370,7371,7372]},{"file": 50,"line": 1076,"col": 0,"fields": [7373,7374,7375,7376,7377,7378,7379]},{"file": 71,"line": 14,"col": 4,"docs": " Returns the square root of x. Special Cases:  - sqrt(+inf)  = +inf  - sqrt(+-0)   = +-0  - sqrt(x)     = nan if x < 0  - sqrt(nan)   = nan TODO Decide if all this logic should be implemented directly in the @sqrt bultin function.","fields": [7380]},{"file": 50,"line": 948,"col": 0,"fields": [7381,7382,7383,7384,7385,7386,7387]},{"file": 50,"line": 926,"col": 0,"fields": [7388,7389,7390,7391,7392,7393,7394]},{"file": 50,"line": 895,"col": 0,"fields": [7395,7396,7397,7398,7399]},{"file": 50,"line": 992,"col": 0,"fields": [7400,7401,7402,7403,7404,7405]},{"file": 50,"line": 860,"col": 0,"fields": [7406,7407,7408,7409,7410,7411,7412]},{"file": 50,"line": 811,"col": 0,"fields": [7413,7414,7415,7416,7417,7418]},{"file": 50,"line": 76,"col": 4,"docs": " Stable in-place sort. O(n) best case, O(pow(n, 2)) worst case. O(1) memory (no allocator required).","fields": [7419,7420,7421,7422]},{"file": 50,"line": 904,"col": 0,"fields": [7423,7424,7425,7426,7427,7428,7429]},{"file": 50,"line": 970,"col": 0,"fields": [7430,7431,7432,7433,7434,7435,7436]},{"file": 43,"line": 157,"col": 0,"fields": [7437,7438]},{"file": 24,"line": 27,"col": 4,"fields": [7439]},{"file": 24,"line": 15,"col": 12,"fields": [7440,7441]},{"file": 24,"line": 21,"col": 12,"fields": [7442]},{"file": 9,"line": 60,"col": 12,"docs": " If the returned number of bytes written is less than requested, the buffer is full. Returns `error.NoSpaceLeft` when no bytes would be written. Note: `error.NoSpaceLeft` matches the corresponding error from `std.fs.File.WriteError`.","fields": [7443,7444]},{"file": 9,"line": 38,"col": 12,"fields": [7445]},{"file": 9,"line": 105,"col": 12,"fields": [7446]},{"file": 36,"line": 70,"col": 4,"fields": []},{"file": 58,"line": 547,"col": 4,"docs": " True if every value of the type `T` has a unique bit pattern representing it. In other words, `T` has no unused bits and no padding.","fields": [7447]},{"file": 21,"line": 1097,"col": 4,"docs": " Consider using `indexOfPos` instead of this, which will automatically use a more sophisticated algorithm on larger inputs.","fields": [7448,7449,7450,7451]},{"file": 21,"line": 1119,"col": 0,"fields": [7452,7453]},{"file": 39,"line": 1647,"col": 0,"fields": [7454,7455,7456,7457]},{"file": 6,"line": 951,"col": 12,"fields": [7458]},{"file": 67,"line": 71,"col": 4,"docs": " Provides generic hashing for any eligible type. Strategy is provided to determine if pointers should be followed or not.","fields": [7459,7460,7461]},{"file": 45,"line": 1032,"col": 4,"docs": " Returns the nearest power of two less than or equal to value, or zero if value is less than or equal to zero.","fields": [7462,7463]},{"file": 21,"line": 2245,"col": 4,"docs": " In-place order reversal of a slice","fields": [7464,7465]},{"file": 71,"line": 35,"col": 0,"fields": [7466,7467]},{"file": 50,"line": 1015,"col": 0,"fields": [7468,7469,7470,7471,7472,7473]},{"file": 39,"line": 1760,"col": 4,"fields": [7474,7475]},{"file": 57,"line": 144,"col": 8,"fields": [7476,7477]},{"file": 6,"line": 76,"col": 8,"fields": [7478,7479]},{"file": 6,"line": 80,"col": 8,"fields": [7480,7481,7482]},{"file": 6,"line": 90,"col": 4,"fields": [7483]},{"file": 6,"line": 86,"col": 4,"fields": [7484,7485]},{"file": 3,"line": 722,"col": 16,"fields": [7486]},{"file": 46,"line": 859,"col": 4,"fields": [7487,7488]},{"file": 45,"line": 615,"col": 4,"docs": " Returns an unsigned int type that can hold the number of bits in T - 1. Suitable for 0-based bit indices of T.","fields": [7489]},{"file": 4,"line": 4,"col": 4,"fields": [7490,7491,7492]},{"file": 6,"line": 55,"col": 4,"fields": [7493]},{"file": 6,"line": 12,"col": 4,"fields": [7494,7495]},{"file": 6,"line": 38,"col": 4,"fields": [7496,7497]},{"file": 6,"line": 135,"col": 4,"docs": " This function issues a compile error with a helpful message if there is a problem with the provided context type.  A context must have the following member functions:   - hash(self, PseudoKey) Hash   - eql(self, PseudoKey, Key) bool If you are passing a context to a *Adapted function, PseudoKey is the type of the key parameter.  Otherwise, when creating a HashMap or HashMapUnmanaged type, PseudoKey = Key = K.","fields": [7498,7499,7500,7501]},{"file": 6,"line": 358,"col": 4,"docs": " General purpose hash table. No order is guaranteed and any modification invalidates live iterators. It provides fast operations (lookup, insertion, deletion) with quite high load factors (up to 80% by default) for a low memory usage. For a hash map that can be initialized directly that does not store an Allocator field, see `HashMapUnmanaged`. If iterating over the table entries is a strong usecase and needs to be fast, prefer the alternative `std.ArrayHashMap`. Context must be a struct type with two member functions:   hash(self, K) u64   eql(self, K, K) bool Adapted variants of many functions are provided.  These variants take a pseudo key instead of a key.  Their context must have the functions:   hash(self, PseudoKey) u64   eql(self, PseudoKey, K) bool","fields": [7502,7503,7504,7505]},{"file": 6,"line": 47,"col": 4,"fields": [7506,7507]},{"file": 6,"line": 673,"col": 4,"docs": " A HashMap based on open addressing and linear probing. A lookup or modification typically occurs only 2 cache misses. No order is guaranteed and any modification invalidates live iterators. It achieves good performance with quite high load factors (by default, grow is triggered at 80% full) and only one byte of overhead per element. The struct itself is only 16 bytes for a small footprint. This comes at the price of handling size with u32, which should be reasonnable enough for almost all uses. Deletions are achieved with tombstones.","fields": [7508,7509,7510,7511]},{"file": 45,"line": 314,"col": 4,"docs": " Given two types, returns the smallest one which is capable of holding the full range of the minimum value.","fields": [7512,7513]},{"file": 7,"line": 23,"col": 4,"docs": " A contiguous, growable list of arbitrarily aligned items in memory. This is a wrapper around an array of T values aligned to `alignment`-byte addresses. If the specified alignment is `null`, then `@alignOf(T)` is used. Initialize with `init`. This struct internally stores a `std.mem.Allocator` for memory management. To manually specify an allocator with each method call see `ArrayListAlignedUnmanaged`.","fields": [7514,7515]},{"file": 7,"line": 12,"col": 4,"docs": " A contiguous, growable list of items in memory. This is a wrapper around an array of T values. Initialize with `init`. This struct internally stores a `std.mem.Allocator` for memory management. To manually specify an allocator with each method call see `ArrayListUnmanaged`.","fields": [7516]},{"file": 46,"line": 159,"col": 4,"docs": " Given a \"memory span\" type, returns the \"element type\".","fields": [7517]},{"file": 46,"line": 226,"col": 4,"docs": " Given a \"memory span\" type, returns the same type except with the given sentinel value.","fields": [7518,7519]},{"file": 21,"line": 563,"col": 4,"docs": " Takes a pointer to an array, a sentinel-terminated pointer, or a slice, and returns a slice. If there is a sentinel on the input type, there will be a sentinel on the output type. The constness of the output type matches the constness of the input type. `[*c]` pointers are assumed to be 0-terminated, and assumed to not allow null.","fields": [7520]},{"file": 9,"line": 119,"col": 0,"fields": [7521]},{"file": 9,"line": 8,"col": 4,"docs": " This turns a byte buffer into an `io.Writer`, `io.Reader`, or `io.SeekableStream`. If the supplied byte buffer is const, then `io.Writer` is not available.","fields": [7522]},{"file": 10,"line": 6,"col": 4,"fields": [7523,7524,7525]},{"file": 11,"line": 2,"col": 4,"fields": [7526,7527,7528,7529,7530,7531,7532]},{"file": 45,"line": 412,"col": 4,"docs": " Finds the maximum of three numbers.","fields": [7533,7534,7535]},{"file": 45,"line": 1213,"col": 4,"docs": " Returns the maximum value of integer type T.","fields": [7536]},{"file": 58,"line": 45,"col": 4,"fields": [7537]},{"file": 58,"line": 47,"col": 12,"fields": [7538]},{"file": 58,"line": 354,"col": 4,"fields": [7539]},{"file": 46,"line": 599,"col": 4,"fields": [7540]},{"file": 58,"line": 99,"col": 4,"fields": [7541]},{"file": 58,"line": 101,"col": 12,"fields": [7542]},{"file": 58,"line": 218,"col": 4,"fields": [7543]},{"file": 46,"line": 140,"col": 4,"fields": [7544]},{"file": 21,"line": 2543,"col": 0,"fields": [7545,7546,7547]},{"file": 21,"line": 2559,"col": 0,"fields": [7548]},{"file": 13,"line": 14,"col": 4,"docs": " A singly-linked list is headed by a single forward pointer. The elements are singly linked for minimum space and pointer manipulation overhead at the expense of O(n) removal for arbitrary elements. New elements can be added to the list after an existing element or at the head of the list. A singly-linked list may only be traversed in the forward direction. Singly-linked lists are ideal for applications with large datasets and few or no removals or for implementing a LIFO queue.","fields": [7549]},{"file": 45,"line": 1221,"col": 4,"docs": " Returns the minimum value of integer type T.","fields": [7550]},{"file": 58,"line": 248,"col": 4,"fields": [7551]},{"file": 21,"line": 2819,"col": 0,"fields": [7552]},{"file": 14,"line": 9,"col": 4,"docs": " Many producer, many consumer, non-allocating, thread-safe. Uses a mutex to protect access. The queue does not manage ownership and the user is responsible to manage the storage of the nodes.","fields": [7553]},{"file": 13,"line": 161,"col": 4,"docs": " A tail queue is headed by a pair of pointers, one to the head of the list and the other to the tail of the list. The elements are doubly linked so that an arbitrary element can be removed without a need to traverse the list. New elements can be added to the list before or after an existing element, at the head of the list, or at the end of the list. A tail queue may be traversed in either direction.","fields": [7554]},{"file": 16,"line": 6,"col": 4,"fields": [7555]},{"file": 18,"line": 8,"col": 4,"docs": " Many reader, many writer, non-allocating, thread-safe Uses a spinlock to protect push() and pop() When building in single threaded mode, this is a simple linked list.","fields": [7556]},{"file": 58,"line": 116,"col": 4,"fields": [7557]},{"file": 58,"line": 118,"col": 12,"fields": [7558]},{"file": 21,"line": 2726,"col": 0,"fields": [7559,7560]},{"file": 46,"line": 190,"col": 4,"docs": " Given a type which can have a sentinel e.g. `[:0]u8`, returns the sentinel value, or `null` if there is not one. Types which cannot possibly have a sentinel will be a compile error.","fields": [7561]},{"file": 19,"line": 174,"col": 4,"docs": " Returns a scoped logging namespace that logs all messages using the scope provided here.","fields": [7562]},{"file": 46,"line": 328,"col": 4,"fields": [7563]},{"file": 21,"line": 1849,"col": 4,"fields": [7564]},{"file": 22,"line": 6,"col": 4,"fields": [7565,7566]},{"file": 21,"line": 1801,"col": 4,"fields": [7567]},{"file": 50,"line": 1128,"col": 4,"docs": " Use to generate a comparator function for a given type. e.g. `sort(u8, slice, {}, comptime asc(u8))`.","fields": [7568]},{"file": 6,"line": 816,"col": 8,"fields": [7569]},{"file": 71,"line": 77,"col": 4,"docs": " Returns the return type `sqrt` will return given an operand of type `T`.","fields": [7570]},{"file": 24,"line": 5,"col": 4,"docs": " A Writer that counts how many bytes has been written to it.","fields": [7571]},{"file": 19,"line": 87,"col": 8,"docs": " Returns a string literal of the given level in full text form.","fields": [7572]},{"file": 67,"line": 164,"col": 0,"fields": [7573]},{"file": 6,"line": 65,"col": 4,"docs": " Builtin hashmap for strings as keys. Key memory is managed by the caller.  Keys and values will not automatically be freed.","fields": [7574]},{"file": 58,"line": 308,"col": 4,"fields": [7575]},{"file": 16,"line": 108,"col": 8,"fields": [7576,7577]},{"file": 58,"line": 287,"col": 4,"fields": [7578]},{"file": 3,"line": 723,"col": 23,"fields": []},{"file": 8,"line": 6,"col": 20,"fields": [7579,7580,7581,7582,7583,7584,7585,7586,7587,7588,7589,7590,7591,7592,7593,7594,7595,7596,7597,7598,7599,7600,7601,7602,7603,7604,7605,7606,7607,7608,7609,7610,7611,7612,7613,7614,7615,7616,7617,7618,7619,7620,7621,7622,7623,7624,7625,7626,7627,7628,7629,7630,7631,7632,7633,7634,7635,7636,7637,7638,7639,7640,7641,7642,7643,7644,7645,7646,7647,7648,7649,7650,7651,7652,7653,7654,7655,7656,7657,7658,7659,7660,7661,7662,7663,7664,7665,7666,7667,7668,7669,7670,7671,7672,7673,7674,7675,7676,7677,7678,7679,7680,7681,7682,7683,7684,7685,7686,7687,7688,7689,7690,7691,7692,7693,7694,7695,7696,7697,7698,7699,7700,7701,7702,7703,7704,7705,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720]},{"file": 12,"line": 450,"col": 23,"fields": [7721,7722]},{"file": 3,"line": 759,"col": 25,"fields": [7723,7724,7725,7726,7727,7728,7729,7730,7731,7732,7733,7734,7735,7736,7737,7738,7739,7740,7741,7742,7743,7744,7745,7746,7747,7748,7749,7750,7751,7752,7753,7754,7755,7756,7757,7758,7759,7760,7761,7762,7763,7764,7765,7766,7767,7768,7769,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779]},{"file": 4,"line": 9,"col": 11,"fields": [7780]},{"file": 5,"line": 12,"col": 17,"fields": [7781,7782,7783]},{"file": 6,"line": 56,"col": 11,"fields": []},{"file": 6,"line": 365,"col": 11,"fields": [7784,7785,7786]},{"file": 6,"line": 683,"col": 11,"fields": [7787,7788,7789]},{"file": 7,"line": 29,"col": 11,"fields": [7790,7791,7792]},{"file": 25,"line": 247,"col": 26,"fields": [7793,7794]},{"file": 25,"line": 253,"col": 25,"fields": [7795,7796,7797,7798]},{"file": 25,"line": 260,"col": 19,"fields": [7799,7800]},{"file": 25,"line": 238,"col": 20,"fields": [7801,7802,7803,7804]},{"file": 25,"line": 293,"col": 17,"fields": [7805,7806]},{"file": 25,"line": 233,"col": 13,"fields": [7807,7808]},{"file": 3,"line": 16,"col": 24,"fields": [7809,7810,7811,7812,7813,7814,7815,7816,7817,7818,7819,7820,7821,7822,7823,7824,7825,7826,7827,7828,7829,7830,7831,7832,7833,7834,7835,7836,7837,7838,7839,7840,7841,7842,7843,7844,7845,7846,7847,7848,7849]},{"file": 3,"line": 7,"col": 19,"fields": [7850,7851,7852]},{"file": 12,"line": 443,"col": 19,"fields": [7853,7854]},{"file": 9,"line": 9,"col": 11,"fields": [7855,7856]},{"file": 10,"line": 14,"col": 11,"fields": [7857]},{"file": 11,"line": 11,"col": 11,"fields": [7858]},{"file": 25,"line": 348,"col": 18,"fields": [7859,7860,7861,7862]},{"file": 12,"line": 196,"col": 21,"fields": [7863,7864,7865,7866,7867,7868,7869,7870,7871,7872,7873,7874,7875,7876,7877,7878,7879,7880,7881,7882,7883,7884,7885,7886,7887]},{"file": 12,"line": 255,"col": 25,"fields": [7888,7889,7890,7891]},{"file": 13,"line": 15,"col": 11,"fields": [7892]},{"file": 14,"line": 10,"col": 11,"fields": [7893,7894,7895]},{"file": 13,"line": 162,"col": 11,"fields": [7896,7897,7898]},{"file": 16,"line": 7,"col": 11,"fields": [7899]},{"file": 33,"line": 319,"col": 26,"fields": [7900,7901,7902]},{"file": 17,"line": 1565,"col": 24,"fields": [7903,7904]},{"file": 18,"line": 9,"col": 11,"fields": [7905,7906]},{"file": 17,"line": 71,"col": 22,"fields": [7907,7908,7909]},{"file": 19,"line": 175,"col": 11,"fields": []},{"file": 12,"line": 278,"col": 32,"fields": [7910,7911,7912]},{"file": 20,"line": 629,"col": 17,"fields": [7913,7914,7915,7916,7917,7918,7919,7920,7921,7922,7923,7924,7925,7926,7927]},{"file": 21,"line": 1850,"col": 11,"fields": [7928,7929,7930]},{"file": 22,"line": 7,"col": 11,"fields": [7931,7932]},{"file": 21,"line": 1802,"col": 11,"fields": [7933,7934,7935]},{"file": 23,"line": 3,"col": 14,"fields": [7936,7937,7938]},{"file": 29,"line": 9,"col": 18,"fields": [7939,7940]},{"file": 30,"line": 3,"col": 12,"fields": [7941,7942]},{"file": 6,"line": 817,"col": 19,"fields": [7943,7944,7945]},{"file": 24,"line": 6,"col": 11,"fields": [7946,7947]},{"file": 19,"line": 74,"col": 18,"fields": [7948,7949,7950,7951]},{"file": 6,"line": 75,"col": 26,"fields": []},{"file": 25,"line": 593,"col": 22,"fields": [7952,7953,7954,7955,7956,7957,7958,7959,7960]},{"file": 35,"line": 374,"col": 20,"fields": [7961]},{"file": 16,"line": 109,"col": 49,"fields": []},{"file": 16,"line": 130,"col": 68,"fields": []},{"file": 16,"line": 112,"col": 66,"fields": []},{"file": 0,"line": 0,"col": 0,"fields": []},{"file": 1,"line": 0,"col": 0,"fields": []},{"file": 2,"line": 0,"col": 0,"fields": []},{"file": 3,"line": 637,"col": 28,"fields": [7962]},{"file": 36,"line": 296,"col": 55},{"file": 36,"line": 298,"col": 39},{"file": 12,"line": 53,"col": 23,"fields": [7963,7964]},{"file": 36,"line": 322,"col": 66},{"file": 39,"line": 19,"col": 26,"fields": [7965,7966,7967,7968]},{"file": 36,"line": 204,"col": 90},{"file": 36,"line": 500,"col": 23,"fields": [7969,7970,7971]},{"file": 40,"line": 290,"col": 16,"fields": [7972]},{"file": 5,"line": 74,"col": 26,"fields": [7973,7974,7975,7976,7977,7978]},{"file": 6,"line": 746,"col": 25,"fields": [7979,7980]},{"file": 25,"line": 355,"col": 26,"fields": [7981,7982,7983,7984,7985,7986,7987,7988,7989,7990,7991,7992,7993,7994,7995,7996,7997,7998,7999]},{"file": 36,"line": 39,"col": 23,"fields": [8000,8001,8002]},{"file": 36,"line": 208,"col": 63},{"file": 36,"line": 113,"col": 90},{"file": 36,"line": 361,"col": 26,"fields": [8003,8004]},{"file": 36,"line": 117,"col": 63},{"file": 59,"line": 4199,"col": 28,"fields": [8005,8006,8007,8008,8009,8010,8011,8012,8013,8014,8015,8016,8017,8018,8019,8020,8021]},{"file": 59,"line": 4269,"col": 19,"fields": [8022,8023]},{"file": 72,"line": 0,"col": 14,"fields": [8024,8025,8026,8027,8028,8029,8030,8031,8032,8033,8034,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8047,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8059,8060,8061,8062,8063,8064,8065,8066,8067,8068,8069,8070,8071,8072,8073,8074,8075,8076,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102,8103,8104,8105,8106,8107,8108,8109,8110,8111,8112,8113,8114,8115,8116,8117,8118,8119,8120,8121,8122,8123,8124,8125,8126,8127,8128,8129,8130,8131,8132,8133,8134,8135,8136,8137,8138,8139,8140,8141,8142,8143,8144,8145,8146,8147,8148,8149,8150,8151,8152,8153,8154,8155,8156,8157,8158,8159,8160,8161,8162,8163,8164,8165,8166,8167,8168,8169,8170,8171,8172,8173,8174]},{"file": 15,"line": 62,"col": 18,"fields": [8175,8176,8177]},{"file": 39,"line": 734,"col": 17,"fields": [8178,8179]},{"file": 36,"line": 987,"col": 22,"fields": [8180,8181]},{"file": 56,"line": 7,"col": 27,"fields": [8182,8183,8184]},{"file": 55,"line": 259,"col": 18,"fields": [8185,8186]},{"file": 36,"line": 490,"col": 22,"fields": [8187,8188,8189,8190,8191,8192,8193]},{"file": 36,"line": 623,"col": 49},{"file": 36,"line": 631,"col": 52},{"file": 36,"line": 27,"col": 21,"fields": [8194,8195,8196,8197]},{"file": 65,"line": 64,"col": 28,"fields": [8198,8199]},{"file": 20,"line": 120,"col": 16,"fields": [8200,8201,8202,8203,8204,8205,8206,8207,8208,8209,8210,8211,8212,8213,8214,8215,8216,8217,8218,8219,8220,8221,8222,8223,8224,8225,8226,8227,8228,8229,8230,8231,8232,8233,8234,8235,8236,8237,8238,8239,8240,8241,8242,8243,8244,8245,8246,8247,8248,8249,8250,8251,8252,8253,8254,8255,8256,8257,8258,8259,8260,8261,8262,8263,8264,8265,8266,8267,8268,8269,8270,8271,8272,8273,8274,8275,8276,8277,8278,8279,8280,8281,8282,8283,8284,8285,8286,8287,8288,8289,8290,8291,8292,8293,8294,8295,8296,8297,8298,8299,8300,8301,8302,8303,8304,8305,8306,8307,8308,8309,8310,8311,8312,8313,8314,8315,8316,8317,8318,8319,8320,8321,8322,8323,8324,8325,8326,8327,8328,8329,8330,8331,8332,8333,8334,8335,8336,8337,8338,8339,8340,8341,8342,8343,8344,8345,8346,8347,8348,8349,8350,8351,8352,8353,8354,8355,8356,8357,8358,8359,8360,8361,8362,8363,8364,8365,8366,8367,8368,8369,8370,8371,8372,8373,8374,8375,8376,8377,8378,8379,8380,8381,8382,8383,8384,8385,8386,8387,8388,8389,8390,8391,8392,8393,8394,8395,8396,8397,8398,8399,8400,8401,8402,8403,8404,8405,8406,8407,8408,8409,8410,8411,8412,8413,8414,8415,8416,8417,8418,8419,8420,8421,8422,8423,8424,8425,8426,8427,8428,8429,8430,8431,8432,8433,8434,8435,8436,8437,8438,8439,8440,8441,8442,8443,8444,8445,8446,8447,8448,8449,8450,8451,8452,8453,8454,8455,8456,8457,8458,8459,8460,8461,8462,8463,8464,8465,8466,8467,8468,8469,8470,8471,8472,8473,8474,8475,8476,8477,8478,8479,8480,8481,8482,8483,8484,8485,8486,8487,8488,8489,8490,8491,8492,8493,8494,8495,8496,8497,8498,8499,8500,8501,8502,8503,8504,8505,8506,8507,8508,8509,8510,8511,8512,8513,8514,8515,8516,8517,8518,8519,8520,8521,8522,8523,8524,8525,8526,8527,8528,8529,8530,8531,8532,8533,8534,8535,8536,8537,8538,8539,8540,8541,8542,8543,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,8554,8555,8556,8557,8558]},{"file": 47,"line": 4999,"col": 51},{"file": 56,"line": 15,"col": 22,"fields": [8559,8560]},{"file": 59,"line": 4332,"col": 21,"fields": [8561,8562]},{"file": 53,"line": 553,"col": 36},{"file": 57,"line": 37,"col": 24,"fields": [8563,8564]},{"file": 36,"line": 1571,"col": 82},{"file": 36,"line": 1572,"col": 82},{"file": 36,"line": 1573,"col": 72},{"file": 0,"line": 19,"col": 90},{"file": 0,"line": 25,"col": 32},{"file": 0,"line": 26,"col": 38},{"file": 0,"line": 27,"col": 38},{"file": 36,"line": 134,"col": 90},{"file": 29,"line": 4,"col": 12,"fields": [8565]},{"file": 6,"line": 838,"col": 35,"fields": [8566,8567,8568]},{"file": 57,"line": 130,"col": 19,"fields": [8569,8570,8571]},{"file": 50,"line": 109,"col": 17,"fields": [8572,8573,8574,8575,8576,8577,8578]},{"file": 50,"line": 93,"col": 14,"fields": [8579,8580]},{"file": 3,"line": 0,"col": 0,"fields": []},{"file": 4,"line": 0,"col": 0,"fields": []},{"file": 5,"line": 0,"col": 0,"fields": []},{"file": 5,"line": 36,"col": 21,"fields": [8581,8582,8583,8584,8585,8586,8587,8588,8589,8590,8591]},{"file": 5,"line": 71,"col": 21,"fields": [8592,8593,8594]},{"file": 5,"line": 274,"col": 21,"fields": [8595,8596,8597,8598,8599,8600,8601]},{"file": 43,"line": 34,"col": 49,"fields": [8602]},{"file": 6,"line": 0,"col": 0,"fields": []},{"file": 36,"line": 1448,"col": 73,"fields": [8603,8604,8605]},{"file": 6,"line": 726,"col": 23,"fields": [8606,8607,8608]},{"file": 7,"line": 0,"col": 0,"fields": []},{"file": 25,"line": 265,"col": 18,"fields": [8609,8610,8611,8612,8613,8614,8615,8616,8617,8618]},{"file": 3,"line": 12,"col": 19,"fields": [8619,8620]},{"file": 8,"line": 0,"col": 0,"docs": "","fields": []},{"file": 3,"line": 460,"col": 20,"fields": [8621,8622,8623,8624,8625,8626,8627,8628,8629,8630,8631,8632,8633,8634,8635,8636,8637,8638,8639,8640,8641,8642]},{"file": 3,"line": 562,"col": 29,"fields": [8643,8644,8645,8646,8647,8648,8649,8650,8651]},{"file": 3,"line": 606,"col": 20,"fields": [8652,8653,8654]},{"file": 9,"line": 0,"col": 0,"fields": []},{"file": 10,"line": 0,"col": 0,"fields": []},{"file": 11,"line": 0,"col": 0,"fields": []},{"file": 12,"line": 0,"col": 0,"fields": []},{"file": 12,"line": 225,"col": 20,"fields": [8655,8656]},{"file": 12,"line": 232,"col": 22,"fields": [8657]},{"file": 12,"line": 238,"col": 24,"fields": [8658,8659,8660,8661,8662,8663,8664,8665]},{"file": 12,"line": 265,"col": 22,"fields": [8666,8667,8668]},{"file": 12,"line": 286,"col": 28,"fields": [8669,8670,8671,8672,8673]},{"file": 12,"line": 296,"col": 23,"fields": [8674,8675,8676,8677]},{"file": 12,"line": 305,"col": 25,"fields": [8678]},{"file": 12,"line": 311,"col": 27,"fields": [8679,8680]},{"file": 12,"line": 318,"col": 22,"fields": [8681]},{"file": 12,"line": 328,"col": 26,"fields": [8682,8683]},{"file": 12,"line": 335,"col": 21,"fields": [8684,8685,8686,8687,8688]},{"file": 12,"line": 345,"col": 27,"fields": [8689,8690,8691]},{"file": 12,"line": 353,"col": 22,"fields": [8692,8693,8694,8695]},{"file": 12,"line": 362,"col": 22,"fields": [8696,8697,8698]},{"file": 12,"line": 370,"col": 19,"fields": [8699,8700,8701,8702,8703,8704]},{"file": 12,"line": 381,"col": 23,"fields": [8705]},{"file": 12,"line": 387,"col": 22,"fields": [8706]},{"file": 12,"line": 393,"col": 25,"fields": [8707]},{"file": 12,"line": 399,"col": 23,"fields": [8708,8709]},{"file": 12,"line": 406,"col": 28,"fields": [8710,8711,8712]},{"file": 13,"line": 0,"col": 0,"fields": []},{"file": 13,"line": 19,"col": 25,"fields": [8713,8714]},{"file": 14,"line": 0,"col": 0,"fields": []},{"file": 13,"line": 166,"col": 25,"fields": [8715,8716,8717]},{"file": 15,"line": 0,"col": 0,"docs": "","fields": [8718]},{"file": 16,"line": 0,"col": 0,"fields": []},{"file": 17,"line": 0,"col": 0,"fields": []},{"file": 17,"line": 1571,"col": 27,"fields": [8719,8720]},{"file": 17,"line": 1576,"col": 24,"fields": [8721,8722,8723,8724,8725,8726,8727,8728,8729,8730,8731,8732,8733]},{"file": 18,"line": 0,"col": 0,"fields": []},{"file": 18,"line": 17,"col": 25,"fields": [8734,8735]},{"file": 17,"line": 42,"col": 27,"fields": [8736,8737,8738]},{"file": 19,"line": 0,"col": 0,"docs": "","fields": []},{"file": 20,"line": 0,"col": 0,"fields": []},{"file": 21,"line": 0,"col": 0,"fields": []},{"file": 22,"line": 0,"col": 0,"fields": []},{"file": 22,"line": 12,"col": 21,"fields": [8739,8740]},{"file": 23,"line": 0,"col": 0,"fields": []},{"file": 24,"line": 0,"col": 0,"fields": []},{"file": 25,"line": 0,"col": 0,"fields": []},{"file": 35,"line": 378,"col": 22,"fields": [8741,8742,8743,8744,8745,8746,8747,8748,8749,8750]},{"file": 26,"line": 0,"col": 0,"fields": []},{"file": 27,"line": 0,"col": 0,"fields": []},{"file": 28,"line": 0,"col": 0,"fields": []},{"file": 29,"line": 0,"col": 0,"fields": []},{"file": 30,"line": 0,"col": 0,"fields": []},{"file": 31,"line": 0,"col": 0,"fields": []},{"file": 32,"line": 0,"col": 0,"fields": []},{"file": 0,"line": 11,"col": 17,"fields": [8751,8752]},{"file": 33,"line": 0,"col": 0,"docs": "","fields": [8753]},{"file": 34,"line": 0,"col": 0,"fields": []},{"file": 35,"line": 0,"col": 0,"fields": []},{"file": 36,"line": 0,"col": 0,"fields": []},{"file": 37,"line": 0,"col": 0,"fields": []},{"file": 38,"line": 0,"col": 0,"fields": []},{"file": 39,"line": 0,"col": 0,"fields": []},{"file": 40,"line": 0,"col": 0,"fields": []},{"file": 41,"line": 0,"col": 0,"fields": []},{"file": 42,"line": 0,"col": 0,"fields": []},{"file": 43,"line": 0,"col": 0,"fields": []},{"file": 44,"line": 0,"col": 0,"fields": []},{"file": 45,"line": 0,"col": 0,"fields": []},{"file": 46,"line": 0,"col": 0,"fields": []},{"file": 47,"line": 0,"col": 0,"docs": "","fields": []},{"file": 48,"line": 0,"col": 0,"fields": []},{"file": 49,"line": 0,"col": 0,"fields": []},{"file": 50,"line": 0,"col": 0,"fields": []},{"file": 51,"line": 0,"col": 0,"fields": []},{"file": 52,"line": 0,"col": 0,"fields": []},{"file": 53,"line": 2,"col": 0,"fields": []},{"file": 12,"line": 457,"col": 23,"fields": [8754,8755,8756]},{"file": 12,"line": 147,"col": 17,"fields": [8757,8758,8759,8760]},{"file": 54,"line": 0,"col": 0,"docs": "","fields": [8761]},{"file": 37,"line": 604,"col": 23,"fields": [8762,8763,8764,8765,8766,8767,8768,8769]},{"file": 15,"line": 59,"col": 24,"fields": [8770]},{"file": 39,"line": 13,"col": 22,"fields": [8771,8772,8773]},{"file": 55,"line": 0,"col": 0,"docs": "","fields": [8774,8775]},{"file": 59,"line": 3294,"col": 25,"fields": [8776,8777,8778,8779]},{"file": 36,"line": 1154,"col": 17,"fields": [8780,8781,8782]},{"file": 25,"line": 288,"col": 12,"fields": [8783,8784,8785]},{"file": 25,"line": 278,"col": 17,"fields": [8786,8787]},{"file": 54,"line": 115,"col": 24,"fields": [8788]},{"file": 56,"line": 0,"col": 0,"fields": []},{"file": 68,"line": 31,"col": 25,"fields": [8789]},{"file": 69,"line": 90,"col": 12,"fields": [8790,8791]},{"file": 59,"line": 3399,"col": 4,"fields": [8792,8793,8794,8795]},{"file": 57,"line": 0,"col": 0,"fields": []},{"file": 12,"line": 479,"col": 20,"fields": [8796,8797,8798]},{"file": 58,"line": 0,"col": 0,"fields": []},{"file": 25,"line": 228,"col": 16,"fields": [8799,8800]},{"file": 3,"line": 93,"col": 35,"fields": [8801,8802,8803,8804,8805,8806,8807,8808,8809,8810,8811,8812,8813,8814,8815,8816,8817,8818,8819,8820]},{"file": 3,"line": 181,"col": 38,"fields": [8821,8822]},{"file": 3,"line": 220,"col": 33,"fields": [8823,8824,8825,8826]},{"file": 8,"line": 978,"col": 16,"fields": []},{"file": 3,"line": 617,"col": 28,"fields": [8827,8828,8829,8830,8831]},{"file": 3,"line": 1247,"col": 26,"fields": [8832,8833,8834]},{"file": 12,"line": 86,"col": 26,"fields": [8835,8836,8837,8838]},{"file": 12,"line": 95,"col": 24,"fields": [8839,8840,8841,8842,8843,8844]},{"file": 12,"line": 118,"col": 24,"fields": [8845,8846,8847,8848,8849,8850,8851,8852,8853]},{"file": 12,"line": 156,"col": 30,"fields": [8854,8855,8856,8857,8858,8859,8860,8861,8862,8863,8864,8865,8866,8867,8868]},{"file": 12,"line": 176,"col": 25,"fields": [8869,8870,8871,8872]},{"file": 12,"line": 612,"col": 24,"fields": [8873,8874]},{"file": 12,"line": 655,"col": 26,"fields": [8875,8876,8877]},{"file": 12,"line": 663,"col": 26,"fields": [8878,8879,8880,8881]},{"file": 12,"line": 413,"col": 25,"fields": [8882,8883,8884]},{"file": 59,"line": 0,"col": 0,"docs": "","fields": []},{"file": 17,"line": 13,"col": 17,"fields": [8885,8886,8887,8888,8889,8890,8891,8892,8893,8894,8895,8896,8897]},{"file": 60,"line": 0,"col": 0,"docs": "","fields": []},{"file": 17,"line": 1593,"col": 29,"fields": [8898,8899,8900]},{"file": 17,"line": 1601,"col": 30,"fields": [8901,8902,8903]},{"file": 17,"line": 1609,"col": 30,"fields": [8904,8905,8906]},{"file": 17,"line": 1617,"col": 31,"fields": [8907,8908,8909]},{"file": 17,"line": 1625,"col": 31,"fields": [8910,8911,8912,8913]},{"file": 17,"line": 1634,"col": 32,"fields": [8914,8915,8916,8917]},{"file": 17,"line": 1643,"col": 30,"fields": [8918,8919,8920,8921]},{"file": 17,"line": 1652,"col": 31,"fields": [8922,8923,8924,8925]},{"file": 17,"line": 1661,"col": 29,"fields": [8926,8927,8928,8929]},{"file": 17,"line": 1670,"col": 31,"fields": [8930,8931,8932,8933,8934]},{"file": 17,"line": 1680,"col": 30,"fields": [8935]},{"file": 17,"line": 1684,"col": 34,"fields": [8936,8937,8938,8939,8940]},{"file": 17,"line": 63,"col": 23,"fields": [8941,8942,8943]},{"file": 19,"line": 116,"col": 23,"fields": [8944,8945]},{"file": 20,"line": 483,"col": 14,"fields": []},{"file": 20,"line": 529,"col": 16,"fields": []},{"file": 20,"line": 552,"col": 17,"fields": []},{"file": 20,"line": 559,"col": 16,"fields": []},{"file": 20,"line": 585,"col": 17,"fields": []},{"file": 20,"line": 675,"col": 20,"fields": [8946,8947,8948,8949,8950,8951,8952,8953,8954,8955,8956]},{"file": 20,"line": 730,"col": 23,"fields": [8957,8958,8959]},{"file": 20,"line": 736,"col": 23,"fields": [8960,8961,8962,8963,8964,8965]},{"file": 59,"line": 3336,"col": 4,"fields": [8966,8967,8968]},{"file": 61,"line": 0,"col": 0,"fields": []},{"file": 62,"line": 0,"col": 0,"fields": []},{"file": 25,"line": 14,"col": 17,"fields": []},{"file": 25,"line": 138,"col": 21,"fields": []},{"file": 25,"line": 143,"col": 16,"fields": []},{"file": 25,"line": 159,"col": 16,"fields": []},{"file": 63,"line": 0,"col": 0,"fields": []},{"file": 35,"line": 379,"col": 17,"fields": [8969,8970]},{"file": 64,"line": 0,"col": 0,"docs": "","fields": [8971]},{"file": 65,"line": 0,"col": 0,"docs": "","fields": [8972]},{"file": 33,"line": 670,"col": 24,"fields": [8973]},{"file": 35,"line": 98,"col": 17,"fields": [8974,8975,8976,8977,8978,8979,8980]},{"file": 35,"line": 342,"col": 19,"fields": [8981,8982,8983,8984,8985,8986,8987]},{"file": 35,"line": 352,"col": 23,"fields": [8988,8989,8990]},{"file": 36,"line": 489,"col": 16,"fields": []},{"file": 36,"line": 50,"col": 19,"fields": [8991,8992]},{"file": 36,"line": 949,"col": 20,"fields": [8993,8994,8995]},{"file": 37,"line": 308,"col": 15,"fields": [8996,8997,8998,8999,9000]},{"file": 37,"line": 562,"col": 23,"fields": [9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014]},{"file": 37,"line": 578,"col": 23,"fields": [9015,9016,9017,9018,9019,9020,9021,9022,9023,9024,9025,9026,9027,9028]},{"file": 37,"line": 594,"col": 23,"fields": [9029,9030,9031,9032,9033,9034,9035,9036]},{"file": 37,"line": 614,"col": 23,"fields": [9037,9038,9039,9040,9041,9042,9043,9044,9045,9046]},{"file": 37,"line": 626,"col": 23,"fields": [9047,9048,9049,9050,9051,9052,9053,9054,9055,9056]},{"file": 37,"line": 723,"col": 22,"fields": [9057,9058]},{"file": 37,"line": 787,"col": 25,"fields": [9059,9060]},{"file": 37,"line": 947,"col": 15,"fields": [9061,9062,9063,9064,9065,9066,9067,9068,9069,9070,9071,9072,9073,9074,9075,9076,9077,9078,9079,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9101,9102,9103,9104,9105,9106,9107,9108,9109,9110,9111,9112,9113,9114,9115,9116,9117,9118,9119,9120,9121,9122,9123,9124,9125,9126,9127,9128,9129,9130,9131,9132,9133,9134,9135,9136,9137,9138,9139,9140,9141,9142,9143,9144,9145,9146,9147,9148,9149,9150,9151,9152,9153,9154,9155,9156,9157,9158,9159,9160,9161,9162,9163,9164,9165,9166,9167,9168,9169,9170,9171,9172,9173,9174,9175,9176,9177,9178,9179,9180,9181,9182,9183,9184,9185,9186,9187,9188,9189,9190,9191,9192,9193,9194,9195,9196,9197,9198,9199,9200,9201,9202,9203,9204,9205,9206,9207,9208,9209,9210,9211,9212,9213,9214,9215,9216,9217,9218,9219,9220,9221,9222,9223,9224,9225,9226,9227,9228,9229,9230,9231,9232,9233,9234,9235,9236,9237,9238,9239]},{"file": 66,"line": 0,"col": 0,"fields": []},{"file": 67,"line": 0,"col": 0,"fields": []},{"file": 42,"line": 237,"col": 22,"fields": []},{"file": 43,"line": 14,"col": 17,"fields": [9240,9241]},{"file": 44,"line": 740,"col": 21,"fields": [9242,9243,9244,9245,9246]},{"file": 59,"line": 1689,"col": 15,"fields": []},{"file": 59,"line": 94,"col": 16,"fields": []},{"file": 59,"line": 126,"col": 14,"fields": []},{"file": 59,"line": 1767,"col": 17,"fields": []},{"file": 59,"line": 2938,"col": 14,"fields": []},{"file": 59,"line": 1850,"col": 7,"fields": []},{"file": 59,"line": 1948,"col": 7,"fields": []},{"file": 59,"line": 3045,"col": 22,"fields": [9247,9248,9249,9250]},{"file": 47,"line": 181,"col": 18,"fields": [9251,9252]},{"file": 47,"line": 186,"col": 24,"fields": [9253,9254]},{"file": 68,"line": 0,"col": 0,"fields": []},{"file": 48,"line": 40,"col": 32,"fields": [9255,9256,9257,9258,9259,9260,9261,9262,9263]},{"file": 48,"line": 53,"col": 20,"fields": [9264,9265,9266,9267,9268,9269,9270,9271,9272,9273,9274,9275]},{"file": 48,"line": 481,"col": 16,"fields": [9276,9277,9278,9279,9280,9281,9282,9283,9284]},{"file": 48,"line": 857,"col": 12,"fields": [9285,9286]},{"file": 48,"line": 997,"col": 18,"fields": [9287,9288,9289,9290]},{"file": 50,"line": 173,"col": 13,"fields": [9291,9292,9293,9294]},{"file": 51,"line": 137,"col": 18,"fields": [9295,9296,9297]},{"file": 54,"line": 192,"col": 27,"fields": []},{"file": 68,"line": 24,"col": 16,"fields": [9298,9299,9300,9301,9302]},{"file": 59,"line": 3347,"col": 29,"fields": [9303,9304,9305,9306,9307]},{"file": 12,"line": 484,"col": 22,"fields": [9308,9309]},{"file": 3,"line": 139,"col": 30,"fields": [9310,9311]},{"file": 12,"line": 618,"col": 25,"fields": [9312,9313,9314,9315,9316,9317,9318,9319]},{"file": 12,"line": 420,"col": 31,"fields": [9320,9321,9322,9323,9324,9325,9326,9327]},{"file": 69,"line": 0,"col": 0,"fields": []},{"file": 59,"line": 1747,"col": 18,"fields": []},{"file": 59,"line": 2716,"col": 14,"fields": []},{"file": 59,"line": 3007,"col": 20,"fields": [9328,9329,9330,9331]},{"file": 59,"line": 3036,"col": 12,"fields": [9332,9333,9334,9335]},{"file": 59,"line": 3155,"col": 23,"fields": [9336,9337,9338,9339]},{"file": 59,"line": 3165,"col": 15,"fields": [9340,9341]},{"file": 59,"line": 3342,"col": 19,"fields": [9342,9343]},{"file": 70,"line": 0,"col": 0,"fields": []},{"file": 17,"line": 844,"col": 23,"fields": [9344,9345,9346,9347,9348]},{"file": 17,"line": 1559,"col": 24,"fields": [9349,9350,9351]},{"file": 33,"line": 693,"col": 29,"fields": [9352,9353,9354,9355]},{"file": 35,"line": 353,"col": 26,"fields": [9356,9357]},{"file": 37,"line": 789,"col": 10,"fields": [9358]},{"file": 67,"line": 6,"col": 25,"fields": [9359,9360,9361]},{"file": 59,"line": 3049,"col": 13,"fields": [9362,9363]},{"file": 68,"line": 48,"col": 15,"fields": [9364,9365,9366,9367]},{"file": 48,"line": 492,"col": 23,"fields": [9368,9369,9370,9371,9372,9373,9374]},{"file": 59,"line": 3349,"col": 12,"fields": [9375,9376]},{"file": 59,"line": 3369,"col": 14,"fields": [9377,9378,9379]},{"file": 59,"line": 3380,"col": 13,"fields": [9380,9381]},{"file": 59,"line": 3384,"col": 12,"fields": [9382,9383,9384]},{"file": 69,"line": 96,"col": 17,"fields": [9385,9386,9387,9388,9389,9390,9391,9392]},{"file": 69,"line": 44,"col": 19,"fields": [9393,9394]},{"file": 69,"line": 85,"col": 19,"fields": [9395]},{"file": 17,"line": 891,"col": 24,"fields": [9396]},{"file": 20,"line": 684,"col": 11,"fields": [9397,9398,9399]},{"file": 20,"line": 689,"col": 13,"fields": [9400]},{"file": 59,"line": 3350,"col": 15,"fields": [9401,9402]},{"file": 59,"line": 3360,"col": 16,"fields": [9403,9404]},{"file": 59,"line": 3372,"col": 15,"fields": [9405,9406]},{"file": 59,"line": 3351,"col": 20,"fields": [9407,9408]},{"file": 59,"line": 3355,"col": 19,"fields": [9409,9410]},{"file": 59,"line": 3362,"col": 21,"fields": [9411,9412,9413]},{"file": 59,"line": 3373,"col": 22,"fields": [9414,9415]},{"file": 3,"line": 734,"col": 24,"docs": " Returns true if the specified feature is enabled.","fields": [9416,9417]},{"file": 3,"line": 739,"col": 24,"docs": " Returns true if any specified feature is enabled.","fields": [9418,9419]},{"file": 3,"line": 748,"col": 24,"docs": " Returns true if every specified feature is enabled.","fields": [9420,9421]},{"file": 3,"line": 820,"col": 16,"fields": [9422]},{"file": 3,"line": 834,"col": 16,"fields": [9423]},{"file": 3,"line": 841,"col": 16,"fields": [9424]},{"file": 3,"line": 869,"col": 16,"fields": [9425]},{"file": 3,"line": 890,"col": 16,"fields": [9426]},{"file": 3,"line": 897,"col": 16,"fields": [9427]},{"file": 3,"line": 904,"col": 16,"fields": [9428,9429]},{"file": 3,"line": 913,"col": 16,"fields": [9430]},{"file": 3,"line": 974,"col": 16,"fields": [9431]},{"file": 3,"line": 1101,"col": 16,"fields": [9432]},{"file": 3,"line": 1169,"col": 16,"docs": " Returns a name that matches the lib/std/target/* source file name.","fields": [9433]},{"file": 3,"line": 1189,"col": 16,"docs": " All CPU features Zig is aware of, sorted lexicographically by name.","fields": [9434]},{"file": 3,"line": 1214,"col": 16,"docs": " All processors Zig is aware of, sorted lexicographically by name.","fields": [9435]},{"file": 3,"line": 1237,"col": 12,"fields": [9436]},{"file": 4,"line": 13,"col": 12},{"file": 4,"line": 49,"col": 12,"docs": " Write a native-endian integer. TODO audit non-power-of-two int sizes","fields": [9437,9438,9439]},{"file": 4,"line": 57,"col": 12,"docs": " Write a foreign-endian integer. TODO audit non-power-of-two int sizes","fields": [9440,9441,9442]},{"file": 4,"line": 64,"col": 12,"docs": " TODO audit non-power-of-two int sizes","fields": [9443,9444,9445]},{"file": 4,"line": 71,"col": 12,"docs": " TODO audit non-power-of-two int sizes","fields": [9446,9447,9448]},{"file": 4,"line": 78,"col": 12,"docs": " TODO audit non-power-of-two int sizes","fields": [9449,9450,9451,9452]},{"file": 4,"line": 84,"col": 12,"fields": [9453,9454]},{"file": 4,"line": 12,"col": 8},{"file": 5,"line": 30,"col": 8},{"file": 5,"line": 31,"col": 8},{"file": 5,"line": 32,"col": 8},{"file": 5,"line": 33,"col": 8},{"file": 5,"line": 34,"col": 8},{"file": 5,"line": 36,"col": 8},{"file": 5,"line": 50,"col": 8},{"file": 5,"line": 56,"col": 8},{"file": 5,"line": 71,"col": 8},{"file": 5,"line": 74,"col": 8,"docs": " TODO https://github.com/ziglang/zig/issues/3802"},{"file": 5,"line": 123,"col": 8,"docs": " TODO https://github.com/ziglang/zig/issues/3802"},{"file": 5,"line": 221,"col": 8},{"file": 5,"line": 225,"col": 8,"docs": " Shrinks or expands the file. The file offset after this call is left unchanged.","fields": [9455,9456]},{"file": 5,"line": 229,"col": 8},{"file": 5,"line": 233,"col": 8,"docs": " Repositions read/write file offset relative to the current offset. TODO: integrate with async I/O","fields": [9457,9458]},{"file": 5,"line": 239,"col": 8,"docs": " Repositions read/write file offset relative to the end. TODO: integrate with async I/O","fields": [9459,9460]},{"file": 5,"line": 245,"col": 8,"docs": " Repositions read/write file offset relative to the beginning. TODO: integrate with async I/O","fields": [9461,9462]},{"file": 5,"line": 249,"col": 8},{"file": 5,"line": 252,"col": 8,"docs": " TODO: integrate with async I/O","fields": [9463]},{"file": 5,"line": 264,"col": 8},{"file": 5,"line": 267,"col": 8,"docs": " TODO: integrate with async I/O","fields": [9464]},{"file": 5,"line": 274,"col": 8},{"file": 5,"line": 296,"col": 8},{"file": 5,"line": 366,"col": 8},{"file": 5,"line": 372,"col": 8,"docs": " Changes the mode of the file. The process must have the correct privileges in order to do this successfully, or must have the effective user ID matching the owner of the file.","fields": [9465,9466]},{"file": 5,"line": 376,"col": 8},{"file": 5,"line": 383,"col": 8,"docs": " Changes the owner and group of the file. The process must have the correct privileges in order to do this successfully. The group may be changed by the owner of the file to any group of which the owner is a member. If the owner or group is specified as `null`, the ID is not changed.","fields": [9467,9468,9469]},{"file": 5,"line": 387,"col": 8},{"file": 5,"line": 394,"col": 8,"docs": " The underlying file system may have a different granularity than nanoseconds, and therefore this function cannot guarantee any precision will be stored. Further, the maximum value is limited by the system ABI. When a value is provided that exceeds this range, the value is clamped to the maximum. TODO: integrate with async I/O","fields": [9470,9471,9472]},{"file": 5,"line": 422,"col": 8,"docs": " Reads all the bytes from the current position to the end of the file. On success, caller owns returned buffer. If the file is larger than `max_bytes`, returns `error.FileTooBig`.","fields": [9473,9474,9475]},{"file": 5,"line": 464,"col": 8},{"file": 5,"line": 465,"col": 8},{"file": 5,"line": 481,"col": 8,"docs": " Returns the number of bytes read. If the number read is smaller than `buffer.len`, it means the file reached the end. Reaching the end of a file is not an error condition.","fields": [9476,9477]},{"file": 5,"line": 491,"col": 8,"fields": [9478,9479,9480]},{"file": 5,"line": 505,"col": 8,"docs": " Returns the number of bytes read. If the number read is smaller than `buffer.len`, it means the file reached the end. Reaching the end of a file is not an error condition.","fields": [9481,9482,9483]},{"file": 5,"line": 516,"col": 8,"docs": " See https://github.com/ziglang/zig/issues/7699","fields": [9484,9485]},{"file": 5,"line": 537,"col": 8,"docs": " Returns the number of bytes read. If the number read is smaller than the total bytes from all the buffers, it means the file reached the end. Reaching the end of a file is not an error condition. The `iovecs` parameter is mutable because this function needs to mutate the fields in order to handle partial reads from the underlying OS layer. See https://github.com/ziglang/zig/issues/7699","fields": [9486,9487]},{"file": 5,"line": 559,"col": 8,"docs": " See https://github.com/ziglang/zig/issues/7699","fields": [9488,9489,9490]},{"file": 5,"line": 580,"col": 8,"docs": " Returns the number of bytes read. If the number read is smaller than the total bytes from all the buffers, it means the file reached the end. Reaching the end of a file is not an error condition. The `iovecs` parameter is mutable because this function needs to mutate the fields in order to handle partial reads from the underlying OS layer. See https://github.com/ziglang/zig/issues/7699","fields": [9491,9492,9493]},{"file": 5,"line": 601,"col": 8},{"file": 5,"line": 602,"col": 8},{"file": 5,"line": 616,"col": 8,"fields": [9494,9495]},{"file": 5,"line": 623,"col": 8,"fields": [9496,9497,9498]},{"file": 5,"line": 635,"col": 8,"fields": [9499,9500,9501]},{"file": 5,"line": 644,"col": 8,"docs": " See https://github.com/ziglang/zig/issues/7699 See equivalent function: `std.net.Stream.writev`.","fields": [9502,9503]},{"file": 5,"line": 663,"col": 8,"docs": " The `iovecs` parameter is mutable because this function needs to mutate the fields in order to handle partial writes from the underlying OS layer. See https://github.com/ziglang/zig/issues/7699 See equivalent function: `std.net.Stream.writevAll`.","fields": [9504,9505]},{"file": 5,"line": 680,"col": 8,"docs": " See https://github.com/ziglang/zig/issues/7699","fields": [9506,9507,9508]},{"file": 5,"line": 698,"col": 8,"docs": " The `iovecs` parameter is mutable because this function needs to mutate the fields in order to handle partial writes from the underlying OS layer. See https://github.com/ziglang/zig/issues/7699","fields": [9509,9510,9511]},{"file": 5,"line": 716,"col": 8},{"file": 5,"line": 718,"col": 8,"fields": [9512,9513,9514,9515,9516]},{"file": 5,"line": 726,"col": 8,"docs": " Returns the number of bytes copied. If the number read is smaller than `buffer.len`, it means the in file reached the end. Reaching the end of a file is not an error condition.","fields": [9517,9518,9519,9520,9521]},{"file": 5,"line": 740,"col": 8},{"file": 5,"line": 756,"col": 8},{"file": 5,"line": 758,"col": 8,"fields": [9522,9523,9524]},{"file": 5,"line": 774,"col": 8,"docs": " Does not try seeking in either of the File parameters. See `writeFileAll` as an alternative to calling this.","fields": [9525,9526,9527]},{"file": 5,"line": 860,"col": 8},{"file": 5,"line": 866,"col": 8},{"file": 5,"line": 872,"col": 8},{"file": 5,"line": 882,"col": 8,"fields": [9528]},{"file": 5,"line": 889,"col": 8},{"file": 5,"line": 901,"col": 8,"docs": " Blocks when an incompatible lock is held by another process. A process may hold only one type of lock (shared or exclusive) on a file. When a process terminates in any way, the lock is released. Assumes the file is unlocked. TODO: integrate with async I/O","fields": [9529,9530]},{"file": 5,"line": 937,"col": 8,"docs": " Assumes the file is locked.","fields": [9531]},{"file": 5,"line": 968,"col": 8,"docs": " Attempts to obtain a lock, returning `true` if the lock is obtained, and `false` if there was an existing incompatible lock held. A process may hold only one type of lock (shared or exclusive) on a file. When a process terminates in any way, the lock is released. Assumes the file is unlocked. TODO: integrate with async I/O","fields": [9532,9533]},{"file": 5,"line": 1008,"col": 8,"docs": " Assumes the file is already locked in exclusive mode. Atomically modifies the lock to be in shared mode, without releasing it. TODO: integrate with async I/O","fields": [9534]},{"file": 5,"line": 796,"col": 4,"docs": " Low level function which can fail for OS-specific reasons. See `writeFileAll` as an alternative to calling this. TODO integrate with async I/O","fields": [9535,9536,9537]},{"file": 5,"line": 886,"col": 4},{"file": 5,"line": 887,"col": 4},{"file": 6,"line": 57,"col": 12},{"file": 6,"line": 58,"col": 12},{"file": 6,"line": 371,"col": 12,"docs": " The type of the unmanaged hash map underlying this wrapper"},{"file": 6,"line": 373,"col": 12,"docs": " An entry, containing pointers to a key and value stored in the map"},{"file": 6,"line": 375,"col": 12,"docs": " A copy of a key and value which are no longer in the map"},{"file": 6,"line": 377,"col": 12,"docs": " The integer type that is the result of hashing"},{"file": 6,"line": 379,"col": 12,"docs": " The iterator type returned by iterator()"},{"file": 6,"line": 381,"col": 12},{"file": 6,"line": 382,"col": 12},{"file": 6,"line": 385,"col": 12,"docs": " The integer type used to store the size of the map"},{"file": 6,"line": 387,"col": 12,"docs": " The type returned from getOrPut and variants"},{"file": 6,"line": 406,"col": 12,"docs": " Create a managed hash map with a context","fields": [9538,9539]},{"file": 6,"line": 427,"col": 12,"docs": " Empty the map, but keep the backing allocation for future use. This does *not* free keys or values! Be sure to release them if they need deinitialization before calling this function.","fields": [9540]},{"file": 6,"line": 435,"col": 12,"docs": " Empty the map and release the backing allocation. This does *not* free keys or values! Be sure to release them if they need deinitialization before calling this function.","fields": [9541]},{"file": 6,"line": 440,"col": 12,"docs": " Return the number of items in the map.","fields": [9542]},{"file": 6,"line": 446,"col": 12,"docs": " Create an iterator over the entries in the map. The iterator is invalidated if the map is modified.","fields": [9543]},{"file": 6,"line": 452,"col": 12,"docs": " Create an iterator over the keys in the map. The iterator is invalidated if the map is modified.","fields": [9544]},{"file": 6,"line": 478,"col": 12,"docs": " If key exists this function cannot fail. If there is an existing item with `key`, then the result `Entry` pointers point to it, and found_existing is true. Otherwise, puts a new item with undefined key and value, and the `Entry` pointers point to it. Caller must then initialize the key and value.","fields": [9545,9546,9547]},{"file": 6,"line": 489,"col": 12,"docs": " If there is an existing item with `key`, then the result `Entry` pointers point to it, and found_existing is true. Otherwise, puts a new item with undefined value, and the `Entry` pointers point to it. Caller should then initialize the value (but not the key). If a new entry needs to be stored, this function asserts there is enough capacity to store it.","fields": [9548,9549]},{"file": 6,"line": 500,"col": 12,"docs": " If there is an existing item with `key`, then the result `Entry` pointers point to it, and found_existing is true. Otherwise, puts a new item with undefined value, and the `Entry` pointers point to it. Caller must then initialize the key and value. If a new entry needs to be stored, this function asserts there is enough capacity to store it.","fields": [9550,9551,9552]},{"file": 6,"line": 504,"col": 12,"fields": [9553,9554,9555]},{"file": 6,"line": 509,"col": 12,"docs": " Deprecated: call `ensureUnusedCapacity` or `ensureTotalCapacity`."},{"file": 6,"line": 513,"col": 12,"docs": " Increases capacity, guaranteeing that insertions up until the `expected_count` will not cause an allocation, and therefore cannot fail.","fields": [9556,9557]},{"file": 6,"line": 520,"col": 12,"docs": " Increases capacity, guaranteeing that insertions up until `additional_count` **more** items will not cause an allocation, and therefore cannot fail.","fields": [9558,9559]},{"file": 6,"line": 526,"col": 12,"docs": " Returns the number of total elements which may be present before it is no longer guaranteed that no allocations will be performed.","fields": [9560]},{"file": 6,"line": 545,"col": 12,"docs": " Asserts there is enough capacity to store the new key-value pair. Clobbers any existing data. To detect if a put would clobber existing data, see `getOrPutAssumeCapacity`.","fields": [9561,9562,9563]},{"file": 6,"line": 552,"col": 12,"docs": " Asserts there is enough capacity to store the new key-value pair. Asserts that it does not clobber any existing data. To detect if a put would clobber existing data, see `getOrPutAssumeCapacity`.","fields": [9564,9565,9566]},{"file": 6,"line": 557,"col": 12,"docs": " Inserts a new `Entry` into the hash map, returning the previous one, if any.","fields": [9567,9568,9569]},{"file": 6,"line": 563,"col": 12,"docs": " Inserts a new `Entry` into the hash map, returning the previous one, if any. If insertion happuns, asserts there is enough capacity without allocating.","fields": [9570,9571,9572]},{"file": 6,"line": 568,"col": 12,"docs": " Removes a value from the map and returns the removed kv pair.","fields": [9573,9574]},{"file": 6,"line": 572,"col": 12,"fields": [9575,9576,9577]},{"file": 6,"line": 580,"col": 12,"fields": [9578,9579,9580]},{"file": 6,"line": 584,"col": 12,"fields": [9581,9582]},{"file": 6,"line": 587,"col": 12,"fields": [9583,9584,9585]},{"file": 6,"line": 592,"col": 12,"docs": " Finds the actual key associated with an adapted key in the map","fields": [9586,9587]},{"file": 6,"line": 595,"col": 12,"fields": [9588,9589,9590]},{"file": 6,"line": 599,"col": 12,"fields": [9591,9592]},{"file": 6,"line": 602,"col": 12,"fields": [9593,9594,9595]},{"file": 6,"line": 607,"col": 12,"docs": " Finds the key and value associated with a key in the map","fields": [9596,9597]},{"file": 6,"line": 611,"col": 12,"fields": [9598,9599,9600]},{"file": 6,"line": 616,"col": 12,"docs": " Check if the map contains a key","fields": [9601,9602]},{"file": 6,"line": 620,"col": 12,"fields": [9603,9604,9605]},{"file": 6,"line": 626,"col": 12,"docs": " If there is an `Entry` with a matching key, it is deleted from the hash map, and then returned from this function.","fields": [9606,9607]},{"file": 6,"line": 630,"col": 12,"fields": [9608,9609,9610]},{"file": 6,"line": 635,"col": 12,"docs": " Creates a copy of this map, using the same allocator","fields": [9611]},{"file": 6,"line": 641,"col": 12,"docs": " Creates a copy of this map, using a specified allocator","fields": [9612,9613]},{"file": 6,"line": 647,"col": 12,"docs": " Creates a copy of this map, using a specified context","fields": [9614,9615]},{"file": 6,"line": 653,"col": 12,"docs": " Creates a copy of this map, using a specified allocator and context.","fields": [9616,9617,9618]},{"file": 6,"line": 389,"col": 8},{"file": 6,"line": 710,"col": 12},{"file": 6,"line": 714,"col": 12},{"file": 6,"line": 716,"col": 12},{"file": 6,"line": 721,"col": 12},{"file": 6,"line": 785,"col": 12},{"file": 6,"line": 813,"col": 12},{"file": 6,"line": 814,"col": 12},{"file": 6,"line": 838,"col": 12},{"file": 6,"line": 844,"col": 12},{"file": 6,"line": 846,"col": 12,"fields": [9619,9620]},{"file": 6,"line": 852,"col": 12,"fields": [9621,9622,9623]},{"file": 6,"line": 876,"col": 12,"docs": " Deprecated: call `ensureUnusedCapacity` or `ensureTotalCapacity`."},{"file": 6,"line": 878,"col": 12,"fields": [9624,9625,9626]},{"file": 6,"line": 883,"col": 12,"fields": [9627,9628,9629,9630]},{"file": 6,"line": 888,"col": 12,"fields": [9631,9632,9633]},{"file": 6,"line": 891,"col": 12,"fields": [9634,9635,9636,9637]},{"file": 6,"line": 895,"col": 12,"fields": [9638]},{"file": 6,"line": 903,"col": 12,"fields": [9639,9640]},{"file": 6,"line": 909,"col": 12,"fields": [9641]},{"file": 6,"line": 931,"col": 12,"fields": [9642]},{"file": 6,"line": 935,"col": 12,"fields": [9643]},{"file": 6,"line": 968,"col": 12,"docs": " Insert an entry in the map. Assumes it is not already present.","fields": [9644,9645,9646,9647]},{"file": 6,"line": 983,"col": 12,"docs": " Asserts there is enough capacity to store the new key-value pair. Clobbers any existing data. To detect if a put would clobber existing data, see `getOrPutAssumeCapacity`.","fields": [9648,9649,9650]},{"file": 6,"line": 988,"col": 12,"fields": [9651,9652,9653,9654]},{"file": 6,"line": 995,"col": 12,"docs": " Insert an entry in the map. Assumes it is not already present, and that no allocation is needed.","fields": [9655,9656,9657]},{"file": 6,"line": 1027,"col": 12,"docs": " Inserts a new `Entry` into the hash map, returning the previous one, if any.","fields": [9658,9659,9660,9661]},{"file": 6,"line": 1032,"col": 12,"fields": [9662,9663,9664,9665,9666]},{"file": 6,"line": 1047,"col": 12,"docs": " Inserts a new `Entry` into the hash map, returning the previous one, if any. If insertion happens, asserts there is enough capacity without allocating.","fields": [9667,9668,9669]},{"file": 6,"line": 1052,"col": 12,"fields": [9670,9671,9672,9673]},{"file": 6,"line": 1067,"col": 12,"docs": " If there is an `Entry` with a matching key, it is deleted from the hash map, and then returned from this function.","fields": [9674,9675]},{"file": 6,"line": 1072,"col": 12,"fields": [9676,9677,9678]},{"file": 6,"line": 1075,"col": 12,"fields": [9679,9680,9681]},{"file": 6,"line": 1144,"col": 12,"fields": [9682,9683]},{"file": 6,"line": 1149,"col": 12,"fields": [9684,9685,9686]},{"file": 6,"line": 1152,"col": 12,"fields": [9687,9688,9689]},{"file": 6,"line": 1163,"col": 12,"docs": " Insert an entry if the associated key is not already present, otherwise update preexisting value.","fields": [9690,9691,9692,9693]},{"file": 6,"line": 1174,"col": 12,"docs": " Get an optional pointer to the actual key associated with adapted key, if present.","fields": [9694,9695]},{"file": 6,"line": 1179,"col": 12,"fields": [9696,9697,9698]},{"file": 6,"line": 1182,"col": 12,"fields": [9699,9700,9701]},{"file": 6,"line": 1190,"col": 12,"docs": " Get a copy of the actual key associated with adapted key, if present.","fields": [9702,9703]},{"file": 6,"line": 1195,"col": 12,"fields": [9704,9705,9706]},{"file": 6,"line": 1198,"col": 12,"fields": [9707,9708,9709]},{"file": 6,"line": 1206,"col": 12,"docs": " Get an optional pointer to the value associated with key, if present.","fields": [9710,9711]},{"file": 6,"line": 1211,"col": 12,"fields": [9712,9713,9714]},{"file": 6,"line": 1214,"col": 12,"fields": [9715,9716,9717]},{"file": 6,"line": 1222,"col": 12,"docs": " Get a copy of the value associated with key, if present.","fields": [9718,9719]},{"file": 6,"line": 1237,"col": 12,"fields": [9720,9721,9722]},{"file": 6,"line": 1249,"col": 12,"fields": [9723,9724,9725,9726]},{"file": 6,"line": 1269,"col": 12,"fields": [9727,9728]},{"file": 6,"line": 1274,"col": 12,"fields": [9729,9730,9731]},{"file": 6,"line": 1347,"col": 12,"fields": [9732,9733,9734,9735]},{"file": 6,"line": 1352,"col": 12,"fields": [9736,9737,9738,9739,9740]},{"file": 6,"line": 1362,"col": 12,"docs": " Return true if there is a value associated with key in the map.","fields": [9741,9742]},{"file": 6,"line": 1377,"col": 12,"docs": " If there is an `Entry` with a matching key, it is deleted from the hash map, and this function returns true.  Otherwise this function returns false.","fields": [9743,9744]},{"file": 6,"line": 1382,"col": 12,"fields": [9745,9746,9747]},{"file": 6,"line": 1385,"col": 12,"fields": [9748,9749,9750]},{"file": 6,"line": 1415,"col": 12,"fields": [9751,9752]},{"file": 6,"line": 1420,"col": 12,"fields": [9753,9754,9755]},{"file": 6,"line": 684,"col": 8},{"file": 6,"line": 707,"col": 8,"docs": " Capacity of the first grow when bootstrapping the hashmap."},{"file": 6,"line": 726,"col": 8},{"file": 6,"line": 746,"col": 8,"docs": " Metadata for a slot. It can be in three states: empty, used or tombstone. Tombstones indicate that an entry was previously used, they are a simple way to handle removal. To this state, we add 7 bits from the slot's key hash. These are used as a fast way to disambiguate between entries without having to use the equality function. If two fingerprints are different, we know that we don't have to compare the keys at all. The 7 bits are the highest ones from a 64 bit hash. This way, not only we use the `log2(capacity)` lowest bits from the hash to determine a slot index, but we use 7 more bits to quickly resolve collisions when multiple elements with different hashes end up wanting to be in the same slot. Not using the equality function means we don't have to read into the entries array, likely avoiding a cache miss and a potentially costly function call."},{"file": 6,"line": 860,"col": 8,"fields": [9756,9757]},{"file": 7,"line": 46,"col": 12},{"file": 7,"line": 73,"col": 12},{"file": 7,"line": 74,"col": 12},{"file": 7,"line": 75,"col": 12},{"file": 7,"line": 76,"col": 12},{"file": 7,"line": 77,"col": 12},{"file": 7,"line": 78,"col": 12},{"file": 7,"line": 79,"col": 12},{"file": 7,"line": 80,"col": 12},{"file": 7,"line": 85,"col": 12,"docs": " ArrayList takes ownership of the passed in slice. The slice must have been allocated with `allocator`. Deinitialize with `deinit` or use `toOwnedSlice`.","fields": [9758,9759]},{"file": 7,"line": 96,"col": 12,"docs": " Initializes an ArrayListUnmanaged with the `items` and `capacity` fields of this ArrayList. This ArrayList retains ownership of underlying memory. Deprecated: use `moveToUnmanaged` which has different semantics.","fields": [9760]},{"file": 7,"line": 102,"col": 12,"docs": " Initializes an ArrayListUnmanaged with the `items` and `capacity` fields of this ArrayList. Empties this ArrayList.","fields": [9761]},{"file": 7,"line": 118,"col": 12,"docs": " The caller owns the returned memory. Empties this ArrayList.","fields": [9762,9763]},{"file": 7,"line": 126,"col": 12,"docs": " Insert `item` at index `n` by moving `list[n .. list.len]` to make room. This operation is O(N).","fields": [9764,9765,9766]},{"file": 7,"line": 136,"col": 12,"docs": " Insert slice `items` at index `i` by moving `list[i .. list.len]` to make room. This operation is O(N).","fields": [9767,9768,9769]},{"file": 7,"line": 148,"col": 12,"docs": " Replace range of elements `list[start..start+len]` with `new_items`. Grows list if `len < new_items.len`. Shrinks list if `len > new_items.len`. Invalidates pointers if this ArrayList is resized.","fields": [9770,9771,9772,9773]},{"file": 7,"line": 181,"col": 12,"docs": " Extend the list by 1 element, but assert `self.capacity` is sufficient to hold an additional item. **Does not** invalidate pointers.","fields": [9774,9775]},{"file": 7,"line": 191,"col": 12,"docs": " Remove the element at index `i`, shift elements after index `i` forward, and return the removed element. Asserts the array has at least one item. Invalidates pointers to end of list. This operation is O(N).","fields": [9776,9777]},{"file": 7,"line": 205,"col": 12,"docs": " Removes the element at the specified index and returns it. The empty slot is filled from the end of the list. This operation is O(1).","fields": [9778,9779]},{"file": 7,"line": 215,"col": 12,"docs": " Append the slice of items to the list. Allocates more memory as necessary.","fields": [9780,9781]},{"file": 7,"line": 222,"col": 12,"docs": " Append the slice of items to the list, asserting the capacity is already enough to store the new items. **Does not** invalidate pointers.","fields": [9782,9783]},{"file": 7,"line": 230,"col": 12},{"file": 7,"line": 237,"col": 12,"docs": " Initializes a Writer which will append to the list.","fields": [9784]},{"file": 7,"line": 250,"col": 12,"docs": " Append a value to the list `n` times. Allocates more memory as necessary.","fields": [9785,9786,9787]},{"file": 7,"line": 258,"col": 12,"docs": " Append a value to the list `n` times. Asserts the capacity is enough. **Does not** invalidate pointers.","fields": [9788,9789,9790]},{"file": 7,"line": 298,"col": 12,"docs": " Invalidates all element pointers.","fields": [9791]},{"file": 7,"line": 303,"col": 12,"docs": " Invalidates all element pointers.","fields": [9792]},{"file": 7,"line": 310,"col": 12,"docs": " Deprecated: call `ensureUnusedCapacity` or `ensureTotalCapacity`."},{"file": 7,"line": 349,"col": 12,"docs": " Modify the array so that it can hold at least `additional_count` **more** items. Invalidates pointers if additional memory is needed.","fields": [9793,9794]},{"file": 7,"line": 382,"col": 12,"docs": " Resize the array, adding `n` new elements, which have `undefined` values. The return value is an array pointing to the newly allocated elements. The returned pointer becomes invalid when the list is resized. Resizes list if `self.capacity` is not large enough.","fields": [9795,9796]},{"file": 7,"line": 393,"col": 12,"docs": " Resize the array, adding `n` new elements, which have `undefined` values. The return value is an array pointing to the newly allocated elements. Asserts that there is already space for the new item without allocating more. **Does not** invalidate element pointers. The returned pointer becomes invalid when the list is resized.","fields": [9797,9798]},{"file": 7,"line": 403,"col": 12,"docs": " Remove and return the last element from the list. Asserts the list has at least one item. Invalidates pointers to the removed element.","fields": [9799]},{"file": 7,"line": 412,"col": 12,"docs": " Remove and return the last element from the list, or return `null` if list is empty. Invalidates pointers to the removed element, if any.","fields": [9800]},{"file": 7,"line": 429,"col": 12,"docs": " Returns a slice of only the extra capacity after items. This can be useful for writing directly into an ArrayList. Note that such an operation must be followed up with a direct modification of `self.items.len`.","fields": [9801]},{"file": 7,"line": 30,"col": 8},{"file": 7,"line": 243,"col": 8,"docs": " Same as `append` except it returns the number of bytes written, which is always the same as `m.len`. The purpose of this function existing is to match `std.io.Writer` API.","fields": [9802,9803]},{"file": 3,"line": 66,"col": 16,"fields": [9804]},{"file": 3,"line": 73,"col": 16,"fields": [9805]},{"file": 3,"line": 83,"col": 16,"fields": [9806,9807]},{"file": 3,"line": 12,"col": 8},{"file": 3,"line": 441,"col": 8},{"file": 3,"line": 442,"col": 8},{"file": 3,"line": 443,"col": 8},{"file": 3,"line": 444,"col": 8},{"file": 3,"line": 445,"col": 8},{"file": 3,"line": 446,"col": 8},{"file": 3,"line": 447,"col": 8},{"file": 3,"line": 448,"col": 8},{"file": 3,"line": 449,"col": 8},{"file": 3,"line": 450,"col": 8},{"file": 3,"line": 451,"col": 8},{"file": 3,"line": 452,"col": 8},{"file": 3,"line": 453,"col": 8},{"file": 3,"line": 454,"col": 8},{"file": 3,"line": 455,"col": 8},{"file": 3,"line": 456,"col": 8},{"file": 3,"line": 457,"col": 8},{"file": 3,"line": 458,"col": 8},{"file": 3,"line": 460,"col": 8},{"file": 3,"line": 562,"col": 8},{"file": 3,"line": 595,"col": 8},{"file": 3,"line": 606,"col": 8},{"file": 3,"line": 1321,"col": 8,"docs": " TODO delete this deprecated declaration after 0.9.0 is released"},{"file": 3,"line": 1323,"col": 8},{"file": 3,"line": 1325,"col": 8,"fields": [9808,9809]},{"file": 3,"line": 1329,"col": 8,"fields": [9810,9811,9812,9813]},{"file": 3,"line": 1333,"col": 8,"fields": [9814,9815]},{"file": 3,"line": 1337,"col": 8,"fields": [9816,9817]},{"file": 3,"line": 1349,"col": 8,"fields": [9818]},{"file": 3,"line": 1353,"col": 8,"fields": [9819,9820]},{"file": 3,"line": 1363,"col": 8,"fields": [9821]},{"file": 3,"line": 1367,"col": 8,"fields": [9822]},{"file": 3,"line": 1371,"col": 8,"fields": [9823,9824]},{"file": 3,"line": 1381,"col": 8,"fields": [9825]},{"file": 3,"line": 1385,"col": 8,"fields": [9826,9827]},{"file": 3,"line": 1398,"col": 8,"fields": [9828]},{"file": 3,"line": 1402,"col": 8,"fields": [9829]},{"file": 3,"line": 1406,"col": 8,"fields": [9830]},{"file": 3,"line": 1410,"col": 8,"fields": [9831]},{"file": 3,"line": 1414,"col": 8,"fields": [9832]},{"file": 3,"line": 1426,"col": 8,"fields": [9833]},{"file": 3,"line": 1430,"col": 8,"fields": [9834]},{"file": 3,"line": 1434,"col": 8,"fields": [9835,9836]},{"file": 3,"line": 1438,"col": 8,"fields": [9837]},{"file": 3,"line": 1442,"col": 8,"fields": [9838]},{"file": 3,"line": 1446,"col": 8},{"file": 3,"line": 1452,"col": 8,"fields": [9839]},{"file": 3,"line": 1456,"col": 8,"fields": [9840]},{"file": 3,"line": 1479,"col": 8},{"file": 3,"line": 1512,"col": 8,"fields": [9841]},{"file": 3,"line": 1693,"col": 8,"docs": " Return whether or not the given host target is capable of executing natively executables of the other target.","fields": [9842,9843]},{"file": 3,"line": 1722,"col": 8,"docs": " 0c spim    little-endian MIPS 3000 family 1c 68000   Motorola MC68000 2c 68020   Motorola MC68020 5c arm     little-endian ARM 6c amd64   AMD64 and compatibles (e.g., Intel EM64T) 7c arm64   ARM64 (ARMv8) 8c 386     Intel i386, i486, Pentium, etc. kc sparc   Sun SPARC qc power   Power PC vc mips    big-endian MIPS 3000 family","fields": [9844]},{"file": 3,"line": 1736,"col": 8,"fields": [9845]},{"file": 9,"line": 14,"col": 12},{"file": 9,"line": 15,"col": 12},{"file": 9,"line": 16,"col": 12},{"file": 9,"line": 17,"col": 12},{"file": 9,"line": 19,"col": 12},{"file": 9,"line": 20,"col": 12},{"file": 9,"line": 22,"col": 12},{"file": 9,"line": 109,"col": 12,"fields": [9846]},{"file": 9,"line": 32,"col": 8},{"file": 10,"line": 15,"col": 12},{"file": 10,"line": 47,"col": 12},{"file": 10,"line": 52,"col": 12,"docs": " Appends to the `std.ArrayList` contents by reading from the stream until end of stream is found. If the number of bytes appended would exceed `max_append_size`, `error.StreamTooLong` is returned and the `std.ArrayList` has exactly `max_append_size` bytes appended.","fields": [9847,9848,9849]},{"file": 10,"line": 90,"col": 12,"docs": " Allocates enough memory to hold all the contents of the stream. If the allocated memory would be greater than `max_size`, returns `error.StreamTooLong`. Caller owns returned memory. If this function returns an error, the contents from the stream read so far are lost.","fields": [9850,9851,9852]},{"file": 10,"line": 143,"col": 12,"docs": " Reads from the stream until specified byte is found. If the buffer is not large enough to hold the entire contents, `error.StreamTooLong` is returned. Returns a slice of the stream data, with ptr equal to `buf.ptr`. The delimiter byte is not included in the returned slice.","fields": [9853,9854,9855]},{"file": 10,"line": 163,"col": 12,"docs": " Allocates enough memory to read until `delimiter` or end-of-stream. If the allocated memory would be greater than `max_size`, returns `error.StreamTooLong`. If end-of-stream is found, returns the rest of the stream. If this function is called again after that, returns null. Caller owns returned memory. If this function returns an error, the contents from the stream read so far are lost.","fields": [9856,9857,9858,9859]},{"file": 10,"line": 188,"col": 12,"docs": " Reads from the stream until specified byte is found. If the buffer is not large enough to hold the entire contents, `error.StreamTooLong` is returned. If end-of-stream is found, returns the rest of the stream. If this function is called again after that, returns null. Returns a slice of the stream data, with ptr equal to `buf.ptr`. The delimiter byte is not included in the returned slice.","fields": [9860,9861,9862]},{"file": 10,"line": 213,"col": 12,"docs": " Reads from the stream until specified byte is found, discarding all data, including the delimiter. If end-of-stream is found, this function succeeds.","fields": [9863,9864]},{"file": 10,"line": 245,"col": 12,"docs": " Reads a native-endian integer","fields": [9865,9866]},{"file": 10,"line": 251,"col": 12,"docs": " Reads a foreign-endian integer","fields": [9867,9868]},{"file": 10,"line": 256,"col": 12,"fields": [9869,9870]},{"file": 10,"line": 261,"col": 12,"fields": [9871,9872]},{"file": 10,"line": 280,"col": 12,"docs": " Optional parameters for `skipBytes`"},{"file": 10,"line": 286,"col": 12,"docs": " Reads `num_bytes` bytes from the stream and discards them","fields": [9873,9874,9875]},{"file": 10,"line": 298,"col": 12,"docs": " Reads `slice.len` bytes from the stream and returns if they are the same as the passed slice","fields": [9876,9877]},{"file": 10,"line": 309,"col": 12,"fields": [9878,9879]},{"file": 10,"line": 320,"col": 12,"docs": " Reads an integer with the same size as the given enum's tag type. If the integer matches an enum tag, casts the integer to the enum tag and returns it. Otherwise, returns an error. TODO optimization taking advantage of most fields being in order","fields": [9880,9881,9882]},{"file": 10,"line": 19,"col": 8},{"file": 11,"line": 15,"col": 12},{"file": 11,"line": 16,"col": 12},{"file": 11,"line": 14,"col": 8},{"file": 12,"line": 225,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 232,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 238,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 265,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 278,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 286,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 296,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 305,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 311,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 318,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 324,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 328,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 335,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 345,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 353,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 362,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 370,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 381,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 387,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 393,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 399,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 406,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 13,"line": 19,"col": 12,"docs": " Node inside the linked list wrapping the actual data."},{"file": 13,"line": 82,"col": 12,"docs": " Remove a node from the list. Arguments:     node: Pointer to the node to be removed.","fields": [9883,9884]},{"file": 13,"line": 98,"col": 12,"docs": " Remove and return the first node in the list. Returns:     A pointer to the first node in the list.","fields": [9885]},{"file": 13,"line": 106,"col": 12,"docs": " Iterate over all nodes, returning the count. This operation is O(N).","fields": [9886]},{"file": 13,"line": 16,"col": 8},{"file": 14,"line": 15,"col": 12},{"file": 14,"line": 16,"col": 12},{"file": 14,"line": 20,"col": 12,"docs": " Initializes a new queue. The queue does not provide a `deinit()` function, so the user must take care of cleaning up the queue elements.","fields": []},{"file": 14,"line": 30,"col": 12,"docs": " Appends `node` to the queue. The lifetime of `node` must be longer than lifetime of queue.","fields": [9887,9888]},{"file": 14,"line": 49,"col": 12,"docs": " Gets a previously inserted node or returns `null` if there is none. It is safe to `get()` a node from the queue while another thread tries to `remove()` the same node at the same time.","fields": [9889]},{"file": 14,"line": 66,"col": 12,"fields": [9890,9891]},{"file": 14,"line": 85,"col": 12,"docs": " Removes a node from the queue, returns whether node was actually removed. It is safe to `remove()` a node from the queue while another thread tries to `get()` the same node at the same time.","fields": [9892,9893]},{"file": 14,"line": 111,"col": 12,"docs": " Returns `true` if the queue is currently empty. Note that in a multi-consumer environment a return value of `false` does not mean that `get` will yield a non-`null` value!","fields": [9894]},{"file": 14,"line": 118,"col": 12,"docs": " Dumps the contents of the queue to `stderr`.","fields": [9895]},{"file": 14,"line": 125,"col": 12,"docs": " Dumps the contents of the queue to `stream`. Up to 4 elements from the head are dumped and the tail of the queue is dumped as well.","fields": [9896,9897]},{"file": 13,"line": 166,"col": 12,"docs": " Node inside the linked list wrapping the actual data."},{"file": 13,"line": 181,"col": 12,"docs": " Insert a new node after an existing one. Arguments:     node: Pointer to a node in the list.     new_node: Pointer to the new node to insert.","fields": [9898,9899,9900]},{"file": 13,"line": 202,"col": 12,"docs": " Insert a new node before an existing one. Arguments:     node: Pointer to a node in the list.     new_node: Pointer to the new node to insert.","fields": [9901,9902,9903]},{"file": 13,"line": 223,"col": 12,"docs": " Concatenate list2 onto the end of list1, removing all entries from the former. Arguments:     list1: the list to concatenate onto     list2: the list to be concatenated","fields": [9904,9905]},{"file": 13,"line": 244,"col": 12,"docs": " Insert a new node at the end of the list. Arguments:     new_node: Pointer to the new node to insert.","fields": [9906,9907]},{"file": 13,"line": 258,"col": 12,"docs": " Insert a new node at the beginning of the list. Arguments:     new_node: Pointer to the new node to insert.","fields": [9908,9909]},{"file": 13,"line": 277,"col": 12,"docs": " Remove a node from the list. Arguments:     node: Pointer to the node to be removed.","fields": [9910,9911]},{"file": 13,"line": 302,"col": 12,"docs": " Remove and return the last node in the list. Returns:     A pointer to the last node in the list.","fields": [9912]},{"file": 13,"line": 312,"col": 12,"docs": " Remove and return the first node in the list. Returns:     A pointer to the first node in the list.","fields": [9913]},{"file": 13,"line": 163,"col": 8},{"file": 16,"line": 12,"col": 12,"fields": [9914]},{"file": 16,"line": 18,"col": 12,"docs": " Non-atomically load from the atomic value without synchronization. Care must be taken to avoid data-races when interacting with other atomic operations.","fields": [9915]},{"file": 16,"line": 24,"col": 12,"docs": " Non-atomically store to the atomic value without synchronization. Care must be taken to avoid data-races when interacting with other atomic operations.","fields": [9916,9917]},{"file": 16,"line": 28,"col": 12,"fields": [9918,9919]},{"file": 16,"line": 36,"col": 12,"fields": [9920,9921,9922]},{"file": 16,"line": 44,"col": 12,"fields": [9923,9924,9925]},{"file": 16,"line": 48,"col": 12,"fields": [9926,9927,9928,9929,9930]},{"file": 16,"line": 58,"col": 12,"fields": [9931,9932,9933,9934,9935]},{"file": 16,"line": 10,"col": 8},{"file": 16,"line": 68,"col": 8,"fields": [9936,9937,9938,9939,9940,9941]},{"file": 16,"line": 99,"col": 8,"fields": [9942,9943,9944,9945]},{"file": 16,"line": 131,"col": 16,"fields": [9946,9947,9948]},{"file": 16,"line": 135,"col": 16,"fields": [9949,9950,9951]},{"file": 16,"line": 139,"col": 16,"fields": [9952,9953,9954]},{"file": 16,"line": 143,"col": 16,"fields": [9955,9956,9957]},{"file": 16,"line": 154,"col": 16,"fields": [9958,9959,9960]},{"file": 16,"line": 158,"col": 16,"fields": [9961,9962,9963]},{"file": 16,"line": 162,"col": 16,"fields": [9964,9965,9966]},{"file": 16,"line": 113,"col": 16,"fields": [9967,9968,9969]},{"file": 16,"line": 117,"col": 16,"fields": [9970,9971,9972]},{"file": 16,"line": 121,"col": 16,"fields": [9973,9974,9975]},{"file": 16,"line": 125,"col": 16,"fields": [9976,9977,9978]},{"file": 17,"line": 1569,"col": 12},{"file": 17,"line": 1571,"col": 12},{"file": 17,"line": 1576,"col": 12},{"file": 18,"line": 15,"col": 12},{"file": 18,"line": 17,"col": 12},{"file": 18,"line": 22,"col": 12,"fields": []},{"file": 18,"line": 31,"col": 12,"docs": " push operation, but only if you are the first item in the stack. if you did not succeed in being the first item in the stack, returns the other item that was there.","fields": [9979,9980]},{"file": 18,"line": 36,"col": 12,"fields": [9981,9982]},{"file": 18,"line": 49,"col": 12,"fields": [9983]},{"file": 18,"line": 64,"col": 12,"fields": [9984]},{"file": 18,"line": 13,"col": 8},{"file": 19,"line": 177,"col": 12,"docs": " Deprecated. TODO: replace with @compileError() after 0.9.0 is released"},{"file": 19,"line": 180,"col": 12,"docs": " Deprecated. TODO: replace with @compileError() after 0.9.0 is released"},{"file": 19,"line": 183,"col": 12,"docs": " Deprecated. TODO: replace with @compileError() after 0.9.0 is released"},{"file": 19,"line": 199,"col": 12,"docs": " Log a warning message. This log level is intended to be used if it is uncertain whether something has gone wrong or not, but the circumstances would be worth investigating.","fields": [9985,9986]},{"file": 19,"line": 207,"col": 12,"docs": " Deprecated. TODO: replace with @compileError() after 0.9.0 is released"},{"file": 19,"line": 220,"col": 12,"docs": " Log a debug message. This log level is intended to be used for messages which are only useful for debugging.","fields": [9987,9988]},{"file": 21,"line": 1871,"col": 12,"docs": " Returns a slice of the remaining bytes. Does not affect iterator state.","fields": [9989]},{"file": 21,"line": 1855,"col": 8},{"file": 22,"line": 11,"col": 8},{"file": 22,"line": 12,"col": 8},{"file": 21,"line": 1826,"col": 12,"docs": " Returns a slice of the remaining bytes. Does not affect iterator state.","fields": [9990]},{"file": 21,"line": 1834,"col": 12,"docs": " Resets the iterator to the initial token.","fields": [9991]},{"file": 21,"line": 1807,"col": 8},{"file": 23,"line": 8,"col": 4},{"file": 24,"line": 10,"col": 12},{"file": 24,"line": 11,"col": 12},{"file": 24,"line": 13,"col": 8},{"file": 16,"line": 147,"col": 12},{"file": 16,"line": 148,"col": 12},{"file": 16,"line": 166,"col": 12,"fields": [9992,9993,9994,9995]},{"file": 0,"line": 0,"col": 0},{"file": 0,"line": 1,"col": 0},{"file": 0,"line": 2,"col": 0},{"file": 0,"line": 3,"col": 0},{"file": 0,"line": 4,"col": 0},{"file": 0,"line": 5,"col": 0},{"file": 0,"line": 6,"col": 0},{"file": 0,"line": 7,"col": 0},{"file": 0,"line": 8,"col": 0},{"file": 0,"line": 10,"col": 0},{"file": 0,"line": 11,"col": 0},{"file": 1,"line": 0,"col": 4},{"file": 1,"line": 1,"col": 4},{"file": 1,"line": 2,"col": 4},{"file": 1,"line": 3,"col": 4},{"file": 1,"line": 4,"col": 4},{"file": 1,"line": 5,"col": 4},{"file": 1,"line": 6,"col": 4},{"file": 1,"line": 7,"col": 4},{"file": 1,"line": 8,"col": 4},{"file": 1,"line": 9,"col": 4},{"file": 1,"line": 10,"col": 4},{"file": 1,"line": 11,"col": 4},{"file": 1,"line": 12,"col": 4},{"file": 1,"line": 13,"col": 4},{"file": 1,"line": 14,"col": 4},{"file": 1,"line": 15,"col": 4},{"file": 1,"line": 16,"col": 4},{"file": 1,"line": 17,"col": 4},{"file": 1,"line": 18,"col": 4},{"file": 1,"line": 19,"col": 4},{"file": 1,"line": 20,"col": 4},{"file": 1,"line": 21,"col": 4},{"file": 1,"line": 22,"col": 4},{"file": 1,"line": 23,"col": 4},{"file": 1,"line": 24,"col": 4},{"file": 1,"line": 25,"col": 4},{"file": 1,"line": 26,"col": 4},{"file": 1,"line": 27,"col": 4},{"file": 1,"line": 28,"col": 4},{"file": 1,"line": 29,"col": 4},{"file": 1,"line": 30,"col": 4},{"file": 1,"line": 31,"col": 4},{"file": 1,"line": 32,"col": 4},{"file": 1,"line": 33,"col": 4},{"file": 1,"line": 34,"col": 4},{"file": 1,"line": 35,"col": 4},{"file": 1,"line": 36,"col": 4},{"file": 1,"line": 37,"col": 4},{"file": 1,"line": 38,"col": 4},{"file": 1,"line": 39,"col": 4},{"file": 1,"line": 40,"col": 4},{"file": 1,"line": 42,"col": 4},{"file": 1,"line": 43,"col": 4},{"file": 1,"line": 44,"col": 4},{"file": 1,"line": 45,"col": 4},{"file": 1,"line": 46,"col": 4},{"file": 1,"line": 47,"col": 4},{"file": 1,"line": 48,"col": 4},{"file": 1,"line": 49,"col": 4},{"file": 1,"line": 50,"col": 4},{"file": 1,"line": 51,"col": 4},{"file": 1,"line": 52,"col": 4},{"file": 1,"line": 53,"col": 4},{"file": 1,"line": 54,"col": 4},{"file": 1,"line": 55,"col": 4},{"file": 1,"line": 56,"col": 4},{"file": 1,"line": 57,"col": 4},{"file": 1,"line": 58,"col": 4},{"file": 1,"line": 59,"col": 4},{"file": 1,"line": 60,"col": 4},{"file": 1,"line": 61,"col": 4},{"file": 1,"line": 62,"col": 4},{"file": 1,"line": 63,"col": 4},{"file": 1,"line": 64,"col": 4},{"file": 1,"line": 65,"col": 4},{"file": 1,"line": 66,"col": 4},{"file": 1,"line": 67,"col": 4},{"file": 1,"line": 68,"col": 4},{"file": 1,"line": 69,"col": 4},{"file": 1,"line": 70,"col": 4},{"file": 1,"line": 71,"col": 4},{"file": 1,"line": 72,"col": 4},{"file": 1,"line": 73,"col": 4},{"file": 1,"line": 74,"col": 4},{"file": 1,"line": 75,"col": 4},{"file": 1,"line": 76,"col": 4},{"file": 1,"line": 77,"col": 4},{"file": 1,"line": 78,"col": 4},{"file": 1,"line": 79,"col": 4},{"file": 1,"line": 80,"col": 4},{"file": 1,"line": 81,"col": 4},{"file": 1,"line": 82,"col": 4},{"file": 1,"line": 83,"col": 4},{"file": 1,"line": 84,"col": 4},{"file": 1,"line": 85,"col": 4},{"file": 1,"line": 86,"col": 4},{"file": 1,"line": 87,"col": 4},{"file": 1,"line": 88,"col": 4},{"file": 2,"line": 3,"col": 4,"docs": " Zig version. When writing code that supports multiple versions of Zig, prefer feature detection (i.e. with `@hasDecl` or `@hasField`) over version checks."},{"file": 2,"line": 5,"col": 4,"docs": " Temporary until self-hosted is feature complete."},{"file": 2,"line": 7,"col": 4,"docs": " Temporary until self-hosted supports the `cpu.arch` value."},{"file": 2,"line": 9,"col": 4,"docs": " Temporary until self-hosted can call `std.Target.x86.featureSetHas` at comptime."},{"file": 2,"line": 11,"col": 4},{"file": 2,"line": 12,"col": 4},{"file": 2,"line": 13,"col": 4},{"file": 2,"line": 14,"col": 4},{"file": 2,"line": 15,"col": 4},{"file": 2,"line": 16,"col": 4},{"file": 2,"line": 76,"col": 4},{"file": 2,"line": 98,"col": 4},{"file": 2,"line": 103,"col": 4},{"file": 2,"line": 104,"col": 4},{"file": 2,"line": 105,"col": 4},{"file": 2,"line": 106,"col": 4},{"file": 2,"line": 107,"col": 4},{"file": 2,"line": 108,"col": 4},{"file": 2,"line": 109,"col": 4},{"file": 2,"line": 110,"col": 4},{"file": 2,"line": 111,"col": 4},{"file": 2,"line": 112,"col": 4},{"file": 2,"line": 0,"col": 0},{"file": 3,"line": 640,"col": 20},{"file": 3,"line": 641,"col": 20},{"file": 3,"line": 642,"col": 20},{"file": 3,"line": 643,"col": 20},{"file": 3,"line": 644,"col": 20},{"file": 3,"line": 646,"col": 20},{"file": 3,"line": 651,"col": 20,"fields": [9996]},{"file": 3,"line": 657,"col": 20,"fields": [9997,9998]},{"file": 3,"line": 671,"col": 20,"docs": " Adds the specified feature set but not its dependencies.","fields": [9999,10000]},{"file": 3,"line": 677,"col": 20,"docs": " Removes the specified feature but not its dependents.","fields": [10001,10002]},{"file": 3,"line": 684,"col": 20,"docs": " Removes the specified feature but not its dependents.","fields": [10003,10004]},{"file": 3,"line": 689,"col": 20,"fields": [10005,10006]},{"file": 3,"line": 706,"col": 20,"fields": [10007]},{"file": 3,"line": 710,"col": 20,"fields": [10008,10009]},{"file": 3,"line": 714,"col": 20,"fields": [10010,10011]},{"file": 12,"line": 57,"col": 8,"fields": [10012,10013,10014,10015]},{"file": 40,"line": 293,"col": 8},{"file": 40,"line": 302,"col": 8},{"file": 40,"line": 763,"col": 8,"fields": [10016]},{"file": 40,"line": 804,"col": 8},{"file": 40,"line": 884,"col": 8,"docs": " Recursively iterates over a directory. `self` must have been opened with `OpenDirOptions{.iterate = true}`. Must call `Walker.deinit` when done. The order of returned file system entries is undefined. `self` will not be closed after walking it.","fields": [10017,10018]},{"file": 40,"line": 902,"col": 8},{"file": 40,"line": 917,"col": 8,"fields": [10019]},{"file": 40,"line": 943,"col": 8,"docs": " Same as `openFile` but WASI only.","fields": [10020,10021,10022]},{"file": 40,"line": 967,"col": 8},{"file": 40,"line": 1050,"col": 8,"docs": " Same as `openFile` but Windows-only and the path parameter is [WTF-16](https://simonsapin.github.io/wtf-8/#potentially-ill-formed-utf-16) encoded.","fields": [10023,10024,10025]},{"file": 40,"line": 1090,"col": 8,"docs": " Creates, opens, or overwrites a file with write access. Call `File.close` on the result when done. Asserts that the path parameter has no null bytes.","fields": [10026,10027,10028]},{"file": 40,"line": 1102,"col": 8},{"file": 40,"line": 1105,"col": 8,"docs": " Same as `createFile` but WASI only.","fields": [10029,10030,10031]},{"file": 40,"line": 1133,"col": 8,"docs": " Same as `createFile` but the path parameter is null-terminated.","fields": [10032,10033,10034]},{"file": 40,"line": 1204,"col": 8,"docs": " Same as `createFile` but Windows-only and the path parameter is [WTF-16](https://simonsapin.github.io/wtf-8/#potentially-ill-formed-utf-16) encoded.","fields": [10035,10036,10037]},{"file": 40,"line": 1245,"col": 8},{"file": 40,"line": 1246,"col": 8},{"file": 40,"line": 1247,"col": 8},{"file": 40,"line": 1249,"col": 8,"fields": [10038,10039]},{"file": 40,"line": 1253,"col": 8,"fields": [10040,10041]},{"file": 40,"line": 1257,"col": 8,"fields": [10042,10043]},{"file": 40,"line": 1265,"col": 8,"docs": " Calls makeDir recursively to make an entire path. Returns success if the path already exists and is a directory. This function is not atomic, and if it returns an error, the file system may have been modified regardless.","fields": [10044,10045]},{"file": 40,"line": 1298,"col": 8,"docs": " This function performs `makePath`, followed by `openDir`. If supported by the OS, this operation is atomic. It is not atomic on all operating systems.","fields": [10046,10047,10048]},{"file": 40,"line": 1311,"col": 8,"docs": "  This function returns the canonicalized absolute pathname of `pathname` relative to this `Dir`. If `pathname` is absolute, ignores this `Dir` handle and returns the canonicalized absolute pathname of `pathname` argument. This function is not universally supported by all platforms. Currently supported hosts are: Linux, macOS, and Windows. See also `Dir.realpathZ`, `Dir.realpathW`, and `Dir.realpathAlloc`.","fields": [10049,10050,10051]},{"file": 40,"line": 1325,"col": 8,"docs": " Same as `Dir.realpath` except `pathname` is null-terminated. See also `Dir.realpath`, `realpathZ`.","fields": [10052,10053,10054]},{"file": 40,"line": 1358,"col": 8,"docs": " Windows-only. Same as `Dir.realpath` except `pathname` is WTF16 encoded. See also `Dir.realpath`, `realpathW`.","fields": [10055,10056,10057]},{"file": 40,"line": 1410,"col": 8,"docs": " Same as `Dir.realpath` except caller must free the returned memory. See also `Dir.realpath`.","fields": [10058,10059,10060]},{"file": 40,"line": 1428,"col": 8,"docs": " Changes the current working directory to the open directory handle. This modifies global state and can have surprising effects in multi- threaded applications. Most applications and especially libraries should not call this function as a general rule, however it can have use cases in, for example, implementing a shell, or child process execution. Not all targets support this. For example, WASI does not have the concept of a current working directory.","fields": [10061]},{"file": 40,"line": 1435,"col": 8},{"file": 40,"line": 1453,"col": 8,"docs": " Opens a directory at the given path. The directory is a system resource that remains open until `close` is called on the result. Asserts that the path parameter has no null bytes.","fields": [10062,10063,10064]},{"file": 40,"line": 1465,"col": 8},{"file": 40,"line": 1468,"col": 8,"docs": " Same as `openDir` except only WASI.","fields": [10065,10066,10067]},{"file": 40,"line": 1506,"col": 8,"docs": " Same as `openDir` except the parameter is null-terminated.","fields": [10068,10069,10070]},{"file": 40,"line": 1522,"col": 8,"docs": " Same as `openDir` except the path parameter is WTF-16 encoded, NT-prefixed. This function asserts the target OS is Windows.","fields": [10071,10072,10073]},{"file": 40,"line": 1596,"col": 8},{"file": 40,"line": 1600,"col": 8,"docs": " Delete a file name and possibly the file it refers to, based on an open directory handle. Asserts that the path parameter has no null bytes.","fields": [10074,10075]},{"file": 40,"line": 1615,"col": 8},{"file": 40,"line": 1618,"col": 8,"docs": " Same as `deleteFile` except the parameter is null-terminated.","fields": [10076,10077]},{"file": 40,"line": 1637,"col": 8,"docs": " Same as `deleteFile` except the parameter is WTF-16 encoded.","fields": [10078,10079]},{"file": 40,"line": 1644,"col": 8},{"file": 40,"line": 1663,"col": 8,"docs": " Returns `error.DirNotEmpty` if the directory is not empty. To delete a directory recursively, see `deleteTree`. Asserts that the path parameter has no null bytes.","fields": [10080,10081]},{"file": 40,"line": 1679,"col": 8,"docs": " Same as `deleteDir` except the parameter is null-terminated.","fields": [10082,10083]},{"file": 40,"line": 1688,"col": 8,"docs": " Same as `deleteDir` except the parameter is UTF16LE, NT prefixed. This function is Windows-only.","fields": [10084,10085]},{"file": 40,"line": 1695,"col": 8},{"file": 40,"line": 1701,"col": 8,"docs": " Change the name or location of a file or directory. If new_sub_path already exists, it will be replaced. Renaming a file over an existing directory or a directory over an existing file will fail with `error.IsDir` or `error.NotDir`","fields": [10086,10087,10088]},{"file": 40,"line": 1706,"col": 8,"docs": " Same as `rename` except the parameters are null-terminated.","fields": [10089,10090,10091]},{"file": 40,"line": 1712,"col": 8,"docs": " Same as `rename` except the parameters are UTF16LE, NT prefixed. This function is Windows-only.","fields": [10092,10093,10094]},{"file": 40,"line": 1720,"col": 8,"docs": " Creates a symbolic link named `sym_link_path` which contains the string `target_path`. A symbolic link (also known as a soft link) may point to an existing file or to a nonexistent one; the latter case is known as a dangling link. If `sym_link_path` exists, it will not be overwritten.","fields": [10095,10096,10097,10098]},{"file": 40,"line": 1740,"col": 8,"docs": " WASI-only. Same as `symLink` except targeting WASI.","fields": [10099,10100,10101,10102]},{"file": 40,"line": 1750,"col": 8,"docs": " Same as `symLink`, except the pathname parameters are null-terminated.","fields": [10103,10104,10105,10106]},{"file": 40,"line": 1766,"col": 8,"docs": " Windows-only. Same as `symLink` except the pathname parameters are null-terminated, WTF16 encoded.","fields": [10107,10108,10109,10110]},{"file": 40,"line": 1778,"col": 8,"docs": " Read value of a symbolic link. The return value is a slice of `buffer`, from index `0`. Asserts that the path parameter has no null bytes.","fields": [10111,10112,10113]},{"file": 40,"line": 1790,"col": 8},{"file": 40,"line": 1793,"col": 8,"docs": " WASI-only. Same as `readLink` except targeting WASI.","fields": [10114,10115,10116]},{"file": 40,"line": 1798,"col": 8,"docs": " Same as `readLink`, except the `pathname` parameter is null-terminated.","fields": [10117,10118,10119]},{"file": 40,"line": 1808,"col": 8,"docs": " Windows-only. Same as `readLink` except the pathname parameter is null-terminated, WTF16 encoded.","fields": [10120,10121,10122]},{"file": 40,"line": 1817,"col": 8,"docs": " Read all of file contents using a preallocated buffer. The returned slice has the same pointer as `buffer`. If the length matches `buffer.len` the situation is ambiguous. It could either mean that the entire file was read, and it exactly fits the buffer, or it could mean the buffer was not big enough for the entire file.","fields": [10123,10124,10125]},{"file": 40,"line": 1856,"col": 8},{"file": 40,"line": 1886,"col": 8,"docs": " Whether `full_path` describes a symlink, file, or directory, this function removes it. If it cannot be removed because it is a non-empty directory, this function recursively removes its entries and then tries again. This operation is not atomic on most file systems.","fields": [10126,10127]},{"file": 40,"line": 2035,"col": 8,"docs": " Writes content to the file system, creating a new file if it does not exist, truncating if it already exists.","fields": [10128,10129,10130]},{"file": 40,"line": 2041,"col": 8},{"file": 40,"line": 2048,"col": 8,"docs": " Test accessing `path`. `path` is UTF8-encoded. Be careful of Time-Of-Check-Time-Of-Use race conditions when using this function. For example, instead of testing if a file exists and then opening it, just open it and handle the error for file not found.","fields": [10131,10132,10133]},{"file": 40,"line": 2058,"col": 8,"docs": " Same as `access` except the path parameter is null-terminated.","fields": [10134,10135,10136]},{"file": 40,"line": 2081,"col": 8,"docs": " Same as `access` except asserts the target OS is Windows and the path parameter is * WTF-16 encoded * null-terminated * NtDll prefixed TODO currently this ignores `flags`.","fields": [10137,10138,10139]},{"file": 40,"line": 2091,"col": 8,"docs": " Check the file size, mtime, and mode of `source_path` and `dest_path`. If they are equal, does nothing. Otherwise, atomically copies `source_path` to `dest_path`. The destination file gains the mtime, atime, and mode of the source file so that the next call to `updateFile` will not need a copy. Returns the previous status of the file before updating. If any of the directories do not exist for dest_path, they are created.","fields": [10140,10141,10142,10143,10144]},{"file": 40,"line": 2139,"col": 8,"docs": " Guaranteed to be atomic. On Linux, until https://patchwork.kernel.org/patch/9636735/ is merged and readily available, there is a possibility of power loss or application termination leaving temporary files present in the same directory as dest_path.","fields": [10145,10146,10147,10148,10149]},{"file": 40,"line": 2163,"col": 8},{"file": 40,"line": 2171,"col": 8,"docs": " Directly access the `.file` field, and then call `AtomicFile.finish` to atomically replace `dest_path` with contents. Always call `AtomicFile.deinit` to clean up, regardless of whether `AtomicFile.finish` succeeded. `dest_path` must remain valid until `AtomicFile.deinit` is called.","fields": [10150,10151,10152]},{"file": 40,"line": 2180,"col": 8},{"file": 40,"line": 2181,"col": 8},{"file": 40,"line": 2183,"col": 8,"fields": [10153]},{"file": 40,"line": 2191,"col": 8},{"file": 40,"line": 2198,"col": 8,"docs": " Changes the mode of the directory. The process must have the correct privileges in order to do this successfully, or must have the effective user ID matching the owner of the directory. Additionally, the directory must have been opened with `OpenDirOptions{ .iterate = true }`.","fields": [10154,10155]},{"file": 40,"line": 2212,"col": 8,"docs": " Changes the owner and group of the directory. The process must have the correct privileges in order to do this successfully. The group may be changed by the owner of the directory to any group of which the owner is a member. Additionally, the directory must have been opened with `OpenDirOptions{ .iterate = true }`. If the owner or group is specified as `null`, the ID is not changed.","fields": [10156,10157,10158]},{"file": 40,"line": 2220,"col": 8},{"file": 40,"line": 300,"col": 4},{"file": 40,"line": 1532,"col": 4,"docs": " `flags` must contain `os.O.DIRECTORY`.","fields": [10159,10160,10161]},{"file": 40,"line": 1549,"col": 4,"fields": [10162,10163,10164,10165]},{"file": 6,"line": 774,"col": 16,"fields": [10166]},{"file": 6,"line": 747,"col": 12},{"file": 6,"line": 749,"col": 12},{"file": 6,"line": 750,"col": 12},{"file": 36,"line": 382,"col": 4},{"file": 36,"line": 393,"col": 4},{"file": 36,"line": 400,"col": 4},{"file": 36,"line": 998,"col": 8,"fields": [10167]},{"file": 36,"line": 1015,"col": 4,"fields": [10168,10169]},{"file": 36,"line": 1072,"col": 4,"fields": [10170,10171]},{"file": 36,"line": 1220,"col": 4,"fields": [10172,10173]},{"file": 56,"line": 15,"col": 8,"docs": " Inner state of ArenaAllocator. Can be stored rather than the entire ArenaAllocator as a memory-saving optimization."},{"file": 56,"line": 37,"col": 8,"fields": [10174]},{"file": 56,"line": 31,"col": 4},{"file": 29,"line": 7,"col": 4},{"file": 29,"line": 9,"col": 4},{"file": 29,"line": 30,"col": 4,"fields": [10175,10176,10177]},{"file": 3,"line": 7,"col": 4,"docs": " TODO Nearly all the functions in this namespace would be better off if https://github.com/ziglang/zig/issues/425 was solved."},{"file": 3,"line": 0,"col": 0},{"file": 3,"line": 1,"col": 0},{"file": 3,"line": 2,"col": 0},{"file": 4,"line": 0,"col": 0},{"file": 4,"line": 1,"col": 0},{"file": 4,"line": 2,"col": 0},{"file": 5,"line": 12,"col": 4},{"file": 5,"line": 0,"col": 0},{"file": 5,"line": 1,"col": 0},{"file": 5,"line": 2,"col": 0},{"file": 5,"line": 3,"col": 0},{"file": 5,"line": 4,"col": 0},{"file": 5,"line": 5,"col": 0},{"file": 5,"line": 6,"col": 0},{"file": 5,"line": 7,"col": 0},{"file": 5,"line": 8,"col": 0},{"file": 5,"line": 9,"col": 0},{"file": 5,"line": 10,"col": 0},{"file": 6,"line": 51,"col": 4,"fields": [10178,10179]},{"file": 6,"line": 71,"col": 4,"docs": " Key memory is managed by the caller.  Keys and values will not automatically be freed.","fields": [10180]},{"file": 6,"line": 75,"col": 4},{"file": 6,"line": 94,"col": 4},{"file": 6,"line": 108,"col": 4},{"file": 6,"line": 123,"col": 4,"docs": " Deprecated use `default_max_load_percentage`"},{"file": 6,"line": 125,"col": 4},{"file": 6,"line": 0,"col": 0},{"file": 6,"line": 1,"col": 0},{"file": 6,"line": 2,"col": 0},{"file": 6,"line": 3,"col": 0},{"file": 6,"line": 4,"col": 0},{"file": 6,"line": 5,"col": 0},{"file": 6,"line": 6,"col": 0},{"file": 6,"line": 7,"col": 0},{"file": 6,"line": 8,"col": 0},{"file": 6,"line": 9,"col": 0},{"file": 6,"line": 10,"col": 0},{"file": 6,"line": 1538,"col": 0},{"file": 6,"line": 1539,"col": 0},{"file": 6,"line": 1540,"col": 0},{"file": 7,"line": 439,"col": 4,"docs": " An ArrayList, but the allocator is passed as a parameter to the relevant functions rather than stored in the struct itself. The same allocator **must** be used throughout the entire lifetime of an ArrayListUnmanaged. Initialize directly or with `initCapacity`, and deinitialize with `deinit` or use `toOwnedSlice`.","fields": [10181]},{"file": 7,"line": 447,"col": 4,"docs": " An ArrayListAligned, but the allocator is passed as a parameter to the relevant functions rather than stored  in the struct itself. The same allocator **must** be used throughout the entire lifetime of an ArrayListAlignedUnmanaged. Initialize directly or with `initCapacity`, and deinitialize with `deinit` or use `toOwnedSlice`.","fields": [10182,10183]},{"file": 7,"line": 0,"col": 0},{"file": 7,"line": 1,"col": 0},{"file": 7,"line": 2,"col": 0},{"file": 7,"line": 3,"col": 0},{"file": 7,"line": 4,"col": 0},{"file": 7,"line": 5,"col": 0},{"file": 7,"line": 1197,"col": 0},{"file": 7,"line": 1202,"col": 0},{"file": 3,"line": 16,"col": 12},{"file": 3,"line": 93,"col": 12,"docs": " Based on NTDDI version constants from https://docs.microsoft.com/en-us/cpp/porting/modifying-winver-and-win32-winnt"},{"file": 3,"line": 181,"col": 12},{"file": 3,"line": 220,"col": 12,"docs": " The version ranges here represent the minimum OS version to be supported and the maximum OS version to be supported. The default values represent the range that the Zig Standard Library bases its abstractions on. The minimum version of the range is the main setting to tweak for a target. Usually, the maximum target OS version will remain the default, which is the latest released version of the OS. To test at compile time if the target is guaranteed to support a given OS feature, one should check that the minimum version of the range is greater than or equal to the version the feature was introduced in. To test at compile time if the target certainly will not support a given OS feature, one should check that the maximum version of the range is less than the version the feature was introduced in. If neither of these cases apply, a runtime check should be used to determine if the target supports a given OS feature. Binaries built with a given maximum version will continue to function on newer operating system versions. However, such a binary may not take full advantage of the newer operating system APIs. See `Os.isAtLeast`."},{"file": 3,"line": 347,"col": 12},{"file": 3,"line": 356,"col": 12,"docs": " Provides a tagged union. `Target` does not store the tag because it is redundant with the OS tag; this function abstracts that part away.","fields": [10184]},{"file": 3,"line": 378,"col": 12,"docs": " Checks if system is guaranteed to be at least `version` or older than `version`. Returns `null` if a runtime check is required.","fields": [10185,10186,10187]},{"file": 3,"line": 391,"col": 12,"docs": " On Darwin, we always link libSystem which contains libc. Similarly on FreeBSD and NetBSD we always link system libc since this is the stable syscall interface.","fields": [10188]},{"file": 8,"line": 6,"col": 4},{"file": 8,"line": 151,"col": 4},{"file": 8,"line": 152,"col": 4},{"file": 8,"line": 153,"col": 4},{"file": 8,"line": 154,"col": 4},{"file": 8,"line": 156,"col": 4},{"file": 8,"line": 978,"col": 4},{"file": 8,"line": 2,"col": 0},{"file": 8,"line": 3,"col": 0},{"file": 8,"line": 4,"col": 0},{"file": 3,"line": 484,"col": 12,"fields": [10189,10190]},{"file": 3,"line": 537,"col": 12,"fields": [10191]},{"file": 3,"line": 544,"col": 12,"fields": [10192]},{"file": 3,"line": 551,"col": 12,"fields": [10193]},{"file": 3,"line": 582,"col": 12,"fields": [10194,10195]},{"file": 3,"line": 617,"col": 12},{"file": 3,"line": 759,"col": 12},{"file": 3,"line": 1247,"col": 12},{"file": 3,"line": 1315,"col": 12,"docs": " The \"default\" set of CPU features for cross-compiling. A conservative set of features that is expected to be supported on most available hardware.","fields": [10196]},{"file": 9,"line": 0,"col": 0},{"file": 9,"line": 1,"col": 0},{"file": 9,"line": 2,"col": 0},{"file": 9,"line": 3,"col": 0},{"file": 9,"line": 4,"col": 0},{"file": 10,"line": 0,"col": 0},{"file": 10,"line": 1,"col": 0},{"file": 10,"line": 2,"col": 0},{"file": 10,"line": 3,"col": 0},{"file": 10,"line": 4,"col": 0},{"file": 11,"line": 0,"col": 0},{"file": 12,"line": 4,"col": 4},{"file": 12,"line": 5,"col": 4},{"file": 12,"line": 6,"col": 4},{"file": 12,"line": 7,"col": 4},{"file": 12,"line": 8,"col": 4},{"file": 12,"line": 9,"col": 4},{"file": 12,"line": 10,"col": 4},{"file": 12,"line": 11,"col": 4},{"file": 12,"line": 12,"col": 4},{"file": 12,"line": 13,"col": 4},{"file": 12,"line": 14,"col": 4},{"file": 12,"line": 15,"col": 4},{"file": 12,"line": 16,"col": 4},{"file": 12,"line": 17,"col": 4},{"file": 12,"line": 18,"col": 4},{"file": 12,"line": 19,"col": 4},{"file": 12,"line": 20,"col": 4},{"file": 12,"line": 21,"col": 4},{"file": 12,"line": 22,"col": 4},{"file": 12,"line": 23,"col": 4},{"file": 12,"line": 29,"col": 4,"docs": " `explicit_subsystem` is missing when the subsystem is automatically detected, so Zig standard library has the subsystem detection logic here. This should generally be used rather than `explicit_subsystem`. On non-Windows targets, this is `null`."},{"file": 12,"line": 53,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 86,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 95,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 106,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 118,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 136,"col": 4,"docs": " The code model puts constraints on the location of symbols and the size of code and data. The selection of a code model is a trade off on speed and restrictions that needs to be selected on a per application basis to meet its requirements. A slightly more detailed explanation can be found in (for example) the [System V Application Binary Interface (x86_64)](https://github.com/hjl-tools/x86-psABI/wiki/x86-64-psABI-1.0.pdf) 3.5.1. This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 147,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 156,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 176,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 185,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 192,"col": 4},{"file": 12,"line": 196,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 436,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 443,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 450,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 457,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 465,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 472,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 479,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 566,"col": 4,"fields": []},{"file": 12,"line": 612,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 655,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 663,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 672,"col": 4,"docs": " This function type is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 680,"col": 4,"docs": " This function type is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 684,"col": 4,"docs": " This function is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 0,"col": 0},{"file": 12,"line": 723,"col": 0},{"file": 12,"line": 724,"col": 0},{"file": 12,"line": 255,"col": 12,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 12,"line": 413,"col": 12,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 13,"line": 0,"col": 0},{"file": 13,"line": 1,"col": 0},{"file": 13,"line": 2,"col": 0},{"file": 13,"line": 3,"col": 0},{"file": 13,"line": 4,"col": 0},{"file": 13,"line": 5,"col": 0},{"file": 13,"line": 23,"col": 16},{"file": 13,"line": 29,"col": 16,"docs": " Insert a new node after the current one. Arguments:     new_node: Pointer to the new node to insert.","fields": [10197,10198]},{"file": 13,"line": 40,"col": 16,"docs": " Remove a node from the list. Arguments:     node: Pointer to the node to be removed. Returns:     node removed","fields": [10199]},{"file": 13,"line": 48,"col": 16,"docs": " Iterate over the singly-linked list from this node, until the final node is found. This operation is O(N).","fields": [10200]},{"file": 13,"line": 57,"col": 16,"docs": " Iterate over each next node, returning the count of all nodes except the starting one. This operation is O(N).","fields": [10201]},{"file": 14,"line": 0,"col": 0},{"file": 14,"line": 1,"col": 0},{"file": 14,"line": 2,"col": 0},{"file": 14,"line": 3,"col": 0},{"file": 14,"line": 157,"col": 0},{"file": 14,"line": 171,"col": 0},{"file": 14,"line": 172,"col": 0},{"file": 14,"line": 242,"col": 0,"fields": [10202]},{"file": 14,"line": 261,"col": 0,"fields": [10203]},{"file": 15,"line": 36,"col": 4,"docs": " Try to acquire the mutex without blocking. Returns `false` if the mutex is unavailable. Otherwise returns `true`. Call `unlock` on the mutex to release.","fields": [10204]},{"file": 15,"line": 59,"col": 4},{"file": 15,"line": 165,"col": 4},{"file": 15,"line": 202,"col": 4,"docs": " This has the sematics as `Mutex`, however it does not actually do any synchronization. Operations are safety-checked no-ops."},{"file": 15,"line": 232,"col": 4},{"file": 15,"line": 24,"col": 0},{"file": 15,"line": 25,"col": 0},{"file": 15,"line": 26,"col": 0},{"file": 15,"line": 27,"col": 0},{"file": 15,"line": 28,"col": 0},{"file": 15,"line": 29,"col": 0},{"file": 15,"line": 30,"col": 0},{"file": 15,"line": 31,"col": 0},{"file": 15,"line": 32,"col": 0},{"file": 15,"line": 50,"col": 0},{"file": 15,"line": 248,"col": 0},{"file": 15,"line": 279,"col": 0,"fields": [10205]},{"file": 16,"line": 0,"col": 0},{"file": 16,"line": 2,"col": 0},{"file": 16,"line": 3,"col": 0},{"file": 16,"line": 4,"col": 0},{"file": 16,"line": 262,"col": 0,"fields": []},{"file": 16,"line": 307,"col": 0},{"file": 16,"line": 339,"col": 0},{"file": 17,"line": 13,"col": 4},{"file": 17,"line": 0,"col": 0},{"file": 17,"line": 1,"col": 0},{"file": 17,"line": 2,"col": 0},{"file": 17,"line": 3,"col": 0},{"file": 17,"line": 4,"col": 0},{"file": 17,"line": 5,"col": 0},{"file": 17,"line": 6,"col": 0},{"file": 17,"line": 7,"col": 0},{"file": 17,"line": 8,"col": 0},{"file": 17,"line": 9,"col": 0},{"file": 17,"line": 11,"col": 0},{"file": 17,"line": 1713,"col": 0,"fields": []},{"file": 17,"line": 1717,"col": 0,"fields": [10206,10207]},{"file": 17,"line": 1723,"col": 0},{"file": 17,"line": 1749,"col": 0,"fields": []},{"file": 17,"line": 1772,"col": 0,"fields": [10208,10209]},{"file": 17,"line": 1593,"col": 16},{"file": 17,"line": 1601,"col": 16},{"file": 17,"line": 1609,"col": 16},{"file": 17,"line": 1617,"col": 16},{"file": 17,"line": 1625,"col": 16},{"file": 17,"line": 1634,"col": 16},{"file": 17,"line": 1643,"col": 16},{"file": 17,"line": 1652,"col": 16},{"file": 17,"line": 1661,"col": 16},{"file": 17,"line": 1670,"col": 16},{"file": 17,"line": 1680,"col": 16},{"file": 17,"line": 1684,"col": 16},{"file": 18,"line": 0,"col": 0},{"file": 18,"line": 1,"col": 0},{"file": 18,"line": 2,"col": 0},{"file": 18,"line": 3,"col": 0},{"file": 18,"line": 70,"col": 0},{"file": 18,"line": 83,"col": 0},{"file": 18,"line": 84,"col": 0},{"file": 18,"line": 147,"col": 0,"fields": [10210]},{"file": 18,"line": 165,"col": 0,"fields": [10211]},{"file": 17,"line": 47,"col": 12},{"file": 17,"line": 61,"col": 12},{"file": 17,"line": 63,"col": 12},{"file": 17,"line": 69,"col": 12},{"file": 17,"line": 88,"col": 12},{"file": 17,"line": 83,"col": 8},{"file": 17,"line": 99,"col": 8},{"file": 19,"line": 74,"col": 4},{"file": 19,"line": 103,"col": 4,"docs": " The default log level is based on build mode."},{"file": 19,"line": 111,"col": 4,"docs": " The current log level. This is set to root.log_level if present, otherwise log.default_level."},{"file": 19,"line": 116,"col": 4},{"file": 19,"line": 230,"col": 4,"docs": " The default scoped logging namespace."},{"file": 19,"line": 233,"col": 4,"docs": " Deprecated. TODO: replace with @compileError() after 0.9.0 is released"},{"file": 19,"line": 236,"col": 4,"docs": " Deprecated. TODO: replace with @compileError() after 0.9.0 is released"},{"file": 19,"line": 239,"col": 4,"docs": " Deprecated. TODO: replace with @compileError() after 0.9.0 is released"},{"file": 19,"line": 244,"col": 4,"docs": " Log an error message using the default scope. This log level is intended to be used when something has gone wrong. This might be recoverable or might be followed by the program exiting."},{"file": 19,"line": 249,"col": 4,"docs": " Log a warning message using the default scope. This log level is intended to be used if it is uncertain whether something has gone wrong or not, but the circumstances would be worth investigating."},{"file": 19,"line": 252,"col": 4,"docs": " Deprecated. TODO: replace with @compileError() after 0.9.0 is released"},{"file": 19,"line": 256,"col": 4,"docs": " Log an info message using the default scope. This log level is intended to be used for general messages about the state of the program."},{"file": 19,"line": 260,"col": 4,"docs": " Log a debug message using the default scope. This log level is intended to be used for messages which are only useful for debugging."},{"file": 19,"line": 70,"col": 0},{"file": 19,"line": 71,"col": 0},{"file": 19,"line": 72,"col": 0},{"file": 19,"line": 121,"col": 0},{"file": 20,"line": 66,"col": 4,"fields": [10212,10213,10214,10215,10216,10217]},{"file": 20,"line": 102,"col": 4,"docs": " This matches the libc clone function.","fields": [10218,10219,10220,10221,10222,10223,10224]},{"file": 20,"line": 104,"col": 4},{"file": 20,"line": 114,"col": 4},{"file": 20,"line": 115,"col": 4},{"file": 20,"line": 116,"col": 4},{"file": 20,"line": 117,"col": 4},{"file": 20,"line": 118,"col": 4},{"file": 20,"line": 120,"col": 4},{"file": 20,"line": 483,"col": 4},{"file": 20,"line": 506,"col": 4},{"file": 20,"line": 529,"col": 4},{"file": 20,"line": 544,"col": 4},{"file": 20,"line": 552,"col": 4},{"file": 20,"line": 559,"col": 4},{"file": 20,"line": 585,"col": 4},{"file": 20,"line": 592,"col": 4},{"file": 20,"line": 600,"col": 4},{"file": 20,"line": 612,"col": 4},{"file": 20,"line": 624,"col": 4},{"file": 20,"line": 625,"col": 4},{"file": 20,"line": 626,"col": 4},{"file": 20,"line": 629,"col": 4},{"file": 20,"line": 661,"col": 4},{"file": 20,"line": 666,"col": 4},{"file": 20,"line": 671,"col": 4},{"file": 20,"line": 673,"col": 4},{"file": 20,"line": 674,"col": 4},{"file": 20,"line": 675,"col": 4},{"file": 20,"line": 694,"col": 4},{"file": 20,"line": 695,"col": 4},{"file": 20,"line": 730,"col": 4},{"file": 20,"line": 736,"col": 4},{"file": 20,"line": 0,"col": 0},{"file": 20,"line": 1,"col": 0},{"file": 20,"line": 2,"col": 0},{"file": 20,"line": 3,"col": 0},{"file": 20,"line": 4,"col": 0},{"file": 20,"line": 6,"col": 0},{"file": 20,"line": 7,"col": 0},{"file": 20,"line": 8,"col": 0},{"file": 20,"line": 9,"col": 0},{"file": 20,"line": 10,"col": 0},{"file": 20,"line": 11,"col": 0},{"file": 20,"line": 12,"col": 0},{"file": 20,"line": 13,"col": 0},{"file": 20,"line": 14,"col": 0},{"file": 21,"line": 14,"col": 4,"docs": " Compile time known minimum page size. https://github.com/ziglang/zig/issues/4082"},{"file": 21,"line": 30,"col": 4,"docs": " The standard library currently thoroughly depends on byte size being 8 bits.  (see the use of u8 throughout allocation code as the \"byte\" type.)  Code which depends on this can reference this declaration.  If we ever try to port the standard library to a non-8-bit-byte platform, this will allow us to search for things which need to be updated."},{"file": 21,"line": 32,"col": 4},{"file": 21,"line": 36,"col": 4,"docs": " Detects and asserts if the std.mem.Allocator interface is violated by the caller or the allocator.","fields": [10225]},{"file": 21,"line": 113,"col": 4,"fields": [10226]},{"file": 21,"line": 206,"col": 4,"docs": " Copy all of source into dest at position 0. dest.len must be >= source.len. If the slices overlap, dest.ptr must be >= src.ptr.","fields": [10227,10228,10229]},{"file": 21,"line": 398,"col": 4,"docs": " Initializes all fields of the struct with their default value, or zero values if no default value is present. If the field is present in the provided initial values, it will have that value instead. Structs are initialized recursively.","fields": [10230,10231]},{"file": 21,"line": 492,"col": 4,"docs": " Compares two slices of numbers lexicographically. O(n).","fields": [10232,10233,10234]},{"file": 21,"line": 514,"col": 4,"docs": " Returns true if lhs < rhs, false otherwise","fields": [10235,10236,10237]},{"file": 21,"line": 538,"col": 4,"docs": " Compares two slices and returns the index of the first inequality. Returns null if the slices are equal.","fields": [10238,10239,10240]},{"file": 21,"line": 555,"col": 4},{"file": 21,"line": 556,"col": 4},{"file": 21,"line": 734,"col": 4,"docs": " Takes a pointer to an array, an array, a sentinel-terminated pointer, or a slice and iterates searching for the first occurrence of `end`, returning the scanned slice. If `end` is not found, the full length of the array/slice/sentinel terminated pointer is returned. If the pointer type is sentinel terminated and `end` matches that terminator, the resulting slice is also sentinel terminated. Pointer properties such as mutability and alignment are preserved. C pointers are assumed to be non-null.","fields": [10241,10242]},{"file": 21,"line": 984,"col": 4,"docs": " Returns true if all elements in a slice are equal to the scalar value provided","fields": [10243,10244,10245]},{"file": 21,"line": 992,"col": 4,"docs": " Deprecated, use `Allocator.dupe`.","fields": [10246,10247,10248]},{"file": 21,"line": 997,"col": 4,"docs": " Deprecated, use `Allocator.dupeZ`.","fields": [10249,10250,10251]},{"file": 21,"line": 1002,"col": 4,"docs": " Remove values from the beginning of a slice.","fields": [10252,10253,10254]},{"file": 21,"line": 1016,"col": 4,"docs": " Remove values from the beginning and end of a slice.","fields": [10255,10256,10257]},{"file": 21,"line": 1037,"col": 4,"docs": " Linear search for the last index of a scalar value inside a slice.","fields": [10258,10259,10260]},{"file": 21,"line": 1054,"col": 4,"fields": [10261,10262,10263]},{"file": 21,"line": 1058,"col": 4,"fields": [10264,10265,10266]},{"file": 21,"line": 1069,"col": 4,"fields": [10267,10268,10269,10270]},{"file": 21,"line": 1079,"col": 4,"fields": [10271,10272,10273]},{"file": 21,"line": 1087,"col": 4,"docs": " Find the index in a slice of a sub-slice, searching from the end backwards. To start looking at a different index, slice the haystack first. Consider using `lastIndexOf` instead of this, which will automatically use a more sophisticated algorithm on larger inputs.","fields": [10274,10275,10276]},{"file": 21,"line": 1135,"col": 4,"docs": " Find the index in a slice of a sub-slice, searching from the end backwards. To start looking at a different index, slice the haystack first. Uses the Reverse boyer-moore-horspool algorithm on large inputs; `lastIndexOfLinear` on small inputs.","fields": [10277,10278,10279]},{"file": 21,"line": 1246,"col": 4,"docs": " Returns the number of needles inside the haystack needle.len must be > 0 does not count overlapping needles","fields": [10280,10281,10282]},{"file": 21,"line": 1276,"col": 4,"docs": " Returns true if the haystack contains expected_count or more needles needle.len must be > 0 does not count overlapping needles","fields": [10283,10284,10285,10286]},{"file": 21,"line": 1345,"col": 4},{"file": 21,"line": 1350,"col": 4},{"file": 21,"line": 1360,"col": 4,"docs": " Asserts that bytes.len >= @typeInfo(T).Int.bits / 8. Reads the integer starting from index 0 and ignores extra bytes. The bit count of T must be evenly divisible by 8. Assumes the endianness of memory is native. This means the function can simply pointer cast memory.","fields": [10287,10288]},{"file": 21,"line": 1370,"col": 4,"docs": " Asserts that bytes.len >= @typeInfo(T).Int.bits / 8. Reads the integer starting from index 0 and ignores extra bytes. The bit count of T must be evenly divisible by 8. Assumes the endianness of memory is foreign, so it must byte-swap.","fields": [10289,10290]},{"file": 21,"line": 1374,"col": 4},{"file": 21,"line": 1379,"col": 4},{"file": 21,"line": 1398,"col": 4,"docs": " Asserts that bytes.len >= @typeInfo(T).Int.bits / 8. Reads the integer starting from index 0 and ignores extra bytes. The bit count of T must be evenly divisible by 8.","fields": [10291,10292,10293]},{"file": 21,"line": 1444,"col": 4,"docs": " Writes an integer to memory, storing it in twos-complement. This function always succeeds, has defined behavior for all inputs, and accepts any integer bit width. This function stores in native endian, which means it is implemented as a simple memory store.","fields": [10294,10295,10296]},{"file": 21,"line": 1452,"col": 4,"docs": " Writes an integer to memory, storing it in twos-complement. This function always succeeds, has defined behavior for all inputs, but the integer bit width must be divisible by 8. This function stores in foreign endian, which means it does a @byteSwap first.","fields": [10297,10298,10299]},{"file": 21,"line": 1456,"col": 4},{"file": 21,"line": 1461,"col": 4},{"file": 21,"line": 1469,"col": 4,"docs": " Writes an integer to memory, storing it in twos-complement. This function always succeeds, has defined behavior for all inputs, but the integer bit width must be divisible by 8.","fields": [10300,10301,10302,10303]},{"file": 21,"line": 1483,"col": 4,"docs": " Writes a twos-complement little-endian integer to memory. Asserts that buf.len >= @typeInfo(T).Int.bits / 8. The bit count of T must be divisible by 8. Any extra bytes in buffer after writing the integer are set to zero. To avoid the branch to check for extra buffer bytes, use writeIntLittle instead.","fields": [10304,10305,10306]},{"file": 21,"line": 1507,"col": 4,"docs": " Writes a twos-complement big-endian integer to memory. Asserts that buffer.len >= @typeInfo(T).Int.bits / 8. The bit count of T must be divisible by 8. Any extra bytes in buffer before writing the integer are set to zero. To avoid the branch to check for extra buffer bytes, use writeIntBig instead.","fields": [10307,10308,10309]},{"file": 21,"line": 1529,"col": 4},{"file": 21,"line": 1534,"col": 4},{"file": 21,"line": 1545,"col": 4,"docs": " Writes a twos-complement integer to memory, with the specified endianness. Asserts that buf.len >= @typeInfo(T).Int.bits / 8. The bit count of T must be evenly divisible by 8. Any extra bytes in buffer not part of the integer are set to zero, with respect to endianness. To avoid the branch to check for extra buffer bytes, use writeInt instead.","fields": [10310,10311,10312,10313]},{"file": 21,"line": 1592,"col": 4,"docs": " Swap the byte order of all the members of the fields of a struct (Changing their endianess)","fields": [10314,10315]},{"file": 21,"line": 1729,"col": 4},{"file": 21,"line": 1783,"col": 4,"fields": [10316,10317,10318]},{"file": 21,"line": 1792,"col": 4,"fields": [10319,10320,10321]},{"file": 21,"line": 1881,"col": 4,"docs": " Naively combines a series of slices with a separator. Allocates memory for the result, which must be freed by the caller.","fields": [10322,10323,10324]},{"file": 21,"line": 1887,"col": 4,"docs": " Naively combines a series of slices with a separator and null terminator. Allocates memory for the result, which must be freed by the caller.","fields": [10325,10326,10327]},{"file": 21,"line": 1971,"col": 4,"docs": " Copies each T from slices into a new slice that exactly holds all the elements.","fields": [10328,10329,10330]},{"file": 21,"line": 2212,"col": 4,"docs": " Returns the smallest number in a slice. O(n). `slice` must not be empty.","fields": [10331,10332]},{"file": 21,"line": 2226,"col": 4,"docs": " Returns the largest number in a slice. O(n). `slice` must not be empty.","fields": [10333,10334]},{"file": 21,"line": 2278,"col": 4,"docs": " Replace needle with replacement as many times as possible, writing to an output buffer which is assumed to be of appropriate size. Use replacementSize to calculate an appropriate buffer size. The needle must not be empty.","fields": [10335,10336,10337,10338,10339]},{"file": 21,"line": 2333,"col": 4,"docs": " Replace all occurences of `needle` with `replacement`.","fields": [10340,10341,10342,10343]},{"file": 21,"line": 2342,"col": 4,"docs": " Collapse consecutive duplicate elements into one entry.","fields": [10344,10345,10346]},{"file": 21,"line": 2356,"col": 4,"docs": " Collapse consecutive duplicate elements into one entry.","fields": [10347,10348,10349]},{"file": 21,"line": 2381,"col": 4,"docs": " Calculate the size needed in an output buffer to perform a replacement. The needle must not be empty.","fields": [10350,10351,10352,10353]},{"file": 21,"line": 2413,"col": 4,"docs": " Perform a replacement on an allocated buffer of pre-determined size. Caller must free returned memory.","fields": [10354,10355,10356,10357,10358]},{"file": 21,"line": 2432,"col": 4,"docs": " Converts a little-endian integer to host endianness.","fields": [10359,10360]},{"file": 21,"line": 2440,"col": 4,"docs": " Converts a big-endian integer to host endianness.","fields": [10361,10362]},{"file": 21,"line": 2448,"col": 4,"docs": " Converts an integer from specified endianness to host endianness.","fields": [10363,10364,10365]},{"file": 21,"line": 2456,"col": 4,"docs": " Converts an integer which has host endianness to the desired endianness.","fields": [10366,10367,10368]},{"file": 21,"line": 2464,"col": 4,"docs": " Converts an integer which has host endianness to little endian.","fields": [10369,10370]},{"file": 21,"line": 2472,"col": 4,"docs": " Converts an integer which has host endianness to big endian.","fields": [10371,10372]},{"file": 21,"line": 2623,"col": 4,"docs": " Given any value, returns a copy of its bytes in an array.","fields": [10373]},{"file": 21,"line": 2656,"col": 4,"docs": " Given a pointer to an array of bytes, returns a pointer to a value of the specified type backed by those bytes, preserving pointer attributes.","fields": [10374,10375]},{"file": 21,"line": 2713,"col": 4,"docs": " Given a pointer to an array of bytes, returns a value of the specified type backed by a copy of those bytes.","fields": [10376,10377]},{"file": 21,"line": 2938,"col": 4,"docs": " Force an evaluation of the expression; this tries to prevent the compiler from optimizing the computation away even if the result eventually gets discarded.","fields": [10378]},{"file": 21,"line": 2988,"col": 4,"docs": " Returns whether `alignment` is a valid alignment, meaning it is a positive power of 2.","fields": [10379]},{"file": 21,"line": 2992,"col": 4,"fields": [10380,10381]},{"file": 21,"line": 3050,"col": 4,"docs": " Returns the largest slice in the given bytes that conforms to the new alignment, or `null` if the given bytes contain no conforming address.","fields": [10382,10383]},{"file": 21,"line": 3064,"col": 4,"docs": " Returns the largest sub-slice within the given slice that conforms to the new alignment, or `null` if the given slice contains no conforming address.","fields": [10384,10385]},{"file": 21,"line": 0,"col": 0},{"file": 21,"line": 1,"col": 0},{"file": 21,"line": 2,"col": 0},{"file": 21,"line": 3,"col": 0},{"file": 21,"line": 4,"col": 0},{"file": 21,"line": 5,"col": 0},{"file": 21,"line": 6,"col": 0},{"file": 21,"line": 7,"col": 0},{"file": 21,"line": 8,"col": 0},{"file": 21,"line": 9,"col": 0},{"file": 21,"line": 10,"col": 0},{"file": 21,"line": 132,"col": 0},{"file": 21,"line": 136,"col": 0,"fields": [10386,10387,10388,10389,10390]},{"file": 21,"line": 676,"col": 0,"docs": " Helper for the return type of sliceTo()","fields": [10391,10392]},{"file": 21,"line": 788,"col": 0,"docs": " Private helper for sliceTo(). If you want the length, use sliceTo(foo, x).len","fields": [10393,10394]},{"file": 21,"line": 1106,"col": 0,"fields": [10395,10396]},{"file": 21,"line": 1892,"col": 0,"fields": [10397,10398,10399,10400]},{"file": 21,"line": 2023,"col": 0,"fields": []},{"file": 21,"line": 2074,"col": 0,"fields": []},{"file": 21,"line": 2360,"col": 0,"fields": [10401,10402,10403]},{"file": 21,"line": 2641,"col": 0,"fields": [10404,10405]},{"file": 21,"line": 3032,"col": 0,"docs": " Returns a slice with the given new alignment, all other pointer attributes copied from `AttributeSource`.","fields": [10406,10407]},{"file": 22,"line": 0,"col": 0},{"file": 23,"line": 0,"col": 0},{"file": 23,"line": 1,"col": 0},{"file": 23,"line": 3,"col": 0},{"file": 24,"line": 0,"col": 0},{"file": 24,"line": 1,"col": 0},{"file": 24,"line": 2,"col": 0},{"file": 25,"line": 10,"col": 4},{"file": 25,"line": 11,"col": 4},{"file": 25,"line": 12,"col": 4},{"file": 25,"line": 14,"col": 4},{"file": 25,"line": 51,"col": 4},{"file": 25,"line": 96,"col": 4},{"file": 25,"line": 138,"col": 4},{"file": 25,"line": 143,"col": 4},{"file": 25,"line": 159,"col": 4},{"file": 25,"line": 168,"col": 4},{"file": 25,"line": 207,"col": 4},{"file": 25,"line": 218,"col": 4},{"file": 25,"line": 593,"col": 4},{"file": 25,"line": 0,"col": 0},{"file": 25,"line": 1,"col": 0},{"file": 25,"line": 2,"col": 0},{"file": 25,"line": 3,"col": 0},{"file": 25,"line": 4,"col": 0},{"file": 25,"line": 5,"col": 0},{"file": 25,"line": 6,"col": 0},{"file": 25,"line": 8,"col": 0},{"file": 25,"line": 228,"col": 0},{"file": 25,"line": 233,"col": 0},{"file": 25,"line": 238,"col": 0},{"file": 25,"line": 245,"col": 0},{"file": 25,"line": 247,"col": 0},{"file": 25,"line": 253,"col": 0},{"file": 25,"line": 260,"col": 0},{"file": 25,"line": 265,"col": 0},{"file": 25,"line": 278,"col": 0},{"file": 25,"line": 288,"col": 0},{"file": 25,"line": 348,"col": 0},{"file": 25,"line": 355,"col": 0},{"file": 35,"line": 379,"col": 4},{"file": 26,"line": 0,"col": 0},{"file": 26,"line": 1,"col": 0},{"file": 27,"line": 0,"col": 0},{"file": 27,"line": 1,"col": 0},{"file": 28,"line": 0,"col": 0},{"file": 28,"line": 1,"col": 0},{"file": 29,"line": 0,"col": 0},{"file": 29,"line": 1,"col": 0},{"file": 29,"line": 2,"col": 0},{"file": 29,"line": 4,"col": 0},{"file": 30,"line": 0,"col": 0},{"file": 30,"line": 1,"col": 0},{"file": 30,"line": 3,"col": 0},{"file": 31,"line": 0,"col": 0},{"file": 31,"line": 1,"col": 0},{"file": 32,"line": 0,"col": 0},{"file": 32,"line": 1,"col": 0},{"file": 32,"line": 3,"col": 0},{"file": 32,"line": 13,"col": 0,"fields": [10408]},{"file": 33,"line": 11,"col": 4},{"file": 33,"line": 12,"col": 4},{"file": 33,"line": 13,"col": 4},{"file": 33,"line": 14,"col": 4},{"file": 33,"line": 15,"col": 4},{"file": 33,"line": 16,"col": 4},{"file": 33,"line": 17,"col": 4},{"file": 33,"line": 19,"col": 4},{"file": 33,"line": 21,"col": 4},{"file": 33,"line": 36,"col": 4},{"file": 33,"line": 47,"col": 4},{"file": 33,"line": 53,"col": 4,"fields": [10409,10410]},{"file": 33,"line": 136,"col": 4},{"file": 33,"line": 148,"col": 4,"fields": [10411,10412]},{"file": 33,"line": 226,"col": 4,"docs": " Represents a unique ID per thread."},{"file": 33,"line": 234,"col": 4},{"file": 33,"line": 241,"col": 4,"docs": " Returns the platforms view on the number of logical CPU cores available.","fields": []},{"file": 33,"line": 246,"col": 4,"docs": " Configuration options for hints on how to spawn threads."},{"file": 33,"line": 254,"col": 4},{"file": 33,"line": 288,"col": 4,"docs": " Spawns a new thread which executes `function` using `args` and returns a handle the spawned thread. `config` can be used as hints to the platform for now to spawn and execute the `function`. The caller must eventually either call `join()` to wait for the thread to finish and free its resources or call `detach()` to excuse the caller from calling `join()` and have the thread clean up its resources on completion`.","fields": [10413,10414,10415]},{"file": 33,"line": 299,"col": 4,"docs": " Represents a kernel thread handle. May be an integer or a pointer depending on the platform."},{"file": 33,"line": 302,"col": 4,"docs": " Retrns the handle of this thread","fields": [10416]},{"file": 33,"line": 308,"col": 4,"docs": " Release the obligation of the caller to call `join()` and have the thread clean up its own resources on completion. Once called, this consumes the Thread object and invoking any other functions on it is considered undefined behavior.","fields": [10417]},{"file": 33,"line": 314,"col": 4,"docs": " Waits for the thread to complete, then deallocates any resources created on `spawn()`. Once called, this consumes the Thread object and invoking any other functions on it is considered undefined behavior.","fields": [10418]},{"file": 33,"line": 4,"col": 0},{"file": 33,"line": 5,"col": 0},{"file": 33,"line": 6,"col": 0},{"file": 33,"line": 7,"col": 0},{"file": 33,"line": 8,"col": 0},{"file": 33,"line": 9,"col": 0},{"file": 33,"line": 22,"col": 0},{"file": 33,"line": 24,"col": 0},{"file": 33,"line": 25,"col": 0},{"file": 33,"line": 319,"col": 0,"docs": " State to synchronize detachment of spawner thread to spawned thread"},{"file": 33,"line": 326,"col": 0,"docs": " Used by the Thread implementations to call the spawned function with the arguments.","fields": [10419,10420]},{"file": 33,"line": 379,"col": 0,"docs": " We can't compile error in the `Impl` switch statement as its eagerly evaluated. So instead, we compile-error on the methods themselves for platforms which don't support threads."},{"file": 33,"line": 413,"col": 0},{"file": 33,"line": 516,"col": 0},{"file": 33,"line": 670,"col": 0},{"file": 33,"line": 1004,"col": 0,"fields": [10421]},{"file": 33,"line": 1103,"col": 0,"fields": [10422,10423]},{"file": 34,"line": 3,"col": 4},{"file": 34,"line": 5,"col": 4},{"file": 34,"line": 6,"col": 4},{"file": 34,"line": 7,"col": 4},{"file": 34,"line": 15,"col": 4,"fields": [10424]},{"file": 34,"line": 26,"col": 4,"fields": [10425]},{"file": 34,"line": 0,"col": 0},{"file": 34,"line": 1,"col": 0},{"file": 35,"line": 14,"col": 4},{"file": 35,"line": 72,"col": 4},{"file": 35,"line": 73,"col": 4},{"file": 35,"line": 74,"col": 4},{"file": 35,"line": 75,"col": 4},{"file": 35,"line": 76,"col": 4},{"file": 35,"line": 79,"col": 4},{"file": 35,"line": 80,"col": 4},{"file": 35,"line": 81,"col": 4},{"file": 35,"line": 82,"col": 4},{"file": 35,"line": 83,"col": 4},{"file": 35,"line": 89,"col": 4},{"file": 35,"line": 98,"col": 4},{"file": 35,"line": 374,"col": 4},{"file": 35,"line": 0,"col": 0},{"file": 35,"line": 1,"col": 0},{"file": 35,"line": 2,"col": 0},{"file": 35,"line": 3,"col": 0},{"file": 35,"line": 4,"col": 0},{"file": 35,"line": 6,"col": 0},{"file": 35,"line": 10,"col": 0},{"file": 35,"line": 11,"col": 0},{"file": 35,"line": 12,"col": 0},{"file": 35,"line": 68,"col": 0},{"file": 35,"line": 69,"col": 0},{"file": 35,"line": 85,"col": 0},{"file": 35,"line": 86,"col": 0},{"file": 35,"line": 87,"col": 0},{"file": 35,"line": 342,"col": 0},{"file": 35,"line": 352,"col": 0},{"file": 35,"line": 363,"col": 0},{"file": 35,"line": 378,"col": 0},{"file": 36,"line": 22,"col": 4},{"file": 36,"line": 27,"col": 4},{"file": 36,"line": 39,"col": 4},{"file": 36,"line": 59,"col": 4,"docs": " Deprecated. Use `std.log` functions for logging or `std.debug.print` for \"printf debugging\"."},{"file": 36,"line": 152,"col": 4,"docs": " Returns a slice with the same pointer as addresses, with a potentially smaller len. On Windows, when first_address is not null, we ask for at least 32 stack frames, and then try to find the first address. If addresses.len is more than 32, we capture that many stack frames exactly, and then look for the first address, chopping off the irrelevant frames and shifting so that the returned addresses pointer equals the passed in addresses pointer.","fields": [10426,10427]},{"file": 36,"line": 228,"col": 4,"fields": [10428,10429]},{"file": 36,"line": 236,"col": 4,"docs": " `panicExtra` is useful when you want to print out an `@errorReturnTrace` and also print out some values.","fields": [10430,10431,10432]},{"file": 36,"line": 361,"col": 4},{"file": 36,"line": 469,"col": 4,"fields": [10433,10434,10435,10436]},{"file": 36,"line": 489,"col": 4},{"file": 36,"line": 659,"col": 4},{"file": 36,"line": 987,"col": 4},{"file": 36,"line": 1227,"col": 4},{"file": 36,"line": 1495,"col": 4,"docs": " Whether or not the current target can print useful debug information when a segfault occurs."},{"file": 36,"line": 1501,"col": 4},{"file": 36,"line": 1666,"col": 4,"fields": [10437]},{"file": 36,"line": 0,"col": 0},{"file": 36,"line": 1,"col": 0},{"file": 36,"line": 2,"col": 0},{"file": 36,"line": 3,"col": 0},{"file": 36,"line": 4,"col": 0},{"file": 36,"line": 5,"col": 0},{"file": 36,"line": 6,"col": 0},{"file": 36,"line": 7,"col": 0},{"file": 36,"line": 8,"col": 0},{"file": 36,"line": 9,"col": 0},{"file": 36,"line": 10,"col": 0},{"file": 36,"line": 11,"col": 0},{"file": 36,"line": 12,"col": 0},{"file": 36,"line": 13,"col": 0},{"file": 36,"line": 14,"col": 0},{"file": 36,"line": 15,"col": 0},{"file": 36,"line": 16,"col": 0},{"file": 36,"line": 17,"col": 0},{"file": 36,"line": 18,"col": 0},{"file": 36,"line": 19,"col": 0},{"file": 36,"line": 20,"col": 0},{"file": 36,"line": 50,"col": 0},{"file": 36,"line": 55,"col": 0},{"file": 36,"line": 75,"col": 0,"docs": " TODO multithreaded awareness"},{"file": 36,"line": 260,"col": 0,"docs": " Non-zero whenever the program triggered a panic. The counter is incremented/decremented atomically."},{"file": 36,"line": 263,"col": 0},{"file": 36,"line": 267,"col": 12,"docs": " Counts how many times the panic handler is invoked by this thread. This is used to catch and handle panics triggered by the panic handler."},{"file": 36,"line": 332,"col": 0},{"file": 36,"line": 333,"col": 0},{"file": 36,"line": 334,"col": 0},{"file": 36,"line": 335,"col": 0},{"file": 36,"line": 336,"col": 0},{"file": 36,"line": 337,"col": 0},{"file": 36,"line": 338,"col": 0},{"file": 36,"line": 561,"col": 0,"fields": [10438,10439]},{"file": 36,"line": 692,"col": 0,"docs": " This takes ownership of coff_file: users of this function should not close it themselves, even on error. TODO resources https://github.com/ziglang/zig/issues/4353 TODO it's weird to take ownership even on error, rework this code.","fields": [10440,10441]},{"file": 36,"line": 831,"col": 0,"docs": " TODO resources https://github.com/ziglang/zig/issues/4353 This takes ownership of macho_file: users of this function should not close it themselves, even on error. TODO it's weird to take ownership even on error, rework this code.","fields": [10442,10443]},{"file": 36,"line": 949,"col": 0},{"file": 36,"line": 1484,"col": 0,"docs": " TODO multithreaded awareness"},{"file": 36,"line": 1485,"col": 0},{"file": 36,"line": 1512,"col": 0},{"file": 36,"line": 1623,"col": 0,"fields": [10444]},{"file": 36,"line": 1634,"col": 0,"fields": [10445,10446,10447]},{"file": 37,"line": 9,"col": 4},{"file": 37,"line": 10,"col": 4},{"file": 37,"line": 11,"col": 4},{"file": 37,"line": 12,"col": 4},{"file": 37,"line": 13,"col": 4},{"file": 37,"line": 14,"col": 4},{"file": 37,"line": 15,"col": 4},{"file": 37,"line": 16,"col": 4},{"file": 37,"line": 17,"col": 4},{"file": 37,"line": 18,"col": 4},{"file": 37,"line": 19,"col": 4},{"file": 37,"line": 20,"col": 4},{"file": 37,"line": 21,"col": 4},{"file": 37,"line": 22,"col": 4},{"file": 37,"line": 23,"col": 4},{"file": 37,"line": 24,"col": 4},{"file": 37,"line": 25,"col": 4},{"file": 37,"line": 26,"col": 4},{"file": 37,"line": 27,"col": 4},{"file": 37,"line": 28,"col": 4},{"file": 37,"line": 29,"col": 4},{"file": 37,"line": 30,"col": 4},{"file": 37,"line": 31,"col": 4},{"file": 37,"line": 32,"col": 4},{"file": 37,"line": 33,"col": 4},{"file": 37,"line": 34,"col": 4},{"file": 37,"line": 35,"col": 4},{"file": 37,"line": 36,"col": 4},{"file": 37,"line": 37,"col": 4},{"file": 37,"line": 38,"col": 4},{"file": 37,"line": 39,"col": 4},{"file": 37,"line": 40,"col": 4},{"file": 37,"line": 41,"col": 4},{"file": 37,"line": 42,"col": 4},{"file": 37,"line": 43,"col": 4},{"file": 37,"line": 44,"col": 4},{"file": 37,"line": 45,"col": 4},{"file": 37,"line": 46,"col": 4},{"file": 37,"line": 47,"col": 4},{"file": 37,"line": 48,"col": 4},{"file": 37,"line": 49,"col": 4},{"file": 37,"line": 50,"col": 4},{"file": 37,"line": 52,"col": 4},{"file": 37,"line": 53,"col": 4},{"file": 37,"line": 54,"col": 4},{"file": 37,"line": 55,"col": 4},{"file": 37,"line": 56,"col": 4},{"file": 37,"line": 57,"col": 4},{"file": 37,"line": 58,"col": 4},{"file": 37,"line": 59,"col": 4},{"file": 37,"line": 60,"col": 4},{"file": 37,"line": 61,"col": 4},{"file": 37,"line": 62,"col": 4},{"file": 37,"line": 63,"col": 4},{"file": 37,"line": 64,"col": 4},{"file": 37,"line": 65,"col": 4},{"file": 37,"line": 66,"col": 4},{"file": 37,"line": 67,"col": 4},{"file": 37,"line": 68,"col": 4},{"file": 37,"line": 69,"col": 4},{"file": 37,"line": 70,"col": 4},{"file": 37,"line": 71,"col": 4},{"file": 37,"line": 72,"col": 4},{"file": 37,"line": 73,"col": 4},{"file": 37,"line": 74,"col": 4},{"file": 37,"line": 75,"col": 4},{"file": 37,"line": 76,"col": 4},{"file": 37,"line": 77,"col": 4},{"file": 37,"line": 78,"col": 4},{"file": 37,"line": 79,"col": 4},{"file": 37,"line": 80,"col": 4},{"file": 37,"line": 81,"col": 4},{"file": 37,"line": 82,"col": 4},{"file": 37,"line": 83,"col": 4},{"file": 37,"line": 84,"col": 4},{"file": 37,"line": 85,"col": 4},{"file": 37,"line": 86,"col": 4},{"file": 37,"line": 87,"col": 4},{"file": 37,"line": 88,"col": 4},{"file": 37,"line": 89,"col": 4},{"file": 37,"line": 90,"col": 4},{"file": 37,"line": 91,"col": 4},{"file": 37,"line": 92,"col": 4},{"file": 37,"line": 94,"col": 4},{"file": 37,"line": 95,"col": 4},{"file": 37,"line": 96,"col": 4},{"file": 37,"line": 97,"col": 4},{"file": 37,"line": 98,"col": 4},{"file": 37,"line": 99,"col": 4},{"file": 37,"line": 100,"col": 4},{"file": 37,"line": 101,"col": 4},{"file": 37,"line": 102,"col": 4},{"file": 37,"line": 103,"col": 4},{"file": 37,"line": 105,"col": 4},{"file": 37,"line": 106,"col": 4},{"file": 37,"line": 107,"col": 4},{"file": 37,"line": 108,"col": 4},{"file": 37,"line": 110,"col": 4},{"file": 37,"line": 111,"col": 4},{"file": 37,"line": 112,"col": 4},{"file": 37,"line": 113,"col": 4},{"file": 37,"line": 114,"col": 4},{"file": 37,"line": 115,"col": 4},{"file": 37,"line": 116,"col": 4},{"file": 37,"line": 117,"col": 4},{"file": 37,"line": 118,"col": 4},{"file": 37,"line": 119,"col": 4},{"file": 37,"line": 120,"col": 4},{"file": 37,"line": 121,"col": 4},{"file": 37,"line": 122,"col": 4},{"file": 37,"line": 123,"col": 4},{"file": 37,"line": 125,"col": 4},{"file": 37,"line": 127,"col": 4},{"file": 37,"line": 128,"col": 4},{"file": 37,"line": 130,"col": 4},{"file": 37,"line": 131,"col": 4},{"file": 37,"line": 133,"col": 4},{"file": 37,"line": 134,"col": 4},{"file": 37,"line": 136,"col": 4},{"file": 37,"line": 137,"col": 4},{"file": 37,"line": 139,"col": 4},{"file": 37,"line": 140,"col": 4},{"file": 37,"line": 141,"col": 4},{"file": 37,"line": 143,"col": 4},{"file": 37,"line": 144,"col": 4},{"file": 37,"line": 146,"col": 4},{"file": 37,"line": 147,"col": 4},{"file": 37,"line": 148,"col": 4},{"file": 37,"line": 149,"col": 4},{"file": 37,"line": 150,"col": 4},{"file": 37,"line": 151,"col": 4},{"file": 37,"line": 152,"col": 4},{"file": 37,"line": 153,"col": 4},{"file": 37,"line": 154,"col": 4},{"file": 37,"line": 155,"col": 4},{"file": 37,"line": 156,"col": 4},{"file": 37,"line": 157,"col": 4},{"file": 37,"line": 158,"col": 4},{"file": 37,"line": 159,"col": 4},{"file": 37,"line": 160,"col": 4},{"file": 37,"line": 161,"col": 4},{"file": 37,"line": 162,"col": 4},{"file": 37,"line": 163,"col": 4},{"file": 37,"line": 164,"col": 4},{"file": 37,"line": 166,"col": 4},{"file": 37,"line": 167,"col": 4},{"file": 37,"line": 169,"col": 4},{"file": 37,"line": 170,"col": 4},{"file": 37,"line": 172,"col": 4},{"file": 37,"line": 174,"col": 4},{"file": 37,"line": 176,"col": 4},{"file": 37,"line": 178,"col": 4},{"file": 37,"line": 180,"col": 4},{"file": 37,"line": 181,"col": 4},{"file": 37,"line": 182,"col": 4},{"file": 37,"line": 183,"col": 4},{"file": 37,"line": 184,"col": 4},{"file": 37,"line": 185,"col": 4},{"file": 37,"line": 186,"col": 4},{"file": 37,"line": 187,"col": 4},{"file": 37,"line": 188,"col": 4},{"file": 37,"line": 189,"col": 4},{"file": 37,"line": 190,"col": 4},{"file": 37,"line": 191,"col": 4},{"file": 37,"line": 193,"col": 4},{"file": 37,"line": 195,"col": 4},{"file": 37,"line": 196,"col": 4},{"file": 37,"line": 197,"col": 4},{"file": 37,"line": 199,"col": 4},{"file": 37,"line": 201,"col": 4},{"file": 37,"line": 202,"col": 4},{"file": 37,"line": 203,"col": 4},{"file": 37,"line": 205,"col": 4},{"file": 37,"line": 206,"col": 4},{"file": 37,"line": 208,"col": 4},{"file": 37,"line": 209,"col": 4},{"file": 37,"line": 210,"col": 4},{"file": 37,"line": 212,"col": 4},{"file": 37,"line": 213,"col": 4},{"file": 37,"line": 214,"col": 4},{"file": 37,"line": 215,"col": 4},{"file": 37,"line": 216,"col": 4},{"file": 37,"line": 218,"col": 4},{"file": 37,"line": 219,"col": 4},{"file": 37,"line": 221,"col": 4},{"file": 37,"line": 223,"col": 4},{"file": 37,"line": 224,"col": 4},{"file": 37,"line": 225,"col": 4},{"file": 37,"line": 226,"col": 4},{"file": 37,"line": 227,"col": 4},{"file": 37,"line": 228,"col": 4},{"file": 37,"line": 229,"col": 4},{"file": 37,"line": 230,"col": 4},{"file": 37,"line": 231,"col": 4},{"file": 37,"line": 232,"col": 4},{"file": 37,"line": 233,"col": 4},{"file": 37,"line": 234,"col": 4},{"file": 37,"line": 235,"col": 4},{"file": 37,"line": 236,"col": 4},{"file": 37,"line": 237,"col": 4},{"file": 37,"line": 238,"col": 4},{"file": 37,"line": 239,"col": 4},{"file": 37,"line": 240,"col": 4},{"file": 37,"line": 241,"col": 4},{"file": 37,"line": 242,"col": 4},{"file": 37,"line": 244,"col": 4},{"file": 37,"line": 245,"col": 4},{"file": 37,"line": 246,"col": 4},{"file": 37,"line": 247,"col": 4},{"file": 37,"line": 248,"col": 4},{"file": 37,"line": 249,"col": 4},{"file": 37,"line": 250,"col": 4},{"file": 37,"line": 251,"col": 4},{"file": 37,"line": 252,"col": 4},{"file": 37,"line": 253,"col": 4},{"file": 37,"line": 254,"col": 4},{"file": 37,"line": 255,"col": 4},{"file": 37,"line": 256,"col": 4},{"file": 37,"line": 257,"col": 4},{"file": 37,"line": 258,"col": 4},{"file": 37,"line": 259,"col": 4},{"file": 37,"line": 260,"col": 4},{"file": 37,"line": 261,"col": 4},{"file": 37,"line": 262,"col": 4},{"file": 37,"line": 263,"col": 4},{"file": 37,"line": 264,"col": 4},{"file": 37,"line": 265,"col": 4},{"file": 37,"line": 266,"col": 4},{"file": 37,"line": 268,"col": 4},{"file": 37,"line": 269,"col": 4},{"file": 37,"line": 270,"col": 4},{"file": 37,"line": 271,"col": 4},{"file": 37,"line": 272,"col": 4},{"file": 37,"line": 273,"col": 4},{"file": 37,"line": 274,"col": 4},{"file": 37,"line": 275,"col": 4},{"file": 37,"line": 276,"col": 4},{"file": 37,"line": 278,"col": 4},{"file": 37,"line": 280,"col": 4},{"file": 37,"line": 281,"col": 4},{"file": 37,"line": 282,"col": 4},{"file": 37,"line": 283,"col": 4},{"file": 37,"line": 284,"col": 4},{"file": 37,"line": 285,"col": 4},{"file": 37,"line": 286,"col": 4},{"file": 37,"line": 287,"col": 4},{"file": 37,"line": 288,"col": 4},{"file": 37,"line": 289,"col": 4},{"file": 37,"line": 290,"col": 4},{"file": 37,"line": 291,"col": 4},{"file": 37,"line": 292,"col": 4},{"file": 37,"line": 294,"col": 4},{"file": 37,"line": 296,"col": 4},{"file": 37,"line": 298,"col": 4},{"file": 37,"line": 299,"col": 4},{"file": 37,"line": 301,"col": 4},{"file": 37,"line": 302,"col": 4},{"file": 37,"line": 304,"col": 4},{"file": 37,"line": 305,"col": 4},{"file": 37,"line": 308,"col": 4,"docs": " File types"},{"file": 37,"line": 332,"col": 4,"docs": " All integers are native endian."},{"file": 37,"line": 406,"col": 4,"fields": [10448]},{"file": 37,"line": 456,"col": 4,"fields": [10449]},{"file": 37,"line": 508,"col": 4,"fields": [10450,10451,10452,10453]},{"file": 37,"line": 520,"col": 4,"fields": [10454,10455,10456]},{"file": 37,"line": 528,"col": 4},{"file": 37,"line": 530,"col": 4},{"file": 37,"line": 531,"col": 4},{"file": 37,"line": 532,"col": 4},{"file": 37,"line": 533,"col": 4},{"file": 37,"line": 534,"col": 4},{"file": 37,"line": 536,"col": 4},{"file": 37,"line": 537,"col": 4},{"file": 37,"line": 538,"col": 4},{"file": 37,"line": 539,"col": 4},{"file": 37,"line": 540,"col": 4},{"file": 37,"line": 542,"col": 4},{"file": 37,"line": 544,"col": 4},{"file": 37,"line": 545,"col": 4},{"file": 37,"line": 546,"col": 4},{"file": 37,"line": 547,"col": 4},{"file": 37,"line": 548,"col": 4},{"file": 37,"line": 549,"col": 4},{"file": 37,"line": 550,"col": 4},{"file": 37,"line": 551,"col": 4},{"file": 37,"line": 552,"col": 4},{"file": 37,"line": 553,"col": 4},{"file": 37,"line": 554,"col": 4},{"file": 37,"line": 555,"col": 4},{"file": 37,"line": 556,"col": 4},{"file": 37,"line": 557,"col": 4},{"file": 37,"line": 558,"col": 4},{"file": 37,"line": 559,"col": 4},{"file": 37,"line": 560,"col": 4},{"file": 37,"line": 561,"col": 4},{"file": 37,"line": 562,"col": 4},{"file": 37,"line": 578,"col": 4},{"file": 37,"line": 594,"col": 4},{"file": 37,"line": 604,"col": 4},{"file": 37,"line": 614,"col": 4},{"file": 37,"line": 626,"col": 4},{"file": 37,"line": 638,"col": 4},{"file": 37,"line": 643,"col": 4},{"file": 37,"line": 649,"col": 4},{"file": 37,"line": 657,"col": 4},{"file": 37,"line": 665,"col": 4},{"file": 37,"line": 669,"col": 4},{"file": 37,"line": 673,"col": 4},{"file": 37,"line": 684,"col": 4},{"file": 37,"line": 695,"col": 4},{"file": 37,"line": 707,"col": 4},{"file": 37,"line": 719,"col": 4},{"file": 37,"line": 723,"col": 4},{"file": 37,"line": 727,"col": 4},{"file": 37,"line": 736,"col": 4},{"file": 37,"line": 745,"col": 4},{"file": 37,"line": 749,"col": 4},{"file": 37,"line": 753,"col": 4},{"file": 37,"line": 760,"col": 4},{"file": 37,"line": 767,"col": 4},{"file": 37,"line": 774,"col": 4},{"file": 37,"line": 781,"col": 4},{"file": 37,"line": 787,"col": 4},{"file": 37,"line": 793,"col": 4},{"file": 37,"line": 798,"col": 4},{"file": 37,"line": 803,"col": 4},{"file": 37,"line": 810,"col": 4},{"file": 37,"line": 817,"col": 4},{"file": 37,"line": 827,"col": 4},{"file": 37,"line": 832,"col": 4},{"file": 37,"line": 838,"col": 4},{"file": 37,"line": 842,"col": 4},{"file": 37,"line": 849,"col": 4},{"file": 37,"line": 856,"col": 4},{"file": 37,"line": 857,"col": 4},{"file": 37,"line": 882,"col": 4},{"file": 37,"line": 887,"col": 4},{"file": 37,"line": 892,"col": 4},{"file": 37,"line": 897,"col": 4},{"file": 37,"line": 902,"col": 4},{"file": 37,"line": 907,"col": 4},{"file": 37,"line": 912,"col": 4},{"file": 37,"line": 917,"col": 4},{"file": 37,"line": 922,"col": 4},{"file": 37,"line": 927,"col": 4},{"file": 37,"line": 932,"col": 4},{"file": 37,"line": 937,"col": 4},{"file": 37,"line": 947,"col": 4,"docs": " Machine architectures See current registered ELF machine architectures at:    http://www.uxsglobal.com/developers/gabi/latest/ch4.eheader.html The underscore prefix is because many of these start with numbers."},{"file": 37,"line": 1486,"col": 4,"docs": " Section data should be writable during execution."},{"file": 37,"line": 1489,"col": 4,"docs": " Section occupies memory during program execution."},{"file": 37,"line": 1492,"col": 4,"docs": " Section contains executable machine instructions."},{"file": 37,"line": 1495,"col": 4,"docs": " The data in this section may be merged."},{"file": 37,"line": 1498,"col": 4,"docs": " The data in this section is null-terminated strings."},{"file": 37,"line": 1501,"col": 4,"docs": " A field in this section holds a section header table index."},{"file": 37,"line": 1504,"col": 4,"docs": " Adds special ordering requirements for link editors."},{"file": 37,"line": 1508,"col": 4,"docs": " This section requires special OS-specific processing to avoid incorrect behavior."},{"file": 37,"line": 1511,"col": 4,"docs": " This section is a member of a section group."},{"file": 37,"line": 1514,"col": 4,"docs": " This section holds Thread-Local Storage."},{"file": 37,"line": 1517,"col": 4,"docs": " Identifies a section containing compressed data."},{"file": 37,"line": 1520,"col": 4,"docs": " This section is excluded from the final executable or shared library."},{"file": 37,"line": 1523,"col": 4,"docs": " Start of target-specific flags."},{"file": 37,"line": 1526,"col": 4,"docs": " Bits indicating processor-specific flags."},{"file": 37,"line": 1531,"col": 4,"docs": " All sections with the \"d\" flag are grouped together by the linker to form the data section and the dp register is set to the start of the section by the boot code."},{"file": 37,"line": 1536,"col": 4,"docs": " All sections with the \"c\" flag are grouped together by the linker to form the constant pool and the cp register is set to the start of the constant pool by the boot code."},{"file": 37,"line": 1545,"col": 4,"docs": " If an object file section does not have this flag set, then it may not hold more than 2GB and can be freely referred to in objects using smaller code models. Otherwise, only objects using larger code models can refer to them. For example, a medium code model object can refer to data in a section that sets this flag besides being able to refer to data in a section that does not set it; likewise, a small code model object can refer only to code in a section that does not set this flag."},{"file": 37,"line": 1549,"col": 4,"docs": " All sections with the GPREL flag are grouped into a global data area for faster accesses"},{"file": 37,"line": 1553,"col": 4,"docs": " Section contains text/data which may be replicated in other sections. Linker must retain only one copy."},{"file": 37,"line": 1556,"col": 4,"docs": " Linker must generate implicit hidden weak names."},{"file": 37,"line": 1559,"col": 4,"docs": " Section data local to process."},{"file": 37,"line": 1562,"col": 4,"docs": " Do not strip this section."},{"file": 37,"line": 1565,"col": 4,"docs": " Section must be part of global data area."},{"file": 37,"line": 1568,"col": 4,"docs": " This section should be merged."},{"file": 37,"line": 1571,"col": 4,"docs": " Address size to be inferred from section entry size."},{"file": 37,"line": 1574,"col": 4,"docs": " Section data is string data by default."},{"file": 37,"line": 1577,"col": 4,"docs": " Make code section unreadable when in execute-only mode"},{"file": 37,"line": 1580,"col": 4,"docs": " Execute"},{"file": 37,"line": 1583,"col": 4,"docs": " Write"},{"file": 37,"line": 1586,"col": 4,"docs": " Read"},{"file": 37,"line": 1589,"col": 4,"docs": " Bits for operating system-specific semantics."},{"file": 37,"line": 1592,"col": 4,"docs": " Bits for processor-specific semantics."},{"file": 37,"line": 1595,"col": 4},{"file": 37,"line": 1596,"col": 4},{"file": 37,"line": 1597,"col": 4},{"file": 37,"line": 1598,"col": 4},{"file": 37,"line": 1599,"col": 4},{"file": 37,"line": 1600,"col": 4},{"file": 37,"line": 1601,"col": 4},{"file": 37,"line": 1602,"col": 4},{"file": 37,"line": 1606,"col": 4,"docs": " AMD x86-64 relocations. No reloc"},{"file": 37,"line": 1608,"col": 4,"docs": " Direct 64 bit"},{"file": 37,"line": 1610,"col": 4,"docs": " PC relative 32 bit signed"},{"file": 37,"line": 1612,"col": 4,"docs": " 32 bit GOT entry"},{"file": 37,"line": 1614,"col": 4,"docs": " 32 bit PLT address"},{"file": 37,"line": 1616,"col": 4,"docs": " Copy symbol at runtime"},{"file": 37,"line": 1618,"col": 4,"docs": " Create GOT entry"},{"file": 37,"line": 1620,"col": 4,"docs": " Create PLT entry"},{"file": 37,"line": 1622,"col": 4,"docs": " Adjust by program base"},{"file": 37,"line": 1624,"col": 4,"docs": " 32 bit signed PC relative offset to GOT"},{"file": 37,"line": 1626,"col": 4,"docs": " Direct 32 bit zero extended"},{"file": 37,"line": 1628,"col": 4,"docs": " Direct 32 bit sign extended"},{"file": 37,"line": 1630,"col": 4,"docs": " Direct 16 bit zero extended"},{"file": 37,"line": 1632,"col": 4,"docs": " 16 bit sign extended pc relative"},{"file": 37,"line": 1634,"col": 4,"docs": " Direct 8 bit sign extended"},{"file": 37,"line": 1636,"col": 4,"docs": " 8 bit sign extended pc relative"},{"file": 37,"line": 1638,"col": 4,"docs": " ID of module containing symbol"},{"file": 37,"line": 1640,"col": 4,"docs": " Offset in module's TLS block"},{"file": 37,"line": 1642,"col": 4,"docs": " Offset in initial TLS block"},{"file": 37,"line": 1644,"col": 4,"docs": " 32 bit signed PC relative offset to two GOT entries for GD symbol"},{"file": 37,"line": 1646,"col": 4,"docs": " 32 bit signed PC relative offset to two GOT entries for LD symbol"},{"file": 37,"line": 1648,"col": 4,"docs": " Offset in TLS block"},{"file": 37,"line": 1650,"col": 4,"docs": " 32 bit signed PC relative offset to GOT entry for IE symbol"},{"file": 37,"line": 1652,"col": 4,"docs": " Offset in initial TLS block"},{"file": 37,"line": 1654,"col": 4,"docs": " PC relative 64 bit"},{"file": 37,"line": 1656,"col": 4,"docs": " 64 bit offset to GOT"},{"file": 37,"line": 1658,"col": 4,"docs": " 32 bit signed pc relative offset to GOT"},{"file": 37,"line": 1660,"col": 4,"docs": " 64 bit GOT entry offset"},{"file": 37,"line": 1662,"col": 4,"docs": " 64 bit PC relative offset to GOT entry"},{"file": 37,"line": 1664,"col": 4,"docs": " 64 bit PC relative offset to GOT"},{"file": 37,"line": 1666,"col": 4,"docs": " Like GOT64, says PLT entry needed"},{"file": 37,"line": 1668,"col": 4,"docs": " 64-bit GOT relative offset to PLT entry"},{"file": 37,"line": 1670,"col": 4,"docs": " Size of symbol plus 32-bit addend"},{"file": 37,"line": 1672,"col": 4,"docs": " Size of symbol plus 64-bit addend"},{"file": 37,"line": 1674,"col": 4,"docs": " GOT offset for TLS descriptor"},{"file": 37,"line": 1676,"col": 4,"docs": " Marker for call through TLS descriptor"},{"file": 37,"line": 1678,"col": 4,"docs": " TLS descriptor"},{"file": 37,"line": 1680,"col": 4,"docs": " Adjust indirectly by program base"},{"file": 37,"line": 1682,"col": 4,"docs": " 64-bit adjust by program base"},{"file": 37,"line": 1686,"col": 4,"docs": " 39 Reserved was R_X86_64_PC32_BND  40 Reserved was R_X86_64_PLT32_BND Load from 32 bit signed pc relative offset to GOT entry without REX prefix, relaxable"},{"file": 37,"line": 1688,"col": 4,"docs": " Load from 32 bit signed PC relative offset to GOT entry with REX prefix, relaxable"},{"file": 37,"line": 1689,"col": 4},{"file": 37,"line": 0,"col": 0},{"file": 37,"line": 1,"col": 0},{"file": 37,"line": 2,"col": 0},{"file": 37,"line": 3,"col": 0},{"file": 37,"line": 4,"col": 0},{"file": 37,"line": 5,"col": 0},{"file": 37,"line": 6,"col": 0},{"file": 37,"line": 7,"col": 0},{"file": 38,"line": 0,"col": 4},{"file": 38,"line": 1,"col": 4},{"file": 38,"line": 2,"col": 4},{"file": 38,"line": 3,"col": 4},{"file": 38,"line": 4,"col": 4},{"file": 38,"line": 5,"col": 4},{"file": 38,"line": 6,"col": 4},{"file": 38,"line": 7,"col": 4},{"file": 38,"line": 8,"col": 4},{"file": 38,"line": 9,"col": 4},{"file": 39,"line": 11,"col": 4},{"file": 39,"line": 13,"col": 4},{"file": 39,"line": 19,"col": 4},{"file": 39,"line": 365,"col": 4,"fields": [10457,10458,10459]},{"file": 39,"line": 734,"col": 4},{"file": 39,"line": 764,"col": 4,"docs": " Return a Formatter for a []const u8 where every byte is formatted as a pair of lowercase hexadecimal digits.","fields": [10460]},{"file": 39,"line": 770,"col": 4,"docs": " Return a Formatter for a []const u8 where every byte is formatted as pair of uppercase hexadecimal digits.","fields": [10461]},{"file": 39,"line": 810,"col": 4,"docs": " Return a Formatter for a []const u8 where every non-printable ASCII character is escaped as \\xNN, where NN is the character in lowercase hexadecimal notation.","fields": [10462]},{"file": 39,"line": 817,"col": 4,"docs": " Return a Formatter for a []const u8 where every non-printable ASCII character is escaped as \\xNN, where NN is the character in uppercase hexadecimal notation.","fields": [10463]},{"file": 39,"line": 872,"col": 4,"docs": " Return a Formatter for a u64 value representing a file size. This formatter represents the number as multiple of 1000 and uses the SI measurement units (kB, MB, GB, ...).","fields": [10464]},{"file": 39,"line": 879,"col": 4,"docs": " Return a Formatter for a u64 value representing a file size. This formatter represents the number as multiple of 1024 and uses the IEC measurement units (KiB, MiB, GiB, ...).","fields": [10465]},{"file": 39,"line": 908,"col": 4,"fields": [10466,10467,10468]},{"file": 39,"line": 917,"col": 4,"fields": [10469,10470,10471]},{"file": 39,"line": 971,"col": 4,"docs": " Print a float in scientific notation to the specified precision. Null uses full precision. It should be the case that every full precision, printed value can be re-parsed back to the same type unambiguously.","fields": [10472,10473,10474]},{"file": 39,"line": 1062,"col": 4,"fields": [10475,10476,10477]},{"file": 39,"line": 1173,"col": 4,"docs": " Print a float of the format x.yyyyy where the number of y is specified by the precision argument. By default floats are printed at full precision (no rounding).","fields": [10478,10479,10480]},{"file": 39,"line": 1364,"col": 4,"fields": [10481,10482,10483,10484,10485]},{"file": 39,"line": 1421,"col": 4,"docs": " Return a Formatter for number of nanoseconds according to its magnitude: [#y][#w][#d][#h][#m]#[.###][n|u|m]s","fields": [10486]},{"file": 39,"line": 1474,"col": 4,"docs": " Return a Formatter for number of nanoseconds according to its signed magnitude: [#y][#w][#d][#h][#m]#[.###][n|u|m]s","fields": [10487]},{"file": 39,"line": 1544,"col": 4},{"file": 39,"line": 1563,"col": 4,"docs": " Creates a Formatter type from a format function. Wrapping data in Formatter(func) causes the data to be formatted using the given function `func`.  `func` must be of the following form:     fn formatExample(         data: T,         comptime fmt: []const u8,         options: std.fmt.FormatOptions,         writer: anytype,     ) !void;","fields": [10488]},{"file": 39,"line": 1711,"col": 4,"docs": " Parses the string `buf` as  unsigned representation in the specified radix of an integral value of type `T`. When `radix` is zero the string prefix is examined to detect the true radix:  * A prefix of \"0b\" implies radix=2,  * A prefix of \"0o\" implies radix=8,  * A prefix of \"0x\" implies radix=16,  * Otherwise radix=10 is assumed. Ignores '_' character in `buf`. See also `parseInt`.","fields": [10489,10490,10491]},{"file": 39,"line": 1751,"col": 4},{"file": 39,"line": 1752,"col": 4},{"file": 39,"line": 1753,"col": 4},{"file": 39,"line": 1781,"col": 4},{"file": 39,"line": 1791,"col": 4,"fields": [10492,10493,10494]},{"file": 39,"line": 1803,"col": 4},{"file": 39,"line": 1817,"col": 4,"docs": " Deprecated, use allocPrintZ"},{"file": 39,"line": 1819,"col": 4,"fields": [10495,10496,10497]},{"file": 39,"line": 1845,"col": 4,"fields": [10498,10499,10500,10501,10502]},{"file": 39,"line": 1849,"col": 4,"fields": [10503,10504]},{"file": 39,"line": 2369,"col": 4},{"file": 39,"line": 2370,"col": 4},{"file": 39,"line": 2375,"col": 4,"docs": " Decodes the sequence of bytes represented by the specified string of hexadecimal characters. Returns a slice of the output buffer containing the decoded bytes.","fields": [10505,10506]},{"file": 39,"line": 0,"col": 0},{"file": 39,"line": 1,"col": 0},{"file": 39,"line": 2,"col": 0},{"file": 39,"line": 3,"col": 0},{"file": 39,"line": 4,"col": 0},{"file": 39,"line": 5,"col": 0},{"file": 39,"line": 6,"col": 0},{"file": 39,"line": 7,"col": 0},{"file": 39,"line": 8,"col": 0},{"file": 39,"line": 9,"col": 0},{"file": 39,"line": 392,"col": 0},{"file": 39,"line": 394,"col": 0,"fields": [10507]},{"file": 39,"line": 702,"col": 0,"fields": [10508,10509,10510,10511]},{"file": 39,"line": 736,"col": 0,"fields": [10512]},{"file": 39,"line": 759,"col": 0},{"file": 39,"line": 760,"col": 0},{"file": 39,"line": 774,"col": 0,"fields": [10513]},{"file": 39,"line": 804,"col": 0},{"file": 39,"line": 805,"col": 0},{"file": 39,"line": 821,"col": 0,"fields": [10514]},{"file": 39,"line": 866,"col": 0},{"file": 39,"line": 867,"col": 0},{"file": 39,"line": 1370,"col": 0,"fields": [10515,10516,10517,10518]},{"file": 39,"line": 1463,"col": 0,"fields": [10519,10520,10521,10522]},{"file": 40,"line": 13,"col": 4},{"file": 40,"line": 14,"col": 4},{"file": 40,"line": 15,"col": 4},{"file": 40,"line": 19,"col": 4},{"file": 40,"line": 20,"col": 4},{"file": 40,"line": 21,"col": 4},{"file": 40,"line": 22,"col": 4},{"file": 40,"line": 24,"col": 4},{"file": 40,"line": 25,"col": 4},{"file": 40,"line": 27,"col": 4},{"file": 40,"line": 36,"col": 4,"docs": " This represents the maximum size of a UTF-8 encoded file path that the operating system will accept. Paths, including those returned from file system operations, may be longer than this length, but such paths cannot be successfully passed back in other file system operations. However, all path components returned by file system operations are assumed to fit into a UTF-8 encoded array of this length. The byte count includes room for a null sentinel byte."},{"file": 40,"line": 51,"col": 4},{"file": 40,"line": 54,"col": 4,"docs": " Base64 encoder, replacing the standard `+/` with `-_` so that it can be used in a file name on any filesystem."},{"file": 40,"line": 57,"col": 4,"docs": " Base64 decoder, replacing the standard `+/` with `-_` so that it can be used in a file name on any filesystem."},{"file": 40,"line": 61,"col": 4,"docs": " Whether or not async file system syscalls need a dedicated thread because the operating system does not support non-blocking I/O on the file system."},{"file": 40,"line": 67,"col": 4,"docs": " TODO remove the allocator requirement from this API","fields": [10523,10524,10525]},{"file": 40,"line": 95,"col": 4},{"file": 40,"line": 100,"col": 4},{"file": 40,"line": 108,"col": 4,"docs": " Same as `Dir.updateFile`, except asserts that both `source_path` and `dest_path` are absolute. See `Dir.updateFile` for a function that operates on both absolute and relative paths.","fields": [10526,10527,10528]},{"file": 40,"line": 122,"col": 4,"docs": " Same as `Dir.copyFile`, except asserts that both `source_path` and `dest_path` are absolute. See `Dir.copyFile` for a function that operates on both absolute and relative paths.","fields": [10529,10530,10531]},{"file": 40,"line": 130,"col": 4,"docs": " TODO update this API to avoid a getrandom syscall for every operation."},{"file": 40,"line": 212,"col": 4,"docs": " Create a new directory, based on an absolute path. Asserts that the path is absolute. See `Dir.makeDir` for a function that operates on both absolute and relative paths.","fields": [10532]},{"file": 40,"line": 218,"col": 4,"docs": " Same as `makeDirAbsolute` except the parameter is a null-terminated UTF8-encoded string.","fields": [10533]},{"file": 40,"line": 224,"col": 4,"docs": " Same as `makeDirAbsolute` except the parameter is a null-terminated WTF-16 encoded string.","fields": [10534]},{"file": 40,"line": 229,"col": 4},{"file": 40,"line": 230,"col": 4},{"file": 40,"line": 231,"col": 4},{"file": 40,"line": 234,"col": 4,"docs": " Same as `Dir.deleteDir` except the path is absolute.","fields": [10535]},{"file": 40,"line": 240,"col": 4,"docs": " Same as `deleteDirAbsolute` except the path parameter is null-terminated.","fields": [10536]},{"file": 40,"line": 246,"col": 4,"docs": " Same as `deleteDirAbsolute` except the path parameter is WTF-16 and target OS is assumed Windows.","fields": [10537]},{"file": 40,"line": 251,"col": 4},{"file": 40,"line": 254,"col": 4,"docs": " Same as `Dir.rename` except the paths are absolute.","fields": [10538,10539]},{"file": 40,"line": 261,"col": 4,"docs": " Same as `renameAbsolute` except the path parameters are null-terminated.","fields": [10540,10541]},{"file": 40,"line": 268,"col": 4,"docs": " Same as `renameAbsolute` except the path parameters are WTF-16 and target OS is assumed Windows.","fields": [10542,10543]},{"file": 40,"line": 275,"col": 4,"docs": " Same as `Dir.rename`, except `new_sub_path` is relative to `new_dir`","fields": [10544,10545,10546,10547]},{"file": 40,"line": 280,"col": 4,"docs": " Same as `rename` except the parameters are null-terminated.","fields": [10548,10549,10550,10551]},{"file": 40,"line": 286,"col": 4,"docs": " Same as `rename` except the parameters are UTF16LE, NT prefixed. This function is Windows-only.","fields": [10552,10553,10554,10555]},{"file": 40,"line": 290,"col": 4},{"file": 40,"line": 2241,"col": 4,"docs": " Opens a directory at the given path. The directory is a system resource that remains open until `close` is called on the result. See `openDirAbsoluteZ` for a function that accepts a null-terminated path. Asserts that the path parameter has no null bytes.","fields": [10556,10557]},{"file": 40,"line": 2250,"col": 4,"docs": " Same as `openDirAbsolute` but the path parameter is null-terminated.","fields": [10558,10559]},{"file": 40,"line": 2258,"col": 4,"docs": " Same as `openDirAbsolute` but the path parameter is null-terminated.","fields": [10560,10561]},{"file": 40,"line": 2272,"col": 4,"docs": " Opens a file for reading or writing, without attempting to create a new file, based on an absolute path. Call `File.close` to release the resource. Asserts that the path is absolute. See `Dir.openFile` for a function that operates on both absolute and relative paths. Asserts that the path parameter has no null bytes. See `openFileAbsoluteZ` for a function that accepts a null-terminated path.","fields": [10562,10563]},{"file": 40,"line": 2277,"col": 4},{"file": 40,"line": 2286,"col": 4,"docs": " Same as `openFileAbsolute` but the path parameter is WTF-16 encoded.","fields": [10564,10565]},{"file": 40,"line": 2297,"col": 4,"docs": " Test accessing `path`. `path` is UTF8-encoded. Be careful of Time-Of-Check-Time-Of-Use race conditions when using this function. For example, instead of testing if a file exists and then opening it, just open it and handle the error for file not found. See `accessAbsoluteZ` for a function that accepts a null-terminated path.","fields": [10566,10567]},{"file": 40,"line": 2305,"col": 4,"docs": " Same as `accessAbsolute` but the path parameter is null-terminated.","fields": [10568,10569]},{"file": 40,"line": 2313,"col": 4,"docs": " Same as `accessAbsolute` but the path parameter is WTF-16 encoded.","fields": [10570,10571]},{"file": 40,"line": 2327,"col": 4,"docs": " Creates, opens, or overwrites a file with write access, based on an absolute path. Call `File.close` to release the resource. Asserts that the path is absolute. See `Dir.createFile` for a function that operates on both absolute and relative paths. Asserts that the path parameter has no null bytes. See `createFileAbsoluteC` for a function that accepts a null-terminated path.","fields": [10572,10573]},{"file": 40,"line": 2332,"col": 4},{"file": 40,"line": 2335,"col": 4,"docs": " Same as `createFileAbsolute` but the path parameter is null-terminated.","fields": [10574,10575]},{"file": 40,"line": 2341,"col": 4,"docs": " Same as `createFileAbsolute` but the path parameter is WTF-16 encoded.","fields": [10576,10577]},{"file": 40,"line": 2350,"col": 4,"docs": " Delete a file name and possibly the file it refers to, based on an absolute path. Asserts that the path is absolute. See `Dir.deleteFile` for a function that operates on both absolute and relative paths. Asserts that the path parameter has no null bytes.","fields": [10578]},{"file": 40,"line": 2355,"col": 4},{"file": 40,"line": 2358,"col": 4,"docs": " Same as `deleteFileAbsolute` except the parameter is null-terminated.","fields": [10579]},{"file": 40,"line": 2364,"col": 4,"docs": " Same as `deleteFileAbsolute` except the parameter is WTF-16 encoded.","fields": [10580]},{"file": 40,"line": 2374,"col": 4,"docs": " Removes a symlink, file, or directory. This is equivalent to `Dir.deleteTree` with the base directory. Asserts that the path is absolute. See `Dir.deleteTree` for a function that operates on both absolute and relative paths. Asserts that the path parameter has no null bytes.","fields": [10581]},{"file": 40,"line": 2389,"col": 4,"docs": " Same as `Dir.readLink`, except it asserts the path is absolute.","fields": [10582,10583]},{"file": 40,"line": 2396,"col": 4,"docs": " Windows-only. Same as `readlinkW`, except the path parameter is null-terminated, WTF16 encoded.","fields": [10584,10585]},{"file": 40,"line": 2402,"col": 4,"docs": " Same as `readLink`, except the path parameter is null-terminated.","fields": [10586,10587]},{"file": 40,"line": 2407,"col": 4},{"file": 40,"line": 2408,"col": 4},{"file": 40,"line": 2414,"col": 4,"docs": " Use with `Dir.symLink` and `symLinkAbsolute` to specify whether the symlink will point to a file or a directory. This value is ignored on all hosts except Windows where creating symlinks to different resource types, requires different flags. By default, `symLinkAbsolute` is assumed to point to a file."},{"file": 40,"line": 2423,"col": 4,"docs": " Creates a symbolic link named `sym_link_path` which contains the string `target_path`. A symbolic link (also known as a soft link) may point to an existing file or to a nonexistent one; the latter case is known as a dangling link. If `sym_link_path` exists, it will not be overwritten. See also `symLinkAbsoluteZ` and `symLinkAbsoluteW`.","fields": [10588,10589,10590]},{"file": 40,"line": 2441,"col": 4,"docs": " Windows-only. Same as `symLinkAbsolute` except the parameters are null-terminated, WTF16 encoded. Note that this function will by default try creating a symbolic link to a file. If you would like to create a symbolic link to a directory, specify this with `SymLinkFlags{ .is_directory = true }`. See also `symLinkAbsolute`, `symLinkAbsoluteZ`.","fields": [10591,10592,10593]},{"file": 40,"line": 2449,"col": 4,"docs": " Same as `symLinkAbsolute` except the parameters are null-terminated pointers. See also `symLinkAbsolute`.","fields": [10594,10595,10596]},{"file": 40,"line": 2460,"col": 4},{"file": 40,"line": 2461,"col": 4},{"file": 40,"line": 2463,"col": 4},{"file": 40,"line": 2465,"col": 4},{"file": 40,"line": 2497,"col": 4},{"file": 40,"line": 2501,"col": 4,"docs": " `selfExePath` except allocates the result on the heap. Caller owns returned memory.","fields": [10597]},{"file": 40,"line": 2523,"col": 4,"docs": " Get the path to the current executable. If you only need the directory, use selfExeDirPath. If you only want an open file handle, use openSelfExe. This function may return an error if the current executable was deleted after spawning. Returned value is a slice of out_buffer. On Linux, depends on procfs being mounted. If the currently executing binary has been deleted, the file path looks something like `/a/b/c/exe (deleted)`. TODO make the return type of this a null terminated pointer","fields": [10598]},{"file": 40,"line": 2603,"col": 4,"docs": " The result is UTF16LE-encoded.","fields": []},{"file": 40,"line": 2610,"col": 4,"docs": " `selfExeDirPath` except allocates the result on the heap. Caller owns returned memory.","fields": [10599]},{"file": 40,"line": 2624,"col": 4,"docs": " Get the directory path that contains the current executable. Returned value is a slice of out_buffer.","fields": [10600]},{"file": 40,"line": 2633,"col": 4,"docs": " `realpath`, except caller must free the returned memory. See also `Dir.realpath`.","fields": [10601,10602]},{"file": 40,"line": 0,"col": 0},{"file": 40,"line": 1,"col": 0},{"file": 40,"line": 2,"col": 0},{"file": 40,"line": 3,"col": 0},{"file": 40,"line": 4,"col": 0},{"file": 40,"line": 5,"col": 0},{"file": 40,"line": 6,"col": 0},{"file": 40,"line": 7,"col": 0},{"file": 40,"line": 8,"col": 0},{"file": 40,"line": 9,"col": 0},{"file": 40,"line": 11,"col": 0},{"file": 40,"line": 207,"col": 0},{"file": 40,"line": 2644,"col": 0},{"file": 40,"line": 2649,"col": 0,"fields": [10603,10604]},{"file": 41,"line": 1,"col": 4},{"file": 41,"line": 4,"col": 4},{"file": 41,"line": 5,"col": 4},{"file": 41,"line": 6,"col": 4},{"file": 41,"line": 9,"col": 4},{"file": 41,"line": 10,"col": 4},{"file": 41,"line": 13,"col": 4},{"file": 41,"line": 14,"col": 4},{"file": 41,"line": 15,"col": 4},{"file": 41,"line": 18,"col": 4},{"file": 41,"line": 19,"col": 4},{"file": 41,"line": 21,"col": 4},{"file": 41,"line": 22,"col": 4},{"file": 41,"line": 24,"col": 4},{"file": 41,"line": 25,"col": 4},{"file": 41,"line": 27,"col": 4},{"file": 41,"line": 28,"col": 4},{"file": 41,"line": 29,"col": 4},{"file": 41,"line": 32,"col": 4},{"file": 41,"line": 0,"col": 0},{"file": 41,"line": 3,"col": 0},{"file": 41,"line": 12,"col": 0},{"file": 41,"line": 17,"col": 0},{"file": 41,"line": 31,"col": 0},{"file": 42,"line": 11,"col": 4},{"file": 42,"line": 12,"col": 4},{"file": 42,"line": 13,"col": 4},{"file": 42,"line": 14,"col": 4},{"file": 42,"line": 15,"col": 4},{"file": 42,"line": 16,"col": 4},{"file": 42,"line": 17,"col": 4},{"file": 42,"line": 156,"col": 4,"docs": " Supports the full Allocator interface, including alignment, and exploiting `malloc_usable_size` if available. For an allocator that directly calls `malloc`/`free`, see `raw_c_allocator`."},{"file": 42,"line": 167,"col": 4,"docs": " Asserts allocations are within `@alignOf(std.c.max_align_t)` and directly calls `malloc`/`free`. Does not attempt to utilize `malloc_usable_size`. This allocator is safe to use as the backing allocator with `ArenaAllocator` for example and is more optimal in such a case than `c_allocator`."},{"file": 42,"line": 211,"col": 4,"docs": " This allocator makes a syscall directly for every allocation and free. Thread-safe and lock-free."},{"file": 42,"line": 235,"col": 4,"docs": " TODO Utilize this on Windows."},{"file": 42,"line": 572,"col": 4},{"file": 42,"line": 683,"col": 4},{"file": 42,"line": 769,"col": 4},{"file": 42,"line": 814,"col": 4,"fields": [10605,10606]},{"file": 42,"line": 826,"col": 4,"fields": [10607]},{"file": 42,"line": 1050,"col": 4,"docs": " This one should not try alignments that exceed what C malloc can handle.","fields": [10608]},{"file": 42,"line": 1096,"col": 4,"fields": [10609]},{"file": 42,"line": 1126,"col": 4,"fields": [10610]},{"file": 42,"line": 1158,"col": 4,"fields": [10611]},{"file": 42,"line": 0,"col": 0},{"file": 42,"line": 1,"col": 0},{"file": 42,"line": 2,"col": 0},{"file": 42,"line": 3,"col": 0},{"file": 42,"line": 4,"col": 0},{"file": 42,"line": 5,"col": 0},{"file": 42,"line": 6,"col": 0},{"file": 42,"line": 7,"col": 0},{"file": 42,"line": 8,"col": 0},{"file": 42,"line": 9,"col": 0},{"file": 42,"line": 19,"col": 0},{"file": 42,"line": 21,"col": 0},{"file": 42,"line": 157,"col": 0},{"file": 42,"line": 168,"col": 0},{"file": 42,"line": 173,"col": 0,"fields": [10612,10613,10614,10615,10616]},{"file": 42,"line": 188,"col": 0,"fields": [10617,10618,10619,10620,10621,10622]},{"file": 42,"line": 218,"col": 0},{"file": 42,"line": 222,"col": 0},{"file": 42,"line": 237,"col": 0},{"file": 42,"line": 402,"col": 0},{"file": 42,"line": 673,"col": 0,"fields": [10623,10624]},{"file": 42,"line": 678,"col": 0,"fields": [10625,10626]},{"file": 42,"line": 971,"col": 0},{"file": 43,"line": 14,"col": 4},{"file": 43,"line": 24,"col": 4,"docs": " The application's chosen I/O mode. This defaults to `Mode.blocking` but can be overridden by `root.event_loop`."},{"file": 43,"line": 30,"col": 4},{"file": 43,"line": 34,"col": 4,"docs": " This is an enum value to use for I/O mode at runtime, since it takes up zero bytes at runtime, and makes expressions comptime-known when `is_async` is `false`."},{"file": 43,"line": 35,"col": 4},{"file": 43,"line": 51,"col": 4,"docs": " TODO: async stdout on windows without a dedicated thread. https://github.com/ziglang/zig/pull/4816#issuecomment-604521023","fields": []},{"file": 43,"line": 95,"col": 4,"docs": " TODO: async stdin on windows without a dedicated thread. https://github.com/ziglang/zig/pull/4816#issuecomment-604521023","fields": []},{"file": 43,"line": 103,"col": 4},{"file": 43,"line": 104,"col": 4},{"file": 43,"line": 105,"col": 4},{"file": 43,"line": 107,"col": 4},{"file": 43,"line": 108,"col": 4},{"file": 43,"line": 110,"col": 4},{"file": 43,"line": 111,"col": 4},{"file": 43,"line": 113,"col": 4},{"file": 43,"line": 114,"col": 4},{"file": 43,"line": 116,"col": 4},{"file": 43,"line": 117,"col": 4},{"file": 43,"line": 119,"col": 4},{"file": 43,"line": 120,"col": 4},{"file": 43,"line": 122,"col": 4},{"file": 43,"line": 123,"col": 4},{"file": 43,"line": 125,"col": 4},{"file": 43,"line": 126,"col": 4},{"file": 43,"line": 127,"col": 4},{"file": 43,"line": 128,"col": 4},{"file": 43,"line": 130,"col": 4},{"file": 43,"line": 131,"col": 4},{"file": 43,"line": 133,"col": 4},{"file": 43,"line": 134,"col": 4},{"file": 43,"line": 136,"col": 4},{"file": 43,"line": 137,"col": 4},{"file": 43,"line": 139,"col": 4},{"file": 43,"line": 140,"col": 4},{"file": 43,"line": 142,"col": 4},{"file": 43,"line": 143,"col": 4},{"file": 43,"line": 145,"col": 4,"docs": " Deprecated: use `FindByteWriter`."},{"file": 43,"line": 147,"col": 4,"docs": " Deprecated: use `findByteWriter`."},{"file": 43,"line": 149,"col": 4},{"file": 43,"line": 151,"col": 4},{"file": 43,"line": 154,"col": 4,"docs": " A Writer that doesn't write to anything."},{"file": 43,"line": 184,"col": 4},{"file": 43,"line": 185,"col": 4},{"file": 43,"line": 0,"col": 0},{"file": 43,"line": 1,"col": 0},{"file": 43,"line": 2,"col": 0},{"file": 43,"line": 3,"col": 0},{"file": 43,"line": 5,"col": 0},{"file": 43,"line": 6,"col": 0},{"file": 43,"line": 7,"col": 0},{"file": 43,"line": 8,"col": 0},{"file": 43,"line": 9,"col": 0},{"file": 43,"line": 10,"col": 0},{"file": 43,"line": 11,"col": 0},{"file": 43,"line": 12,"col": 0},{"file": 43,"line": 37,"col": 0,"fields": []},{"file": 43,"line": 81,"col": 0,"fields": []},{"file": 43,"line": 156,"col": 0},{"file": 44,"line": 0,"col": 4},{"file": 44,"line": 10,"col": 4},{"file": 44,"line": 21,"col": 4},{"file": 44,"line": 26,"col": 4},{"file": 44,"line": 34,"col": 4},{"file": 44,"line": 41,"col": 4,"docs": " The uuid load command contains a single 128-bit unique random number that identifies an object produced by the static link editor."},{"file": 44,"line": 54,"col": 4,"docs": " The version_min_command contains the min OS version on which this binary was built to run."},{"file": 44,"line": 70,"col": 4,"docs": " The source_version_command is an optional load command containing the version of the sources used to build the binary."},{"file": 44,"line": 84,"col": 4,"docs": " The build_version_command contains the min OS version on which this binary was built to run for its platform. The list of known platforms and tool values following it."},{"file": 44,"line": 105,"col": 4},{"file": 44,"line": 113,"col": 4},{"file": 44,"line": 114,"col": 4},{"file": 44,"line": 115,"col": 4},{"file": 44,"line": 116,"col": 4},{"file": 44,"line": 117,"col": 4},{"file": 44,"line": 118,"col": 4},{"file": 44,"line": 119,"col": 4},{"file": 44,"line": 120,"col": 4},{"file": 44,"line": 121,"col": 4},{"file": 44,"line": 122,"col": 4},{"file": 44,"line": 124,"col": 4},{"file": 44,"line": 125,"col": 4},{"file": 44,"line": 126,"col": 4},{"file": 44,"line": 132,"col": 4,"docs": " The entry_point_command is a replacement for thread_command. It is used for main executables to specify the location (file offset) of main(). If -stack_size was used at link time, the stacksize field will contain the stack size needed for the main thread."},{"file": 44,"line": 149,"col": 4,"docs": " The symtab_command contains the offsets and sizes of the link-edit 4.3BSD \"stab\" style symbol table information as described in the header files <nlist.h> and <stab.h>."},{"file": 44,"line": 207,"col": 4,"docs": " This is the second set of the symbolic information which is used to support the data structures for the dynamically link editor. The original set of symbolic information in the symtab_command which contains the symbol and string tables must also be present when this load command is present.  When this load command is present the symbol table is organized into three groups of symbols:  local symbols (static and debugging symbols) - grouped by module  defined external symbols - grouped by module (sorted by name if not lib)  undefined external symbols (sorted by name if MH_BINDATLOAD is not set,       \t\t\t    and in order the were seen by the static  \t\t\t    linker if MH_BINDATLOAD is set) In this load command there are offsets and counts to each of the three groups of symbols. This load command contains a the offsets and sizes of the following new symbolic information tables:  table of contents  module table  reference symbol table  indirect symbol table The first three tables above (the table of contents, module table and reference symbol table) are only present if the file is a dynamically linked shared library.  For executable and object modules, which are files containing only one module, the information that would be in these three tables is determined as follows: \ttable of contents - the defined external symbols are sorted by name  module table - the file contains only one module so everything in the  \t       file is part of the module.  reference symbol table - is the defined and undefined external symbols For dynamically linked shared library files this load command also contains offsets and sizes to the pool of relocation entries for all sections separated into two groups:  external relocation entries  local relocation entries For executable and object modules the relocation entries continue to hang off the section structures."},{"file": 44,"line": 347,"col": 4,"docs": " The linkedit_data_command contains the offsets and sizes of a blob of data in the __LINKEDIT segment."},{"file": 44,"line": 367,"col": 4,"docs": " The dyld_info_command contains the file offsets and sizes of the new compressed form of the information dyld needs to load the image.  This information is used by dyld on Mac OS X 10.6 and later.  All information pointed to by this command is encoded using byte streams, so no endian swapping is needed to interpret it."},{"file": 44,"line": 488,"col": 4,"docs": " A program that uses a dynamic linker contains a dylinker_command to identify the name of the dynamic linker (LC_LOAD_DYLINKER). And a dynamic linker contains a dylinker_command to identify the dynamic linker (LC_ID_DYLINKER). A file can have at most one of these. This struct is also used for the LC_DYLD_ENVIRONMENT load command and contains string for dyld to treat like an environment variable."},{"file": 44,"line": 509,"col": 4,"docs": " A dynamically linked shared library (filetype == MH_DYLIB in the mach header) contains a dylib_command (cmd == LC_ID_DYLIB) to identify the library. An object that uses a dynamically linked shared library also contains a dylib_command (cmd == LC_LOAD_DYLIB, LC_LOAD_WEAK_DYLIB, or LC_REEXPORT_DYLIB) for each library it uses."},{"file": 44,"line": 527,"col": 4,"docs": " Dynamicaly linked shared libraries are identified by two things.  The pathname (the name of the library as found for execution), and the compatibility version number.  The pathname must match and the compatibility number in the user of the library must be greater than or equal to the library being used.  The time stamp is used to record the time a library was built and copied into user so it can be use to determined if the library used at runtime is exactly the same as used to built the program."},{"file": 44,"line": 543,"col": 4,"docs": " The rpath_command contains a path which at runtime should be added to the current run path used to find @rpath prefixed dylibs."},{"file": 44,"line": 564,"col": 4,"docs": " The segment load command indicates that a part of this file is to be mapped into the task's address space.  The size of this segment in memory, vmsize, maybe equal to or larger than the amount to map from this file, filesize.  The file is mapped starting at fileoff to the beginning of the segment in memory, vmaddr.  The rest of the memory of the segment, if any, is allocated zero fill on demand.  The segment's maximum virtual memory protection and initial virtual memory protection are specified by the maxprot and initprot fields.  If the segment has sections then the section structures directly follow the segment command and their size is reflected in cmdsize."},{"file": 44,"line": 601,"col": 4,"docs": " The 64-bit segment load command indicates that a part of this file is to be mapped into a 64-bit task's address space.  If the 64-bit segment has sections then section_64 structures directly follow the 64-bit segment command and their size is reflected in cmdsize."},{"file": 44,"line": 659,"col": 4,"docs": " A segment is made up of zero or more sections.  Non-MH_OBJECT files have all of their segments with the proper sections in each, and padded to the specified segment alignment when produced by the link editor.  The first segment of a MH_EXECUTE and MH_FVMLIB format file contains the mach_header and load commands of the object file before its first section.  The zero fill sections are always last in their segment (in all formats).  This allows the zeroed segment padding to be mapped into memory where zero fill sections might be. The gigabyte zero fill sections, those with the section type S_GB_ZEROFILL, can only be in a segment with sections of this type. These segments are then placed after all other segments. The MH_OBJECT format has all of its sections in one segment for compactness.  There is no padding to a specified segment boundary and the mach_header and load commands are not part of the segment. Sections with the same section name, sectname, going into the same segment, segname, are combined by the link editor.  The resulting section is aligned to the maximum alignment of the combined sections and is the new section's alignment.  The combined sections are aligned to their original alignment in the combined section.  Any padded bytes to get the specified alignment are zeroed. The format of the relocation entries referenced by the reloff and nreloc fields of the section structure for mach object files is described in the header file <reloc.h>."},{"file": 44,"line": 694,"col": 4},{"file": 44,"line": 732,"col": 4},{"file": 44,"line": 740,"col": 4},{"file": 44,"line": 754,"col": 4,"docs": " Format of a relocation entry of a Mach-O file.  Modified from the 4.3BSD format.  The modifications from the original format were changing the value of the r_symbolnum field for \"local\" (r_extern == 0) relocation entries. This modification is required to support symbols in an arbitrary number of sections not just the three sections (text, data and bss) in a 4.3BSD file. Also the last 4 bits have had the r_type tag added to them."},{"file": 44,"line": 781,"col": 4,"docs": " After MacOS X 10.1 when a new load command is added that is required to be understood by the dynamic linker for the image to execute properly the LC_REQ_DYLD bit will be or'ed into the load command constant.  If the dynamic linker sees such a load command it it does not understand will issue a \"unknown load command required for execution\" error and refuse to use the image.  Other load commands without this bit that are not understood will simply be ignored."},{"file": 44,"line": 784,"col": 4,"docs": " segment of this file to be mapped"},{"file": 44,"line": 787,"col": 4,"docs": " link-edit stab symbol table info"},{"file": 44,"line": 790,"col": 4,"docs": " link-edit gdb symbol table info (obsolete)"},{"file": 44,"line": 793,"col": 4,"docs": " thread"},{"file": 44,"line": 796,"col": 4,"docs": " unix thread (includes a stack)"},{"file": 44,"line": 799,"col": 4,"docs": " load a specified fixed VM shared library"},{"file": 44,"line": 802,"col": 4,"docs": " fixed VM shared library identification"},{"file": 44,"line": 805,"col": 4,"docs": " object identification info (obsolete)"},{"file": 44,"line": 808,"col": 4,"docs": " fixed VM file inclusion (internal use)"},{"file": 44,"line": 811,"col": 4,"docs": " prepage command (internal use)"},{"file": 44,"line": 814,"col": 4,"docs": " dynamic link-edit symbol table info"},{"file": 44,"line": 817,"col": 4,"docs": " load a dynamically linked shared library"},{"file": 44,"line": 820,"col": 4,"docs": " dynamically linked shared lib ident"},{"file": 44,"line": 823,"col": 4,"docs": " load a dynamic linker"},{"file": 44,"line": 826,"col": 4,"docs": " dynamic linker identification"},{"file": 44,"line": 829,"col": 4,"docs": " modules prebound for a dynamically"},{"file": 44,"line": 832,"col": 4,"docs": " image routines"},{"file": 44,"line": 835,"col": 4,"docs": " sub framework"},{"file": 44,"line": 838,"col": 4,"docs": " sub umbrella"},{"file": 44,"line": 841,"col": 4,"docs": " sub client"},{"file": 44,"line": 844,"col": 4,"docs": " sub library"},{"file": 44,"line": 847,"col": 4,"docs": " two-level namespace lookup hints"},{"file": 44,"line": 850,"col": 4,"docs": " prebind checksum"},{"file": 44,"line": 854,"col": 4,"docs": " load a dynamically linked shared library that is allowed to be missing (all symbols are weak imported)."},{"file": 44,"line": 857,"col": 4,"docs": " 64-bit segment of this file to be mapped"},{"file": 44,"line": 860,"col": 4,"docs": " 64-bit image routines"},{"file": 44,"line": 863,"col": 4,"docs": " the uuid"},{"file": 44,"line": 866,"col": 4,"docs": " runpath additions"},{"file": 44,"line": 869,"col": 4,"docs": " local of code signature"},{"file": 44,"line": 872,"col": 4,"docs": " local of info to split segments"},{"file": 44,"line": 875,"col": 4,"docs": " load and re-export dylib"},{"file": 44,"line": 878,"col": 4,"docs": " delay load of dylib until first use"},{"file": 44,"line": 881,"col": 4,"docs": " encrypted segment information"},{"file": 44,"line": 884,"col": 4,"docs": " compressed dyld information"},{"file": 44,"line": 887,"col": 4,"docs": " compressed dyld information only"},{"file": 44,"line": 890,"col": 4,"docs": " load upward dylib"},{"file": 44,"line": 893,"col": 4,"docs": " build for MacOSX min OS version"},{"file": 44,"line": 896,"col": 4,"docs": " build for iPhoneOS min OS version"},{"file": 44,"line": 899,"col": 4,"docs": " compressed table of function start addresses"},{"file": 44,"line": 902,"col": 4,"docs": " string for dyld to treat like environment variable"},{"file": 44,"line": 905,"col": 4,"docs": " replacement for LC_UNIXTHREAD"},{"file": 44,"line": 908,"col": 4,"docs": " table of non-instructions in __text"},{"file": 44,"line": 911,"col": 4,"docs": " source version used to build binary"},{"file": 44,"line": 914,"col": 4,"docs": " Code signing DRs copied from linked dylibs"},{"file": 44,"line": 917,"col": 4,"docs": " 64-bit encrypted segment information"},{"file": 44,"line": 920,"col": 4,"docs": " linker options in MH_OBJECT files"},{"file": 44,"line": 923,"col": 4,"docs": " optimization hints in MH_OBJECT files"},{"file": 44,"line": 926,"col": 4,"docs": " build for AppleTV min OS version"},{"file": 44,"line": 929,"col": 4,"docs": " build for Watch min OS version"},{"file": 44,"line": 932,"col": 4,"docs": " arbitrary data included within a Mach-O file"},{"file": 44,"line": 935,"col": 4,"docs": " build for platform min OS version"},{"file": 44,"line": 938,"col": 4,"docs": " the mach magic number"},{"file": 44,"line": 941,"col": 4,"docs": " NXSwapInt(MH_MAGIC)"},{"file": 44,"line": 944,"col": 4,"docs": " the 64-bit mach magic number"},{"file": 44,"line": 947,"col": 4,"docs": " NXSwapInt(MH_MAGIC_64)"},{"file": 44,"line": 950,"col": 4,"docs": " relocatable object file"},{"file": 44,"line": 953,"col": 4,"docs": " demand paged executable file"},{"file": 44,"line": 956,"col": 4,"docs": " fixed VM shared library file"},{"file": 44,"line": 959,"col": 4,"docs": " core file"},{"file": 44,"line": 962,"col": 4,"docs": " preloaded executable file"},{"file": 44,"line": 965,"col": 4,"docs": " dynamically bound shared library"},{"file": 44,"line": 968,"col": 4,"docs": " dynamic link editor"},{"file": 44,"line": 971,"col": 4,"docs": " dynamically bound bundle file"},{"file": 44,"line": 974,"col": 4,"docs": " shared library stub for static linking only, no section contents"},{"file": 44,"line": 977,"col": 4,"docs": " companion file with only debug sections"},{"file": 44,"line": 980,"col": 4,"docs": " x86_64 kexts"},{"file": 44,"line": 985,"col": 4,"docs": " the object file has no undefined references"},{"file": 44,"line": 988,"col": 4,"docs": " the object file is the output of an incremental link against a base file and can't be link edited again"},{"file": 44,"line": 991,"col": 4,"docs": " the object file is input for the dynamic linker and can't be staticly link edited again"},{"file": 44,"line": 994,"col": 4,"docs": " the object file's undefined references are bound by the dynamic linker when loaded."},{"file": 44,"line": 997,"col": 4,"docs": " the file has its dynamic undefined references prebound."},{"file": 44,"line": 1000,"col": 4,"docs": " the file has its read-only and read-write segments split"},{"file": 44,"line": 1003,"col": 4,"docs": " the shared library init routine is to be run lazily via catching memory faults to its writeable segments (obsolete)"},{"file": 44,"line": 1006,"col": 4,"docs": " the image is using two-level name space bindings"},{"file": 44,"line": 1009,"col": 4,"docs": " the executable is forcing all images to use flat name space bindings"},{"file": 44,"line": 1012,"col": 4,"docs": " this umbrella guarantees no multiple defintions of symbols in its sub-images so the two-level namespace hints can always be used."},{"file": 44,"line": 1015,"col": 4,"docs": " do not have dyld notify the prebinding agent about this executable"},{"file": 44,"line": 1018,"col": 4,"docs": " the binary is not prebound but can have its prebinding redone. only used when MH_PREBOUND is not set."},{"file": 44,"line": 1021,"col": 4,"docs": " indicates that this binary binds to all two-level namespace modules of its dependent libraries. only used when MH_PREBINDABLE and MH_TWOLEVEL are both set."},{"file": 44,"line": 1024,"col": 4,"docs": " safe to divide up the sections into sub-sections via symbols for dead code stripping"},{"file": 44,"line": 1027,"col": 4,"docs": " the binary has been canonicalized via the unprebind operation"},{"file": 44,"line": 1030,"col": 4,"docs": " the final linked image contains external weak symbols"},{"file": 44,"line": 1033,"col": 4,"docs": " the final linked image uses weak symbols"},{"file": 44,"line": 1036,"col": 4,"docs": " When this bit is set, all stacks in the task will be given stack execution privilege.  Only used in MH_EXECUTE filetypes."},{"file": 44,"line": 1039,"col": 4,"docs": " When this bit is set, the binary declares it is safe for use in processes with uid zero"},{"file": 44,"line": 1042,"col": 4,"docs": " When this bit is set, the binary declares it is safe for use in processes when issetugid() is true"},{"file": 44,"line": 1045,"col": 4,"docs": " When this bit is set on a dylib, the static linker does not need to examine dependent dylibs to see if any are re-exported"},{"file": 44,"line": 1048,"col": 4,"docs": " When this bit is set, the OS will load the main executable at a random address.  Only used in MH_EXECUTE filetypes."},{"file": 44,"line": 1051,"col": 4,"docs": " Only for use on dylibs.  When linking against a dylib that has this bit set, the static linker will automatically not create a LC_LOAD_DYLIB load command to the dylib if no symbols are being referenced from the dylib."},{"file": 44,"line": 1054,"col": 4,"docs": " Contains a section of type S_THREAD_LOCAL_VARIABLES"},{"file": 44,"line": 1057,"col": 4,"docs": " When this bit is set, the OS will run the main executable with a non-executable heap even on platforms (e.g. i386) that don't require it. Only used in MH_EXECUTE filetypes."},{"file": 44,"line": 1060,"col": 4,"docs": " The code was linked for use in an application extension."},{"file": 44,"line": 1063,"col": 4,"docs": " The external symbols listed in the nlist symbol table do not include all the symbols listed in the dyld info."},{"file": 44,"line": 1068,"col": 4,"docs": " the fat magic number"},{"file": 44,"line": 1071,"col": 4,"docs": " NXSwapLong(FAT_MAGIC)"},{"file": 44,"line": 1074,"col": 4,"docs": " the 64-bit fat magic number"},{"file": 44,"line": 1077,"col": 4,"docs": " NXSwapLong(FAT_MAGIC_64)"},{"file": 44,"line": 1084,"col": 4,"docs": " The flags field of a section structure is separated into two parts a section type and section attributes.  The section types are mutually exclusive (it can only have one type) but the section attributes are not (it may have more than one attribute). 256 section types"},{"file": 44,"line": 1087,"col": 4,"docs": "  24 section attributes"},{"file": 44,"line": 1090,"col": 4,"docs": " regular section"},{"file": 44,"line": 1093,"col": 4,"docs": " zero fill on demand section"},{"file": 44,"line": 1096,"col": 4,"docs": " section with only literal C string"},{"file": 44,"line": 1099,"col": 4,"docs": " section with only 4 byte literals"},{"file": 44,"line": 1102,"col": 4,"docs": " section with only 8 byte literals"},{"file": 44,"line": 1105,"col": 4,"docs": " section with only pointers to"},{"file": 44,"line": 1108,"col": 4,"docs": " if any of these bits set, a symbolic debugging entry"},{"file": 44,"line": 1111,"col": 4,"docs": " private external symbol bit"},{"file": 44,"line": 1114,"col": 4,"docs": " mask for the type bits"},{"file": 44,"line": 1117,"col": 4,"docs": " external symbol bit, set for external symbols"},{"file": 44,"line": 1120,"col": 4,"docs": " symbol is undefined"},{"file": 44,"line": 1123,"col": 4,"docs": " symbol is absolute"},{"file": 44,"line": 1126,"col": 4,"docs": " symbol is defined in the section number given in n_sect"},{"file": 44,"line": 1130,"col": 4,"docs": " symbol is undefined  and the image is using a prebound value  for the symbol"},{"file": 44,"line": 1135,"col": 4,"docs": " symbol is defined to be the same as another symbol; the n_value field is an index into the string table specifying the name of the other symbol"},{"file": 44,"line": 1138,"col": 4,"docs": " global symbol: name,,NO_SECT,type,0"},{"file": 44,"line": 1141,"col": 4,"docs": " procedure name (f77 kludge): name,,NO_SECT,0,0"},{"file": 44,"line": 1144,"col": 4,"docs": " procedure: name,,n_sect,linenumber,address"},{"file": 44,"line": 1147,"col": 4,"docs": " static symbol: name,,n_sect,type,address"},{"file": 44,"line": 1150,"col": 4,"docs": " .lcomm symbol: name,,n_sect,type,address"},{"file": 44,"line": 1153,"col": 4,"docs": " begin nsect sym: 0,,n_sect,0,address"},{"file": 44,"line": 1156,"col": 4,"docs": " AST file path: name,,NO_SECT,0,0"},{"file": 44,"line": 1159,"col": 4,"docs": " emitted with gcc2_compiled and in gcc source"},{"file": 44,"line": 1162,"col": 4,"docs": " register sym: name,,NO_SECT,type,register"},{"file": 44,"line": 1165,"col": 4,"docs": " src line: 0,,n_sect,linenumber,address"},{"file": 44,"line": 1168,"col": 4,"docs": " end nsect sym: 0,,n_sect,0,address"},{"file": 44,"line": 1171,"col": 4,"docs": " structure elt: name,,NO_SECT,type,struct_offset"},{"file": 44,"line": 1174,"col": 4,"docs": " source file name: name,,n_sect,0,address"},{"file": 44,"line": 1177,"col": 4,"docs": " object file name: name,,0,0,st_mtime"},{"file": 44,"line": 1180,"col": 4,"docs": " local sym: name,,NO_SECT,type,offset"},{"file": 44,"line": 1183,"col": 4,"docs": " include file beginning: name,,NO_SECT,0,sum"},{"file": 44,"line": 1186,"col": 4,"docs": " #included file name: name,,n_sect,0,address"},{"file": 44,"line": 1189,"col": 4,"docs": " compiler parameters: name,,NO_SECT,0,0"},{"file": 44,"line": 1192,"col": 4,"docs": " compiler version: name,,NO_SECT,0,0"},{"file": 44,"line": 1195,"col": 4,"docs": " compiler -O level: name,,NO_SECT,0,0"},{"file": 44,"line": 1198,"col": 4,"docs": " parameter: name,,NO_SECT,type,offset"},{"file": 44,"line": 1201,"col": 4,"docs": " include file end: name,,NO_SECT,0,0"},{"file": 44,"line": 1204,"col": 4,"docs": " alternate entry: name,,n_sect,linenumber,address"},{"file": 44,"line": 1207,"col": 4,"docs": " left bracket: 0,,NO_SECT,nesting level,address"},{"file": 44,"line": 1210,"col": 4,"docs": " deleted include file: name,,NO_SECT,0,sum"},{"file": 44,"line": 1213,"col": 4,"docs": " right bracket: 0,,NO_SECT,nesting level,address"},{"file": 44,"line": 1216,"col": 4,"docs": " begin common: name,,NO_SECT,0,0"},{"file": 44,"line": 1219,"col": 4,"docs": " end common: name,,n_sect,0,0"},{"file": 44,"line": 1222,"col": 4,"docs": " end common (local name): 0,,n_sect,0,address"},{"file": 44,"line": 1225,"col": 4,"docs": " second stab entry with length information"},{"file": 44,"line": 1239,"col": 4,"docs": " section with only non-lazy symbol pointers"},{"file": 44,"line": 1242,"col": 4,"docs": " section with only lazy symbol pointers"},{"file": 44,"line": 1245,"col": 4,"docs": " section with only symbol stubs, byte size of stub in the reserved2 field"},{"file": 44,"line": 1248,"col": 4,"docs": " section with only function pointers for initialization"},{"file": 44,"line": 1251,"col": 4,"docs": " section with only function pointers for termination"},{"file": 44,"line": 1254,"col": 4,"docs": " section contains symbols that are to be coalesced"},{"file": 44,"line": 1257,"col": 4,"docs": " zero fill on demand section (that can be larger than 4 gigabytes)"},{"file": 44,"line": 1260,"col": 4,"docs": " section with only pairs of function pointers for interposing"},{"file": 44,"line": 1263,"col": 4,"docs": " section with only 16 byte literals"},{"file": 44,"line": 1266,"col": 4,"docs": " section contains DTrace Object Format"},{"file": 44,"line": 1269,"col": 4,"docs": " section with only lazy symbol pointers to lazy loaded dylibs"},{"file": 44,"line": 1280,"col": 4,"docs": " a debug section"},{"file": 44,"line": 1283,"col": 4,"docs": " section contains only true machine instructions"},{"file": 44,"line": 1287,"col": 4,"docs": " section contains coalesced symbols that are not to be in a ranlib table of contents"},{"file": 44,"line": 1291,"col": 4,"docs": " ok to strip static symbols in this section in files with the MH_DYLDLINK flag"},{"file": 44,"line": 1294,"col": 4,"docs": " no dead stripping"},{"file": 44,"line": 1297,"col": 4,"docs": " blocks are live if they reference live blocks"},{"file": 44,"line": 1300,"col": 4,"docs": " used with i386 code stubs written on by dyld"},{"file": 44,"line": 1303,"col": 4,"docs": " section contains some machine instructions"},{"file": 44,"line": 1306,"col": 4,"docs": " section has external relocation entries"},{"file": 44,"line": 1309,"col": 4,"docs": " section has local relocation entries"},{"file": 44,"line": 1312,"col": 4,"docs": " template of initial values for TLVs"},{"file": 44,"line": 1315,"col": 4,"docs": " template of initial values for TLVs"},{"file": 44,"line": 1318,"col": 4,"docs": " TLV descriptors"},{"file": 44,"line": 1321,"col": 4,"docs": " pointers to TLV descriptors"},{"file": 44,"line": 1324,"col": 4,"docs": " functions to call to initialize TLV values"},{"file": 44,"line": 1327,"col": 4,"docs": " 32-bit offsets to initializers"},{"file": 44,"line": 1329,"col": 4},{"file": 44,"line": 1330,"col": 4},{"file": 44,"line": 1331,"col": 4},{"file": 44,"line": 1332,"col": 4},{"file": 44,"line": 1335,"col": 4,"docs": " CPU type targeting 64-bit Intel-based Macs"},{"file": 44,"line": 1338,"col": 4,"docs": " CPU type targeting 64-bit ARM-based Macs"},{"file": 44,"line": 1341,"col": 4,"docs": " All Intel-based Macs"},{"file": 44,"line": 1344,"col": 4,"docs": " All ARM-based Macs"},{"file": 44,"line": 1348,"col": 4,"docs": " No VM protection"},{"file": 44,"line": 1351,"col": 4,"docs": " VM read permission"},{"file": 44,"line": 1354,"col": 4,"docs": " VM write permission"},{"file": 44,"line": 1357,"col": 4,"docs": " VM execute permission"},{"file": 44,"line": 1360,"col": 4},{"file": 44,"line": 1361,"col": 4},{"file": 44,"line": 1362,"col": 4},{"file": 44,"line": 1364,"col": 4},{"file": 44,"line": 1365,"col": 4},{"file": 44,"line": 1366,"col": 4},{"file": 44,"line": 1367,"col": 4},{"file": 44,"line": 1368,"col": 4},{"file": 44,"line": 1369,"col": 4},{"file": 44,"line": 1370,"col": 4},{"file": 44,"line": 1371,"col": 4},{"file": 44,"line": 1372,"col": 4},{"file": 44,"line": 1373,"col": 4},{"file": 44,"line": 1374,"col": 4},{"file": 44,"line": 1377,"col": 4},{"file": 44,"line": 1378,"col": 4},{"file": 44,"line": 1379,"col": 4},{"file": 44,"line": 1381,"col": 4},{"file": 44,"line": 1382,"col": 4},{"file": 44,"line": 1383,"col": 4},{"file": 44,"line": 1385,"col": 4},{"file": 44,"line": 1386,"col": 4},{"file": 44,"line": 1388,"col": 4},{"file": 44,"line": 1389,"col": 4},{"file": 44,"line": 1390,"col": 4},{"file": 44,"line": 1391,"col": 4},{"file": 44,"line": 1392,"col": 4},{"file": 44,"line": 1393,"col": 4},{"file": 44,"line": 1394,"col": 4},{"file": 44,"line": 1395,"col": 4},{"file": 44,"line": 1396,"col": 4},{"file": 44,"line": 1397,"col": 4},{"file": 44,"line": 1398,"col": 4},{"file": 44,"line": 1399,"col": 4},{"file": 44,"line": 1400,"col": 4},{"file": 44,"line": 1401,"col": 4},{"file": 44,"line": 1402,"col": 4},{"file": 44,"line": 1404,"col": 4},{"file": 44,"line": 1436,"col": 4},{"file": 44,"line": 1472,"col": 4,"docs": " This symbol is a reference to an external non-lazy (data) symbol."},{"file": 44,"line": 1475,"col": 4,"docs": " This symbol is a reference to an external lazy symbol—that is, to a function call."},{"file": 44,"line": 1478,"col": 4,"docs": " This symbol is defined in this module."},{"file": 44,"line": 1481,"col": 4,"docs": " This symbol is defined in this module and is visible only to modules within this shared library."},{"file": 44,"line": 1485,"col": 4,"docs": " This symbol is defined in another module in this file, is a non-lazy (data) symbol, and is visible only to modules within this shared library."},{"file": 44,"line": 1489,"col": 4,"docs": " This symbol is defined in another module in this file, is a lazy (function) symbol, and is visible only to modules within this shared library."},{"file": 44,"line": 1494,"col": 4,"docs": " Must be set for any defined symbol that is referenced by dynamic-loader APIs (such as dlsym and NSLookupSymbolInImage) and not ordinary undefined symbol references. The strip tool uses this bit to avoid removing symbols that must exist: If the symbol has this bit set, strip does not strip it."},{"file": 44,"line": 1497,"col": 4,"docs": " Used by the dynamic linker at runtime. Do not set this bit."},{"file": 44,"line": 1502,"col": 4,"docs": " Indicates that this symbol is a weak reference. If the dynamic linker cannot find a definition for this symbol, it sets the address of this symbol to 0. The static linker sets this symbol given the appropriate weak-linking flags."},{"file": 44,"line": 1507,"col": 4,"docs": " Indicates that this symbol is a weak definition. If the static linker or the dynamic linker finds another (non-weak) definition for this symbol, the weak definition is ignored. Only symbols in a coalesced section (page 23) can be marked as a weak definition."},{"file": 44,"line": 1513,"col": 4,"docs": " The N_SYMBOL_RESOLVER bit of the n_desc field indicates that the that the function is actually a resolver function and should be called to get the address of the real function to use. This bit is only available in .o files (MH_OBJECT filetype)"},{"file": 44,"line": 1516,"col": 4},{"file": 44,"line": 1517,"col": 4},{"file": 44,"line": 1518,"col": 4},{"file": 44,"line": 1519,"col": 4},{"file": 44,"line": 1520,"col": 4},{"file": 44,"line": 1521,"col": 4},{"file": 44,"line": 1522,"col": 4},{"file": 44,"line": 1529,"col": 4},{"file": 44,"line": 1530,"col": 4},{"file": 44,"line": 1536,"col": 4,"docs": " Single Requirement blob"},{"file": 44,"line": 1538,"col": 4,"docs": " Requirements vector (internal requirements)"},{"file": 44,"line": 1540,"col": 4,"docs": " CodeDirectory blob"},{"file": 44,"line": 1542,"col": 4,"docs": " embedded form of signature data"},{"file": 44,"line": 1544,"col": 4,"docs": " XXX"},{"file": 44,"line": 1546,"col": 4,"docs": " Embedded entitlements"},{"file": 44,"line": 1548,"col": 4,"docs": " Multi-arch collection of embedded signatures"},{"file": 44,"line": 1550,"col": 4,"docs": " CMS Signature, among other things"},{"file": 44,"line": 1552,"col": 4},{"file": 44,"line": 1553,"col": 4},{"file": 44,"line": 1554,"col": 4},{"file": 44,"line": 1555,"col": 4},{"file": 44,"line": 1558,"col": 4,"docs": " Slot index for CodeDirectory"},{"file": 44,"line": 1559,"col": 4},{"file": 44,"line": 1560,"col": 4},{"file": 44,"line": 1561,"col": 4},{"file": 44,"line": 1562,"col": 4},{"file": 44,"line": 1563,"col": 4},{"file": 44,"line": 1566,"col": 4,"docs": " first alternate CodeDirectory, if any"},{"file": 44,"line": 1568,"col": 4,"docs": " Max number of alternate CD slots"},{"file": 44,"line": 1570,"col": 4,"docs": " One past the last"},{"file": 44,"line": 1573,"col": 4,"docs": " CMS Signature"},{"file": 44,"line": 1574,"col": 4},{"file": 44,"line": 1575,"col": 4},{"file": 44,"line": 1578,"col": 4,"docs": " Compat with amfi"},{"file": 44,"line": 1580,"col": 4,"docs": " Compat with amfi"},{"file": 44,"line": 1582,"col": 4},{"file": 44,"line": 1583,"col": 4},{"file": 44,"line": 1584,"col": 4},{"file": 44,"line": 1585,"col": 4},{"file": 44,"line": 1587,"col": 4},{"file": 44,"line": 1588,"col": 4},{"file": 44,"line": 1589,"col": 4},{"file": 44,"line": 1592,"col": 4,"docs": " Always - larger hashes are truncated"},{"file": 44,"line": 1594,"col": 4,"docs": " Max size of the hash we'll support"},{"file": 44,"line": 1596,"col": 4},{"file": 44,"line": 1597,"col": 4},{"file": 44,"line": 1598,"col": 4},{"file": 44,"line": 1600,"col": 4},{"file": 44,"line": 1602,"col": 4},{"file": 44,"line": 1605,"col": 4,"docs": " This CodeDirectory is tailored specfically at version 0x20400."},{"file": 44,"line": 1671,"col": 4,"docs": " Structure of an embedded-signature SuperBlob"},{"file": 44,"line": 1681,"col": 4,"docs": " This structure is followed by GenericBlobs in no particular order as indicated by offsets in index"},{"file": 44,"line": 1692,"col": 4},{"file": 44,"line": 1703,"col": 4,"docs": " The LC_DATA_IN_CODE load commands uses a linkedit_data_command to point to an array of data_in_code_entry entries. Each entry describes a range of data in a code section."},{"file": 45,"line": 6,"col": 4,"docs": " Euler's number (e)"},{"file": 45,"line": 9,"col": 4,"docs": " Archimedes' constant (π)"},{"file": 45,"line": 12,"col": 4,"docs": " Phi or Golden ratio constant (Φ) = (1 + sqrt(5))/2"},{"file": 45,"line": 15,"col": 4,"docs": " Circle constant (τ)"},{"file": 45,"line": 18,"col": 4,"docs": " log2(e)"},{"file": 45,"line": 21,"col": 4,"docs": " log10(e)"},{"file": 45,"line": 24,"col": 4,"docs": " ln(2)"},{"file": 45,"line": 27,"col": 4,"docs": " ln(10)"},{"file": 45,"line": 30,"col": 4,"docs": " 2/sqrt(π)"},{"file": 45,"line": 33,"col": 4,"docs": " sqrt(2)"},{"file": 45,"line": 36,"col": 4,"docs": " 1/sqrt(2)"},{"file": 45,"line": 39,"col": 4},{"file": 45,"line": 40,"col": 4},{"file": 45,"line": 41,"col": 4},{"file": 45,"line": 42,"col": 4},{"file": 45,"line": 43,"col": 4},{"file": 45,"line": 46,"col": 4},{"file": 45,"line": 47,"col": 4},{"file": 45,"line": 48,"col": 4},{"file": 45,"line": 49,"col": 4},{"file": 45,"line": 50,"col": 4},{"file": 45,"line": 52,"col": 4},{"file": 45,"line": 53,"col": 4},{"file": 45,"line": 54,"col": 4},{"file": 45,"line": 55,"col": 4},{"file": 45,"line": 56,"col": 4},{"file": 45,"line": 58,"col": 4},{"file": 45,"line": 59,"col": 4},{"file": 45,"line": 60,"col": 4},{"file": 45,"line": 61,"col": 4},{"file": 45,"line": 62,"col": 4},{"file": 45,"line": 64,"col": 4},{"file": 45,"line": 66,"col": 4},{"file": 45,"line": 67,"col": 4},{"file": 45,"line": 69,"col": 4},{"file": 45,"line": 70,"col": 4},{"file": 45,"line": 72,"col": 4},{"file": 45,"line": 73,"col": 4},{"file": 45,"line": 75,"col": 4},{"file": 45,"line": 76,"col": 4},{"file": 45,"line": 78,"col": 4},{"file": 45,"line": 79,"col": 4},{"file": 45,"line": 81,"col": 4},{"file": 45,"line": 82,"col": 4},{"file": 45,"line": 84,"col": 4},{"file": 45,"line": 85,"col": 4},{"file": 45,"line": 87,"col": 4},{"file": 45,"line": 88,"col": 4},{"file": 45,"line": 90,"col": 4},{"file": 45,"line": 91,"col": 4},{"file": 45,"line": 93,"col": 4},{"file": 45,"line": 94,"col": 4},{"file": 45,"line": 96,"col": 4},{"file": 45,"line": 97,"col": 4},{"file": 45,"line": 99,"col": 4},{"file": 45,"line": 100,"col": 4},{"file": 45,"line": 102,"col": 4},{"file": 45,"line": 103,"col": 4},{"file": 45,"line": 104,"col": 4},{"file": 45,"line": 118,"col": 4,"docs": " Performs an approximate comparison of two floating point values `x` and `y`. Returns true if the absolute difference between them is less or equal than the specified tolerance. The `tolerance` parameter is the absolute tolerance used when determining if the two numbers are close enough; a good value for this parameter is a small multiple of `epsilon(T)`. Note that this function is recommended for comparing small numbers around zero; using `approxEqRel` is suggested otherwise. NaN values are never considered equal to any value.","fields": [10627,10628,10629,10630]},{"file": 45,"line": 146,"col": 4,"docs": " Performs an approximate comparison of two floating point values `x` and `y`. Returns true if the absolute difference between them is less or equal than `max(|x|, |y|) * tolerance`, where `tolerance` is a positive number greater than zero. The `tolerance` parameter is the relative tolerance used when determining if the two numbers are close enough; a good value for this parameter is usually `sqrt(epsilon(T))`, meaning that the two numbers are considered equal if at least half of the digits are equal. Note that for comparisons of small numbers around zero this function won't give meaningful results, use `approxEqAbs` instead. NaN values are never considered equal to any value.","fields": [10631,10632,10633,10634]},{"file": 45,"line": 161,"col": 4,"docs": " Deprecated, use `approxEqAbs` or `approxEqRel`."},{"file": 45,"line": 194,"col": 4,"fields": [10635]},{"file": 45,"line": 203,"col": 4,"fields": []},{"file": 45,"line": 207,"col": 4,"fields": []},{"file": 45,"line": 211,"col": 4,"fields": []},{"file": 45,"line": 215,"col": 4,"fields": []},{"file": 45,"line": 219,"col": 4,"fields": []},{"file": 45,"line": 223,"col": 4},{"file": 45,"line": 224,"col": 4},{"file": 45,"line": 225,"col": 4},{"file": 45,"line": 226,"col": 4},{"file": 45,"line": 227,"col": 4},{"file": 45,"line": 228,"col": 4},{"file": 45,"line": 229,"col": 4},{"file": 45,"line": 230,"col": 4},{"file": 45,"line": 231,"col": 4},{"file": 45,"line": 232,"col": 4},{"file": 45,"line": 233,"col": 4},{"file": 45,"line": 234,"col": 4},{"file": 45,"line": 235,"col": 4},{"file": 45,"line": 236,"col": 4},{"file": 45,"line": 237,"col": 4},{"file": 45,"line": 238,"col": 4},{"file": 45,"line": 239,"col": 4},{"file": 45,"line": 240,"col": 4},{"file": 45,"line": 241,"col": 4},{"file": 45,"line": 242,"col": 4},{"file": 45,"line": 243,"col": 4},{"file": 45,"line": 244,"col": 4},{"file": 45,"line": 245,"col": 4},{"file": 45,"line": 246,"col": 4},{"file": 45,"line": 247,"col": 4},{"file": 45,"line": 248,"col": 4},{"file": 45,"line": 249,"col": 4},{"file": 45,"line": 250,"col": 4},{"file": 45,"line": 251,"col": 4},{"file": 45,"line": 252,"col": 4},{"file": 45,"line": 253,"col": 4},{"file": 45,"line": 254,"col": 4},{"file": 45,"line": 255,"col": 4},{"file": 45,"line": 256,"col": 4},{"file": 45,"line": 257,"col": 4},{"file": 45,"line": 258,"col": 4},{"file": 45,"line": 259,"col": 4},{"file": 45,"line": 260,"col": 4},{"file": 45,"line": 261,"col": 4},{"file": 45,"line": 262,"col": 4},{"file": 45,"line": 263,"col": 4},{"file": 45,"line": 264,"col": 4},{"file": 45,"line": 265,"col": 4},{"file": 45,"line": 266,"col": 4},{"file": 45,"line": 267,"col": 4},{"file": 45,"line": 268,"col": 4},{"file": 45,"line": 269,"col": 4},{"file": 45,"line": 270,"col": 4},{"file": 45,"line": 271,"col": 4},{"file": 45,"line": 273,"col": 4},{"file": 45,"line": 274,"col": 4},{"file": 45,"line": 276,"col": 4},{"file": 45,"line": 284,"col": 4,"docs": " Returns the number of bits in the mantissa of floating point type T.","fields": [10636]},{"file": 45,"line": 299,"col": 4,"docs": " Returns the number of bits in the exponent of floating point type T.","fields": [10637]},{"file": 45,"line": 387,"col": 4,"docs": " Finds the minimum of three numbers.","fields": [10638,10639,10640]},{"file": 45,"line": 426,"col": 4,"docs": " Limit val to the inclusive range [lower, upper]. ","fields": [10641,10642,10643]},{"file": 45,"line": 466,"col": 4,"fields": [10644]},{"file": 45,"line": 472,"col": 4,"docs": " Shifts a left by shift_amt. Returns an error on overflow. shift_amt is unsigned.","fields": [10645,10646,10647]},{"file": 45,"line": 479,"col": 4,"docs": " Shifts left. Overflowed bits are truncated. A negative shift amount results in a right shift.","fields": [10648,10649,10650]},{"file": 45,"line": 519,"col": 4,"docs": " Shifts right. Overflowed bits are truncated. A negative shift amount results in a left shift.","fields": [10651,10652,10653]},{"file": 45,"line": 559,"col": 4,"docs": " Rotates right. Only unsigned values can be rotated.  Negative shift values result in shift modulo the bit count.","fields": [10654,10655,10656]},{"file": 45,"line": 587,"col": 4,"docs": " Rotates left. Only unsigned values can be rotated.  Negative shift values result in shift modulo the bit count.","fields": [10657,10658,10659]},{"file": 45,"line": 627,"col": 4,"docs": " Returns an unsigned int type that can hold the number of bits in T.","fields": [10660]},{"file": 45,"line": 639,"col": 4,"docs": " Returns the smallest integer type that can hold both from and to.","fields": [10661,10662]},{"file": 45,"line": 716,"col": 4,"docs": " Returns the absolute value of x, where x is a value of an integer type.","fields": [10663]},{"file": 45,"line": 738,"col": 4},{"file": 45,"line": 751,"col": 4,"docs": " Divide numerator by denominator, rounding toward zero. Returns an error on overflow or when denominator is zero.","fields": [10664,10665,10666]},{"file": 45,"line": 775,"col": 4,"docs": " Divide numerator by denominator, rounding toward negative infinity. Returns an error on overflow or when denominator is zero.","fields": [10667,10668,10669]},{"file": 45,"line": 799,"col": 4,"docs": " Divide numerator by denominator, rounding toward positive infinity. Returns an error on overflow or when denominator is zero.","fields": [10670,10671,10672]},{"file": 45,"line": 854,"col": 4,"docs": " Divide numerator by denominator. Return an error if quotient is not an integer, denominator is zero, or on overflow.","fields": [10673,10674,10675]},{"file": 45,"line": 882,"col": 4,"docs": " Returns numerator modulo denominator, or an error if denominator is zero or negative. Negative numerators never result in negative return values.","fields": [10676,10677,10678]},{"file": 45,"line": 908,"col": 4,"docs": " Returns the remainder when numerator is divided by denominator, or an error if denominator is zero or negative. Negative numerators can give negative results.","fields": [10679,10680,10681]},{"file": 45,"line": 968,"col": 4,"docs": " Returns the negation of the integer parameter. Result is a signed integer.","fields": [10682]},{"file": 45,"line": 1014,"col": 4},{"file": 45,"line": 1017,"col": 4,"docs": " Align cast a pointer but return an error if it's the wrong alignment","fields": [10683,10684]},{"file": 45,"line": 1088,"col": 4,"docs": " Returns the next power of two (if the value is not already a power of two). Only unsigned integers can be used. Zero is not an allowed input. Asserts that the value fits.","fields": [10685,10686]},{"file": 45,"line": 1128,"col": 4,"docs": " Return the log base 2 of integer value x, rounding down to the nearest integer.","fields": [10687,10688]},{"file": 45,"line": 1137,"col": 4,"docs": " Return the log base 2 of integer value x, rounding up to the nearest integer.","fields": [10689,10690]},{"file": 45,"line": 1162,"col": 4,"docs": " Cast a value to a different type. If the value doesn't fit in, or can't be perfectly represented by, the new type, it will be converted to the closest possible representation.","fields": [10691,10692]},{"file": 45,"line": 1291,"col": 4,"docs": " See also `CompareOperator`."},{"file": 45,"line": 1340,"col": 4,"docs": " Given two numbers, this function returns the order they are with respect to each other.","fields": [10693,10694]},{"file": 45,"line": 1353,"col": 4,"docs": " See also `Order`."},{"file": 45,"line": 1371,"col": 4,"docs": " This function does the same thing as comparison operators, however the operator is a runtime-known enum value. Works on any operands that support comparison operators.","fields": [10695,10696,10697]},{"file": 45,"line": 1433,"col": 4,"docs": " Returns a mask of all ones if value is true, and a mask of all zeroes if value is false. Compiles to one instruction for register sized integers.","fields": [10698,10699]},{"file": 45,"line": 1478,"col": 4,"docs": " Return the mod of `num` with the smallest integer type","fields": [10700,10701]},{"file": 45,"line": 0,"col": 0},{"file": 45,"line": 1,"col": 0},{"file": 45,"line": 2,"col": 0},{"file": 45,"line": 3,"col": 0},{"file": 45,"line": 707,"col": 0,"fields": []},{"file": 45,"line": 733,"col": 0,"fields": []},{"file": 45,"line": 744,"col": 0,"fields": []},{"file": 45,"line": 762,"col": 0,"fields": []},{"file": 45,"line": 786,"col": 0,"fields": []},{"file": 45,"line": 823,"col": 0,"fields": []},{"file": 45,"line": 867,"col": 0,"fields": []},{"file": 45,"line": 893,"col": 0,"fields": []},{"file": 45,"line": 919,"col": 0,"fields": []},{"file": 45,"line": 1048,"col": 0,"fields": []},{"file": 45,"line": 1097,"col": 0,"fields": []},{"file": 45,"line": 1114,"col": 0,"fields": []},{"file": 46,"line": 7,"col": 4},{"file": 46,"line": 8,"col": 4},{"file": 46,"line": 12,"col": 4,"fields": [10702]},{"file": 46,"line": 55,"col": 4,"fields": [10703,10704]},{"file": 46,"line": 99,"col": 4,"fields": [10705]},{"file": 46,"line": 118,"col": 4,"docs": " Returns the alignment of type T. Note that if T is a pointer or function type the result is different than the one returned by @alignOf(T). If T is a pointer type the alignment of the type it points to is returned. If T is a function type the alignment a target-dependent value is returned.","fields": [10706]},{"file": 46,"line": 363,"col": 4,"fields": [10707]},{"file": 46,"line": 404,"col": 4,"fields": [10708,10709]},{"file": 46,"line": 440,"col": 4,"fields": [10710]},{"file": 46,"line": 485,"col": 4,"fields": [10711,10712]},{"file": 46,"line": 520,"col": 4,"fields": [10713]},{"file": 46,"line": 559,"col": 4,"fields": [10714]},{"file": 46,"line": 597,"col": 4},{"file": 46,"line": 622,"col": 4,"docs": "Returns the active tag of a tagged union","fields": [10715]},{"file": 46,"line": 649,"col": 4,"docs": "Given a tagged union type, and an enum, return the type of the union field corresponding to the enum tag.","fields": [10716,10717]},{"file": 46,"line": 814,"col": 4},{"file": 46,"line": 816,"col": 4,"fields": [10718,10719]},{"file": 46,"line": 828,"col": 4,"docs": " Given a type and a name, return the field index according to source order. Returns `null` if the field is not found.","fields": [10720,10721]},{"file": 46,"line": 836,"col": 4},{"file": 46,"line": 839,"col": 4,"docs": " Returns a slice of pointers to public declarations of a namespace.","fields": [10722,10723]},{"file": 46,"line": 857,"col": 4},{"file": 46,"line": 868,"col": 4,"fields": [10724]},{"file": 46,"line": 881,"col": 4,"fields": [10725,10726]},{"file": 46,"line": 897,"col": 4,"docs": " For a given function type, returns a tuple type which fields will correspond to the argument types. Examples: - `ArgsTuple(fn() void)` ⇒ `tuple { }` - `ArgsTuple(fn(a: u32) u32)` ⇒ `tuple { u32 }` - `ArgsTuple(fn(a: u32, b: f16) noreturn)` ⇒ `tuple { u32, f16 }`","fields": [10727]},{"file": 46,"line": 939,"col": 4,"docs": " For a given anonymous list of types, returns a new tuple type with those types as fields. Examples: - `Tuple(&[_]type {})` ⇒ `tuple { }` - `Tuple(&[_]type {f32})` ⇒ `tuple { f32 }` - `Tuple(&[_]type {f32,u32})` ⇒ `tuple { f32, u32 }`","fields": [10728]},{"file": 46,"line": 1003,"col": 4,"docs": " TODO: https://github.com/ziglang/zig/issues/425","fields": [10729,10730]},{"file": 46,"line": 1010,"col": 4,"docs": " Returns whether `error_union` contains an error.","fields": [10731]},{"file": 46,"line": 0,"col": 0},{"file": 46,"line": 1,"col": 0},{"file": 46,"line": 2,"col": 0},{"file": 46,"line": 3,"col": 0},{"file": 46,"line": 4,"col": 0},{"file": 46,"line": 5,"col": 0},{"file": 46,"line": 10,"col": 0},{"file": 46,"line": 213,"col": 0,"fields": []},{"file": 46,"line": 580,"col": 0,"fields": [10732,10733]},{"file": 46,"line": 645,"col": 0},{"file": 46,"line": 963,"col": 0},{"file": 47,"line": 27,"col": 4},{"file": 47,"line": 28,"col": 4},{"file": 47,"line": 29,"col": 4},{"file": 47,"line": 30,"col": 4},{"file": 47,"line": 31,"col": 4},{"file": 47,"line": 32,"col": 4},{"file": 47,"line": 33,"col": 4},{"file": 47,"line": 34,"col": 4},{"file": 47,"line": 35,"col": 4},{"file": 47,"line": 36,"col": 4},{"file": 47,"line": 37,"col": 4},{"file": 47,"line": 38,"col": 4},{"file": 47,"line": 56,"col": 4,"docs": " Applications can override the `system` API layer in their root source file. Otherwise, when linking libc, this is the C API. When not linking libc, it is the OS-specific system interface."},{"file": 47,"line": 67,"col": 4},{"file": 47,"line": 68,"col": 4},{"file": 47,"line": 69,"col": 4},{"file": 47,"line": 70,"col": 4},{"file": 47,"line": 71,"col": 4},{"file": 47,"line": 72,"col": 4},{"file": 47,"line": 73,"col": 4},{"file": 47,"line": 74,"col": 4},{"file": 47,"line": 75,"col": 4},{"file": 47,"line": 76,"col": 4},{"file": 47,"line": 77,"col": 4},{"file": 47,"line": 78,"col": 4},{"file": 47,"line": 79,"col": 4},{"file": 47,"line": 80,"col": 4},{"file": 47,"line": 81,"col": 4},{"file": 47,"line": 82,"col": 4},{"file": 47,"line": 83,"col": 4},{"file": 47,"line": 84,"col": 4},{"file": 47,"line": 85,"col": 4},{"file": 47,"line": 86,"col": 4},{"file": 47,"line": 87,"col": 4},{"file": 47,"line": 88,"col": 4},{"file": 47,"line": 89,"col": 4},{"file": 47,"line": 90,"col": 4},{"file": 47,"line": 91,"col": 4},{"file": 47,"line": 92,"col": 4},{"file": 47,"line": 93,"col": 4},{"file": 47,"line": 94,"col": 4},{"file": 47,"line": 95,"col": 4},{"file": 47,"line": 96,"col": 4},{"file": 47,"line": 97,"col": 4},{"file": 47,"line": 98,"col": 4},{"file": 47,"line": 99,"col": 4},{"file": 47,"line": 100,"col": 4},{"file": 47,"line": 101,"col": 4},{"file": 47,"line": 102,"col": 4},{"file": 47,"line": 103,"col": 4},{"file": 47,"line": 104,"col": 4},{"file": 47,"line": 105,"col": 4},{"file": 47,"line": 106,"col": 4},{"file": 47,"line": 107,"col": 4},{"file": 47,"line": 108,"col": 4},{"file": 47,"line": 109,"col": 4},{"file": 47,"line": 110,"col": 4},{"file": 47,"line": 111,"col": 4},{"file": 47,"line": 112,"col": 4},{"file": 47,"line": 113,"col": 4},{"file": 47,"line": 114,"col": 4},{"file": 47,"line": 115,"col": 4},{"file": 47,"line": 116,"col": 4},{"file": 47,"line": 117,"col": 4},{"file": 47,"line": 118,"col": 4},{"file": 47,"line": 119,"col": 4},{"file": 47,"line": 120,"col": 4},{"file": 47,"line": 121,"col": 4},{"file": 47,"line": 122,"col": 4},{"file": 47,"line": 123,"col": 4},{"file": 47,"line": 124,"col": 4},{"file": 47,"line": 125,"col": 4},{"file": 47,"line": 126,"col": 4},{"file": 47,"line": 127,"col": 4},{"file": 47,"line": 128,"col": 4},{"file": 47,"line": 129,"col": 4},{"file": 47,"line": 130,"col": 4},{"file": 47,"line": 131,"col": 4},{"file": 47,"line": 132,"col": 4},{"file": 47,"line": 133,"col": 4},{"file": 47,"line": 134,"col": 4},{"file": 47,"line": 135,"col": 4},{"file": 47,"line": 136,"col": 4},{"file": 47,"line": 137,"col": 4},{"file": 47,"line": 138,"col": 4},{"file": 47,"line": 139,"col": 4},{"file": 47,"line": 140,"col": 4},{"file": 47,"line": 141,"col": 4},{"file": 47,"line": 142,"col": 4},{"file": 47,"line": 143,"col": 4},{"file": 47,"line": 144,"col": 4},{"file": 47,"line": 145,"col": 4},{"file": 47,"line": 146,"col": 4},{"file": 47,"line": 147,"col": 4},{"file": 47,"line": 148,"col": 4},{"file": 47,"line": 149,"col": 4},{"file": 47,"line": 150,"col": 4},{"file": 47,"line": 151,"col": 4},{"file": 47,"line": 152,"col": 4},{"file": 47,"line": 153,"col": 4},{"file": 47,"line": 154,"col": 4},{"file": 47,"line": 155,"col": 4},{"file": 47,"line": 156,"col": 4},{"file": 47,"line": 157,"col": 4},{"file": 47,"line": 158,"col": 4},{"file": 47,"line": 159,"col": 4},{"file": 47,"line": 160,"col": 4},{"file": 47,"line": 161,"col": 4},{"file": 47,"line": 162,"col": 4},{"file": 47,"line": 163,"col": 4},{"file": 47,"line": 164,"col": 4},{"file": 47,"line": 165,"col": 4},{"file": 47,"line": 166,"col": 4},{"file": 47,"line": 167,"col": 4},{"file": 47,"line": 168,"col": 4},{"file": 47,"line": 169,"col": 4},{"file": 47,"line": 170,"col": 4},{"file": 47,"line": 171,"col": 4},{"file": 47,"line": 172,"col": 4},{"file": 47,"line": 173,"col": 4},{"file": 47,"line": 174,"col": 4},{"file": 47,"line": 176,"col": 4},{"file": 47,"line": 177,"col": 4},{"file": 47,"line": 178,"col": 4},{"file": 47,"line": 179,"col": 4},{"file": 47,"line": 181,"col": 4},{"file": 47,"line": 186,"col": 4},{"file": 47,"line": 191,"col": 4},{"file": 47,"line": 210,"col": 4},{"file": 47,"line": 215,"col": 4,"docs": " See also `getenv`. Populated by startup code before main(). TODO this is a footgun because the value will be undefined when using `zig build-lib`. https://github.com/ziglang/zig/issues/4524"},{"file": 47,"line": 220,"col": 4,"docs": " Populated by startup code before main(). Not available on Windows. See `std.process.args` for obtaining the process arguments."},{"file": 47,"line": 228,"col": 4,"docs": " To obtain errno, call this function with the return value of the system function call. For some systems this will obtain the value directly from the return code; for others it will use a thread-local errno variable. Therefore, this function only returns a well-defined value when it is called directly after the system function call which one wants to learn the errno value of."},{"file": 47,"line": 257,"col": 4},{"file": 47,"line": 270,"col": 4,"docs": " Changes the mode of the file referred to by the file descriptor. The process must have the correct privileges in order to do this successfully, or must have the effective user ID matching the owner of the file.","fields": [10734,10735]},{"file": 47,"line": 297,"col": 4},{"file": 47,"line": 311,"col": 4,"docs": " Changes the owner and group of the file referred to by the file descriptor. The process must have the correct privileges in order to do this successfully. The group may be changed by the owner of the directory to any group of which the owner is a member. If the owner or group is specified as `null`, the ID is not changed.","fields": [10736,10737,10738]},{"file": 47,"line": 338,"col": 4},{"file": 47,"line": 345,"col": 4,"docs": " Obtain a series of random bytes. These bytes can be used to seed user-space random number generators or for cryptographic purposes. When linking against libc, this calls the appropriate OS-specific library call. Otherwise it uses the zig standard library implementation.","fields": [10739]},{"file": 47,"line": 444,"col": 4},{"file": 47,"line": 474,"col": 4},{"file": 47,"line": 476,"col": 4,"fields": [10740,10741]},{"file": 47,"line": 512,"col": 4},{"file": 47,"line": 608,"col": 4,"docs": " Number of bytes read is returned. Upon reading end-of-file, zero is returned. For POSIX systems, if `fd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received. On Windows, if the application has a global event loop enabled, I/O Completion Ports are used to perform the I/O. `error.WouldBlock` is not possible on Windows. This operation is non-atomic on the following systems: * Windows On these systems, the read races with concurrent writes to the same file descriptor.","fields": [10742,10743]},{"file": 47,"line": 652,"col": 4},{"file": 47,"line": 668,"col": 4,"docs": " Number of bytes read is returned. Upon reading end-of-file, zero is returned. Retries when interrupted by a signal. For POSIX systems, if `fd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received. On Windows, if the application has a global event loop enabled, I/O Completion Ports are used to perform the I/O. `error.WouldBlock` is not possible on Windows. Linux has a limit on how many bytes may be transferred in one `pread` call, which is `0x7ffff000` on both 64-bit and 32-bit systems. This is due to using a signed C int as the return value, as well as stuffing the errno codes into the last `4096` values. This is noted on the `read` man page. The limit on Darwin is `0x7fffffff`, trying to read more than that returns EINVAL. The corresponding POSIX limit is `math.maxInt(isize)`.","fields": [10744,10745,10746]},{"file": 47,"line": 735,"col": 4},{"file": 47,"line": 745,"col": 4,"fields": [10747,10748]},{"file": 47,"line": 816,"col": 4,"docs": " Number of bytes read is returned. Upon reading end-of-file, zero is returned. Retries when interrupted by a signal. For POSIX systems, if `fd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received. On Windows, if the application has a global event loop enabled, I/O Completion Ports are used to perform the I/O. `error.WouldBlock` is not possible on Windows. This operation is non-atomic on the following systems: * Darwin * Windows On these systems, the read races with concurrent writes to the same file descriptor.","fields": [10749,10750,10751]},{"file": 47,"line": 878,"col": 4},{"file": 47,"line": 999,"col": 4,"docs": " Write multiple buffers to a file descriptor. Retries when interrupted by a signal. Returns the number of bytes written. If nonzero bytes were supplied, this will be nonzero. Note that a successful write() may transfer fewer bytes than supplied.  Such partial  writes  can occur  for  various reasons; for example, because there was insufficient space on the disk device to write all of the requested bytes, or because a blocked write() to a socket,  pipe,  or similar  was  interrupted by a signal handler after it had transferred some, but before it had transferred all of the requested bytes.  In the event of a partial write, the caller can  make another  write() call to transfer the remaining bytes.  The subsequent call will either transfer further bytes or may result in an error (e.g., if the disk is now full). For POSIX systems, if `fd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received.k`. On Windows, if the application has a global event loop enabled, I/O Completion Ports are used to perform the I/O. `error.WouldBlock` is not possible on Windows. If `iov.len` is larger than `IOV_MAX`, a partial write will occur.","fields": [10752,10753]},{"file": 47,"line": 1050,"col": 4},{"file": 47,"line": 1074,"col": 4,"docs": " Write to a file descriptor, with a position offset. Retries when interrupted by a signal. Returns the number of bytes written. If nonzero bytes were supplied, this will be nonzero. Note that a successful write() may transfer fewer bytes than supplied.  Such partial  writes  can occur  for  various reasons; for example, because there was insufficient space on the disk device to write all of the requested bytes, or because a blocked write() to a socket,  pipe,  or similar  was  interrupted by a signal handler after it had transferred some, but before it had transferred all of the requested bytes.  In the event of a partial write, the caller can  make another  write() call to transfer the remaining bytes.  The subsequent call will either transfer further bytes or may result in an error (e.g., if the disk is now full). For POSIX systems, if `fd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received. On Windows, if the application has a global event loop enabled, I/O Completion Ports are used to perform the I/O. `error.WouldBlock` is not possible on Windows. Linux has a limit on how many bytes may be transferred in one `pwrite` call, which is `0x7ffff000` on both 64-bit and 32-bit systems. This is due to using a signed C int as the return value, as well as stuffing the errno codes into the last `4096` values. This is noted on the `write` man page. The limit on Darwin is `0x7fffffff`, trying to write more than that returns EINVAL. The corresponding POSIX limit is `math.maxInt(isize)`.","fields": [10754,10755,10756]},{"file": 47,"line": 1166,"col": 4,"docs": " Write multiple buffers to a file descriptor, with a position offset. Retries when interrupted by a signal. Returns the number of bytes written. If nonzero bytes were supplied, this will be nonzero. Note that a successful write() may transfer fewer than count bytes.  Such partial  writes  can occur  for  various reasons; for example, because there was insufficient space on the disk device to write all of the requested bytes, or because a blocked write() to a socket,  pipe,  or similar  was  interrupted by a signal handler after it had transferred some, but before it had transferred all of the requested bytes.  In the event of a partial write, the caller can  make another  write() call to transfer the remaining bytes.  The subsequent call will either transfer further bytes or may result in an error (e.g., if the disk is now full). If `fd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received. The following systems do not have this syscall, and will return partial writes if more than one vector is provided: * Darwin * Windows If `iov.len` is larger than `IOV_MAX`, a partial write will occur.","fields": [10757,10758,10759]},{"file": 47,"line": 1234,"col": 4},{"file": 47,"line": 1282,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted. See also `openZ`.","fields": [10760,10761,10762]},{"file": 47,"line": 1291,"col": 4},{"file": 47,"line": 1295,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted. See also `open`.","fields": [10763,10764,10765]},{"file": 47,"line": 1373,"col": 4,"docs": " Windows-only. The path parameter is [WTF-16](https://simonsapin.github.io/wtf-8/#potentially-ill-formed-utf-16) encoded. Translates the POSIX open API call to a Windows API call. TODO currently, this function does not handle all flag combinations or makes use of perm argument.","fields": [10766,10767,10768]},{"file": 47,"line": 1387,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted. `file_path` is relative to the open directory handle `dir_fd`. See also `openatZ`.","fields": [10769,10770,10771,10772]},{"file": 47,"line": 1400,"col": 4,"docs": " Open and possibly create a file in WASI.","fields": [10773,10774,10775,10776,10777,10778,10779]},{"file": 47,"line": 1431,"col": 4},{"file": 47,"line": 1483,"col": 4,"docs": " Windows-only. Similar to `openat` but with pathname argument null-terminated WTF16 encoded. TODO currently, this function does not handle all flag combinations or makes use of perm argument.","fields": [10780,10781,10782,10783]},{"file": 47,"line": 1494,"col": 4,"fields": [10784]},{"file": 47,"line": 1504,"col": 4,"fields": [10785,10786]},{"file": 47,"line": 1517,"col": 4},{"file": 47,"line": 1531,"col": 4},{"file": 47,"line": 1536,"col": 4,"docs": " Like `execve` except the parameters are null-terminated, matching the syscall API on all targets. This removes the need for an allocator. This function ignores PATH environment variable. See `execvpeZ` for that.","fields": [10787,10788,10789]},{"file": 47,"line": 1563,"col": 4},{"file": 47,"line": 1565,"col": 4},{"file": 47,"line": 1573,"col": 4,"docs": " Like `execvpeZ` except if `arg0_expand` is `.expand`, then `argv` is mutable, and `argv[0]` is expanded to be the same absolute path that is passed to the execve syscall. If this function returns with an error, `argv[0]` will be restored to the value it was when it was passed in.","fields": [10790,10791,10792,10793]},{"file": 47,"line": 1627,"col": 4,"docs": " Like `execvpe` except the parameters are null-terminated, matching the syscall API on all targets. This removes the need for an allocator. This function also uses the PATH environment variable to get the full path to the executable. If `file` is an absolute path, this is the same as `execveZ`.","fields": [10794,10795,10796]},{"file": 47,"line": 1682,"col": 4},{"file": 47,"line": 1701,"col": 4,"docs": " Windows-only. Get an environment variable with a null-terminated, WTF-16 encoded name. See also `getenv`. This function first attempts a case-sensitive lookup. If no match is found, and `key` is ASCII, then it attempts a second case-insensitive lookup.","fields": [10797]},{"file": 47,"line": 1739,"col": 4},{"file": 47,"line": 1745,"col": 4,"docs": " The result is a slice of out_buffer, indexed from 0.","fields": [10798]},{"file": 47,"line": 1769,"col": 4},{"file": 47,"line": 1792,"col": 4,"docs": " Creates a symbolic link named `sym_link_path` which contains the string `target_path`. A symbolic link (also known as a soft link) may point to an existing file or to a nonexistent one; the latter case is known as a dangling link. If `sym_link_path` exists, it will not be overwritten. See also `symlinkZ.","fields": [10799,10800]},{"file": 47,"line": 1804,"col": 4},{"file": 47,"line": 1808,"col": 4,"docs": " This is the same as `symlink` except the parameters are null-terminated pointers. See also `symlink`.","fields": [10801,10802]},{"file": 47,"line": 1838,"col": 4,"docs": " Similar to `symlink`, however, creates a symbolic link named `sym_link_path` which contains the string `target_path` **relative** to `newdirfd` directory handle. A symbolic link (also known as a soft link) may point to an existing file or to a nonexistent one; the latter case is known as a dangling link. If `sym_link_path` exists, it will not be overwritten. See also `symlinkatWasi`, `symlinkatZ` and `symlinkatW`.","fields": [10803,10804,10805]},{"file": 47,"line": 1850,"col": 4},{"file": 47,"line": 1854,"col": 4,"docs": " WASI-only. The same as `symlinkat` but targeting WASI. See also `symlinkat`.","fields": [10806,10807,10808]},{"file": 47,"line": 1878,"col": 4,"docs": " The same as `symlinkat` except the parameters are null-terminated pointers. See also `symlinkat`.","fields": [10809,10810,10811]},{"file": 47,"line": 1902,"col": 4},{"file": 47,"line": 1917,"col": 4,"fields": [10812,10813,10814]},{"file": 47,"line": 1939,"col": 4,"fields": [10815,10816,10817]},{"file": 47,"line": 1945,"col": 4},{"file": 47,"line": 1947,"col": 4,"fields": [10818,10819,10820,10821,10822]},{"file": 47,"line": 1976,"col": 4,"fields": [10823,10824,10825,10826,10827]},{"file": 47,"line": 1988,"col": 4},{"file": 47,"line": 2013,"col": 4,"docs": " Delete a name and possibly the file it refers to. See also `unlinkZ`.","fields": [10828]},{"file": 47,"line": 2025,"col": 4},{"file": 47,"line": 2028,"col": 4,"docs": " Same as `unlink` except the parameter is a null terminated UTF8-encoded string.","fields": [10829]},{"file": 47,"line": 2053,"col": 4,"docs": " Windows-only. Same as `unlink` except the parameter is null-terminated, WTF16 encoded.","fields": [10830]},{"file": 47,"line": 2057,"col": 4},{"file": 47,"line": 2064,"col": 4,"docs": " Delete a file name and possibly the file it refers to, based on an open directory handle. Asserts that the path parameter has no null bytes.","fields": [10831,10832,10833]},{"file": 47,"line": 2076,"col": 4},{"file": 47,"line": 2080,"col": 4,"docs": " WASI-only. Same as `unlinkat` but targeting WASI. See also `unlinkat`.","fields": [10834,10835,10836]},{"file": 47,"line": 2111,"col": 4,"docs": " Same as `unlinkat` but `file_path` is a null-terminated string.","fields": [10837,10838,10839]},{"file": 47,"line": 2141,"col": 4,"docs": " Same as `unlinkat` but `sub_path_w` is UTF16LE, NT prefixed. Windows only.","fields": [10840,10841,10842]},{"file": 47,"line": 2146,"col": 4},{"file": 47,"line": 2171,"col": 4,"docs": " Change the name or location of a file.","fields": [10843,10844]},{"file": 47,"line": 2185,"col": 4},{"file": 47,"line": 2188,"col": 4,"docs": " Same as `rename` except the parameters are null-terminated byte arrays.","fields": [10845,10846]},{"file": 47,"line": 2220,"col": 4,"docs": " Same as `rename` except the parameters are null-terminated UTF16LE encoded byte arrays. Assumes target is Windows.","fields": [10847,10848]},{"file": 47,"line": 2226,"col": 4,"docs": " Change the name or location of a file based on an open directory handle.","fields": [10849,10850,10851,10852]},{"file": 47,"line": 2247,"col": 4,"docs": " WASI-only. Same as `renameat` expect targeting WASI. See also `renameat`.","fields": [10853,10854,10855,10856]},{"file": 47,"line": 2274,"col": 4,"docs": " Same as `renameat` except the parameters are null-terminated byte arrays.","fields": [10857,10858,10859,10860]},{"file": 47,"line": 2312,"col": 4,"docs": " Same as `renameat` but Windows-only and the path parameters are [WTF-16](https://simonsapin.github.io/wtf-8/#potentially-ill-formed-utf-16) encoded.","fields": [10861,10862,10863,10864,10865]},{"file": 47,"line": 2368,"col": 4,"fields": [10866,10867,10868]},{"file": 47,"line": 2380,"col": 4},{"file": 47,"line": 2382,"col": 4,"fields": [10869,10870,10871]},{"file": 47,"line": 2405,"col": 4,"fields": [10872,10873,10874]},{"file": 47,"line": 2430,"col": 4,"fields": [10875,10876,10877]},{"file": 47,"line": 2447,"col": 4},{"file": 47,"line": 2468,"col": 4,"docs": " Create a directory. `mode` is ignored on Windows.","fields": [10878,10879]},{"file": 47,"line": 2481,"col": 4,"docs": " Same as `mkdir` but the parameter is a null-terminated UTF8-encoded string.","fields": [10880,10881]},{"file": 47,"line": 2506,"col": 4,"docs": " Windows-only. Same as `mkdir` but the parameters is  WTF16 encoded.","fields": [10882,10883]},{"file": 47,"line": 2523,"col": 4},{"file": 47,"line": 2538,"col": 4,"docs": " Deletes an empty directory.","fields": [10884]},{"file": 47,"line": 2550,"col": 4},{"file": 47,"line": 2553,"col": 4,"docs": " Same as `rmdir` except the parameter is null-terminated.","fields": [10885]},{"file": 47,"line": 2578,"col": 4,"docs": " Windows-only. Same as `rmdir` except the parameter is WTF16 encoded.","fields": [10886]},{"file": 47,"line": 2585,"col": 4},{"file": 47,"line": 2601,"col": 4,"docs": " Changes the current working directory of the calling process. `dir_path` is recommended to be a UTF-8 encoded string.","fields": [10887]},{"file": 47,"line": 2615,"col": 4},{"file": 47,"line": 2618,"col": 4,"docs": " Same as `chdir` except the parameter is null-terminated.","fields": [10888]},{"file": 47,"line": 2640,"col": 4,"docs": " Windows-only. Same as `chdir` except the paramter is WTF16 encoded.","fields": [10889]},{"file": 47,"line": 2647,"col": 4},{"file": 47,"line": 2653,"col": 4,"fields": [10890]},{"file": 47,"line": 2667,"col": 4},{"file": 47,"line": 2687,"col": 4,"docs": " Read value of a symbolic link. The return value is a slice of `out_buffer` from index 0.","fields": [10891,10892]},{"file": 47,"line": 2699,"col": 4},{"file": 47,"line": 2703,"col": 4,"docs": " Windows-only. Same as `readlink` except `file_path` is WTF16 encoded. See also `readlinkZ`.","fields": [10893,10894]},{"file": 47,"line": 2708,"col": 4,"docs": " Same as `readlink` except `file_path` is null-terminated.","fields": [10895,10896]},{"file": 47,"line": 2732,"col": 4,"docs": " Similar to `readlink` except reads value of a symbolink link **relative** to `dirfd` directory handle. The return value is a slice of `out_buffer` from index 0. See also `readlinkatWasi`, `realinkatZ` and `realinkatW`.","fields": [10897,10898,10899]},{"file": 47,"line": 2744,"col": 4},{"file": 47,"line": 2748,"col": 4,"docs": " WASI-only. Same as `readlinkat` but targets WASI. See also `readlinkat`.","fields": [10900,10901,10902]},{"file": 47,"line": 2768,"col": 4,"docs": " Windows-only. Same as `readlinkat` except `file_path` is null-terminated, WTF16 encoded. See also `readlinkat`.","fields": [10903,10904,10905]},{"file": 47,"line": 2774,"col": 4,"docs": " Same as `readlinkat` except `file_path` is null-terminated. See also `readlinkat`.","fields": [10906,10907,10908]},{"file": 47,"line": 2795,"col": 4},{"file": 47,"line": 2800,"col": 4},{"file": 47,"line": 2802,"col": 4,"fields": [10909]},{"file": 47,"line": 2812,"col": 4,"fields": [10910]},{"file": 47,"line": 2821,"col": 4,"fields": [10911,10912]},{"file": 47,"line": 2831,"col": 4,"fields": [10913]},{"file": 47,"line": 2841,"col": 4,"fields": [10914]},{"file": 47,"line": 2850,"col": 4,"fields": [10915,10916]},{"file": 47,"line": 2905,"col": 4,"fields": [10917]},{"file": 47,"line": 2927,"col": 4},{"file": 47,"line": 2955,"col": 4,"fields": [10918,10919,10920]},{"file": 47,"line": 3012,"col": 4},{"file": 47,"line": 3027,"col": 4},{"file": 47,"line": 3030,"col": 4,"docs": " Shutdown socket send/receive operations","fields": [10921,10922]},{"file": 47,"line": 3066,"col": 4,"fields": [10923]},{"file": 47,"line": 3074,"col": 4},{"file": 47,"line": 3117,"col": 4,"docs": " addr is `*const T` where T is one of the sockaddr","fields": [10924,10925,10926]},{"file": 47,"line": 3159,"col": 4},{"file": 47,"line": 3187,"col": 4,"fields": [10927,10928]},{"file": 47,"line": 3218,"col": 4},{"file": 47,"line": 3260,"col": 4,"docs": " Accept a connection on a socket. If `sockfd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received.","fields": [10929,10930,10931,10932]},{"file": 47,"line": 3342,"col": 4},{"file": 47,"line": 3356,"col": 4,"fields": [10933]},{"file": 47,"line": 3369,"col": 4},{"file": 47,"line": 3395,"col": 4,"fields": [10934,10935,10936,10937]},{"file": 47,"line": 3415,"col": 4,"docs": " Waits for an I/O event on an epoll file descriptor. Returns the number of file descriptors ready for the requested I/O, or zero if no file descriptor became ready during the requested timeout milliseconds.","fields": [10938,10939,10940]},{"file": 47,"line": 3430,"col": 4},{"file": 47,"line": 3436,"col": 4,"fields": [10941,10942]},{"file": 47,"line": 3450,"col": 4},{"file": 47,"line": 3463,"col": 4,"fields": [10943,10944,10945]},{"file": 47,"line": 3492,"col": 4,"fields": [10946,10947,10948]},{"file": 47,"line": 3521,"col": 4},{"file": 47,"line": 3571,"col": 4,"docs": " Initiate a connection on a socket. If `sockfd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN or EINPROGRESS is received.","fields": [10949,10950,10951]},{"file": 47,"line": 3623,"col": 4,"fields": [10952]},{"file": 47,"line": 3658,"col": 4},{"file": 47,"line": 3663,"col": 4,"fields": [10953,10954]},{"file": 47,"line": 3681,"col": 4},{"file": 47,"line": 3723,"col": 4},{"file": 47,"line": 3728,"col": 4,"docs": " Similar to `fstat`, but returns stat of a resource pointed to by `pathname` which is relative to `dirfd` handle. See also `fstatatZ` and `fstatatWasi`.","fields": [10955,10956,10957]},{"file": 47,"line": 3739,"col": 4},{"file": 47,"line": 3743,"col": 4,"docs": " WASI-only. Same as `fstatat` but targeting WASI. See also `fstatat`.","fields": [10958,10959,10960]},{"file": 47,"line": 3762,"col": 4,"docs": " Same as `fstatat` but `pathname` is null-terminated. See also `fstatat`.","fields": [10961,10962,10963]},{"file": 47,"line": 3785,"col": 4},{"file": 47,"line": 3793,"col": 4,"fields": []},{"file": 47,"line": 3803,"col": 4},{"file": 47,"line": 3821,"col": 4,"fields": [10964,10965,10966,10967]},{"file": 47,"line": 3851,"col": 4},{"file": 47,"line": 3858,"col": 4,"docs": " initialize an inotify instance","fields": [10968]},{"file": 47,"line": 3870,"col": 4},{"file": 47,"line": 3880,"col": 4,"docs": " add a watch to an initialized inotify instance","fields": [10969,10970,10971]},{"file": 47,"line": 3885,"col": 4},{"file": 47,"line": 3888,"col": 4,"docs": " Same as `inotify_add_watch` except pathname is null-terminated.","fields": [10972,10973,10974]},{"file": 47,"line": 3906,"col": 4,"docs": " remove an existing watch from an inotify instance","fields": [10975,10976]},{"file": 47,"line": 3915,"col": 4},{"file": 47,"line": 3930,"col": 4,"docs": " `memory.len` must be page-aligned.","fields": [10977,10978]},{"file": 47,"line": 3941,"col": 4},{"file": 47,"line": 3943,"col": 4,"fields": []},{"file": 47,"line": 3953,"col": 4},{"file": 47,"line": 4028,"col": 4},{"file": 47,"line": 4045,"col": 4,"docs": " check user's permissions for a file TODO currently this assumes `mode` is `F.OK` on Windows.","fields": [10979,10980]},{"file": 47,"line": 4055,"col": 4},{"file": 47,"line": 4058,"col": 4,"docs": " Same as `access` except `path` is null-terminated.","fields": [10981,10982]},{"file": 47,"line": 4084,"col": 4,"docs": " Call from Windows-specific code if you already have a UTF-16LE encoded, null terminated string. Otherwise use `access` or `accessC`. TODO currently this ignores `mode`.","fields": [10983,10984]},{"file": 47,"line": 4100,"col": 4,"docs": " Check user's permissions for a file, based on an open directory handle. TODO currently this ignores `mode` and `flags` on Windows.","fields": [10985,10986,10987,10988]},{"file": 47,"line": 4110,"col": 4,"docs": " Same as `faccessat` except the path parameter is null-terminated.","fields": [10989,10990,10991,10992]},{"file": 47,"line": 4135,"col": 4,"docs": " Same as `faccessat` except asserts the target is Windows and the path parameter is NtDll-prefixed, null-terminated, WTF-16 encoded. TODO currently this ignores `mode` and `flags`","fields": [10993,10994,10995,10996]},{"file": 47,"line": 4174,"col": 4},{"file": 47,"line": 4180,"col": 4,"docs": " Creates a unidirectional data channel that can be used for interprocess communication.","fields": []},{"file": 47,"line": 4192,"col": 4,"fields": [10997]},{"file": 47,"line": 4243,"col": 4},{"file": 47,"line": 4250,"col": 4,"fields": [10998,10999,11000,11001,11002]},{"file": 47,"line": 4275,"col": 4},{"file": 47,"line": 4277,"col": 4,"fields": [11003,11004,11005,11006,11007]},{"file": 47,"line": 4301,"col": 4,"fields": [11008,11009]},{"file": 47,"line": 4309,"col": 4},{"file": 47,"line": 4318,"col": 4,"docs": " Repositions read/write file offset relative to the beginning.","fields": [11010,11011]},{"file": 47,"line": 4366,"col": 4,"docs": " Repositions read/write file offset relative to the current offset.","fields": [11012,11013]},{"file": 47,"line": 4413,"col": 4,"docs": " Repositions read/write file offset relative to the end.","fields": [11014,11015]},{"file": 47,"line": 4460,"col": 4,"docs": " Returns the read/write file offset relative to the beginning.","fields": [11016]},{"file": 47,"line": 4506,"col": 4},{"file": 47,"line": 4513,"col": 4,"fields": [11017,11018,11019]},{"file": 47,"line": 4581,"col": 4},{"file": 47,"line": 4608,"col": 4},{"file": 47,"line": 4641,"col": 4,"docs": " Return the canonicalized absolute pathname. Expands all symbolic links and resolves references to `.`, `..`, and extra `/` characters in `pathname`. The return value is a slice of `out_buffer`, but not necessarily from the beginning. See also `realpathZ` and `realpathW`.","fields": [11020,11021]},{"file": 47,"line": 4653,"col": 4},{"file": 47,"line": 4656,"col": 4,"docs": " Same as `realpath` except `pathname` is null-terminated.","fields": [11022,11023]},{"file": 47,"line": 4690,"col": 4,"docs": " Same as `realpath` except `pathname` is UTF16LE-encoded.","fields": [11024,11025]},{"file": 47,"line": 4730,"col": 4,"docs": " Return canonical path of handle `fd`. This function is very host-specific and is not universally supported by all hosts. For example, while it generally works on Linux, macOS or Windows, it is unsupported on FreeBSD, or WASI.","fields": [11026,11027]},{"file": 47,"line": 4783,"col": 4,"docs": " Spurious wakeups are possible and no precision of timing is guaranteed.","fields": [11028,11029]},{"file": 47,"line": 4889,"col": 4},{"file": 47,"line": 4893,"col": 4,"docs": " TODO: change this to return the timespec as a return value TODO: look into making clk_id an enum","fields": [11030,11031]},{"file": 47,"line": 4934,"col": 4,"fields": [11032,11033]},{"file": 47,"line": 4956,"col": 4},{"file": 47,"line": 4958,"col": 4,"fields": [11034]},{"file": 47,"line": 4986,"col": 4,"docs": " Whether or not error.Unexpected will print its value and a stack trace. if this happens the fix is to add the error code to the corresponding switch expression, possibly introduce a new error in the error set, and send a patch to Zig."},{"file": 47,"line": 4988,"col": 4},{"file": 47,"line": 5005,"col": 4},{"file": 47,"line": 5013,"col": 4,"fields": [11035,11036]},{"file": 47,"line": 5034,"col": 4},{"file": 47,"line": 5058,"col": 4,"fields": [11037,11038]},{"file": 47,"line": 5089,"col": 4},{"file": 47,"line": 5091,"col": 4,"fields": [11039]},{"file": 47,"line": 5111,"col": 4,"fields": []},{"file": 47,"line": 5120,"col": 4,"fields": [11040,11041,11042,11043,11044,11045,11046]},{"file": 47,"line": 5170,"col": 4},{"file": 47,"line": 5217,"col": 4},{"file": 47,"line": 5236,"col": 4,"fields": [11047,11048,11049]},{"file": 47,"line": 5307,"col": 4},{"file": 47,"line": 5334,"col": 4,"docs": " Transmit a message to another socket. The `sendto` call may be used only when the socket is in a connected state (so that the intended recipient  is  known). The  following call     send(sockfd, buf, len, flags); is equivalent to     sendto(sockfd, buf, len, flags, NULL, 0); If  sendto()  is used on a connection-mode (`SOCK.STREAM`, `SOCK.SEQPACKET`) socket, the arguments `dest_addr` and `addrlen` are asserted to be `null` and `0` respectively, and asserted that the socket was actually connected. Otherwise, the address of the target is given by `dest_addr` with `addrlen` specifying  its  size. If the message is too long to pass atomically through the underlying protocol, `SendError.MessageTooBig` is returned, and the message is not transmitted. There is no  indication  of  failure  to  deliver. When the message does not fit into the send buffer of  the  socket,  `sendto`  normally  blocks, unless  the socket has been placed in nonblocking I/O mode.  In nonblocking mode it would fail with `SendError.WouldBlock`.  The `select` call may be used  to  determine when it is possible to send more data.","fields": [11050,11051,11052,11053,11054]},{"file": 47,"line": 5426,"col": 4,"docs": " Transmit a message to another socket. The `send` call may be used only when the socket is in a connected state (so that the intended recipient  is  known).   The  only  difference  between `send` and `write` is the presence of flags.  With a zero flags argument, `send` is equivalent to  `write`.   Also,  the  following call     send(sockfd, buf, len, flags); is equivalent to     sendto(sockfd, buf, len, flags, NULL, 0); There is no  indication  of  failure  to  deliver. When the message does not fit into the send buffer of  the  socket,  `send`  normally  blocks, unless  the socket has been placed in nonblocking I/O mode.  In nonblocking mode it would fail with `SendError.WouldBlock`.  The `select` call may be used  to  determine when it is possible to send more data.","fields": [11055,11056,11057]},{"file": 47,"line": 5445,"col": 4},{"file": 47,"line": 5489,"col": 4,"docs": " Transfer data between file descriptors, with optional headers and trailers. Returns the number of bytes written, which can be zero. The `sendfile` call copies `in_len` bytes from one file descriptor to another. When possible, this is done within the operating system kernel, which can provide better performance characteristics than transferring data from kernel to user space and back, such as with `read` and `write` calls. When `in_len` is `0`, it means to copy until the end of the input file has been reached. Note, however, that partial writes are still possible in this case. `in_fd` must be a file descriptor opened for reading, and `out_fd` must be a file descriptor opened for writing. They may be any kind of file descriptor; however, if `in_fd` is not a regular file system file, it may cause this function to fall back to calling `read` and `write`, in which case atomicity guarantees no longer apply. Copying begins reading at `in_offset`. The input file descriptor seek position is ignored and not updated. If the output file descriptor has a seek position, it is updated as bytes are written. When `in_offset` is past the end of the input file, it successfully reads 0 bytes. `flags` has different meanings per operating system; refer to the respective man pages. These systems support atomically sending everything, including headers and trailers: * macOS * FreeBSD These systems support in-kernel data copying, but headers and trailers are not sent atomically: * Linux Other systems fall back to calling `read` / `write`. Linux has a limit on how many bytes may be transferred in one `sendfile` call, which is `0x7ffff000` on both 64-bit and 32-bit systems. This is due to using a signed C int as the return value, as well as stuffing the errno codes into the last `4096` values. This is noted on the `sendfile` man page. The limit on Darwin is `0x7fffffff`, trying to write more than that returns EINVAL. The corresponding POSIX limit on this is `math.maxInt(isize)`.","fields": [11058,11059,11060,11061,11062,11063,11064]},{"file": 47,"line": 5770,"col": 4},{"file": 47,"line": 5811,"col": 4,"docs": " Transfer data between file descriptors at specified offsets. Returns the number of bytes written, which can less than requested. The `copy_file_range` call copies `len` bytes from one file descriptor to another. When possible, this is done within the operating system kernel, which can provide better performance characteristics than transferring data from kernel to user space and back, such as with `pread` and `pwrite` calls. `fd_in` must be a file descriptor opened for reading, and `fd_out` must be a file descriptor opened for writing. They may be any kind of file descriptor; however, if `fd_in` is not a regular file system file, it may cause this function to fall back to calling `pread` and `pwrite`, in which case atomicity guarantees no longer apply. If `fd_in` and `fd_out` are the same, source and target ranges must not overlap. The file descriptor seek positions are ignored and not updated. When `off_in` is past the end of the input file, it successfully reads 0 bytes. `flags` has different meanings per operating system; refer to the respective man pages. These systems support in-kernel data copying: * Linux 4.5 (cross-filesystem 5.3) Other systems fall back to calling `pread` / `pwrite`. Maximum offsets on Linux are `math.maxInt(i64)`.","fields": [11065,11066,11067,11068,11069,11070]},{"file": 47,"line": 5857,"col": 4},{"file": 47,"line": 5865,"col": 4,"fields": [11071,11072]},{"file": 47,"line": 5895,"col": 4},{"file": 47,"line": 5903,"col": 4,"fields": [11073,11074,11075]},{"file": 47,"line": 5922,"col": 4},{"file": 47,"line": 5949,"col": 4,"fields": [11076,11077,11078]},{"file": 47,"line": 5955,"col": 4,"docs": " If `sockfd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received.","fields": [11079,11080,11081,11082,11083]},{"file": 47,"line": 5999,"col": 4},{"file": 47,"line": 6001,"col": 4,"fields": [11084,11085,11086]},{"file": 47,"line": 6049,"col": 4},{"file": 47,"line": 6054,"col": 4,"fields": []},{"file": 47,"line": 6068,"col": 4},{"file": 47,"line": 6090,"col": 4,"docs": " Set a socket's options.","fields": [11087,11088,11089,11090]},{"file": 47,"line": 6122,"col": 4},{"file": 47,"line": 6132,"col": 4},{"file": 47,"line": 6134,"col": 4,"fields": [11091,11092]},{"file": 47,"line": 6152,"col": 4},{"file": 47,"line": 6153,"col": 4},{"file": 47,"line": 6163,"col": 4,"fields": [11093,11094]},{"file": 47,"line": 6168,"col": 4,"fields": [11095]},{"file": 47,"line": 6179,"col": 4},{"file": 47,"line": 6181,"col": 4,"fields": [11096]},{"file": 47,"line": 6194,"col": 4},{"file": 47,"line": 6196,"col": 4,"fields": [11097,11098,11099]},{"file": 47,"line": 6210,"col": 4},{"file": 47,"line": 6215,"col": 4,"fields": [11100,11101]},{"file": 47,"line": 6232,"col": 4,"fields": [11102,11103,11104]},{"file": 47,"line": 6246,"col": 4},{"file": 47,"line": 6254,"col": 4,"docs": " Write all pending file contents and metadata modifications to all filesystems.","fields": []},{"file": 47,"line": 6259,"col": 4,"docs": " Write all pending file contents and metadata modifications to the filesystem which contains the specified file.","fields": [11105]},{"file": 47,"line": 6272,"col": 4,"docs": " Write all pending file contents and metadata modifications for the specified file descriptor to the underlying filesystem.","fields": [11106]},{"file": 47,"line": 6296,"col": 4,"docs": " Write all pending file contents for the specified file descriptor to the underlying filesystem, but not necessarily the metadata.","fields": [11107]},{"file": 47,"line": 6314,"col": 4},{"file": 47,"line": 6329,"col": 4,"fields": [11108,11109]},{"file": 47,"line": 6356,"col": 4},{"file": 47,"line": 6358,"col": 4,"fields": [11110]},{"file": 47,"line": 6373,"col": 4},{"file": 47,"line": 6390,"col": 4},{"file": 47,"line": 6424,"col": 4,"docs": " Give advice about use of memory. This syscall is optional and is sometimes configured to be disabled.","fields": [11111,11112,11113]},{"file": 47,"line": 6438,"col": 4},{"file": 47,"line": 6492,"col": 4,"fields": [11114,11115,11116,11117,11118]},{"file": 47,"line": 16,"col": 0},{"file": 47,"line": 17,"col": 0},{"file": 47,"line": 18,"col": 0},{"file": 47,"line": 19,"col": 0},{"file": 47,"line": 20,"col": 0},{"file": 47,"line": 21,"col": 0},{"file": 47,"line": 22,"col": 0},{"file": 47,"line": 23,"col": 0},{"file": 47,"line": 24,"col": 0},{"file": 47,"line": 25,"col": 0},{"file": 47,"line": 393,"col": 0,"fields": [11119]},{"file": 47,"line": 1335,"col": 0,"fields": [11120]},{"file": 47,"line": 4531,"col": 0,"fields": [11121,11122]},{"file": 47,"line": 5447,"col": 0,"fields": [11123]},{"file": 47,"line": 5784,"col": 0},{"file": 47,"line": 6154,"col": 0,"fields": [11124]},{"file": 48,"line": 17,"col": 4},{"file": 48,"line": 40,"col": 4},{"file": 48,"line": 53,"col": 4},{"file": 48,"line": 71,"col": 4},{"file": 48,"line": 79,"col": 4},{"file": 48,"line": 103,"col": 4},{"file": 48,"line": 112,"col": 4,"docs": " Duplicate copy of SymbolRecordKind, but using the official CV names. Useful for reference purposes and when dealing with unknown record types."},{"file": 48,"line": 311,"col": 4},{"file": 48,"line": 313,"col": 4},{"file": 48,"line": 328,"col": 4},{"file": 48,"line": 339,"col": 4},{"file": 48,"line": 345,"col": 4},{"file": 48,"line": 357,"col": 4,"docs": " The following variable length array appears immediately after the header. The structure definition follows. LineBlockFragmentHeader Blocks[] Each `LineBlockFragmentHeader` as specified below."},{"file": 48,"line": 369,"col": 4},{"file": 48,"line": 379,"col": 4,"docs": " The following two variable length arrays appear immediately after the header.  The structure definitions follow. LineNumberEntry   Lines[NumLines]; ColumnNumberEntry Columns[NumLines];"},{"file": 48,"line": 391,"col": 4},{"file": 48,"line": 407,"col": 4},{"file": 48,"line": 413,"col": 4,"docs": " Checksum bytes follow."},{"file": 48,"line": 424,"col": 4},{"file": 48,"line": 444,"col": 4},{"file": 48,"line": 452,"col": 4},{"file": 48,"line": 481,"col": 4},{"file": 48,"line": 0,"col": 0},{"file": 48,"line": 1,"col": 0},{"file": 48,"line": 2,"col": 0},{"file": 48,"line": 3,"col": 0},{"file": 48,"line": 4,"col": 0},{"file": 48,"line": 5,"col": 0},{"file": 48,"line": 6,"col": 0},{"file": 48,"line": 7,"col": 0},{"file": 48,"line": 8,"col": 0},{"file": 48,"line": 9,"col": 0},{"file": 48,"line": 11,"col": 0},{"file": 48,"line": 463,"col": 0,"fields": [11125,11126]},{"file": 48,"line": 857,"col": 0},{"file": 48,"line": 946,"col": 0,"fields": [11127,11128]},{"file": 48,"line": 951,"col": 0},{"file": 48,"line": 997,"col": 0},{"file": 49,"line": 12,"col": 4},{"file": 49,"line": 13,"col": 4},{"file": 49,"line": 14,"col": 4},{"file": 49,"line": 15,"col": 4},{"file": 49,"line": 18,"col": 4,"docs": " The result is a slice of `out_buffer`, from index `0`.","fields": [11129]},{"file": 49,"line": 23,"col": 4,"docs": " Caller must free the returned memory.","fields": [11130]},{"file": 49,"line": 56,"col": 4,"docs": " Caller owns resulting `BufMap`.","fields": [11131]},{"file": 49,"line": 147,"col": 4},{"file": 49,"line": 156,"col": 4,"docs": " Caller must free returned memory.","fields": [11132,11133]},{"file": 49,"line": 185,"col": 4,"fields": [11134,11135]},{"file": 49,"line": 201,"col": 4},{"file": 49,"line": 228,"col": 4},{"file": 49,"line": 301,"col": 4},{"file": 49,"line": 444,"col": 4},{"file": 49,"line": 510,"col": 4,"fields": []},{"file": 49,"line": 515,"col": 4,"docs": " You must deinitialize iterator's internal buffers by calling `deinit` when done.","fields": [11136]},{"file": 49,"line": 541,"col": 4,"docs": " Caller must call argsFree on result.","fields": [11137]},{"file": 49,"line": 581,"col": 4,"fields": [11138,11139]},{"file": 49,"line": 619,"col": 4},{"file": 49,"line": 625,"col": 4,"docs": " POSIX function which gets a uid from username.","fields": [11140]},{"file": 49,"line": 634,"col": 4,"docs": " TODO this reads /etc/passwd. But sometimes the user/id mapping is in something else like NIS, AD, etc. See `man nss` or look at an strace for `id myuser`.","fields": [11141]},{"file": 49,"line": 743,"col": 4,"docs": " Caller owns the result value and each inner slice. TODO Remove the `Allocator` requirement from this API, which will remove the `Allocator` requirement from `std.zig.system.NativeTargetInfo.detect`. Most likely this will require introducing a new, lower-level function which takes a callback function, and then this function which takes an allocator can exist on top of it.","fields": [11142]},{"file": 49,"line": 820,"col": 4,"docs": " Tells whether calling the `execv` or `execve` functions will be a compile error."},{"file": 49,"line": 825,"col": 4},{"file": 49,"line": 835,"col": 4,"docs": " Replaces the current process image with the executed process. This function must allocate memory to add a null terminating bytes on path and each arg. It must also convert to KEY=VALUE\\0 format for environment variables, and include null pointers after the args and after the environment variables. `argv[0]` is the executable path. This function also uses the PATH environment variable to get the full path to the executable. Due to the heap-allocation, it is illegal to call this function in a fork() child. For that use case, use the `std.os` functions directly.","fields": [11143,11144]},{"file": 49,"line": 847,"col": 4,"docs": " Replaces the current process image with the executed process. This function must allocate memory to add a null terminating bytes on path and each arg. It must also convert to KEY=VALUE\\0 format for environment variables, and include null pointers after the args and after the environment variables. `argv[0]` is the executable path. This function also uses the PATH environment variable to get the full path to the executable. Due to the heap-allocation, it is illegal to call this function in a fork() child. For that use case, use the `std.os` functions directly.","fields": [11145,11146,11147]},{"file": 49,"line": 0,"col": 0},{"file": 49,"line": 1,"col": 0},{"file": 49,"line": 2,"col": 0},{"file": 49,"line": 3,"col": 0},{"file": 49,"line": 4,"col": 0},{"file": 49,"line": 5,"col": 0},{"file": 49,"line": 6,"col": 0},{"file": 49,"line": 7,"col": 0},{"file": 49,"line": 8,"col": 0},{"file": 49,"line": 9,"col": 0},{"file": 49,"line": 10,"col": 0},{"file": 49,"line": 609,"col": 0,"fields": [11148,11149]},{"file": 50,"line": 6,"col": 4,"fields": [11150,11151,11152,11153,11154]},{"file": 50,"line": 1140,"col": 4,"docs": " Use to generate a comparator function for a given type. e.g. `sort(u8, slice, {}, comptime desc(u8))`.","fields": [11155]},{"file": 50,"line": 1361,"col": 4,"fields": [11156,11157,11158,11159]},{"file": 50,"line": 1393,"col": 4,"fields": [11160,11161,11162,11163]},{"file": 50,"line": 1413,"col": 4,"fields": [11164,11165,11166,11167]},{"file": 50,"line": 1445,"col": 4,"fields": [11168,11169,11170,11171]},{"file": 50,"line": 1465,"col": 4,"fields": [11172,11173,11174,11175]},{"file": 50,"line": 0,"col": 0},{"file": 50,"line": 1,"col": 0},{"file": 50,"line": 2,"col": 0},{"file": 50,"line": 3,"col": 0},{"file": 50,"line": 4,"col": 0},{"file": 50,"line": 93,"col": 0},{"file": 50,"line": 109,"col": 0},{"file": 50,"line": 173,"col": 0},{"file": 50,"line": 1155,"col": 0,"fields": []},{"file": 50,"line": 1199,"col": 0},{"file": 50,"line": 1203,"col": 0,"fields": [11176,11177,11178]},{"file": 50,"line": 1207,"col": 0},{"file": 50,"line": 1208,"col": 0},{"file": 50,"line": 1209,"col": 0},{"file": 50,"line": 1210,"col": 0},{"file": 50,"line": 1338,"col": 0},{"file": 50,"line": 1340,"col": 0,"fields": [11179]},{"file": 51,"line": 8,"col": 4},{"file": 51,"line": 11,"col": 4,"docs": " Spurious wakeups are possible and no precision of timing is guaranteed.","fields": [11180]},{"file": 51,"line": 57,"col": 4,"docs": " Get a calendar timestamp, in seconds, relative to UTC 1970-01-01. Precision of timing depends on the hardware and operating system. The return value is signed because it is possible to have a date that is before the epoch. See `std.os.clock_gettime` for a POSIX timestamp.","fields": []},{"file": 51,"line": 66,"col": 4,"docs": " Get a calendar timestamp, in milliseconds, relative to UTC 1970-01-01. Precision of timing depends on the hardware and operating system. The return value is signed because it is possible to have a date that is before the epoch. See `std.os.clock_gettime` for a POSIX timestamp.","fields": []},{"file": 51,"line": 76,"col": 4,"docs": " Get a calendar timestamp, in nanoseconds, relative to UTC 1970-01-01. Precision of timing depends on the hardware and operating system. On Windows this has a maximum granularity of 100 nanoseconds. The return value is signed because it is possible to have a date that is before the epoch. See `std.os.clock_gettime` for a POSIX timestamp.","fields": []},{"file": 51,"line": 100,"col": 4},{"file": 51,"line": 101,"col": 4},{"file": 51,"line": 102,"col": 4},{"file": 51,"line": 103,"col": 4},{"file": 51,"line": 104,"col": 4},{"file": 51,"line": 105,"col": 4},{"file": 51,"line": 106,"col": 4},{"file": 51,"line": 109,"col": 4},{"file": 51,"line": 110,"col": 4},{"file": 51,"line": 111,"col": 4},{"file": 51,"line": 112,"col": 4},{"file": 51,"line": 113,"col": 4},{"file": 51,"line": 114,"col": 4},{"file": 51,"line": 117,"col": 4},{"file": 51,"line": 118,"col": 4},{"file": 51,"line": 119,"col": 4},{"file": 51,"line": 120,"col": 4},{"file": 51,"line": 121,"col": 4},{"file": 51,"line": 124,"col": 4},{"file": 51,"line": 125,"col": 4},{"file": 51,"line": 126,"col": 4},{"file": 51,"line": 127,"col": 4},{"file": 51,"line": 137,"col": 4,"docs": " A monotonic high-performance timer. Timer.start() must be called to initialize the struct, which captures the counter frequency on windows and darwin, records the resolution, and gives the user an opportunity to check for the existnece of monotonic clocks without forcing them to check for error on each read. .resolution is in nanoseconds on all platforms but .start_time's meaning depends on the OS. On Windows and Darwin it is a hardware counter value that requires calculation to convert to a meaninful unit."},{"file": 51,"line": 0,"col": 0},{"file": 51,"line": 1,"col": 0},{"file": 51,"line": 2,"col": 0},{"file": 51,"line": 3,"col": 0},{"file": 51,"line": 4,"col": 0},{"file": 51,"line": 5,"col": 0},{"file": 51,"line": 6,"col": 0},{"file": 51,"line": 248,"col": 0,"fields": [11181,11182,11183]},{"file": 52,"line": 7,"col": 4,"docs": " Returns how many bytes the UTF-8 representation would require for the given codepoint.","fields": [11184]},{"file": 52,"line": 34,"col": 4,"docs": " Encodes the given codepoint into a UTF-8 byte sequence. c: the codepoint. out: the out buffer to write to. Must have a len >= utf8CodepointSequenceLength(c). Errors: if c cannot be encoded in UTF-8. Returns: the number of bytes written to out.","fields": [11185,11186]},{"file": 52,"line": 151,"col": 4,"docs": " Returns true if the given unicode codepoint can be encoded in UTF-8.","fields": [11187]},{"file": 52,"line": 194,"col": 4,"fields": [11188]},{"file": 52,"line": 221,"col": 4,"docs": " Utf8View iterates the code points of a utf-8 encoded string. ``` var utf8 = (try std.unicode.Utf8View.init(\"hi there\")).iterator(); while (utf8.nextCodepointSlice()) |codepoint| {   std.debug.warn(\"got codepoint {}\\n\", .{codepoint}); } ```"},{"file": 52,"line": 255,"col": 4},{"file": 52,"line": 298,"col": 4},{"file": 52,"line": 552,"col": 4,"docs": " Caller must free returned memory.","fields": [11189,11190]},{"file": 52,"line": 569,"col": 4,"docs": " Caller must free returned memory.","fields": [11191,11192]},{"file": 52,"line": 591,"col": 4,"docs": " Asserts that the output buffer is big enough. Returns end byte index into utf8.","fields": [11193,11194]},{"file": 52,"line": 663,"col": 4,"fields": [11195,11196]},{"file": 52,"line": 691,"col": 4,"docs": " Returns index of next character. If exact fit, returned index equals output slice length. Assumes there is enough space for the output.","fields": [11197,11198]},{"file": 52,"line": 752,"col": 4,"docs": " Converts a UTF-8 string literal into a UTF-16LE string literal.","fields": [11199]},{"file": 52,"line": 804,"col": 4,"docs": " Return a Formatter for a Utf16le string","fields": [11200]},{"file": 52,"line": 0,"col": 0},{"file": 52,"line": 1,"col": 0},{"file": 52,"line": 2,"col": 0},{"file": 52,"line": 3,"col": 0},{"file": 52,"line": 64,"col": 0},{"file": 52,"line": 80,"col": 0},{"file": 52,"line": 98,"col": 0},{"file": 52,"line": 122,"col": 0},{"file": 52,"line": 333,"col": 0,"fields": []},{"file": 52,"line": 359,"col": 0,"fields": []},{"file": 52,"line": 367,"col": 0,"fields": [11201,11202,11203]},{"file": 52,"line": 375,"col": 0,"fields": []},{"file": 52,"line": 395,"col": 0,"fields": []},{"file": 52,"line": 405,"col": 0,"fields": []},{"file": 52,"line": 425,"col": 0,"fields": []},{"file": 52,"line": 436,"col": 0,"fields": []},{"file": 52,"line": 455,"col": 0,"fields": []},{"file": 52,"line": 487,"col": 0,"fields": []},{"file": 52,"line": 500,"col": 0,"fields": []},{"file": 52,"line": 516,"col": 0,"fields": []},{"file": 52,"line": 536,"col": 0,"fields": [11204,11205]},{"file": 52,"line": 540,"col": 0,"fields": [11206,11207]},{"file": 52,"line": 544,"col": 0,"fields": [11208]},{"file": 52,"line": 762,"col": 0,"fields": [11209]},{"file": 52,"line": 780,"col": 0,"docs": " Print the given `utf16le` string","fields": [11210,11211,11212,11213]},{"file": 52,"line": 874,"col": 0,"fields": []},{"file": 52,"line": 886,"col": 0,"fields": []},{"file": 53,"line": 574,"col": 4,"fields": []},{"file": 53,"line": 2,"col": 0},{"file": 53,"line": 3,"col": 0},{"file": 53,"line": 4,"col": 0},{"file": 53,"line": 5,"col": 0},{"file": 53,"line": 6,"col": 0},{"file": 53,"line": 7,"col": 0},{"file": 53,"line": 8,"col": 0},{"file": 53,"line": 9,"col": 0},{"file": 53,"line": 10,"col": 0},{"file": 53,"line": 12,"col": 0},{"file": 53,"line": 14,"col": 0},{"file": 53,"line": 87,"col": 0,"fields": []},{"file": 53,"line": 92,"col": 0,"fields": []},{"file": 53,"line": 96,"col": 0,"fields": []},{"file": 53,"line": 102,"col": 0,"fields": []},{"file": 53,"line": 118,"col": 0,"fields": []},{"file": 53,"line": 123,"col": 0,"fields": [11214]},{"file": 53,"line": 191,"col": 0,"fields": [11215]},{"file": 53,"line": 195,"col": 0,"fields": [11216,11217,11218]},{"file": 53,"line": 211,"col": 0,"fields": []},{"file": 53,"line": 217,"col": 0,"fields": []},{"file": 53,"line": 226,"col": 0,"fields": [11219,11220]},{"file": 53,"line": 324,"col": 0,"fields": []},{"file": 53,"line": 335,"col": 0,"fields": []},{"file": 53,"line": 447,"col": 0,"fields": [11221,11222,11223]},{"file": 53,"line": 462,"col": 0,"fields": [11224,11225]},{"file": 53,"line": 468,"col": 0},{"file": 53,"line": 501,"col": 0,"fields": []},{"file": 53,"line": 526,"col": 0,"fields": [11226]},{"file": 54,"line": 21,"col": 4},{"file": 54,"line": 30,"col": 4,"docs": " Sets the event if not already set and wakes up all the threads waiting on the event. It is safe to call `set` multiple times before calling `wait`. However it is illegal to call `set` after `wait` is called until the event is `reset`. This function is thread-safe.","fields": [11227]},{"file": 54,"line": 45,"col": 4,"docs": " Resets the event to its original, unset state. This function is *not* thread-safe. It is equivalent to calling `deinit` followed by `init` but without the possibility of failure.","fields": [11228]},{"file": 54,"line": 49,"col": 4},{"file": 54,"line": 58,"col": 4,"docs": " Wait for the event to be set by blocking the current thread. A timeout in nanoseconds can be provided as a hint for how long the thread should block on the unset event before returning `TimedWaitResult.timed_out`. Thread-safe. No precision of timing is guaranteed. Upon return from `timedWait`, the only function available to be called in `StaticResetEvent` is `reset`.","fields": [11229,11230]},{"file": 54,"line": 64,"col": 4,"docs": " For single-threaded builds, we use this to detect deadlocks. In unsafe modes this ends up being no-ops."},{"file": 54,"line": 115,"col": 4},{"file": 54,"line": 9,"col": 0},{"file": 54,"line": 10,"col": 0},{"file": 54,"line": 11,"col": 0},{"file": 54,"line": 12,"col": 0},{"file": 54,"line": 13,"col": 0},{"file": 54,"line": 14,"col": 0},{"file": 54,"line": 15,"col": 0},{"file": 54,"line": 16,"col": 0},{"file": 54,"line": 17,"col": 0},{"file": 15,"line": 68,"col": 8,"fields": [11231]},{"file": 15,"line": 62,"col": 4},{"file": 55,"line": 8,"col": 4},{"file": 55,"line": 44,"col": 4,"docs": " Set to resizeFn if in-place resize is not supported.","fields": [11232,11233,11234,11235,11236,11237]},{"file": 55,"line": 183,"col": 4,"fields": [11238,11239,11240,11241,11242]},{"file": 55,"line": 194,"col": 4,"fields": [11243,11244,11245,11246,11247,11248]},{"file": 55,"line": 228,"col": 4,"docs": " Allocates an array of `n + 1` items of type `T` and sets the first `n` items to `undefined` and the last item to `sentinel`. Depending on the Allocator implementation, it may be required to call `free` once the memory is no longer needed, to avoid a resource leak. If the `Allocator` implementation is unknown, then correct code will call `free` when done. For allocating a single item, see `create`.","fields": [11249,11250,11251,11252]},{"file": 55,"line": 248,"col": 4,"fields": [11253,11254,11255,11256,11257]},{"file": 55,"line": 259,"col": 4},{"file": 55,"line": 348,"col": 4,"docs": " This is the same as `realloc`, except caller may additionally request a new alignment, which can be larger, smaller, or the same as the old allocation.","fields": [11258,11259,11260,11261,11262]},{"file": 55,"line": 403,"col": 4,"docs": " This is the same as `shrink`, except caller may additionally request a new alignment, which must be smaller or the same as the old allocation.","fields": [11263,11264,11265,11266]},{"file": 55,"line": 462,"col": 4,"docs": " Copies `m` to newly allocated memory, with a null-terminated element. Caller owns the memory.","fields": [11267,11268,11269]},{"file": 55,"line": 2,"col": 0},{"file": 55,"line": 3,"col": 0},{"file": 55,"line": 4,"col": 0},{"file": 55,"line": 5,"col": 0},{"file": 55,"line": 6,"col": 0},{"file": 55,"line": 212,"col": 0,"fields": [11270,11271,11272]},{"file": 25,"line": 293,"col": 4},{"file": 25,"line": 322,"col": 4,"fields": [11273,11274]},{"file": 54,"line": 123,"col": 8,"docs": " This function is provided so that this type can be re-used inside `std.Thread.ResetEvent`.","fields": [11275]},{"file": 54,"line": 129,"col": 8,"docs": " This function is provided so that this type can be re-used inside `std.Thread.ResetEvent`.","fields": [11276]},{"file": 54,"line": 133,"col": 8,"fields": [11277]},{"file": 54,"line": 161,"col": 8,"fields": [11278]},{"file": 54,"line": 165,"col": 8},{"file": 54,"line": 171,"col": 8},{"file": 54,"line": 192,"col": 8},{"file": 54,"line": 228,"col": 8},{"file": 54,"line": 118,"col": 4},{"file": 54,"line": 119,"col": 4},{"file": 56,"line": 7,"col": 4,"docs": " This allocator takes an existing allocator, wraps it, and provides an interface where you can allocate without freeing, and then free it all together."},{"file": 56,"line": 0,"col": 0},{"file": 56,"line": 1,"col": 0},{"file": 56,"line": 2,"col": 0},{"file": 56,"line": 3,"col": 0},{"file": 57,"line": 130,"col": 4,"docs": " Fast non-cryptographic 64bit hash function. See https://github.com/wangyi-fudan/wyhash"},{"file": 57,"line": 0,"col": 0},{"file": 57,"line": 1,"col": 0},{"file": 57,"line": 3,"col": 0},{"file": 57,"line": 37,"col": 0},{"file": 57,"line": 173,"col": 0},{"file": 12,"line": 484,"col": 8},{"file": 12,"line": 503,"col": 8,"fields": [11279,11280]},{"file": 12,"line": 513,"col": 8,"fields": [11281]},{"file": 12,"line": 537,"col": 8,"fields": [11282,11283,11284,11285]},{"file": 58,"line": 8,"col": 4},{"file": 58,"line": 10,"col": 4,"fields": [11286]},{"file": 58,"line": 67,"col": 4,"fields": [11287]},{"file": 58,"line": 132,"col": 4,"fields": [11288]},{"file": 58,"line": 153,"col": 4,"fields": [11289]},{"file": 58,"line": 171,"col": 4,"fields": [11290]},{"file": 58,"line": 189,"col": 4,"fields": [11291]},{"file": 58,"line": 203,"col": 4,"fields": [11292]},{"file": 58,"line": 233,"col": 4,"fields": [11293]},{"file": 58,"line": 263,"col": 4,"fields": [11294]},{"file": 58,"line": 324,"col": 4,"fields": [11295]},{"file": 58,"line": 340,"col": 4,"fields": [11296]},{"file": 58,"line": 379,"col": 4,"fields": [11297]},{"file": 58,"line": 404,"col": 4,"docs": " Returns true if the passed type will coerce to []const u8. Any of the following are considered strings: ``` []const u8, [:S]const u8, *const [N]u8, *const [N:S]u8, []u8, [:S]u8, *[:S]u8, *[N:S]u8. ``` These types are not considered strings: ``` u8, [N]u8, [*]const u8, [*:0]const u8, [*]const [N]u8, []const u16, []const i8, *const u8, ?[]const u8, ?*const [N]u8. ```","fields": [11298]},{"file": 58,"line": 470,"col": 4,"fields": [11299,11300]},{"file": 58,"line": 496,"col": 4,"fields": [11301,11302]},{"file": 58,"line": 522,"col": 4,"fields": [11303,11304]},{"file": 58,"line": 0,"col": 0},{"file": 58,"line": 1,"col": 0},{"file": 58,"line": 2,"col": 0},{"file": 58,"line": 3,"col": 0},{"file": 58,"line": 4,"col": 0},{"file": 58,"line": 6,"col": 0},{"file": 3,"line": 116,"col": 16,"docs": " Latest Windows version that the Zig Standard Library is aware of"},{"file": 3,"line": 120,"col": 16,"docs": " Compared against build numbers reported by the runtime to distinguish win10 versions, where 0x0A000000 + index corresponds to the WindowsVersion u32 value."},{"file": 3,"line": 135,"col": 16,"docs": " Returns whether the first version `self` is newer (greater) than or equal to the second version `ver`.","fields": [11305,11306]},{"file": 3,"line": 139,"col": 16},{"file": 3,"line": 158,"col": 16,"docs": " This function is defined to serialize a Zig source code representation of this type, that, when parsed, will deserialize into the same data.","fields": [11307,11308,11309,11310]},{"file": 3,"line": 185,"col": 16,"fields": [11311,11312]},{"file": 3,"line": 191,"col": 16,"docs": " Checks if system is guaranteed to be at least `version` or older than `version`. Returns `null` if a runtime check is required.","fields": [11313,11314]},{"file": 3,"line": 228,"col": 16,"docs": " The default `VersionRange` represents the range that the Zig Standard Library bases its abstractions on.","fields": [11315,11316]},{"file": 8,"line": 979,"col": 8},{"file": 8,"line": 988,"col": 8},{"file": 8,"line": 997,"col": 8},{"file": 8,"line": 1007,"col": 8},{"file": 8,"line": 1018,"col": 8},{"file": 8,"line": 1079,"col": 8},{"file": 8,"line": 1100,"col": 8},{"file": 8,"line": 1114,"col": 8},{"file": 8,"line": 1132,"col": 8},{"file": 8,"line": 1150,"col": 8},{"file": 8,"line": 1166,"col": 8},{"file": 8,"line": 1184,"col": 8},{"file": 8,"line": 1200,"col": 8},{"file": 8,"line": 1214,"col": 8},{"file": 8,"line": 1230,"col": 8},{"file": 8,"line": 1254,"col": 8},{"file": 8,"line": 1275,"col": 8},{"file": 8,"line": 1302,"col": 8},{"file": 8,"line": 1335,"col": 8},{"file": 8,"line": 1369,"col": 8},{"file": 8,"line": 1408,"col": 8},{"file": 8,"line": 1432,"col": 8},{"file": 8,"line": 1474,"col": 8},{"file": 8,"line": 1498,"col": 8},{"file": 8,"line": 1530,"col": 8},{"file": 8,"line": 1540,"col": 8},{"file": 8,"line": 1554,"col": 8},{"file": 8,"line": 1605,"col": 8},{"file": 8,"line": 1657,"col": 8},{"file": 8,"line": 1709,"col": 8},{"file": 8,"line": 1727,"col": 8},{"file": 8,"line": 1766,"col": 8},{"file": 8,"line": 1795,"col": 8},{"file": 8,"line": 1813,"col": 8},{"file": 8,"line": 1840,"col": 8},{"file": 8,"line": 1854,"col": 8},{"file": 8,"line": 1865,"col": 8},{"file": 8,"line": 1900,"col": 8},{"file": 8,"line": 1936,"col": 8},{"file": 8,"line": 1975,"col": 8},{"file": 8,"line": 2033,"col": 8},{"file": 8,"line": 2094,"col": 8},{"file": 8,"line": 2123,"col": 8},{"file": 8,"line": 2134,"col": 8},{"file": 8,"line": 2145,"col": 8},{"file": 8,"line": 2156,"col": 8},{"file": 8,"line": 2174,"col": 8},{"file": 8,"line": 2192,"col": 8},{"file": 8,"line": 2231,"col": 8},{"file": 8,"line": 2271,"col": 8},{"file": 8,"line": 2281,"col": 8},{"file": 8,"line": 2299,"col": 8},{"file": 8,"line": 2315,"col": 8},{"file": 8,"line": 2333,"col": 8},{"file": 8,"line": 2351,"col": 8},{"file": 8,"line": 2369,"col": 8},{"file": 8,"line": 2379,"col": 8},{"file": 8,"line": 2393,"col": 8},{"file": 8,"line": 2408,"col": 8},{"file": 8,"line": 2423,"col": 8},{"file": 8,"line": 2438,"col": 8},{"file": 8,"line": 2453,"col": 8},{"file": 8,"line": 2468,"col": 8},{"file": 8,"line": 2479,"col": 8},{"file": 8,"line": 2491,"col": 8},{"file": 8,"line": 2506,"col": 8},{"file": 8,"line": 2564,"col": 8},{"file": 8,"line": 2591,"col": 8},{"file": 8,"line": 2667,"col": 8},{"file": 8,"line": 2696,"col": 8},{"file": 8,"line": 2747,"col": 8},{"file": 8,"line": 2794,"col": 8},{"file": 8,"line": 2845,"col": 8},{"file": 8,"line": 2874,"col": 8},{"file": 8,"line": 2937,"col": 8},{"file": 8,"line": 2975,"col": 8},{"file": 8,"line": 2994,"col": 8},{"file": 8,"line": 3004,"col": 8},{"file": 8,"line": 3014,"col": 8},{"file": 8,"line": 3033,"col": 8},{"file": 8,"line": 3058,"col": 8},{"file": 8,"line": 3092,"col": 8},{"file": 8,"line": 3129,"col": 8},{"file": 8,"line": 3144,"col": 8},{"file": 8,"line": 3189,"col": 8},{"file": 8,"line": 3237,"col": 8},{"file": 3,"line": 637,"col": 16,"docs": " A bit set of all the features."},{"file": 3,"line": 1252,"col": 16,"fields": [11317,11318]},{"file": 3,"line": 1262,"col": 16,"fields": [11319]},{"file": 3,"line": 1299,"col": 16,"fields": [11320]},{"file": 12,"line": 618,"col": 8},{"file": 12,"line": 420,"col": 16,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 59,"line": 46,"col": 4},{"file": 59,"line": 47,"col": 4},{"file": 59,"line": 48,"col": 4},{"file": 59,"line": 49,"col": 4},{"file": 59,"line": 50,"col": 4},{"file": 59,"line": 51,"col": 4},{"file": 59,"line": 52,"col": 4},{"file": 59,"line": 53,"col": 4},{"file": 59,"line": 54,"col": 4},{"file": 59,"line": 55,"col": 4},{"file": 59,"line": 56,"col": 4},{"file": 59,"line": 57,"col": 4},{"file": 59,"line": 58,"col": 4},{"file": 59,"line": 60,"col": 4},{"file": 59,"line": 61,"col": 4},{"file": 59,"line": 62,"col": 4},{"file": 59,"line": 63,"col": 4},{"file": 59,"line": 64,"col": 4},{"file": 59,"line": 65,"col": 4},{"file": 59,"line": 66,"col": 4},{"file": 59,"line": 67,"col": 4},{"file": 59,"line": 68,"col": 4},{"file": 59,"line": 69,"col": 4},{"file": 59,"line": 70,"col": 4},{"file": 59,"line": 71,"col": 4},{"file": 59,"line": 72,"col": 4},{"file": 59,"line": 73,"col": 4},{"file": 59,"line": 74,"col": 4},{"file": 59,"line": 75,"col": 4},{"file": 59,"line": 76,"col": 4},{"file": 59,"line": 77,"col": 4},{"file": 59,"line": 78,"col": 4},{"file": 59,"line": 79,"col": 4},{"file": 59,"line": 80,"col": 4},{"file": 59,"line": 81,"col": 4},{"file": 59,"line": 82,"col": 4},{"file": 59,"line": 83,"col": 4},{"file": 59,"line": 84,"col": 4},{"file": 59,"line": 85,"col": 4},{"file": 59,"line": 86,"col": 4},{"file": 59,"line": 87,"col": 4},{"file": 59,"line": 89,"col": 4},{"file": 59,"line": 90,"col": 4},{"file": 59,"line": 91,"col": 4},{"file": 59,"line": 92,"col": 4},{"file": 59,"line": 94,"col": 4},{"file": 59,"line": 126,"col": 4},{"file": 59,"line": 137,"col": 4,"docs": " Set by startup code, used by `getauxval`."},{"file": 59,"line": 195,"col": 4,"fields": [11321]},{"file": 59,"line": 199,"col": 4,"fields": [11322,11323]},{"file": 59,"line": 215,"col": 4,"fields": [11324,11325,11326]},{"file": 59,"line": 219,"col": 4,"fields": [11327]},{"file": 59,"line": 223,"col": 4,"fields": [11328]},{"file": 59,"line": 227,"col": 4,"fields": [11329]},{"file": 59,"line": 231,"col": 4,"fields": [11330,11331,11332]},{"file": 59,"line": 235,"col": 4,"fields": []},{"file": 59,"line": 250,"col": 4,"docs": " This must be inline, and inline call the syscall function, because if the child does a return it will clobber the parent's stack. It is advised to avoid this function and use clone instead, because the compiler is not aware of how vfork affects control flow and you may see different results in optimized builds.","fields": []},{"file": 59,"line": 254,"col": 4,"fields": [11333,11334]},{"file": 59,"line": 258,"col": 4,"fields": [11335,11336,11337,11338]},{"file": 59,"line": 262,"col": 4,"fields": [11339,11340,11341,11342]},{"file": 59,"line": 294,"col": 4,"fields": [11343,11344]},{"file": 59,"line": 298,"col": 4,"fields": [11345,11346,11347]},{"file": 59,"line": 307,"col": 4,"fields": [11348,11349,11350]},{"file": 59,"line": 316,"col": 4,"fields": [11351]},{"file": 59,"line": 320,"col": 4,"fields": [11352,11353,11354]},{"file": 59,"line": 324,"col": 4,"fields": [11355,11356]},{"file": 59,"line": 328,"col": 4,"fields": [11357,11358,11359]},{"file": 59,"line": 336,"col": 4,"fields": [11360,11361,11362,11363]},{"file": 59,"line": 340,"col": 4,"fields": [11364,11365]},{"file": 59,"line": 348,"col": 4,"fields": [11366,11367,11368]},{"file": 59,"line": 352,"col": 4,"fields": [11369,11370,11371]},{"file": 59,"line": 360,"col": 4,"fields": [11372,11373,11374,11375]},{"file": 59,"line": 364,"col": 4,"fields": [11376,11377,11378,11379,11380]},{"file": 59,"line": 368,"col": 4,"fields": [11381]},{"file": 59,"line": 372,"col": 4,"fields": [11382,11383]},{"file": 59,"line": 404,"col": 4,"fields": [11384,11385,11386]},{"file": 59,"line": 412,"col": 4,"fields": [11387,11388,11389]},{"file": 59,"line": 433,"col": 4,"fields": [11390,11391,11392,11393]},{"file": 59,"line": 441,"col": 4,"fields": [11394,11395,11396,11397]},{"file": 59,"line": 453,"col": 4,"fields": [11398,11399,11400,11401,11402]},{"file": 59,"line": 466,"col": 4,"fields": [11403,11404,11405]},{"file": 59,"line": 470,"col": 4,"fields": [11406,11407,11408]},{"file": 59,"line": 474,"col": 4,"fields": [11409,11410,11411,11412]},{"file": 59,"line": 486,"col": 4,"fields": [11413,11414,11415,11416,11417]},{"file": 59,"line": 499,"col": 4,"fields": [11418]},{"file": 59,"line": 507,"col": 4,"fields": [11419,11420]},{"file": 59,"line": 515,"col": 4,"fields": [11421,11422,11423]},{"file": 59,"line": 519,"col": 4,"fields": [11424,11425,11426,11427]},{"file": 59,"line": 558,"col": 4,"fields": [11428,11429]},{"file": 59,"line": 566,"col": 4,"fields": [11430,11431,11432,11433]},{"file": 59,"line": 570,"col": 4,"fields": [11434]},{"file": 59,"line": 580,"col": 4,"fields": [11435,11436]},{"file": 59,"line": 588,"col": 4,"fields": [11437,11438]},{"file": 59,"line": 616,"col": 4,"fields": [11439,11440,11441,11442]},{"file": 59,"line": 656,"col": 4,"fields": [11443,11444]},{"file": 59,"line": 666,"col": 4,"fields": [11445,11446,11447,11448]},{"file": 59,"line": 687,"col": 4,"fields": [11449,11450,11451,11452,11453]},{"file": 59,"line": 698,"col": 4,"fields": [11454,11455,11456]},{"file": 59,"line": 712,"col": 4,"fields": [11457,11458]},{"file": 59,"line": 722,"col": 4,"docs": " See also `clone` (from the arch-specific include)","fields": [11459,11460,11461,11462,11463]},{"file": 59,"line": 727,"col": 4,"docs": " See also `clone` (from the arch-specific include)","fields": [11464,11465]},{"file": 59,"line": 735,"col": 4,"fields": [11466,11467]},{"file": 59,"line": 739,"col": 4,"fields": [11468,11469,11470]},{"file": 59,"line": 744,"col": 4,"docs": " Can only be called on 32 bit systems. For 64 bit see `lseek`.","fields": [11471,11472,11473,11474]},{"file": 59,"line": 758,"col": 4,"docs": " Can only be called on 64 bit systems. For 32 bit see `llseek`.","fields": [11475,11476,11477]},{"file": 59,"line": 762,"col": 4,"fields": [11478]},{"file": 59,"line": 772,"col": 4,"fields": [11479,11480,11481]},{"file": 59,"line": 776,"col": 4,"fields": [11482,11483]},{"file": 59,"line": 784,"col": 4,"fields": [11484,11485,11486]},{"file": 59,"line": 788,"col": 4,"fields": [11487,11488,11489]},{"file": 59,"line": 808,"col": 4,"fields": [11490,11491,11492,11493,11494]},{"file": 59,"line": 819,"col": 4,"fields": [11495]},{"file": 59,"line": 827,"col": 4,"fields": [11496,11497,11498]},{"file": 59,"line": 831,"col": 4,"fields": [11499,11500,11501]},{"file": 59,"line": 835,"col": 4,"fields": [11502,11503,11504,11505]},{"file": 59,"line": 839,"col": 4,"fields": [11506,11507,11508]},{"file": 59,"line": 852,"col": 4,"fields": [11509,11510]},{"file": 59,"line": 880,"col": 4,"fields": [11511,11512]},{"file": 59,"line": 884,"col": 4,"fields": [11513,11514]},{"file": 59,"line": 888,"col": 4,"fields": [11515,11516]},{"file": 59,"line": 892,"col": 4,"fields": [11517,11518]},{"file": 59,"line": 896,"col": 4,"fields": [11519,11520]},{"file": 59,"line": 900,"col": 4,"fields": [11521]},{"file": 59,"line": 908,"col": 4,"fields": [11522]},{"file": 59,"line": 916,"col": 4,"fields": [11523,11524]},{"file": 59,"line": 924,"col": 4,"fields": [11525,11526]},{"file": 59,"line": 932,"col": 4,"fields": []},{"file": 59,"line": 940,"col": 4,"fields": []},{"file": 59,"line": 948,"col": 4,"fields": []},{"file": 59,"line": 956,"col": 4,"fields": []},{"file": 59,"line": 964,"col": 4,"fields": [11527]},{"file": 59,"line": 975,"col": 4,"fields": [11528]},{"file": 59,"line": 986,"col": 4,"fields": [11529,11530,11531]},{"file": 59,"line": 994,"col": 4,"fields": [11532,11533,11534]},{"file": 59,"line": 1002,"col": 4,"fields": [11535,11536,11537]},{"file": 59,"line": 1010,"col": 4,"fields": [11538,11539,11540]},{"file": 59,"line": 1018,"col": 4,"fields": [11541,11542]},{"file": 59,"line": 1026,"col": 4,"fields": [11543,11544]},{"file": 59,"line": 1034,"col": 4,"fields": []},{"file": 59,"line": 1087,"col": 4,"fields": [11545,11546]},{"file": 59,"line": 1095,"col": 4,"fields": [11547,11548]},{"file": 59,"line": 1100,"col": 4,"fields": [11549,11550,11551]},{"file": 59,"line": 1107,"col": 4,"fields": [11552,11553,11554]},{"file": 59,"line": 1114,"col": 4,"fields": [11555,11556,11557]},{"file": 59,"line": 1121,"col": 4,"fields": [11558,11559,11560,11561,11562]},{"file": 59,"line": 1128,"col": 4,"fields": [11563,11564,11565,11566,11567]},{"file": 59,"line": 1135,"col": 4,"fields": [11568,11569,11570]},{"file": 59,"line": 1142,"col": 4,"fields": [11571,11572,11573,11574]},{"file": 59,"line": 1182,"col": 4,"fields": [11575,11576,11577]},{"file": 59,"line": 1189,"col": 4,"fields": [11578,11579,11580]},{"file": 59,"line": 1196,"col": 4,"fields": [11581,11582,11583,11584,11585,11586]},{"file": 59,"line": 1203,"col": 4,"fields": [11587,11588]},{"file": 59,"line": 1210,"col": 4,"fields": [11589,11590,11591]},{"file": 59,"line": 1217,"col": 4,"fields": [11592,11593]},{"file": 59,"line": 1224,"col": 4,"fields": [11594,11595,11596,11597,11598,11599]},{"file": 59,"line": 1231,"col": 4,"fields": [11600,11601,11602,11603]},{"file": 59,"line": 1251,"col": 4,"fields": [11604,11605,11606,11607]},{"file": 59,"line": 1258,"col": 4,"fields": [11608,11609,11610]},{"file": 59,"line": 1265,"col": 4,"fields": [11611,11612,11613,11614]},{"file": 59,"line": 1280,"col": 4,"fields": [11615,11616]},{"file": 59,"line": 1288,"col": 4,"fields": [11617,11618]},{"file": 59,"line": 1296,"col": 4,"fields": [11619,11620,11621,11622]},{"file": 59,"line": 1304,"col": 4,"fields": [11623,11624,11625,11626,11627]},{"file": 59,"line": 1318,"col": 4,"fields": [11628,11629,11630]},{"file": 59,"line": 1322,"col": 4,"fields": [11631,11632,11633]},{"file": 59,"line": 1326,"col": 4,"fields": [11634,11635,11636]},{"file": 59,"line": 1330,"col": 4,"fields": [11637,11638,11639,11640]},{"file": 59,"line": 1334,"col": 4,"fields": [11641,11642,11643,11644]},{"file": 59,"line": 1338,"col": 4,"fields": [11645,11646,11647,11648]},{"file": 59,"line": 1342,"col": 4,"fields": [11649,11650,11651,11652,11653]},{"file": 59,"line": 1346,"col": 4,"fields": [11654,11655,11656,11657,11658]},{"file": 59,"line": 1350,"col": 4,"fields": [11659,11660,11661,11662,11663]},{"file": 59,"line": 1354,"col": 4,"fields": [11664,11665]},{"file": 59,"line": 1358,"col": 4,"fields": [11666,11667]},{"file": 59,"line": 1362,"col": 4,"fields": [11668,11669]},{"file": 59,"line": 1366,"col": 4,"fields": []},{"file": 59,"line": 1370,"col": 4,"fields": [11670,11671,11672]},{"file": 59,"line": 1377,"col": 4,"fields": []},{"file": 59,"line": 1381,"col": 4,"fields": [11673]},{"file": 59,"line": 1385,"col": 4,"fields": [11674,11675,11676,11677]},{"file": 59,"line": 1389,"col": 4,"fields": [11678,11679,11680,11681]},{"file": 59,"line": 1393,"col": 4,"fields": [11682,11683,11684,11685,11686]},{"file": 59,"line": 1405,"col": 4,"fields": [11687,11688]},{"file": 59,"line": 1409,"col": 4,"fields": [11689,11690]},{"file": 59,"line": 1413,"col": 4},{"file": 59,"line": 1418,"col": 4,"fields": [11691,11692]},{"file": 59,"line": 1422,"col": 4,"fields": [11693,11694,11695,11696]},{"file": 59,"line": 1426,"col": 4,"fields": [11697]},{"file": 59,"line": 1430,"col": 4,"fields": [11698,11699]},{"file": 59,"line": 1434,"col": 4,"fields": [11700,11701]},{"file": 59,"line": 1438,"col": 4,"fields": [11702,11703]},{"file": 59,"line": 1442,"col": 4,"fields": [11704]},{"file": 59,"line": 1446,"col": 4,"fields": [11705,11706]},{"file": 59,"line": 1450,"col": 4,"fields": [11707,11708,11709,11710,11711]},{"file": 59,"line": 1454,"col": 4,"fields": [11712,11713,11714,11715]},{"file": 59,"line": 1458,"col": 4,"fields": [11716,11717]},{"file": 59,"line": 1462,"col": 4,"fields": [11718,11719]},{"file": 59,"line": 1466,"col": 4,"fields": [11720,11721]},{"file": 59,"line": 1470,"col": 4,"fields": [11722,11723,11724]},{"file": 59,"line": 1474,"col": 4,"fields": [11725,11726,11727]},{"file": 59,"line": 1478,"col": 4,"fields": [11728,11729,11730]},{"file": 59,"line": 1482,"col": 4,"fields": [11731,11732,11733,11734,11735,11736]},{"file": 59,"line": 1494,"col": 4,"fields": [11737,11738,11739]},{"file": 59,"line": 1498,"col": 4,"fields": []},{"file": 59,"line": 1502,"col": 4,"fields": [11740]},{"file": 59,"line": 1506,"col": 4,"fields": [11741]},{"file": 59,"line": 1510,"col": 4,"fields": [11742]},{"file": 59,"line": 1514,"col": 4,"fields": [11743,11744,11745,11746,11747]},{"file": 59,"line": 1518,"col": 4,"fields": [11748,11749]},{"file": 59,"line": 1538,"col": 4,"fields": [11750,11751,11752]},{"file": 59,"line": 1542,"col": 4,"fields": [11753,11754]},{"file": 59,"line": 1546,"col": 4,"fields": [11755,11756,11757]},{"file": 59,"line": 1555,"col": 4,"fields": [11758,11759,11760,11761]},{"file": 59,"line": 1565,"col": 4,"fields": [11762,11763,11764,11765,11766,11767]},{"file": 59,"line": 1577,"col": 4,"fields": [11768,11769,11770,11771,11772,11773]},{"file": 59,"line": 1589,"col": 4,"fields": [11774,11775,11776,11777]},{"file": 59,"line": 1648,"col": 4,"fields": [11778,11779,11780,11781,11782]},{"file": 59,"line": 1665,"col": 4},{"file": 59,"line": 1671,"col": 4},{"file": 59,"line": 1672,"col": 4},{"file": 59,"line": 1673,"col": 4},{"file": 59,"line": 1674,"col": 4},{"file": 59,"line": 1675,"col": 4},{"file": 59,"line": 1677,"col": 4},{"file": 59,"line": 1678,"col": 4},{"file": 59,"line": 1679,"col": 4},{"file": 59,"line": 1683,"col": 4,"docs": " Largest hardware address length e.g. a mac address is a type of hardware address"},{"file": 59,"line": 1685,"col": 4},{"file": 59,"line": 1686,"col": 4},{"file": 59,"line": 1687,"col": 4},{"file": 59,"line": 1689,"col": 4},{"file": 59,"line": 1724,"col": 4},{"file": 59,"line": 1747,"col": 4},{"file": 59,"line": 1767,"col": 4},{"file": 59,"line": 1788,"col": 4},{"file": 59,"line": 1790,"col": 4},{"file": 59,"line": 1791,"col": 4},{"file": 59,"line": 1792,"col": 4},{"file": 59,"line": 1793,"col": 4},{"file": 59,"line": 1795,"col": 4},{"file": 59,"line": 1824,"col": 4},{"file": 59,"line": 1832,"col": 4},{"file": 59,"line": 1861,"col": 4},{"file": 59,"line": 1993,"col": 4},{"file": 59,"line": 1995,"col": 4},{"file": 59,"line": 2012,"col": 4},{"file": 59,"line": 2018,"col": 4},{"file": 59,"line": 2024,"col": 4},{"file": 59,"line": 2036,"col": 4},{"file": 59,"line": 2112,"col": 4},{"file": 59,"line": 2164,"col": 4},{"file": 59,"line": 2216,"col": 4},{"file": 59,"line": 2496,"col": 4},{"file": 59,"line": 2503,"col": 4},{"file": 59,"line": 2536,"col": 4},{"file": 59,"line": 2538,"col": 4},{"file": 59,"line": 2594,"col": 4,"docs": " IPv6 socket options"},{"file": 59,"line": 2680,"col": 4},{"file": 59,"line": 2704,"col": 4},{"file": 59,"line": 2716,"col": 4},{"file": 59,"line": 2774,"col": 4},{"file": 59,"line": 2798,"col": 4},{"file": 59,"line": 2813,"col": 4},{"file": 59,"line": 2815,"col": 4},{"file": 59,"line": 2854,"col": 4},{"file": 59,"line": 2860,"col": 4},{"file": 59,"line": 2897,"col": 4},{"file": 59,"line": 2903,"col": 4},{"file": 59,"line": 2905,"col": 4},{"file": 59,"line": 2938,"col": 4},{"file": 59,"line": 2994,"col": 4},{"file": 59,"line": 2999,"col": 4},{"file": 59,"line": 3007,"col": 4},{"file": 59,"line": 3016,"col": 4,"docs": " NSIG is the total number of signals defined. As signal numbers are sequential, NSIG is one greater than the largest defined signal number."},{"file": 59,"line": 3018,"col": 4},{"file": 59,"line": 3020,"col": 4},{"file": 59,"line": 3021,"col": 4},{"file": 59,"line": 3023,"col": 4},{"file": 59,"line": 3045,"col": 4,"docs": " Renamed from `sigaction` to `Sigaction` to avoid conflict with the syscall."},{"file": 59,"line": 3058,"col": 4},{"file": 59,"line": 3060,"col": 4},{"file": 59,"line": 3065,"col": 4},{"file": 59,"line": 3090,"col": 4},{"file": 59,"line": 3091,"col": 4},{"file": 59,"line": 3092,"col": 4},{"file": 59,"line": 3094,"col": 4},{"file": 59,"line": 3145,"col": 4},{"file": 59,"line": 3150,"col": 4},{"file": 59,"line": 3155,"col": 4},{"file": 59,"line": 3164,"col": 4},{"file": 59,"line": 3175,"col": 4},{"file": 59,"line": 3176,"col": 4},{"file": 59,"line": 3177,"col": 4},{"file": 59,"line": 3178,"col": 4},{"file": 59,"line": 3180,"col": 4},{"file": 59,"line": 3181,"col": 4},{"file": 59,"line": 3182,"col": 4},{"file": 59,"line": 3184,"col": 4},{"file": 59,"line": 3185,"col": 4},{"file": 59,"line": 3186,"col": 4},{"file": 59,"line": 3188,"col": 4},{"file": 59,"line": 3189,"col": 4},{"file": 59,"line": 3190,"col": 4},{"file": 59,"line": 3192,"col": 4},{"file": 59,"line": 3204,"col": 4},{"file": 59,"line": 3258,"col": 4},{"file": 59,"line": 3263,"col": 4},{"file": 59,"line": 3268,"col": 4},{"file": 59,"line": 3274,"col": 4},{"file": 59,"line": 3282,"col": 4},{"file": 59,"line": 3294,"col": 4},{"file": 59,"line": 3301,"col": 4},{"file": 59,"line": 3302,"col": 4},{"file": 59,"line": 3303,"col": 4},{"file": 59,"line": 3305,"col": 4,"fields": [11783]},{"file": 59,"line": 3313,"col": 4},{"file": 59,"line": 3318,"col": 4},{"file": 59,"line": 3324,"col": 4},{"file": 59,"line": 3325,"col": 4},{"file": 59,"line": 3326,"col": 4},{"file": 59,"line": 3328,"col": 4},{"file": 59,"line": 3342,"col": 4},{"file": 59,"line": 3391,"col": 4},{"file": 59,"line": 3406,"col": 4},{"file": 59,"line": 3421,"col": 4},{"file": 59,"line": 3422,"col": 4},{"file": 59,"line": 3423,"col": 4},{"file": 59,"line": 3424,"col": 4},{"file": 59,"line": 3425,"col": 4},{"file": 59,"line": 3426,"col": 4},{"file": 59,"line": 3427,"col": 4},{"file": 59,"line": 3432,"col": 4,"docs": " io_context is polled"},{"file": 59,"line": 3435,"col": 4,"docs": " SQ poll thread"},{"file": 59,"line": 3438,"col": 4,"docs": " sq_thread_cpu is valid"},{"file": 59,"line": 3441,"col": 4,"docs": " app defines CQ size"},{"file": 59,"line": 3444,"col": 4,"docs": " clamp SQ/CQ ring sizes"},{"file": 59,"line": 3447,"col": 4,"docs": " attach to existing wq"},{"file": 59,"line": 3450,"col": 4,"docs": " start with ring disabled"},{"file": 59,"line": 3452,"col": 4},{"file": 59,"line": 3481,"col": 4,"docs": " needs io_uring_enter wakeup"},{"file": 59,"line": 3484,"col": 4,"docs": " kernel has cqes waiting beyond the cq ring"},{"file": 59,"line": 3486,"col": 4},{"file": 59,"line": 3496,"col": 4},{"file": 59,"line": 3512,"col": 4},{"file": 59,"line": 3526,"col": 4,"docs": " use fixed fileset"},{"file": 59,"line": 3529,"col": 4,"docs": " issue after inflight IO"},{"file": 59,"line": 3532,"col": 4,"docs": " links next sqe"},{"file": 59,"line": 3535,"col": 4,"docs": " like LINK, but stronger"},{"file": 59,"line": 3538,"col": 4,"docs": " always go async"},{"file": 59,"line": 3541,"col": 4,"docs": " select buffer from buf_group"},{"file": 59,"line": 3543,"col": 4},{"file": 59,"line": 3583,"col": 4},{"file": 59,"line": 3586,"col": 4},{"file": 59,"line": 3589,"col": 4},{"file": 59,"line": 3608,"col": 4,"docs": " If set, the upper 16 bits are the buffer ID"},{"file": 59,"line": 3610,"col": 4},{"file": 59,"line": 3611,"col": 4},{"file": 59,"line": 3612,"col": 4},{"file": 59,"line": 3615,"col": 4},{"file": 59,"line": 3616,"col": 4},{"file": 59,"line": 3619,"col": 4},{"file": 59,"line": 3637,"col": 4},{"file": 59,"line": 3643,"col": 4},{"file": 59,"line": 3645,"col": 4},{"file": 59,"line": 3656,"col": 4},{"file": 59,"line": 3669,"col": 4},{"file": 59,"line": 3686,"col": 4,"docs": " io_uring_restriction->opcode values"},{"file": 59,"line": 3702,"col": 4},{"file": 59,"line": 3710,"col": 4},{"file": 59,"line": 3712,"col": 4},{"file": 59,"line": 3713,"col": 4},{"file": 59,"line": 3714,"col": 4},{"file": 59,"line": 3715,"col": 4},{"file": 59,"line": 3716,"col": 4},{"file": 59,"line": 3717,"col": 4},{"file": 59,"line": 3718,"col": 4},{"file": 59,"line": 3719,"col": 4},{"file": 59,"line": 3720,"col": 4},{"file": 59,"line": 3721,"col": 4},{"file": 59,"line": 3722,"col": 4},{"file": 59,"line": 3723,"col": 4},{"file": 59,"line": 3725,"col": 4},{"file": 59,"line": 3727,"col": 4},{"file": 59,"line": 3728,"col": 4},{"file": 59,"line": 3729,"col": 4},{"file": 59,"line": 3730,"col": 4},{"file": 59,"line": 3731,"col": 4},{"file": 59,"line": 3732,"col": 4},{"file": 59,"line": 3734,"col": 4},{"file": 59,"line": 3741,"col": 4,"docs": " Renamed to `Statx` to not conflict with the `statx` function."},{"file": 59,"line": 3803,"col": 4},{"file": 59,"line": 3814,"col": 4},{"file": 59,"line": 3816,"col": 4},{"file": 59,"line": 3852,"col": 4},{"file": 59,"line": 3858,"col": 4},{"file": 59,"line": 3863,"col": 4},{"file": 59,"line": 3871,"col": 4},{"file": 59,"line": 3879,"col": 4,"docs": " why fastopen failed from client perspective"},{"file": 59,"line": 3891,"col": 4,"docs": " for TCP_INFO socket option"},{"file": 59,"line": 3892,"col": 4},{"file": 59,"line": 3893,"col": 4},{"file": 59,"line": 3895,"col": 4,"docs": " ECN was negociated at TCP session init"},{"file": 59,"line": 3897,"col": 4,"docs": " we received at least one packet with ECT"},{"file": 59,"line": 3899,"col": 4,"docs": " SYN-ACK acked data in SYN sent or rcvd"},{"file": 59,"line": 3901,"col": 4},{"file": 59,"line": 3902,"col": 4},{"file": 59,"line": 3908,"col": 4},{"file": 59,"line": 3919,"col": 4},{"file": 59,"line": 3920,"col": 4},{"file": 59,"line": 3921,"col": 4},{"file": 59,"line": 3922,"col": 4},{"file": 59,"line": 3924,"col": 4},{"file": 59,"line": 3925,"col": 4},{"file": 59,"line": 3926,"col": 4},{"file": 59,"line": 3927,"col": 4},{"file": 59,"line": 3928,"col": 4},{"file": 59,"line": 3929,"col": 4},{"file": 59,"line": 3930,"col": 4},{"file": 59,"line": 3931,"col": 4},{"file": 59,"line": 3932,"col": 4},{"file": 59,"line": 3933,"col": 4},{"file": 59,"line": 3934,"col": 4},{"file": 59,"line": 3935,"col": 4},{"file": 59,"line": 3936,"col": 4},{"file": 59,"line": 3937,"col": 4},{"file": 59,"line": 3939,"col": 4},{"file": 59,"line": 3940,"col": 4},{"file": 59,"line": 3941,"col": 4},{"file": 59,"line": 3942,"col": 4},{"file": 59,"line": 3943,"col": 4},{"file": 59,"line": 3944,"col": 4},{"file": 59,"line": 3945,"col": 4},{"file": 59,"line": 3946,"col": 4},{"file": 59,"line": 3947,"col": 4},{"file": 59,"line": 3948,"col": 4},{"file": 59,"line": 3949,"col": 4},{"file": 59,"line": 3950,"col": 4},{"file": 59,"line": 3951,"col": 4},{"file": 59,"line": 3952,"col": 4},{"file": 59,"line": 3954,"col": 4},{"file": 59,"line": 3978,"col": 4},{"file": 59,"line": 3979,"col": 4},{"file": 59,"line": 3980,"col": 4},{"file": 59,"line": 3982,"col": 4},{"file": 59,"line": 3984,"col": 4},{"file": 59,"line": 3985,"col": 4},{"file": 59,"line": 3986,"col": 4},{"file": 59,"line": 3987,"col": 4},{"file": 59,"line": 3988,"col": 4},{"file": 59,"line": 3989,"col": 4},{"file": 59,"line": 3990,"col": 4},{"file": 59,"line": 3991,"col": 4},{"file": 59,"line": 3992,"col": 4},{"file": 59,"line": 3993,"col": 4},{"file": 59,"line": 3994,"col": 4},{"file": 59,"line": 3995,"col": 4},{"file": 59,"line": 3996,"col": 4},{"file": 59,"line": 3997,"col": 4},{"file": 59,"line": 3998,"col": 4},{"file": 59,"line": 3999,"col": 4},{"file": 59,"line": 4000,"col": 4},{"file": 59,"line": 4001,"col": 4},{"file": 59,"line": 4002,"col": 4},{"file": 59,"line": 4003,"col": 4},{"file": 59,"line": 4004,"col": 4},{"file": 59,"line": 4005,"col": 4},{"file": 59,"line": 4006,"col": 4},{"file": 59,"line": 4007,"col": 4},{"file": 59,"line": 4008,"col": 4},{"file": 59,"line": 4009,"col": 4},{"file": 59,"line": 4010,"col": 4},{"file": 59,"line": 4011,"col": 4},{"file": 59,"line": 4012,"col": 4},{"file": 59,"line": 4013,"col": 4},{"file": 59,"line": 4014,"col": 4},{"file": 59,"line": 4015,"col": 4},{"file": 59,"line": 4017,"col": 4},{"file": 59,"line": 4098,"col": 4},{"file": 59,"line": 4099,"col": 4},{"file": 59,"line": 4100,"col": 4},{"file": 59,"line": 4101,"col": 4},{"file": 59,"line": 4102,"col": 4},{"file": 59,"line": 4103,"col": 4},{"file": 59,"line": 4104,"col": 4},{"file": 59,"line": 4105,"col": 4},{"file": 59,"line": 4106,"col": 4},{"file": 59,"line": 4107,"col": 4},{"file": 59,"line": 4108,"col": 4},{"file": 59,"line": 4109,"col": 4},{"file": 59,"line": 4110,"col": 4},{"file": 59,"line": 4111,"col": 4},{"file": 59,"line": 4112,"col": 4},{"file": 59,"line": 4114,"col": 4},{"file": 59,"line": 4115,"col": 4},{"file": 59,"line": 4116,"col": 4},{"file": 59,"line": 4117,"col": 4},{"file": 59,"line": 4118,"col": 4},{"file": 59,"line": 4119,"col": 4},{"file": 59,"line": 4120,"col": 4},{"file": 59,"line": 4121,"col": 4},{"file": 59,"line": 4122,"col": 4},{"file": 59,"line": 4123,"col": 4},{"file": 59,"line": 4124,"col": 4},{"file": 59,"line": 4126,"col": 4},{"file": 59,"line": 4127,"col": 4},{"file": 59,"line": 4128,"col": 4},{"file": 59,"line": 4129,"col": 4},{"file": 59,"line": 4130,"col": 4},{"file": 59,"line": 4131,"col": 4},{"file": 59,"line": 4132,"col": 4},{"file": 59,"line": 4133,"col": 4},{"file": 59,"line": 4134,"col": 4},{"file": 59,"line": 4135,"col": 4},{"file": 59,"line": 4136,"col": 4},{"file": 59,"line": 4138,"col": 4},{"file": 59,"line": 4139,"col": 4},{"file": 59,"line": 4140,"col": 4},{"file": 59,"line": 4141,"col": 4},{"file": 59,"line": 4142,"col": 4},{"file": 59,"line": 4143,"col": 4},{"file": 59,"line": 4144,"col": 4},{"file": 59,"line": 4145,"col": 4},{"file": 59,"line": 4146,"col": 4},{"file": 59,"line": 4148,"col": 4},{"file": 59,"line": 4155,"col": 4},{"file": 59,"line": 4166,"col": 4},{"file": 59,"line": 4167,"col": 4},{"file": 59,"line": 4169,"col": 4},{"file": 59,"line": 4178,"col": 4},{"file": 59,"line": 4199,"col": 4},{"file": 59,"line": 4259,"col": 4},{"file": 59,"line": 4261,"col": 4},{"file": 59,"line": 4269,"col": 4},{"file": 59,"line": 4276,"col": 4},{"file": 59,"line": 4300,"col": 4},{"file": 59,"line": 4327,"col": 4,"docs": " The timespec struct used by the kernel."},{"file": 59,"line": 4332,"col": 4},{"file": 59,"line": 4337,"col": 4},{"file": 59,"line": 4361,"col": 4},{"file": 59,"line": 4368,"col": 4},{"file": 59,"line": 4375,"col": 4},{"file": 59,"line": 4383,"col": 4},{"file": 59,"line": 4392,"col": 4},{"file": 59,"line": 4396,"col": 4},{"file": 59,"line": 4397,"col": 4},{"file": 59,"line": 4399,"col": 4},{"file": 59,"line": 4409,"col": 4},{"file": 59,"line": 4411,"col": 4},{"file": 59,"line": 4412,"col": 4},{"file": 59,"line": 4414,"col": 4},{"file": 59,"line": 4415,"col": 4},{"file": 59,"line": 4417,"col": 4},{"file": 59,"line": 4418,"col": 4},{"file": 59,"line": 4420,"col": 4},{"file": 59,"line": 4421,"col": 4},{"file": 59,"line": 4423,"col": 4},{"file": 59,"line": 4424,"col": 4},{"file": 59,"line": 4426,"col": 4},{"file": 59,"line": 4427,"col": 4},{"file": 59,"line": 4429,"col": 4},{"file": 59,"line": 4430,"col": 4},{"file": 59,"line": 4432,"col": 4},{"file": 59,"line": 4433,"col": 4},{"file": 59,"line": 4435,"col": 4},{"file": 59,"line": 4439,"col": 4},{"file": 59,"line": 4441,"col": 4},{"file": 59,"line": 4594,"col": 4},{"file": 59,"line": 4611,"col": 4},{"file": 59,"line": 4679,"col": 4,"docs": " It is request message."},{"file": 59,"line": 4682,"col": 4,"docs": " Multipart message, terminated by NLMSG_DONE"},{"file": 59,"line": 4685,"col": 4,"docs": " Reply with ack, with zero or error code"},{"file": 59,"line": 4688,"col": 4,"docs": " Echo this request"},{"file": 59,"line": 4691,"col": 4,"docs": " Dump was inconsistent due to sequence change"},{"file": 59,"line": 4694,"col": 4,"docs": " Dump was filtered as requested"},{"file": 59,"line": 4699,"col": 4,"docs": " specify tree root"},{"file": 59,"line": 4702,"col": 4,"docs": " return all matching"},{"file": 59,"line": 4705,"col": 4,"docs": " atomic GET"},{"file": 59,"line": 4706,"col": 4},{"file": 59,"line": 4711,"col": 4,"docs": " Override existing"},{"file": 59,"line": 4714,"col": 4,"docs": " Do not touch, if it exists"},{"file": 59,"line": 4717,"col": 4,"docs": " Create, if it does not exist"},{"file": 59,"line": 4720,"col": 4,"docs": " Add to end of list"},{"file": 59,"line": 4725,"col": 4,"docs": " Do not delete recursively"},{"file": 59,"line": 4730,"col": 4,"docs": " request was capped"},{"file": 59,"line": 4733,"col": 4,"docs": " extended ACK TVLs were included"},{"file": 59,"line": 4735,"col": 4},{"file": 59,"line": 4839,"col": 4,"docs": " Netlink message header Specified in RFC 3549 Section 2.3.2"},{"file": 59,"line": 4856,"col": 4},{"file": 59,"line": 4873,"col": 4},{"file": 59,"line": 4883,"col": 4},{"file": 59,"line": 4960,"col": 4},{"file": 59,"line": 4969,"col": 4},{"file": 59,"line": 5034,"col": 4},{"file": 59,"line": 5099,"col": 4},{"file": 59,"line": 5224,"col": 4},{"file": 70,"line": 13,"col": 4},{"file": 70,"line": 883,"col": 4},{"file": 70,"line": 960,"col": 4},{"file": 70,"line": 993,"col": 4,"fields": [11784]},{"file": 70,"line": 1011,"col": 4,"fields": [11785,11786,11787]},{"file": 70,"line": 1029,"col": 4,"fields": [11788,11789,11790,11791,11792,11793]},{"file": 70,"line": 1054,"col": 4,"fields": [11794,11795,11796,11797]},{"file": 70,"line": 1058,"col": 4,"fields": [11798,11799,11800,11801]},{"file": 70,"line": 1062,"col": 4,"fields": [11802,11803,11804,11805]},{"file": 70,"line": 1071,"col": 4,"fields": [11806,11807,11808,11809]},{"file": 70,"line": 1080,"col": 4,"fields": [11810,11811,11812,11813,11814]},{"file": 70,"line": 1085,"col": 4,"fields": [11815,11816,11817,11818,11819]},{"file": 70,"line": 1096,"col": 4,"docs": " Poll masks previously used to comprise of 16 bits in the flags union of a SQE, but were then extended to comprise of 32 bits in order to make room for additional option flags. To ensure that the correct bits of poll masks are consistently and properly read across multiple kernel versions, poll masks are enforced to be little-endian. https://www.spinics.net/lists/io-uring/msg02848.html","fields": [11820]},{"file": 70,"line": 1100,"col": 4,"fields": [11821,11822,11823,11824,11825]},{"file": 70,"line": 1113,"col": 4,"fields": [11826,11827,11828,11829]},{"file": 70,"line": 1123,"col": 4,"fields": [11830,11831,11832,11833,11834]},{"file": 70,"line": 1133,"col": 4,"fields": [11835,11836,11837,11838]},{"file": 70,"line": 1138,"col": 4,"fields": [11839,11840,11841,11842]},{"file": 70,"line": 1143,"col": 4,"fields": [11843,11844,11845,11846,11847]},{"file": 70,"line": 1154,"col": 4,"fields": [11848,11849]},{"file": 70,"line": 1172,"col": 4,"fields": [11850,11851,11852,11853]},{"file": 70,"line": 1182,"col": 4,"fields": [11854,11855,11856]},{"file": 70,"line": 1200,"col": 4,"fields": [11857,11858,11859]},{"file": 70,"line": 1209,"col": 4,"fields": [11860,11861,11862]},{"file": 70,"line": 1218,"col": 4,"fields": [11863,11864]},{"file": 70,"line": 1225,"col": 4,"fields": [11865,11866,11867,11868,11869]},{"file": 70,"line": 1236,"col": 4,"fields": [11870,11871,11872,11873,11874]},{"file": 70,"line": 1260,"col": 4,"fields": [11875,11876,11877,11878,11879,11880]},{"file": 70,"line": 1272,"col": 4,"fields": [11881,11882,11883]},{"file": 59,"line": 7,"col": 0},{"file": 59,"line": 8,"col": 0},{"file": 59,"line": 9,"col": 0},{"file": 59,"line": 10,"col": 0},{"file": 59,"line": 11,"col": 0},{"file": 59,"line": 12,"col": 0},{"file": 59,"line": 13,"col": 0},{"file": 59,"line": 14,"col": 0},{"file": 59,"line": 15,"col": 0},{"file": 59,"line": 16,"col": 0},{"file": 59,"line": 17,"col": 0},{"file": 59,"line": 18,"col": 0},{"file": 59,"line": 19,"col": 0},{"file": 59,"line": 20,"col": 0},{"file": 59,"line": 21,"col": 0},{"file": 59,"line": 29,"col": 0},{"file": 59,"line": 34,"col": 0},{"file": 59,"line": 152,"col": 0},{"file": 59,"line": 160,"col": 0,"fields": [11884]},{"file": 59,"line": 167,"col": 0,"fields": [11885]},{"file": 59,"line": 174,"col": 0,"fields": [11886]},{"file": 59,"line": 847,"col": 0},{"file": 59,"line": 850,"col": 0},{"file": 59,"line": 867,"col": 0,"fields": [11887,11888]},{"file": 59,"line": 1085,"col": 0},{"file": 59,"line": 3347,"col": 0},{"file": 59,"line": 4405,"col": 0,"fields": [11889]},{"file": 17,"line": 40,"col": 8},{"file": 17,"line": 42,"col": 8},{"file": 17,"line": 110,"col": 8},{"file": 17,"line": 115,"col": 8,"docs": " TODO copy elision / named return values so that the threads referencing *Loop have the correct pointer value. https://github.com/ziglang/zig/issues/2761 and https://github.com/ziglang/zig/issues/2765","fields": [11890]},{"file": 17,"line": 129,"col": 8,"docs": " After initialization, call run(). TODO copy elision / named return values so that the threads referencing *Loop have the correct pointer value. https://github.com/ziglang/zig/issues/2761 and https://github.com/ziglang/zig/issues/2765","fields": [11891]},{"file": 17,"line": 139,"col": 8,"docs": " After initialization, call run(). This is the same as `initThreadPool` using `Thread.getCpuCount` to determine the thread pool size. TODO copy elision / named return values so that the threads referencing *Loop have the correct pointer value. https://github.com/ziglang/zig/issues/2761 and https://github.com/ziglang/zig/issues/2765","fields": [11892]},{"file": 17,"line": 148,"col": 8,"docs": " Thread count is the total thread count. The thread pool size will be max(thread_count - 1, 0)","fields": [11893,11894]},{"file": 17,"line": 197,"col": 8,"fields": [11895]},{"file": 17,"line": 468,"col": 8,"docs": " resume_node must live longer than the anyframe that it holds a reference to. flags must contain EPOLLET","fields": [11896,11897,11898,11899]},{"file": 17,"line": 480,"col": 8,"fields": [11900,11901,11902,11903,11904]},{"file": 17,"line": 489,"col": 8,"fields": [11905,11906]},{"file": 17,"line": 494,"col": 8,"fields": [11907,11908,11909]},{"file": 17,"line": 546,"col": 8,"fields": [11910,11911]},{"file": 17,"line": 558,"col": 8,"fields": [11912,11913]},{"file": 17,"line": 570,"col": 8,"fields": [11914,11915]},{"file": 17,"line": 583,"col": 8,"fields": [11916,11917,11918,11919]},{"file": 17,"line": 606,"col": 8,"docs": " resume_node must live longer than the anyframe that it holds a reference to.","fields": [11920,11921,11922,11923,11924]},{"file": 17,"line": 621,"col": 8,"fields": [11925,11926,11927]},{"file": 17,"line": 686,"col": 8,"docs": " Bring your own linked list node. This means it can't fail.","fields": [11928,11929]},{"file": 17,"line": 692,"col": 8,"fields": [11930,11931]},{"file": 17,"line": 698,"col": 8,"fields": [11932]},{"file": 17,"line": 729,"col": 8,"docs": " Runs the provided function asynchronously. The function's frame is allocated with `allocator` and freed when the function returns. `func` must return void and it can be an async function. Yields to the event loop, running the function on the next tick.","fields": [11933,11934,11935,11936]},{"file": 17,"line": 757,"col": 8,"docs": " Yielding lets the event loop run, starting any unstarted async operations. Note that async operations automatically start when a function yields for any other reason, for example, when async I/O is performed. This function is intended to be used only when CPU bound tasks would be waiting in the event loop but never get started because no async I/O is performed.","fields": [11937]},{"file": 17,"line": 770,"col": 8,"docs": " If the build is multi-threaded and there is an event loop, then it calls `yield`. Otherwise, does nothing.","fields": []},{"file": 17,"line": 779,"col": 8,"docs": " call finishOneEvent when done","fields": [11938]},{"file": 17,"line": 783,"col": 8,"fields": [11939]},{"file": 17,"line": 826,"col": 8,"fields": [11940,11941]},{"file": 17,"line": 950,"col": 8,"docs": " ------- I/0 APIs -------","fields": [11942,11943,11944,11945,11946]},{"file": 17,"line": 983,"col": 8,"fields": [11947,11948,11949,11950]},{"file": 17,"line": 994,"col": 8,"docs": " Performs an async `os.open` using a separate thread.","fields": [11951,11952,11953,11954]},{"file": 17,"line": 1015,"col": 8,"docs": " Performs an async `os.opent` using a separate thread.","fields": [11955,11956,11957,11958,11959]},{"file": 17,"line": 1037,"col": 8,"docs": " Performs an async `os.close` using a separate thread.","fields": [11960,11961]},{"file": 17,"line": 1051,"col": 8,"docs": " Performs an async `os.read` using a separate thread. `fd` must block and not return EAGAIN.","fields": [11962,11963,11964,11965]},{"file": 17,"line": 1084,"col": 8,"docs": " Performs an async `os.readv` using a separate thread. `fd` must block and not return EAGAIN.","fields": [11966,11967,11968,11969]},{"file": 17,"line": 1117,"col": 8,"docs": " Performs an async `os.pread` using a separate thread. `fd` must block and not return EAGAIN.","fields": [11970,11971,11972,11973,11974]},{"file": 17,"line": 1151,"col": 8,"docs": " Performs an async `os.preadv` using a separate thread. `fd` must block and not return EAGAIN.","fields": [11975,11976,11977,11978,11979]},{"file": 17,"line": 1185,"col": 8,"docs": " Performs an async `os.write` using a separate thread. `fd` must block and not return EAGAIN.","fields": [11980,11981,11982,11983]},{"file": 17,"line": 1218,"col": 8,"docs": " Performs an async `os.writev` using a separate thread. `fd` must block and not return EAGAIN.","fields": [11984,11985,11986,11987]},{"file": 17,"line": 1251,"col": 8,"docs": " Performs an async `os.pwrite` using a separate thread. `fd` must block and not return EAGAIN.","fields": [11988,11989,11990,11991,11992]},{"file": 17,"line": 1285,"col": 8,"docs": " Performs an async `os.pwritev` using a separate thread. `fd` must block and not return EAGAIN.","fields": [11993,11994,11995,11996,11997]},{"file": 17,"line": 1317,"col": 8,"fields": [11998,11999,12000,12001,12002,12003]},{"file": 17,"line": 1338,"col": 8,"fields": [12004,12005,12006,12007,12008,12009]},{"file": 17,"line": 1359,"col": 8,"docs": " Performs an async `os.faccessatZ` using a separate thread. `fd` must block and not return EAGAIN.","fields": [12010,12011,12012,12013,12014]},{"file": 17,"line": 1565,"col": 8},{"file": 17,"line": 105,"col": 4},{"file": 17,"line": 106,"col": 4},{"file": 17,"line": 204,"col": 4},{"file": 17,"line": 208,"col": 4},{"file": 17,"line": 210,"col": 4,"fields": [12015,12016]},{"file": 17,"line": 449,"col": 4,"fields": [12017]},{"file": 17,"line": 635,"col": 4,"fields": [12018]},{"file": 17,"line": 844,"col": 4},{"file": 17,"line": 1386,"col": 4,"fields": [12019]},{"file": 17,"line": 1479,"col": 4,"fields": [12020,12021]},{"file": 17,"line": 1485,"col": 4,"fields": [12022,12023]},{"file": 17,"line": 1491,"col": 4,"fields": [12024]},{"file": 17,"line": 1544,"col": 4},{"file": 17,"line": 1554,"col": 4},{"file": 17,"line": 1559,"col": 4},{"file": 60,"line": 20,"col": 4},{"file": 60,"line": 21,"col": 4},{"file": 60,"line": 22,"col": 4},{"file": 60,"line": 23,"col": 4},{"file": 60,"line": 24,"col": 4},{"file": 60,"line": 25,"col": 4},{"file": 60,"line": 26,"col": 4},{"file": 60,"line": 27,"col": 4},{"file": 60,"line": 28,"col": 4},{"file": 60,"line": 29,"col": 4},{"file": 60,"line": 31,"col": 4},{"file": 60,"line": 33,"col": 4},{"file": 60,"line": 46,"col": 4},{"file": 60,"line": 61,"col": 4,"fields": [12025,12026]},{"file": 60,"line": 129,"col": 4},{"file": 60,"line": 131,"col": 4,"fields": [12027,12028,12029]},{"file": 60,"line": 139,"col": 4,"fields": [12030,12031,12032,12033]},{"file": 60,"line": 144,"col": 4,"fields": [12034,12035,12036,12037]},{"file": 60,"line": 155,"col": 4},{"file": 60,"line": 161,"col": 4,"docs": " A Zig wrapper around `NtDeviceIoControlFile` and `NtFsControlFile` syscalls. It implements similar behavior to `DeviceIoControl` and is meant to serve as a direct substitute for that call. TODO work out if we need to expose other arguments to the underlying syscalls.","fields": [12038,12039,12040,12041]},{"file": 60,"line": 214,"col": 4,"fields": [12042,12043,12044]},{"file": 60,"line": 225,"col": 4},{"file": 60,"line": 227,"col": 4,"fields": [12045,12046,12047]},{"file": 60,"line": 235,"col": 4},{"file": 60,"line": 240,"col": 4,"docs": " Call RtlGenRandom() instead of CryptGetRandom() on Windows https://github.com/rust-lang-nursery/rand/issues/111 https://bugzilla.mozilla.org/show_bug.cgi?id=504270","fields": [12048]},{"file": 60,"line": 257,"col": 4},{"file": 60,"line": 263,"col": 4,"fields": [12049,12050]},{"file": 60,"line": 267,"col": 4,"fields": [12051,12052,12053]},{"file": 60,"line": 279,"col": 4,"fields": [12054,12055,12056,12057]},{"file": 60,"line": 307,"col": 4},{"file": 60,"line": 309,"col": 4,"fields": [12058,12059,12060,12061]},{"file": 60,"line": 324,"col": 4},{"file": 60,"line": 326,"col": 4,"fields": [12062,12063,12064,12065]},{"file": 60,"line": 339,"col": 4},{"file": 60,"line": 346,"col": 4,"fields": [12066,12067,12068,12069,12070]},{"file": 60,"line": 375,"col": 4},{"file": 60,"line": 382,"col": 4,"fields": [12071,12072,12073,12074]},{"file": 60,"line": 412,"col": 4,"fields": [12075]},{"file": 60,"line": 416,"col": 4,"fields": [12076]},{"file": 60,"line": 420,"col": 4},{"file": 60,"line": 428,"col": 4,"docs": " If buffer's length exceeds what a Windows DWORD integer can hold, it will be broken into multiple non-atomic reads.","fields": [12077,12078,12079,12080]},{"file": 60,"line": 503,"col": 4},{"file": 60,"line": 511,"col": 4,"fields": [12081,12082,12083,12084]},{"file": 60,"line": 595,"col": 4},{"file": 60,"line": 606,"col": 4,"fields": [12085]},{"file": 60,"line": 632,"col": 4},{"file": 60,"line": 638,"col": 4,"docs": " The result is a slice of `buffer`, indexed from 0.","fields": [12086]},{"file": 60,"line": 660,"col": 4},{"file": 60,"line": 675,"col": 4,"docs": " Needs either: - `SeCreateSymbolicLinkPrivilege` privilege or - Developer mode on Windows 10 otherwise fails with `error.AccessDenied`. In which case `sym_link_path` may still be created on the file system but will lack reparse processing data applied to it.","fields": [12087,12088,12089,12090]},{"file": 60,"line": 729,"col": 4},{"file": 60,"line": 737,"col": 4,"fields": [12091,12092,12093]},{"file": 60,"line": 831,"col": 4},{"file": 60,"line": 842,"col": 4},{"file": 60,"line": 847,"col": 4,"fields": [12094,12095]},{"file": 60,"line": 906,"col": 4},{"file": 60,"line": 908,"col": 4,"fields": [12096,12097,12098]},{"file": 60,"line": 914,"col": 4,"fields": [12099,12100,12101]},{"file": 60,"line": 924,"col": 4},{"file": 60,"line": 929,"col": 4,"fields": [12102]},{"file": 60,"line": 939,"col": 4},{"file": 60,"line": 942,"col": 4,"docs": " The SetFilePointerEx function with the `dwMoveMethod` parameter set to `FILE_BEGIN`.","fields": [12103,12104]},{"file": 60,"line": 957,"col": 4,"docs": " The SetFilePointerEx function with the `dwMoveMethod` parameter set to `FILE_CURRENT`.","fields": [12105,12106]},{"file": 60,"line": 968,"col": 4,"docs": " The SetFilePointerEx function with the `dwMoveMethod` parameter set to `FILE_END`.","fields": [12107,12108]},{"file": 60,"line": 979,"col": 4,"docs": " The SetFilePointerEx function with parameters to get the current offset.","fields": [12109]},{"file": 60,"line": 993,"col": 4,"fields": [12110,12111]},{"file": 60,"line": 1041,"col": 4},{"file": 60,"line": 1051,"col": 4,"docs": " Specifies how to format volume path in the result of `GetFinalPathNameByHandle`. Defaults to DOS volume names."},{"file": 60,"line": 1065,"col": 4,"docs": " Returns canonical (normalized) path of handle. Use `GetFinalPathNameByHandleFormat` to specify whether the path is meant to include NT or DOS volume name (e.g., `\\Device\\HarddiskVolume0\\foo.txt` versus `C:\\foo.txt`). If DOS volume name format is selected, note that this function does *not* prepend `\\\\?\\` prefix to the resultant path.","fields": [12112,12113,12114]},{"file": 60,"line": 1201,"col": 4},{"file": 60,"line": 1203,"col": 4,"fields": [12115,12116,12117]},{"file": 60,"line": 1218,"col": 4},{"file": 60,"line": 1220,"col": 4,"fields": [12118]},{"file": 60,"line": 1230,"col": 4},{"file": 60,"line": 1236,"col": 4,"fields": [12119]},{"file": 60,"line": 1241,"col": 4,"fields": [12120]},{"file": 60,"line": 1254,"col": 4,"fields": [12121,12122]},{"file": 60,"line": 1268,"col": 4,"fields": []},{"file": 60,"line": 1305,"col": 4,"docs": " Microsoft requires WSAStartup to be called to initialize, or else WSASocketW will return WSANOTINITIALISED. Since this is a standard library, we do not have the luxury of putting initialization code anywhere, because we would not want to pay the cost of calling WSAStartup if there ended up being no networking. Also, if Zig code is used as a library, Zig is not in charge of the start code, and we couldn't put in any initialization code even if we wanted to. The documentation for WSAStartup mentions that there must be a matching WSACleanup call. It is not possible for the Zig Standard Library to honor this for the same reason - there is nowhere to put deinitialization code. So, API users of the zig std lib have two options:  * (recommended) The simple, cross-platform way: just call `WSASocketW`    and don't worry about it. Zig will call WSAStartup() in a thread-safe    manner and never deinitialize networking. This is ideal for an    application which has the capability to do networking.  * The getting-your-hands-dirty way: call `WSAStartup()` before doing    networking, so that the error handling code for WSANOTINITIALISED never    gets run, which then allows the application or library to call `WSACleanup()`.    This could make sense for a library, which has init and deinit    functions for the whole library's lifetime.","fields": [12123,12124,12125,12126,12127,12128]},{"file": 60,"line": 1349,"col": 4,"fields": [12129,12130,12131]},{"file": 60,"line": 1353,"col": 4,"fields": [12132,12133]},{"file": 60,"line": 1357,"col": 4,"fields": [12134]},{"file": 60,"line": 1367,"col": 4,"fields": [12135,12136,12137]},{"file": 60,"line": 1372,"col": 4,"fields": [12138,12139,12140]},{"file": 60,"line": 1376,"col": 4,"fields": [12141,12142,12143]},{"file": 60,"line": 1380,"col": 4,"fields": [12144,12145,12146]},{"file": 60,"line": 1393,"col": 4,"fields": [12147,12148,12149,12150,12151,12152]},{"file": 60,"line": 1403,"col": 4,"fields": [12153,12154,12155,12156,12157,12158]},{"file": 60,"line": 1414,"col": 4,"fields": [12159,12160,12161]},{"file": 60,"line": 1418,"col": 4,"fields": [12162,12163,12164,12165,12166,12167]},{"file": 60,"line": 1449,"col": 4,"fields": [12168,12169,12170]},{"file": 60,"line": 1459,"col": 4},{"file": 60,"line": 1461,"col": 4,"fields": [12171,12172]},{"file": 60,"line": 1469,"col": 4},{"file": 60,"line": 1471,"col": 4,"fields": [12173,12174,12175,12176]},{"file": 60,"line": 1479,"col": 4,"fields": [12177,12178,12179]},{"file": 60,"line": 1483,"col": 4},{"file": 60,"line": 1485,"col": 4,"fields": [12180,12181]},{"file": 60,"line": 1493,"col": 4,"fields": [12182,12183]},{"file": 60,"line": 1506,"col": 4,"fields": [12184,12185]},{"file": 60,"line": 1515,"col": 4},{"file": 60,"line": 1517,"col": 4,"fields": []},{"file": 60,"line": 1521,"col": 4,"fields": [12186]},{"file": 60,"line": 1525,"col": 4},{"file": 60,"line": 1530,"col": 4,"fields": [12187,12188,12189]},{"file": 60,"line": 1541,"col": 4},{"file": 60,"line": 1548,"col": 4,"fields": [12190,12191,12192,12193,12194,12195,12196,12197,12198,12199]},{"file": 60,"line": 1583,"col": 4},{"file": 60,"line": 1588,"col": 4,"fields": [12200]},{"file": 60,"line": 1599,"col": 4,"fields": [12201]},{"file": 60,"line": 1603,"col": 4,"fields": []},{"file": 60,"line": 1612,"col": 4,"fields": []},{"file": 60,"line": 1621,"col": 4,"fields": [12202,12203,12204,12205]},{"file": 60,"line": 1625,"col": 4,"fields": [12206,12207,12208]},{"file": 60,"line": 1629,"col": 4,"fields": [12209]},{"file": 60,"line": 1633,"col": 4,"fields": [12210]},{"file": 60,"line": 1637,"col": 4},{"file": 60,"line": 1639,"col": 4,"fields": [12211]},{"file": 60,"line": 1652,"col": 4},{"file": 60,"line": 1654,"col": 4,"fields": [12212,12213,12214,12215]},{"file": 60,"line": 1668,"col": 4},{"file": 60,"line": 1673,"col": 4,"fields": [12216,12217,12218,12219,12220,12221,12222,12223,12224,12225]},{"file": 60,"line": 1706,"col": 4},{"file": 60,"line": 1710,"col": 4,"fields": [12226,12227,12228,12229,12230]},{"file": 60,"line": 1726,"col": 4,"fields": []},{"file": 60,"line": 1744,"col": 4,"fields": []},{"file": 60,"line": 1753,"col": 4,"docs": " A file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated Universal Time (UTC). This function returns the number of nanoseconds since the canonical epoch, which is the POSIX one (Jan 01, 1970 AD).","fields": [12231]},{"file": 60,"line": 1758,"col": 4,"fields": [12232]},{"file": 60,"line": 1763,"col": 4,"fields": [12233]},{"file": 60,"line": 1769,"col": 4,"docs": " Converts a number of nanoseconds since the POSIX epoch to a Windows FILETIME.","fields": [12234]},{"file": 60,"line": 1777,"col": 4},{"file": 60,"line": 1787,"col": 4,"docs": " The error type for `removeDotDirsSanitized`"},{"file": 60,"line": 1794,"col": 4,"docs": " Removes '.' and '..' path components from a \"sanitized relative path\". A \"sanitized path\" is one where:    1) all forward slashes have been replaced with back slashes    2) all repeating back slashes have been collapsed    3) the path is a relative one (does not start with a back slash)","fields": [12235,12236]},{"file": 60,"line": 1847,"col": 4,"docs": " Normalizes a Windows path with the following steps:     1) convert all forward slashes to back slashes     2) collapse duplicate back slashes     3) remove '.' and '..' directory parts Returns the length of the new path.","fields": [12237,12238]},{"file": 60,"line": 1863,"col": 4,"docs": " Same as `sliceToPrefixedFileW` but accepts a pointer to a null-terminated path.","fields": [12239]},{"file": 60,"line": 1869,"col": 4,"docs": " Converts the path `s` to WTF16, null-terminated. If the path is absolute, it will get NT-style prefix `\\??\\` prepended automatically.","fields": [12240]},{"file": 60,"line": 1917,"col": 4,"docs": " Assumes an absolute path.","fields": [12241]},{"file": 60,"line": 1949,"col": 4,"docs": " Loads a Winsock extension function in runtime specified by a GUID.","fields": [12242,12243,12244]},{"file": 60,"line": 1982,"col": 4,"docs": " Call this when you made a windows DLL call or something that does SetLastError and you get an unexpected error.","fields": [12245]},{"file": 60,"line": 2003,"col": 4,"fields": [12246]},{"file": 60,"line": 2009,"col": 4,"docs": " Call this when you made a windows NtDll call and you get an unexpected status.","fields": [12247]},{"file": 60,"line": 2017,"col": 4,"fields": [12248,12249]},{"file": 60,"line": 2024,"col": 4,"fields": [12250,12251]},{"file": 60,"line": 2032,"col": 4},{"file": 60,"line": 2033,"col": 4},{"file": 60,"line": 2034,"col": 4},{"file": 60,"line": 2035,"col": 4},{"file": 60,"line": 2038,"col": 4,"docs": " The standard input device. Initially, this is the console input buffer, CONIN$."},{"file": 60,"line": 2041,"col": 4,"docs": " The standard output device. Initially, this is the active console screen buffer, CONOUT$."},{"file": 60,"line": 2044,"col": 4,"docs": " The standard error device. Initially, this is the active console screen buffer, CONOUT$."},{"file": 60,"line": 2046,"col": 4},{"file": 60,"line": 2051,"col": 4},{"file": 60,"line": 2052,"col": 4},{"file": 60,"line": 2053,"col": 4},{"file": 60,"line": 2054,"col": 4},{"file": 60,"line": 2055,"col": 4},{"file": 60,"line": 2056,"col": 4},{"file": 60,"line": 2057,"col": 4},{"file": 60,"line": 2058,"col": 4},{"file": 60,"line": 2059,"col": 4},{"file": 60,"line": 2060,"col": 4},{"file": 60,"line": 2061,"col": 4},{"file": 60,"line": 2062,"col": 4},{"file": 60,"line": 2063,"col": 4},{"file": 60,"line": 2064,"col": 4},{"file": 60,"line": 2065,"col": 4},{"file": 60,"line": 2066,"col": 4},{"file": 60,"line": 2067,"col": 4},{"file": 60,"line": 2068,"col": 4},{"file": 60,"line": 2069,"col": 4},{"file": 60,"line": 2070,"col": 4},{"file": 60,"line": 2071,"col": 4},{"file": 60,"line": 2072,"col": 4},{"file": 60,"line": 2073,"col": 4},{"file": 60,"line": 2074,"col": 4},{"file": 60,"line": 2075,"col": 4},{"file": 60,"line": 2076,"col": 4},{"file": 60,"line": 2077,"col": 4},{"file": 60,"line": 2078,"col": 4},{"file": 60,"line": 2079,"col": 4},{"file": 60,"line": 2080,"col": 4},{"file": 60,"line": 2081,"col": 4},{"file": 60,"line": 2082,"col": 4},{"file": 60,"line": 2083,"col": 4},{"file": 60,"line": 2084,"col": 4},{"file": 60,"line": 2085,"col": 4},{"file": 60,"line": 2086,"col": 4},{"file": 60,"line": 2087,"col": 4},{"file": 60,"line": 2088,"col": 4},{"file": 60,"line": 2089,"col": 4},{"file": 60,"line": 2090,"col": 4},{"file": 60,"line": 2091,"col": 4},{"file": 60,"line": 2092,"col": 4},{"file": 60,"line": 2093,"col": 4},{"file": 60,"line": 2094,"col": 4},{"file": 60,"line": 2095,"col": 4},{"file": 60,"line": 2096,"col": 4},{"file": 60,"line": 2097,"col": 4},{"file": 60,"line": 2099,"col": 4},{"file": 60,"line": 2100,"col": 4},{"file": 60,"line": 2101,"col": 4},{"file": 60,"line": 2103,"col": 4},{"file": 60,"line": 2105,"col": 4},{"file": 60,"line": 2106,"col": 4},{"file": 60,"line": 2108,"col": 4},{"file": 60,"line": 2109,"col": 4},{"file": 60,"line": 2110,"col": 4},{"file": 60,"line": 2111,"col": 4},{"file": 60,"line": 2112,"col": 4},{"file": 60,"line": 2113,"col": 4},{"file": 60,"line": 2114,"col": 4},{"file": 60,"line": 2115,"col": 4},{"file": 60,"line": 2116,"col": 4},{"file": 60,"line": 2117,"col": 4},{"file": 60,"line": 2118,"col": 4},{"file": 60,"line": 2119,"col": 4},{"file": 60,"line": 2120,"col": 4},{"file": 60,"line": 2121,"col": 4},{"file": 60,"line": 2122,"col": 4},{"file": 60,"line": 2123,"col": 4},{"file": 60,"line": 2124,"col": 4},{"file": 60,"line": 2125,"col": 4},{"file": 60,"line": 2126,"col": 4},{"file": 60,"line": 2127,"col": 4},{"file": 60,"line": 2128,"col": 4},{"file": 60,"line": 2129,"col": 4},{"file": 60,"line": 2130,"col": 4},{"file": 60,"line": 2131,"col": 4},{"file": 60,"line": 2132,"col": 4},{"file": 60,"line": 2133,"col": 4},{"file": 60,"line": 2134,"col": 4},{"file": 60,"line": 2135,"col": 4},{"file": 60,"line": 2136,"col": 4},{"file": 60,"line": 2137,"col": 4},{"file": 60,"line": 2138,"col": 4},{"file": 60,"line": 2139,"col": 4},{"file": 60,"line": 2140,"col": 4},{"file": 60,"line": 2141,"col": 4},{"file": 60,"line": 2142,"col": 4},{"file": 60,"line": 2143,"col": 4},{"file": 60,"line": 2144,"col": 4},{"file": 60,"line": 2145,"col": 4},{"file": 60,"line": 2146,"col": 4},{"file": 60,"line": 2147,"col": 4},{"file": 60,"line": 2148,"col": 4},{"file": 60,"line": 2149,"col": 4},{"file": 60,"line": 2150,"col": 4},{"file": 60,"line": 2151,"col": 4},{"file": 60,"line": 2152,"col": 4},{"file": 60,"line": 2153,"col": 4},{"file": 60,"line": 2154,"col": 4},{"file": 60,"line": 2155,"col": 4},{"file": 60,"line": 2156,"col": 4},{"file": 60,"line": 2157,"col": 4},{"file": 60,"line": 2158,"col": 4},{"file": 60,"line": 2159,"col": 4},{"file": 60,"line": 2160,"col": 4},{"file": 60,"line": 2161,"col": 4},{"file": 60,"line": 2162,"col": 4},{"file": 60,"line": 2163,"col": 4},{"file": 60,"line": 2164,"col": 4},{"file": 60,"line": 2165,"col": 4},{"file": 60,"line": 2166,"col": 4},{"file": 60,"line": 2167,"col": 4},{"file": 60,"line": 2169,"col": 4},{"file": 60,"line": 2170,"col": 4},{"file": 60,"line": 2171,"col": 4},{"file": 60,"line": 2172,"col": 4},{"file": 60,"line": 2173,"col": 4},{"file": 60,"line": 2174,"col": 4},{"file": 60,"line": 2175,"col": 4},{"file": 60,"line": 2176,"col": 4},{"file": 60,"line": 2177,"col": 4},{"file": 60,"line": 2178,"col": 4},{"file": 60,"line": 2179,"col": 4},{"file": 60,"line": 2180,"col": 4},{"file": 60,"line": 2181,"col": 4},{"file": 60,"line": 2182,"col": 4},{"file": 60,"line": 2183,"col": 4},{"file": 60,"line": 2184,"col": 4},{"file": 60,"line": 2185,"col": 4},{"file": 60,"line": 2186,"col": 4},{"file": 60,"line": 2187,"col": 4},{"file": 60,"line": 2188,"col": 4},{"file": 60,"line": 2189,"col": 4},{"file": 60,"line": 2190,"col": 4},{"file": 60,"line": 2191,"col": 4},{"file": 60,"line": 2192,"col": 4},{"file": 60,"line": 2193,"col": 4},{"file": 60,"line": 2196,"col": 4,"docs": " https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/buffer-descriptions-for-i-o-control-codes"},{"file": 60,"line": 2203,"col": 4},{"file": 60,"line": 2204,"col": 4},{"file": 60,"line": 2205,"col": 4},{"file": 60,"line": 2208,"col": 4,"docs": " https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/defining-i-o-control-codes","fields": [12252,12253,12254,12255]},{"file": 60,"line": 2215,"col": 4},{"file": 60,"line": 2217,"col": 4},{"file": 60,"line": 2219,"col": 4},{"file": 60,"line": 2231,"col": 4},{"file": 60,"line": 2239,"col": 4},{"file": 60,"line": 2247,"col": 4},{"file": 60,"line": 2251,"col": 4},{"file": 60,"line": 2255,"col": 4},{"file": 60,"line": 2259,"col": 4},{"file": 60,"line": 2263,"col": 4},{"file": 60,"line": 2267,"col": 4},{"file": 60,"line": 2271,"col": 4},{"file": 60,"line": 2275,"col": 4},{"file": 60,"line": 2280,"col": 4},{"file": 60,"line": 2287,"col": 4},{"file": 60,"line": 2296,"col": 4},{"file": 60,"line": 2375,"col": 4},{"file": 60,"line": 2388,"col": 4},{"file": 60,"line": 2395,"col": 4},{"file": 60,"line": 2398,"col": 4},{"file": 60,"line": 2399,"col": 4},{"file": 60,"line": 2400,"col": 4},{"file": 60,"line": 2401,"col": 4},{"file": 60,"line": 2402,"col": 4},{"file": 60,"line": 2403,"col": 4},{"file": 60,"line": 2404,"col": 4},{"file": 60,"line": 2405,"col": 4},{"file": 60,"line": 2406,"col": 4},{"file": 60,"line": 2407,"col": 4},{"file": 60,"line": 2408,"col": 4},{"file": 60,"line": 2409,"col": 4},{"file": 60,"line": 2410,"col": 4},{"file": 60,"line": 2411,"col": 4},{"file": 60,"line": 2412,"col": 4},{"file": 60,"line": 2413,"col": 4},{"file": 60,"line": 2414,"col": 4},{"file": 60,"line": 2415,"col": 4},{"file": 60,"line": 2416,"col": 4},{"file": 60,"line": 2417,"col": 4},{"file": 60,"line": 2418,"col": 4},{"file": 60,"line": 2419,"col": 4},{"file": 60,"line": 2421,"col": 4},{"file": 60,"line": 2434,"col": 4},{"file": 60,"line": 2440,"col": 4,"docs": " Return the normalized drive name. This is the default."},{"file": 60,"line": 2443,"col": 4,"docs": " Return the opened file name (not normalized)."},{"file": 60,"line": 2446,"col": 4,"docs": " Return the path with the drive letter. This is the default."},{"file": 60,"line": 2449,"col": 4,"docs": " Return the path with a volume GUID path instead of the drive name."},{"file": 60,"line": 2452,"col": 4,"docs": " Return the path with no drive information."},{"file": 60,"line": 2455,"col": 4,"docs": " Return the path with the volume device path."},{"file": 60,"line": 2457,"col": 4},{"file": 60,"line": 2463,"col": 4},{"file": 60,"line": 2464,"col": 4},{"file": 60,"line": 2465,"col": 4},{"file": 60,"line": 2467,"col": 4},{"file": 60,"line": 2468,"col": 4},{"file": 60,"line": 2470,"col": 4},{"file": 60,"line": 2471,"col": 4},{"file": 60,"line": 2473,"col": 4},{"file": 60,"line": 2474,"col": 4},{"file": 60,"line": 2476,"col": 4},{"file": 60,"line": 2477,"col": 4},{"file": 60,"line": 2478,"col": 4},{"file": 60,"line": 2479,"col": 4},{"file": 60,"line": 2481,"col": 4},{"file": 60,"line": 2482,"col": 4},{"file": 60,"line": 2483,"col": 4},{"file": 60,"line": 2485,"col": 4},{"file": 60,"line": 2486,"col": 4},{"file": 60,"line": 2487,"col": 4},{"file": 60,"line": 2488,"col": 4},{"file": 60,"line": 2489,"col": 4},{"file": 60,"line": 2490,"col": 4},{"file": 60,"line": 2491,"col": 4},{"file": 60,"line": 2492,"col": 4},{"file": 60,"line": 2493,"col": 4},{"file": 60,"line": 2496,"col": 4},{"file": 60,"line": 2497,"col": 4},{"file": 60,"line": 2498,"col": 4},{"file": 60,"line": 2499,"col": 4},{"file": 60,"line": 2500,"col": 4},{"file": 60,"line": 2501,"col": 4},{"file": 60,"line": 2502,"col": 4},{"file": 60,"line": 2505,"col": 4},{"file": 60,"line": 2506,"col": 4},{"file": 60,"line": 2507,"col": 4},{"file": 60,"line": 2508,"col": 4},{"file": 60,"line": 2509,"col": 4},{"file": 60,"line": 2510,"col": 4},{"file": 60,"line": 2511,"col": 4},{"file": 60,"line": 2512,"col": 4},{"file": 60,"line": 2513,"col": 4},{"file": 60,"line": 2514,"col": 4},{"file": 60,"line": 2515,"col": 4},{"file": 60,"line": 2516,"col": 4},{"file": 60,"line": 2517,"col": 4},{"file": 60,"line": 2518,"col": 4},{"file": 60,"line": 2520,"col": 4},{"file": 60,"line": 2521,"col": 4},{"file": 60,"line": 2522,"col": 4},{"file": 60,"line": 2523,"col": 4},{"file": 60,"line": 2524,"col": 4},{"file": 60,"line": 2525,"col": 4},{"file": 60,"line": 2526,"col": 4},{"file": 60,"line": 2527,"col": 4},{"file": 60,"line": 2528,"col": 4},{"file": 60,"line": 2529,"col": 4},{"file": 60,"line": 2530,"col": 4},{"file": 60,"line": 2531,"col": 4},{"file": 60,"line": 2532,"col": 4},{"file": 60,"line": 2533,"col": 4},{"file": 60,"line": 2534,"col": 4},{"file": 60,"line": 2535,"col": 4},{"file": 60,"line": 2536,"col": 4},{"file": 60,"line": 2537,"col": 4},{"file": 60,"line": 2538,"col": 4},{"file": 60,"line": 2539,"col": 4},{"file": 60,"line": 2541,"col": 4},{"file": 60,"line": 2542,"col": 4},{"file": 60,"line": 2543,"col": 4},{"file": 60,"line": 2544,"col": 4},{"file": 60,"line": 2545,"col": 4},{"file": 60,"line": 2547,"col": 4},{"file": 60,"line": 2548,"col": 4},{"file": 60,"line": 2549,"col": 4},{"file": 60,"line": 2550,"col": 4},{"file": 60,"line": 2551,"col": 4},{"file": 60,"line": 2552,"col": 4},{"file": 60,"line": 2553,"col": 4},{"file": 60,"line": 2554,"col": 4},{"file": 60,"line": 2555,"col": 4},{"file": 60,"line": 2556,"col": 4},{"file": 60,"line": 2557,"col": 4},{"file": 60,"line": 2558,"col": 4},{"file": 60,"line": 2559,"col": 4},{"file": 60,"line": 2560,"col": 4},{"file": 60,"line": 2561,"col": 4},{"file": 60,"line": 2562,"col": 4},{"file": 60,"line": 2563,"col": 4},{"file": 60,"line": 2564,"col": 4},{"file": 60,"line": 2565,"col": 4},{"file": 60,"line": 2568,"col": 4},{"file": 60,"line": 2569,"col": 4},{"file": 60,"line": 2571,"col": 4},{"file": 60,"line": 2572,"col": 4},{"file": 60,"line": 2574,"col": 4},{"file": 60,"line": 2581,"col": 4},{"file": 60,"line": 2602,"col": 4},{"file": 60,"line": 2603,"col": 4},{"file": 60,"line": 2604,"col": 4},{"file": 60,"line": 2605,"col": 4},{"file": 60,"line": 2606,"col": 4},{"file": 60,"line": 2607,"col": 4},{"file": 60,"line": 2608,"col": 4},{"file": 60,"line": 2609,"col": 4},{"file": 60,"line": 2610,"col": 4},{"file": 60,"line": 2611,"col": 4},{"file": 60,"line": 2612,"col": 4},{"file": 60,"line": 2613,"col": 4},{"file": 60,"line": 2614,"col": 4},{"file": 60,"line": 2615,"col": 4},{"file": 60,"line": 2617,"col": 4},{"file": 60,"line": 2619,"col": 4},{"file": 60,"line": 2621,"col": 4},{"file": 60,"line": 2622,"col": 4},{"file": 60,"line": 2623,"col": 4},{"file": 60,"line": 2624,"col": 4},{"file": 60,"line": 2625,"col": 4},{"file": 60,"line": 2627,"col": 4},{"file": 60,"line": 2628,"col": 4},{"file": 60,"line": 2630,"col": 4},{"file": 60,"line": 2631,"col": 4},{"file": 60,"line": 2632,"col": 4},{"file": 60,"line": 2633,"col": 4},{"file": 60,"line": 2634,"col": 4},{"file": 60,"line": 2635,"col": 4},{"file": 60,"line": 2637,"col": 4},{"file": 60,"line": 2638,"col": 4},{"file": 60,"line": 2639,"col": 4},{"file": 60,"line": 2641,"col": 4},{"file": 60,"line": 2642,"col": 4},{"file": 60,"line": 2643,"col": 4},{"file": 60,"line": 2644,"col": 4},{"file": 60,"line": 2647,"col": 4},{"file": 60,"line": 2648,"col": 4},{"file": 60,"line": 2649,"col": 4},{"file": 60,"line": 2650,"col": 4},{"file": 60,"line": 2651,"col": 4},{"file": 60,"line": 2652,"col": 4},{"file": 60,"line": 2653,"col": 4},{"file": 60,"line": 2654,"col": 4},{"file": 60,"line": 2657,"col": 4},{"file": 60,"line": 2658,"col": 4},{"file": 60,"line": 2659,"col": 4},{"file": 60,"line": 2660,"col": 4},{"file": 60,"line": 2661,"col": 4},{"file": 60,"line": 2662,"col": 4},{"file": 60,"line": 2663,"col": 4},{"file": 60,"line": 2664,"col": 4},{"file": 60,"line": 2665,"col": 4},{"file": 60,"line": 2666,"col": 4},{"file": 60,"line": 2667,"col": 4},{"file": 60,"line": 2668,"col": 4},{"file": 60,"line": 2669,"col": 4},{"file": 60,"line": 2672,"col": 4},{"file": 60,"line": 2673,"col": 4},{"file": 60,"line": 2674,"col": 4},{"file": 60,"line": 2675,"col": 4},{"file": 60,"line": 2677,"col": 4},{"file": 60,"line": 2678,"col": 4},{"file": 60,"line": 2680,"col": 4},{"file": 60,"line": 2693,"col": 4},{"file": 60,"line": 2698,"col": 4},{"file": 60,"line": 2717,"col": 4},{"file": 60,"line": 2719,"col": 4},{"file": 60,"line": 2720,"col": 4},{"file": 60,"line": 2770,"col": 4},{"file": 60,"line": 2772,"col": 4},{"file": 60,"line": 2773,"col": 4},{"file": 60,"line": 2774,"col": 4},{"file": 60,"line": 2775,"col": 4},{"file": 60,"line": 2776,"col": 4},{"file": 60,"line": 2777,"col": 4},{"file": 60,"line": 2778,"col": 4},{"file": 60,"line": 2779,"col": 4},{"file": 60,"line": 2780,"col": 4},{"file": 60,"line": 2781,"col": 4},{"file": 60,"line": 2782,"col": 4},{"file": 60,"line": 2784,"col": 4},{"file": 60,"line": 2785,"col": 4},{"file": 60,"line": 2786,"col": 4},{"file": 60,"line": 2787,"col": 4},{"file": 60,"line": 2788,"col": 4},{"file": 60,"line": 2789,"col": 4},{"file": 60,"line": 2790,"col": 4},{"file": 60,"line": 2791,"col": 4},{"file": 60,"line": 2792,"col": 4},{"file": 60,"line": 2793,"col": 4},{"file": 60,"line": 2794,"col": 4},{"file": 60,"line": 2796,"col": 4},{"file": 60,"line": 2797,"col": 4},{"file": 60,"line": 2798,"col": 4},{"file": 60,"line": 2799,"col": 4},{"file": 60,"line": 2800,"col": 4},{"file": 60,"line": 2801,"col": 4},{"file": 60,"line": 2802,"col": 4},{"file": 60,"line": 2803,"col": 4},{"file": 60,"line": 2804,"col": 4},{"file": 60,"line": 2805,"col": 4},{"file": 60,"line": 2806,"col": 4},{"file": 60,"line": 2808,"col": 4},{"file": 60,"line": 2815,"col": 4},{"file": 60,"line": 2822,"col": 4},{"file": 60,"line": 2827,"col": 4},{"file": 60,"line": 2832,"col": 4},{"file": 60,"line": 2834,"col": 4},{"file": 60,"line": 2835,"col": 4},{"file": 60,"line": 2843,"col": 4},{"file": 60,"line": 2844,"col": 4},{"file": 60,"line": 2846,"col": 4},{"file": 60,"line": 2848,"col": 4},{"file": 60,"line": 2850,"col": 4},{"file": 60,"line": 2851,"col": 4},{"file": 60,"line": 2852,"col": 4},{"file": 60,"line": 2853,"col": 4},{"file": 60,"line": 2856,"col": 4},{"file": 60,"line": 2858,"col": 4},{"file": 60,"line": 2866,"col": 4},{"file": 60,"line": 2867,"col": 4},{"file": 60,"line": 2868,"col": 4},{"file": 60,"line": 2869,"col": 4},{"file": 60,"line": 2870,"col": 4},{"file": 60,"line": 2872,"col": 4},{"file": 60,"line": 2874,"col": 4},{"file": 60,"line": 2875,"col": 4},{"file": 60,"line": 2876,"col": 4},{"file": 60,"line": 2877,"col": 4},{"file": 60,"line": 2878,"col": 4},{"file": 60,"line": 2879,"col": 4},{"file": 60,"line": 2880,"col": 4},{"file": 60,"line": 2881,"col": 4},{"file": 60,"line": 2883,"col": 4},{"file": 60,"line": 2891,"col": 4},{"file": 60,"line": 2892,"col": 4},{"file": 60,"line": 2893,"col": 4},{"file": 60,"line": 2894,"col": 4},{"file": 60,"line": 2896,"col": 4},{"file": 60,"line": 2901,"col": 4},{"file": 60,"line": 2913,"col": 4},{"file": 60,"line": 2922,"col": 4},{"file": 60,"line": 2923,"col": 4},{"file": 60,"line": 2924,"col": 4},{"file": 60,"line": 2925,"col": 4},{"file": 60,"line": 2927,"col": 4},{"file": 60,"line": 2931,"col": 4},{"file": 60,"line": 2933,"col": 4},{"file": 60,"line": 2934,"col": 4},{"file": 60,"line": 2935,"col": 4},{"file": 60,"line": 2936,"col": 4},{"file": 60,"line": 2937,"col": 4},{"file": 60,"line": 2948,"col": 4,"docs": " > The maximum path of 32,767 characters is approximate, because the \"\\\\?\\\" > prefix may be expanded to a longer string by the system at run time, and > this expansion applies to the total length. from https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#maximum-path-length-limitation"},{"file": 60,"line": 2950,"col": 4},{"file": 60,"line": 2951,"col": 4},{"file": 60,"line": 2952,"col": 4},{"file": 60,"line": 2953,"col": 4},{"file": 60,"line": 2954,"col": 4},{"file": 60,"line": 2955,"col": 4},{"file": 60,"line": 2956,"col": 4},{"file": 60,"line": 2958,"col": 4},{"file": 60,"line": 2959,"col": 4},{"file": 60,"line": 2960,"col": 4},{"file": 60,"line": 2961,"col": 4},{"file": 60,"line": 2962,"col": 4},{"file": 60,"line": 2964,"col": 4},{"file": 60,"line": 3192,"col": 4},{"file": 60,"line": 3197,"col": 4},{"file": 60,"line": 3199,"col": 4},{"file": 60,"line": 3208,"col": 4},{"file": 60,"line": 3209,"col": 4},{"file": 60,"line": 3210,"col": 4},{"file": 60,"line": 3211,"col": 4},{"file": 60,"line": 3212,"col": 4},{"file": 60,"line": 3213,"col": 4},{"file": 60,"line": 3214,"col": 4},{"file": 60,"line": 3215,"col": 4},{"file": 60,"line": 3217,"col": 4},{"file": 60,"line": 3223,"col": 4},{"file": 60,"line": 3224,"col": 4},{"file": 60,"line": 3225,"col": 4},{"file": 60,"line": 3226,"col": 4},{"file": 60,"line": 3227,"col": 4},{"file": 60,"line": 3229,"col": 4},{"file": 60,"line": 3246,"col": 4,"docs": " Process Environment Block Microsoft documentation of this is incomplete, the fields here are taken from various resources including:  - https://github.com/wine-mirror/wine/blob/1aff1e6a370ee8c0213a0fd4b220d121da8527aa/include/winternl.h#L269  - https://www.geoffchappell.com/studies/windows/win32/ntdll/structs/peb/index.htm"},{"file": 60,"line": 3407,"col": 4,"docs": " The `PEB_LDR_DATA` structure is the main record of what modules are loaded in a process. It is essentially the head of three double-linked lists of `LDR_DATA_TABLE_ENTRY` structures which each represent one loaded module. Microsoft documentation of this is incomplete, the fields here are taken from various resources including:  - https://www.geoffchappell.com/studies/windows/win32/ntdll/structs/peb_ldr_data.htm"},{"file": 60,"line": 3435,"col": 4},{"file": 60,"line": 3466,"col": 4},{"file": 60,"line": 3473,"col": 4},{"file": 60,"line": 3475,"col": 4},{"file": 60,"line": 3491,"col": 4},{"file": 60,"line": 3493,"col": 4},{"file": 60,"line": 3495,"col": 4},{"file": 60,"line": 3500,"col": 4},{"file": 60,"line": 3502,"col": 4},{"file": 60,"line": 3508,"col": 4},{"file": 60,"line": 3513,"col": 4},{"file": 60,"line": 3526,"col": 4},{"file": 60,"line": 3540,"col": 4},{"file": 60,"line": 3557,"col": 4},{"file": 60,"line": 3565,"col": 4},{"file": 60,"line": 3566,"col": 4},{"file": 60,"line": 3568,"col": 4},{"file": 60,"line": 3574,"col": 4},{"file": 60,"line": 3582,"col": 4},{"file": 60,"line": 3584,"col": 4},{"file": 60,"line": 3590,"col": 4},{"file": 60,"line": 3598,"col": 4},{"file": 60,"line": 3605,"col": 4},{"file": 60,"line": 3606,"col": 4},{"file": 60,"line": 3607,"col": 4},{"file": 60,"line": 3608,"col": 4},{"file": 60,"line": 3609,"col": 4},{"file": 60,"line": 3610,"col": 4},{"file": 60,"line": 3612,"col": 4},{"file": 60,"line": 3613,"col": 4},{"file": 60,"line": 3615,"col": 4},{"file": 60,"line": 3626,"col": 4},{"file": 60,"line": 3631,"col": 4},{"file": 60,"line": 3633,"col": 4},{"file": 60,"line": 3643,"col": 4},{"file": 60,"line": 3647,"col": 4},{"file": 60,"line": 3648,"col": 4},{"file": 60,"line": 3649,"col": 4},{"file": 60,"line": 3650,"col": 4},{"file": 60,"line": 3652,"col": 4},{"file": 60,"line": 3653,"col": 4},{"file": 60,"line": 3655,"col": 4},{"file": 60,"line": 3656,"col": 4},{"file": 60,"line": 3657,"col": 4},{"file": 60,"line": 3658,"col": 4},{"file": 60,"line": 3659,"col": 4},{"file": 60,"line": 3661,"col": 4},{"file": 60,"line": 3020,"col": 12},{"file": 60,"line": 3025,"col": 12},{"file": 60,"line": 3044,"col": 12},{"file": 60,"line": 6,"col": 0},{"file": 60,"line": 7,"col": 0},{"file": 60,"line": 8,"col": 0},{"file": 60,"line": 9,"col": 0},{"file": 60,"line": 10,"col": 0},{"file": 60,"line": 11,"col": 0},{"file": 60,"line": 12,"col": 0},{"file": 60,"line": 821,"col": 0,"fields": [12256,12257,12258]},{"file": 60,"line": 1281,"col": 0},{"file": 60,"line": 1447,"col": 0},{"file": 60,"line": 1906,"col": 0,"fields": [12259,12260]},{"file": 60,"line": 1944,"col": 0,"fields": [12261,12262]},{"file": 17,"line": 1598,"col": 20},{"file": 17,"line": 1606,"col": 20},{"file": 17,"line": 1614,"col": 20},{"file": 17,"line": 1622,"col": 20},{"file": 17,"line": 1631,"col": 20},{"file": 17,"line": 1640,"col": 20},{"file": 17,"line": 1649,"col": 20},{"file": 17,"line": 1658,"col": 20},{"file": 17,"line": 1667,"col": 20},{"file": 17,"line": 1677,"col": 20},{"file": 17,"line": 1691,"col": 20},{"file": 20,"line": 484,"col": 8},{"file": 20,"line": 485,"col": 8},{"file": 20,"line": 486,"col": 8},{"file": 20,"line": 487,"col": 8},{"file": 20,"line": 488,"col": 8},{"file": 20,"line": 489,"col": 8},{"file": 20,"line": 490,"col": 8},{"file": 20,"line": 491,"col": 8},{"file": 20,"line": 492,"col": 8},{"file": 20,"line": 493,"col": 8},{"file": 20,"line": 494,"col": 8},{"file": 20,"line": 495,"col": 8},{"file": 20,"line": 497,"col": 8},{"file": 20,"line": 498,"col": 8},{"file": 20,"line": 499,"col": 8},{"file": 20,"line": 500,"col": 8},{"file": 20,"line": 501,"col": 8},{"file": 20,"line": 502,"col": 8},{"file": 20,"line": 503,"col": 8},{"file": 20,"line": 531,"col": 8,"docs": " only give out 32bit addresses"},{"file": 20,"line": 533,"col": 8,"docs": " stack-like segment"},{"file": 20,"line": 535,"col": 8,"docs": " ETXTBSY"},{"file": 20,"line": 537,"col": 8,"docs": " mark it as an executable"},{"file": 20,"line": 539,"col": 8,"docs": " pages are locked"},{"file": 20,"line": 541,"col": 8,"docs": " don't check for reservations"},{"file": 20,"line": 553,"col": 8},{"file": 20,"line": 554,"col": 8},{"file": 20,"line": 555,"col": 8},{"file": 20,"line": 556,"col": 8},{"file": 20,"line": 560,"col": 8},{"file": 20,"line": 561,"col": 8},{"file": 20,"line": 562,"col": 8},{"file": 20,"line": 563,"col": 8},{"file": 20,"line": 564,"col": 8},{"file": 20,"line": 565,"col": 8},{"file": 20,"line": 566,"col": 8},{"file": 20,"line": 567,"col": 8},{"file": 20,"line": 568,"col": 8},{"file": 20,"line": 569,"col": 8},{"file": 20,"line": 570,"col": 8},{"file": 20,"line": 571,"col": 8},{"file": 20,"line": 572,"col": 8},{"file": 20,"line": 573,"col": 8},{"file": 20,"line": 574,"col": 8},{"file": 20,"line": 575,"col": 8},{"file": 20,"line": 576,"col": 8},{"file": 20,"line": 577,"col": 8},{"file": 20,"line": 578,"col": 8},{"file": 20,"line": 579,"col": 8},{"file": 20,"line": 580,"col": 8},{"file": 20,"line": 581,"col": 8},{"file": 20,"line": 582,"col": 8},{"file": 20,"line": 586,"col": 8},{"file": 20,"line": 587,"col": 8},{"file": 20,"line": 588,"col": 8},{"file": 20,"line": 589,"col": 8},{"file": 61,"line": 0,"col": 4},{"file": 61,"line": 1,"col": 4},{"file": 61,"line": 2,"col": 4},{"file": 61,"line": 3,"col": 4},{"file": 61,"line": 4,"col": 4},{"file": 61,"line": 5,"col": 4},{"file": 61,"line": 6,"col": 4},{"file": 61,"line": 7,"col": 4},{"file": 61,"line": 8,"col": 4},{"file": 61,"line": 9,"col": 4},{"file": 61,"line": 10,"col": 4},{"file": 61,"line": 11,"col": 4},{"file": 61,"line": 12,"col": 4},{"file": 61,"line": 13,"col": 4},{"file": 61,"line": 14,"col": 4},{"file": 61,"line": 15,"col": 4},{"file": 61,"line": 16,"col": 4},{"file": 61,"line": 17,"col": 4},{"file": 61,"line": 18,"col": 4},{"file": 61,"line": 19,"col": 4},{"file": 61,"line": 20,"col": 4},{"file": 61,"line": 21,"col": 4},{"file": 61,"line": 22,"col": 4},{"file": 61,"line": 23,"col": 4},{"file": 61,"line": 24,"col": 4},{"file": 61,"line": 25,"col": 4},{"file": 61,"line": 26,"col": 4},{"file": 61,"line": 27,"col": 4},{"file": 61,"line": 28,"col": 4},{"file": 61,"line": 29,"col": 4},{"file": 61,"line": 30,"col": 4},{"file": 61,"line": 31,"col": 4},{"file": 61,"line": 32,"col": 4},{"file": 61,"line": 33,"col": 4},{"file": 61,"line": 34,"col": 4},{"file": 61,"line": 35,"col": 4},{"file": 61,"line": 36,"col": 4},{"file": 61,"line": 37,"col": 4},{"file": 61,"line": 38,"col": 4},{"file": 61,"line": 39,"col": 4},{"file": 61,"line": 40,"col": 4},{"file": 61,"line": 41,"col": 4},{"file": 61,"line": 42,"col": 4},{"file": 61,"line": 43,"col": 4},{"file": 61,"line": 44,"col": 4},{"file": 61,"line": 45,"col": 4},{"file": 61,"line": 46,"col": 4},{"file": 61,"line": 47,"col": 4},{"file": 61,"line": 48,"col": 4},{"file": 61,"line": 51,"col": 4},{"file": 61,"line": 52,"col": 4},{"file": 61,"line": 53,"col": 4},{"file": 61,"line": 54,"col": 4},{"file": 61,"line": 55,"col": 4},{"file": 61,"line": 56,"col": 4},{"file": 61,"line": 57,"col": 4},{"file": 61,"line": 58,"col": 4},{"file": 61,"line": 59,"col": 4},{"file": 61,"line": 60,"col": 4},{"file": 61,"line": 63,"col": 4},{"file": 61,"line": 64,"col": 4},{"file": 61,"line": 65,"col": 4},{"file": 61,"line": 67,"col": 4},{"file": 61,"line": 68,"col": 4},{"file": 61,"line": 71,"col": 4},{"file": 61,"line": 74,"col": 4},{"file": 61,"line": 75,"col": 4},{"file": 61,"line": 76,"col": 4},{"file": 61,"line": 79,"col": 4},{"file": 61,"line": 80,"col": 4},{"file": 61,"line": 81,"col": 4},{"file": 61,"line": 82,"col": 4},{"file": 61,"line": 83,"col": 4},{"file": 61,"line": 87,"col": 4},{"file": 61,"line": 93,"col": 4},{"file": 61,"line": 94,"col": 4},{"file": 61,"line": 99,"col": 4},{"file": 61,"line": 100,"col": 4},{"file": 61,"line": 102,"col": 4},{"file": 61,"line": 103,"col": 4},{"file": 61,"line": 104,"col": 4},{"file": 61,"line": 106,"col": 4},{"file": 61,"line": 107,"col": 4},{"file": 62,"line": 0,"col": 4},{"file": 62,"line": 1,"col": 4},{"file": 62,"line": 2,"col": 4},{"file": 62,"line": 3,"col": 4},{"file": 62,"line": 4,"col": 4},{"file": 62,"line": 5,"col": 4},{"file": 62,"line": 6,"col": 4},{"file": 62,"line": 7,"col": 4},{"file": 62,"line": 8,"col": 4},{"file": 62,"line": 9,"col": 4},{"file": 62,"line": 10,"col": 4},{"file": 62,"line": 11,"col": 4},{"file": 62,"line": 12,"col": 4},{"file": 62,"line": 13,"col": 4},{"file": 62,"line": 14,"col": 4},{"file": 62,"line": 15,"col": 4},{"file": 62,"line": 16,"col": 4},{"file": 62,"line": 17,"col": 4},{"file": 62,"line": 18,"col": 4},{"file": 62,"line": 19,"col": 4},{"file": 62,"line": 20,"col": 4},{"file": 62,"line": 21,"col": 4},{"file": 62,"line": 22,"col": 4},{"file": 62,"line": 23,"col": 4},{"file": 62,"line": 24,"col": 4},{"file": 62,"line": 25,"col": 4},{"file": 62,"line": 26,"col": 4},{"file": 62,"line": 27,"col": 4},{"file": 62,"line": 28,"col": 4},{"file": 62,"line": 29,"col": 4},{"file": 62,"line": 30,"col": 4},{"file": 62,"line": 31,"col": 4},{"file": 62,"line": 32,"col": 4},{"file": 62,"line": 33,"col": 4},{"file": 62,"line": 34,"col": 4},{"file": 62,"line": 35,"col": 4},{"file": 62,"line": 36,"col": 4},{"file": 62,"line": 37,"col": 4},{"file": 62,"line": 38,"col": 4},{"file": 62,"line": 39,"col": 4},{"file": 62,"line": 40,"col": 4},{"file": 62,"line": 41,"col": 4},{"file": 62,"line": 42,"col": 4},{"file": 62,"line": 43,"col": 4},{"file": 62,"line": 44,"col": 4},{"file": 62,"line": 45,"col": 4},{"file": 62,"line": 46,"col": 4},{"file": 62,"line": 47,"col": 4},{"file": 62,"line": 48,"col": 4},{"file": 62,"line": 49,"col": 4},{"file": 62,"line": 50,"col": 4},{"file": 62,"line": 51,"col": 4},{"file": 62,"line": 52,"col": 4},{"file": 62,"line": 53,"col": 4},{"file": 62,"line": 54,"col": 4},{"file": 62,"line": 55,"col": 4},{"file": 62,"line": 56,"col": 4},{"file": 62,"line": 57,"col": 4},{"file": 62,"line": 58,"col": 4},{"file": 62,"line": 59,"col": 4},{"file": 62,"line": 60,"col": 4},{"file": 62,"line": 61,"col": 4},{"file": 62,"line": 64,"col": 4},{"file": 62,"line": 65,"col": 4},{"file": 62,"line": 66,"col": 4},{"file": 62,"line": 67,"col": 4},{"file": 62,"line": 68,"col": 4},{"file": 62,"line": 69,"col": 4},{"file": 62,"line": 70,"col": 4},{"file": 62,"line": 71,"col": 4},{"file": 62,"line": 72,"col": 4},{"file": 62,"line": 73,"col": 4},{"file": 62,"line": 74,"col": 4},{"file": 62,"line": 75,"col": 4},{"file": 62,"line": 76,"col": 4},{"file": 62,"line": 77,"col": 4},{"file": 62,"line": 78,"col": 4},{"file": 62,"line": 79,"col": 4},{"file": 62,"line": 80,"col": 4},{"file": 62,"line": 81,"col": 4},{"file": 62,"line": 82,"col": 4},{"file": 62,"line": 83,"col": 4},{"file": 62,"line": 84,"col": 4},{"file": 62,"line": 85,"col": 4},{"file": 62,"line": 86,"col": 4},{"file": 62,"line": 87,"col": 4},{"file": 62,"line": 88,"col": 4},{"file": 62,"line": 89,"col": 4},{"file": 62,"line": 90,"col": 4},{"file": 62,"line": 93,"col": 4},{"file": 62,"line": 94,"col": 4},{"file": 62,"line": 95,"col": 4},{"file": 62,"line": 96,"col": 4},{"file": 62,"line": 97,"col": 4},{"file": 62,"line": 98,"col": 4},{"file": 62,"line": 101,"col": 4},{"file": 62,"line": 103,"col": 4},{"file": 62,"line": 104,"col": 4},{"file": 62,"line": 107,"col": 4},{"file": 62,"line": 108,"col": 4},{"file": 62,"line": 109,"col": 4},{"file": 62,"line": 110,"col": 4},{"file": 62,"line": 111,"col": 4},{"file": 62,"line": 112,"col": 4},{"file": 62,"line": 113,"col": 4},{"file": 62,"line": 114,"col": 4},{"file": 62,"line": 115,"col": 4},{"file": 62,"line": 116,"col": 4},{"file": 62,"line": 117,"col": 4},{"file": 62,"line": 120,"col": 4},{"file": 62,"line": 121,"col": 4},{"file": 62,"line": 122,"col": 4},{"file": 62,"line": 123,"col": 4},{"file": 62,"line": 124,"col": 4},{"file": 62,"line": 125,"col": 4},{"file": 62,"line": 126,"col": 4},{"file": 62,"line": 127,"col": 4},{"file": 62,"line": 128,"col": 4},{"file": 62,"line": 129,"col": 4},{"file": 62,"line": 130,"col": 4},{"file": 62,"line": 131,"col": 4},{"file": 62,"line": 132,"col": 4},{"file": 62,"line": 133,"col": 4},{"file": 62,"line": 134,"col": 4},{"file": 62,"line": 135,"col": 4},{"file": 62,"line": 136,"col": 4},{"file": 62,"line": 137,"col": 4},{"file": 62,"line": 138,"col": 4},{"file": 62,"line": 139,"col": 4},{"file": 62,"line": 140,"col": 4},{"file": 62,"line": 141,"col": 4},{"file": 62,"line": 144,"col": 4},{"file": 62,"line": 145,"col": 4},{"file": 62,"line": 146,"col": 4},{"file": 62,"line": 147,"col": 4},{"file": 62,"line": 148,"col": 4},{"file": 62,"line": 149,"col": 4},{"file": 62,"line": 150,"col": 4},{"file": 62,"line": 153,"col": 4},{"file": 62,"line": 154,"col": 4},{"file": 62,"line": 155,"col": 4},{"file": 62,"line": 156,"col": 4},{"file": 62,"line": 157,"col": 4},{"file": 62,"line": 158,"col": 4},{"file": 62,"line": 159,"col": 4},{"file": 62,"line": 162,"col": 4},{"file": 62,"line": 165,"col": 4},{"file": 62,"line": 168,"col": 4},{"file": 62,"line": 169,"col": 4},{"file": 62,"line": 170,"col": 4},{"file": 62,"line": 171,"col": 4},{"file": 62,"line": 172,"col": 4},{"file": 62,"line": 173,"col": 4},{"file": 62,"line": 174,"col": 4},{"file": 62,"line": 175,"col": 4},{"file": 62,"line": 177,"col": 4},{"file": 62,"line": 179,"col": 4},{"file": 62,"line": 180,"col": 4},{"file": 62,"line": 181,"col": 4},{"file": 62,"line": 182,"col": 4},{"file": 62,"line": 183,"col": 4},{"file": 62,"line": 184,"col": 4},{"file": 62,"line": 186,"col": 4},{"file": 62,"line": 190,"col": 4},{"file": 62,"line": 191,"col": 4},{"file": 62,"line": 193,"col": 4},{"file": 62,"line": 195,"col": 4},{"file": 62,"line": 196,"col": 4},{"file": 62,"line": 197,"col": 4},{"file": 25,"line": 15,"col": 8},{"file": 25,"line": 16,"col": 8},{"file": 25,"line": 17,"col": 8},{"file": 25,"line": 18,"col": 8},{"file": 25,"line": 19,"col": 8},{"file": 25,"line": 20,"col": 8},{"file": 25,"line": 21,"col": 8},{"file": 25,"line": 22,"col": 8},{"file": 25,"line": 23,"col": 8},{"file": 25,"line": 24,"col": 8},{"file": 25,"line": 25,"col": 8},{"file": 25,"line": 26,"col": 8},{"file": 25,"line": 27,"col": 8},{"file": 25,"line": 28,"col": 8},{"file": 25,"line": 29,"col": 8},{"file": 25,"line": 30,"col": 8},{"file": 25,"line": 31,"col": 8},{"file": 25,"line": 32,"col": 8},{"file": 25,"line": 33,"col": 8},{"file": 25,"line": 34,"col": 8},{"file": 25,"line": 35,"col": 8},{"file": 25,"line": 36,"col": 8},{"file": 25,"line": 37,"col": 8},{"file": 25,"line": 38,"col": 8},{"file": 25,"line": 39,"col": 8},{"file": 25,"line": 42,"col": 8},{"file": 25,"line": 43,"col": 8},{"file": 25,"line": 47,"col": 8},{"file": 25,"line": 48,"col": 8},{"file": 25,"line": 139,"col": 8},{"file": 25,"line": 140,"col": 8},{"file": 25,"line": 144,"col": 8},{"file": 25,"line": 145,"col": 8},{"file": 25,"line": 146,"col": 8},{"file": 25,"line": 147,"col": 8},{"file": 25,"line": 148,"col": 8},{"file": 25,"line": 149,"col": 8},{"file": 25,"line": 150,"col": 8},{"file": 25,"line": 151,"col": 8},{"file": 25,"line": 152,"col": 8},{"file": 25,"line": 153,"col": 8},{"file": 25,"line": 154,"col": 8},{"file": 25,"line": 155,"col": 8},{"file": 25,"line": 156,"col": 8},{"file": 25,"line": 160,"col": 8},{"file": 25,"line": 161,"col": 8},{"file": 25,"line": 162,"col": 8},{"file": 25,"line": 163,"col": 8},{"file": 25,"line": 164,"col": 8},{"file": 25,"line": 165,"col": 8},{"file": 63,"line": 35,"col": 4,"docs": " Write a single unsigned integer as unsigned LEB128 to the given writer.","fields": [12263,12264]},{"file": 63,"line": 111,"col": 4,"docs": " Write a single signed integer as signed LEB128 to the given writer.","fields": [12265,12266]},{"file": 63,"line": 139,"col": 4,"docs": " This is an \"advanced\" function. It allows one to use a fixed amount of memory to store a ULEB128. This defeats the entire purpose of using this data encoding; it will no longer use fewer bytes to store smaller numbers. The advantage of using a fixed width is that it makes fields have a predictable size and so depending on the use case this tradeoff can be worthwhile. An example use case of this is in emitting DWARF info where one wants to make a ULEB128 field \"relocatable\", meaning that it becomes possible to later go back and patch the number to be a different value without shifting all the following code.","fields": [12267,12268,12269]},{"file": 63,"line": 0,"col": 0},{"file": 63,"line": 1,"col": 0},{"file": 63,"line": 177,"col": 0,"fields": [12270,12271]},{"file": 63,"line": 182,"col": 0,"fields": [12272,12273]},{"file": 63,"line": 187,"col": 0,"fields": [12274,12275]},{"file": 63,"line": 193,"col": 0,"fields": [12276,12277]},{"file": 63,"line": 199,"col": 0,"fields": [12278,12279,12280]},{"file": 63,"line": 207,"col": 0,"fields": [12281,12282,12283]},{"file": 63,"line": 302,"col": 0,"fields": [12284]},{"file": 64,"line": 40,"col": 4,"fields": [12285]},{"file": 64,"line": 44,"col": 4,"fields": [12286,12287]},{"file": 64,"line": 125,"col": 4,"fields": [12288]},{"file": 64,"line": 27,"col": 0},{"file": 64,"line": 28,"col": 0},{"file": 64,"line": 29,"col": 0},{"file": 64,"line": 30,"col": 0},{"file": 64,"line": 31,"col": 0},{"file": 64,"line": 32,"col": 0},{"file": 64,"line": 34,"col": 0},{"file": 64,"line": 35,"col": 0},{"file": 64,"line": 38,"col": 0,"docs": " the minimum alignment for the `*StaticResetEvent` created by wait*()"},{"file": 64,"line": 48,"col": 0,"fields": [12289,12290]},{"file": 65,"line": 19,"col": 4},{"file": 65,"line": 28,"col": 4},{"file": 65,"line": 31,"col": 4,"docs": " After `init`, it is legal to call any other function.","fields": [12291]},{"file": 65,"line": 37,"col": 4,"docs": " This function is not thread-safe. After `deinit`, the only legal function to call is `init`.","fields": [12292]},{"file": 65,"line": 45,"col": 4,"docs": " Sets the event if not already set and wakes up all the threads waiting on the event. It is safe to call `set` multiple times before calling `wait`. However it is illegal to call `set` after `wait` is called until the event is `reset`. This function is thread-safe.","fields": [12293]},{"file": 65,"line": 52,"col": 4,"docs": " Resets the event to its original, unset state. This function is *not* thread-safe. It is equivalent to calling `deinit` followed by `init` but without the possibility of failure.","fields": [12294]},{"file": 65,"line": 60,"col": 4,"docs": " Wait for the event to be set by blocking the current thread. Thread-safe. No spurious wakeups. Upon return from `wait`, the only functions available to be called in `ResetEvent` are `reset` and `deinit`.","fields": [12295]},{"file": 65,"line": 64,"col": 4},{"file": 65,"line": 73,"col": 4,"docs": " Wait for the event to be set by blocking the current thread. A timeout in nanoseconds can be provided as a hint for how long the thread should block on the unset event before returning `TimedWaitResult.timed_out`. Thread-safe. No precision of timing is guaranteed. Upon return from `wait`, the only functions available to be called in `ResetEvent` are `reset` and `deinit`.","fields": [12296,12297]},{"file": 65,"line": 80,"col": 4,"docs": " Apple has decided to not support POSIX semaphores, so we go with a different approach using Grand Central Dispatch. This API is exposed by libSystem so it is guaranteed to be available on all Darwin platforms."},{"file": 65,"line": 121,"col": 4,"docs": " POSIX semaphores must be initialized at runtime because they are allowed to be implemented as file descriptors, in which case initialization would require a syscall to open the fd."},{"file": 65,"line": 8,"col": 0},{"file": 65,"line": 9,"col": 0},{"file": 65,"line": 10,"col": 0},{"file": 65,"line": 11,"col": 0},{"file": 65,"line": 12,"col": 0},{"file": 65,"line": 13,"col": 0},{"file": 65,"line": 14,"col": 0},{"file": 65,"line": 15,"col": 0},{"file": 33,"line": 673,"col": 8},{"file": 33,"line": 671,"col": 4},{"file": 33,"line": 675,"col": 16},{"file": 33,"line": 685,"col": 4,"fields": []},{"file": 33,"line": 693,"col": 4},{"file": 33,"line": 843,"col": 4,"fields": [12298,12299,12300]},{"file": 33,"line": 961,"col": 4,"fields": [12301]},{"file": 33,"line": 965,"col": 4,"fields": [12302]},{"file": 33,"line": 973,"col": 4,"fields": [12303]},{"file": 35,"line": 109,"col": 8,"fields": [12304,12305]},{"file": 35,"line": 121,"col": 8,"fields": [12306]},{"file": 35,"line": 213,"col": 8,"fields": [12307,12308]},{"file": 35,"line": 274,"col": 8,"fields": [12309]},{"file": 35,"line": 316,"col": 8,"fields": [12310,12311]},{"file": 35,"line": 326,"col": 8,"fields": [12312,12313,12314]},{"file": 35,"line": 159,"col": 4,"fields": [12315,12316,12317]},{"file": 35,"line": 178,"col": 4,"fields": [12318]},{"file": 35,"line": 353,"col": 4},{"file": 36,"line": 490,"col": 8},{"file": 36,"line": 500,"col": 8},{"file": 36,"line": 955,"col": 4,"docs": " Returns the address from the macho file","fields": [12319]},{"file": 36,"line": 959,"col": 4,"fields": [12320,12321,12322]},{"file": 37,"line": 325,"col": 8,"docs": " Beginning of processor-specific codes"},{"file": 37,"line": 328,"col": 8,"docs": " Processor-specific"},{"file": 66,"line": 14,"col": 4},{"file": 66,"line": 15,"col": 4},{"file": 66,"line": 16,"col": 4},{"file": 66,"line": 18,"col": 4},{"file": 66,"line": 19,"col": 4},{"file": 66,"line": 20,"col": 4},{"file": 66,"line": 22,"col": 4},{"file": 66,"line": 23,"col": 4},{"file": 66,"line": 24,"col": 4},{"file": 66,"line": 107,"col": 4,"docs": " Naively combines a series of paths with the native path seperator and null terminator. Allocates memory for the result, which must be freed by the caller.","fields": [12323,12324]},{"file": 66,"line": 189,"col": 4},{"file": 66,"line": 199,"col": 4,"fields": [12325]},{"file": 66,"line": 230,"col": 4,"fields": [12326]},{"file": 66,"line": 234,"col": 4,"fields": [12327]},{"file": 66,"line": 238,"col": 4,"fields": [12328]},{"file": 66,"line": 242,"col": 4},{"file": 66,"line": 244,"col": 4,"fields": [12329]},{"file": 66,"line": 252,"col": 4},{"file": 66,"line": 297,"col": 4},{"file": 66,"line": 309,"col": 4,"fields": [12330]},{"file": 66,"line": 388,"col": 4,"fields": [12331]},{"file": 66,"line": 396,"col": 4,"fields": [12332]},{"file": 66,"line": 453,"col": 4,"docs": " On Windows, this calls `resolveWindows` and on POSIX it calls `resolvePosix`.","fields": [12333,12334]},{"file": 66,"line": 469,"col": 4,"docs": " This function is like a series of `cd` statements executed one after another. It resolves \".\" and \"..\". The result does not have a trailing path separator. If all paths are relative it uses the current working directory as a starting point. Each drive has its own current working directory. Path separators are canonicalized to '\\\\' and drives are canonicalized to capital letters. Note: all usage of this function should be audited due to the existence of symlinks. Without performing actual syscalls, resolving `..` could be incorrect.","fields": [12335,12336]},{"file": 66,"line": 655,"col": 4,"docs": " This function is like a series of `cd` statements executed one after another. It resolves \".\" and \"..\". The result does not have a trailing path separator. If all paths are relative it uses the current working directory as a starting point. Note: all usage of this function should be audited due to the existence of symlinks. Without performing actual syscalls, resolving `..` could be incorrect.","fields": [12337,12338]},{"file": 66,"line": 816,"col": 4,"docs": " Strip the last component from a file path. If the path is a file in the current directory (no directory component) then returns null. If the path is the root directory, returns null.","fields": [12339]},{"file": 66,"line": 824,"col": 4,"fields": [12340]},{"file": 66,"line": 858,"col": 4,"fields": [12341]},{"file": 66,"line": 950,"col": 4,"fields": [12342]},{"file": 66,"line": 958,"col": 4,"fields": [12343]},{"file": 66,"line": 979,"col": 4,"fields": [12344]},{"file": 66,"line": 1066,"col": 4,"docs": " Returns the relative path from `from` to `to`. If `from` and `to` each resolve to the same path (after calling `resolve` on each), a zero-length string is returned. On Windows this canonicalizes the drive to a capital letter and paths to `\\\\`.","fields": [12345,12346,12347]},{"file": 66,"line": 1074,"col": 4,"fields": [12348,12349,12350]},{"file": 66,"line": 1147,"col": 4,"fields": [12351,12352,12353]},{"file": 66,"line": 1263,"col": 4,"docs": " Returns the extension of the file name (if any). This function will search for the file extension (separated by a `.`) and will return the text after the `.`. Files that end with `.` are considered to have no extension, files that start with `.` Examples: - `\"main.zig\"`     ⇒ `\".zig\"` - `\"src/main.zig\"` ⇒ `\".zig\"` - `\".gitignore\"`   ⇒ `\"\"` - `\"keep.\"`        ⇒ `\".\"` - `\"src.keep.me\"`  ⇒ `\".me\"` - `\"/src/keep.me\"`  ⇒ `\".me\"` - `\"/src/keep.me/\"`  ⇒ `\".me\"` The returned slice is guaranteed to have its pointer within the start and end pointer address range of `path`, even if it is length zero.","fields": [12354]},{"file": 66,"line": 0,"col": 0},{"file": 66,"line": 1,"col": 0},{"file": 66,"line": 2,"col": 0},{"file": 66,"line": 3,"col": 0},{"file": 66,"line": 4,"col": 0},{"file": 66,"line": 5,"col": 0},{"file": 66,"line": 6,"col": 0},{"file": 66,"line": 7,"col": 0},{"file": 66,"line": 8,"col": 0},{"file": 66,"line": 9,"col": 0},{"file": 66,"line": 10,"col": 0},{"file": 66,"line": 11,"col": 0},{"file": 66,"line": 12,"col": 0},{"file": 66,"line": 112,"col": 0,"fields": [12355,12356,12357]},{"file": 66,"line": 123,"col": 0,"fields": [12358,12359,12360]},{"file": 66,"line": 207,"col": 0,"fields": [12361,12362]},{"file": 66,"line": 289,"col": 0,"fields": [12363,12364]},{"file": 66,"line": 293,"col": 0,"fields": [12365,12366]},{"file": 66,"line": 400,"col": 0,"fields": [12367,12368]},{"file": 66,"line": 411,"col": 0,"fields": [12369,12370,12371]},{"file": 66,"line": 434,"col": 0,"fields": [12372]},{"file": 66,"line": 441,"col": 0,"fields": [12373,12374]},{"file": 66,"line": 798,"col": 0,"fields": [12375,12376]},{"file": 66,"line": 804,"col": 0,"fields": [12377,12378]},{"file": 66,"line": 934,"col": 0,"fields": [12379,12380]},{"file": 66,"line": 942,"col": 0,"fields": [12381,12382]},{"file": 66,"line": 1050,"col": 0,"fields": [12383,12384]},{"file": 66,"line": 1054,"col": 0,"fields": [12385,12386]},{"file": 66,"line": 1058,"col": 0,"fields": [12387,12388]},{"file": 66,"line": 1238,"col": 0,"fields": [12389,12390,12391]},{"file": 66,"line": 1244,"col": 0,"fields": [12392,12393,12394]},{"file": 66,"line": 1270,"col": 0,"fields": [12395,12396]},{"file": 67,"line": 6,"col": 4,"docs": " Describes how pointer types should be hashed."},{"file": 67,"line": 22,"col": 4,"docs": " Helper function to hash a pointer and mutate the strategy if needed.","fields": [12397,12398,12399]},{"file": 67,"line": 54,"col": 4,"docs": " Helper function to hash a set of contiguous objects, from an array or slice.","fields": [12400,12401,12402]},{"file": 67,"line": 0,"col": 0},{"file": 67,"line": 1,"col": 0},{"file": 67,"line": 2,"col": 0},{"file": 67,"line": 3,"col": 0},{"file": 67,"line": 201,"col": 0},{"file": 67,"line": 202,"col": 0},{"file": 67,"line": 204,"col": 0,"fields": [12403]},{"file": 67,"line": 211,"col": 0,"fields": [12404]},{"file": 67,"line": 218,"col": 0,"fields": [12405]},{"file": 67,"line": 225,"col": 0,"fields": [12406]},{"file": 59,"line": 1691,"col": 8,"docs": " Special value used to indicate openat should use the current working directory"},{"file": 59,"line": 1694,"col": 8,"docs": " Do not follow symbolic links"},{"file": 59,"line": 1697,"col": 8,"docs": " Remove directory instead of unlinking file"},{"file": 59,"line": 1700,"col": 8,"docs": " Follow symbolic links."},{"file": 59,"line": 1703,"col": 8,"docs": " Suppress terminal automount traversal"},{"file": 59,"line": 1706,"col": 8,"docs": " Allow empty relative pathname"},{"file": 59,"line": 1709,"col": 8,"docs": " Type of synchronisation required from statx()"},{"file": 59,"line": 1712,"col": 8,"docs": " - Do whatever stat() does"},{"file": 59,"line": 1715,"col": 8,"docs": " - Force the attributes to be sync'd with the server"},{"file": 59,"line": 1718,"col": 8,"docs": " - Don't sync attributes with the server"},{"file": 59,"line": 1721,"col": 8,"docs": " Apply to the entire subtree"},{"file": 59,"line": 98,"col": 8,"docs": " Share changes"},{"file": 59,"line": 100,"col": 8,"docs": " Changes are private"},{"file": 59,"line": 102,"col": 8,"docs": " share + validate extension flags"},{"file": 59,"line": 104,"col": 8,"docs": " Mask for type of mapping"},{"file": 59,"line": 106,"col": 8,"docs": " Interpret addr exactly"},{"file": 59,"line": 108,"col": 8,"docs": " don't use a file"},{"file": 59,"line": 111,"col": 8,"docs": " populate (prefault) pagetables"},{"file": 59,"line": 113,"col": 8,"docs": " do not block on IO"},{"file": 59,"line": 115,"col": 8,"docs": " give out an address that is best suited for process/thread stacks"},{"file": 59,"line": 117,"col": 8,"docs": " create a huge page mapping"},{"file": 59,"line": 119,"col": 8,"docs": " perform synchronous page faults for the mapping"},{"file": 59,"line": 121,"col": 8,"docs": " MAP_FIXED which doesn't unmap underlying mapping"},{"file": 59,"line": 123,"col": 8,"docs": " For anonymous mmap, memory could be uninitialized"},{"file": 59,"line": 129,"col": 8},{"file": 59,"line": 130,"col": 8},{"file": 59,"line": 131,"col": 8},{"file": 59,"line": 1769,"col": 8,"docs": " page can not be accessed"},{"file": 59,"line": 1771,"col": 8,"docs": " page can be read"},{"file": 59,"line": 1773,"col": 8,"docs": " page can be written"},{"file": 59,"line": 1775,"col": 8,"docs": " page can be executed"},{"file": 59,"line": 1777,"col": 8,"docs": " page may be used for atomic ops"},{"file": 59,"line": 1783,"col": 8,"docs": " mprotect flag: extend change to start of growsdown vma"},{"file": 59,"line": 1785,"col": 8,"docs": " mprotect flag: extend change to end of growsup vma"},{"file": 59,"line": 2939,"col": 8},{"file": 59,"line": 2941,"col": 8},{"file": 59,"line": 2942,"col": 8},{"file": 59,"line": 2943,"col": 8},{"file": 59,"line": 2944,"col": 8},{"file": 59,"line": 2945,"col": 8},{"file": 59,"line": 2946,"col": 8},{"file": 59,"line": 2947,"col": 8},{"file": 59,"line": 2949,"col": 8},{"file": 59,"line": 2950,"col": 8},{"file": 59,"line": 2951,"col": 8},{"file": 59,"line": 2952,"col": 8},{"file": 59,"line": 2953,"col": 8},{"file": 59,"line": 2954,"col": 8},{"file": 59,"line": 2955,"col": 8},{"file": 59,"line": 2956,"col": 8},{"file": 59,"line": 2957,"col": 8},{"file": 59,"line": 2958,"col": 8},{"file": 59,"line": 2959,"col": 8},{"file": 59,"line": 2960,"col": 8},{"file": 59,"line": 2961,"col": 8},{"file": 59,"line": 2962,"col": 8},{"file": 59,"line": 2963,"col": 8},{"file": 59,"line": 2965,"col": 8,"fields": [12407]},{"file": 59,"line": 2969,"col": 8,"fields": [12408]},{"file": 59,"line": 2973,"col": 8,"fields": [12409]},{"file": 59,"line": 2977,"col": 8,"fields": [12410]},{"file": 59,"line": 2981,"col": 8,"fields": [12411]},{"file": 59,"line": 2985,"col": 8,"fields": [12412]},{"file": 59,"line": 2989,"col": 8,"fields": [12413]},{"file": 59,"line": 1851,"col": 8},{"file": 59,"line": 1852,"col": 8},{"file": 59,"line": 1853,"col": 8},{"file": 59,"line": 1854,"col": 8},{"file": 59,"line": 1855,"col": 8},{"file": 59,"line": 1856,"col": 8},{"file": 59,"line": 1857,"col": 8},{"file": 59,"line": 1858,"col": 8},{"file": 59,"line": 1949,"col": 8},{"file": 59,"line": 1950,"col": 8},{"file": 59,"line": 1951,"col": 8},{"file": 59,"line": 1953,"col": 8},{"file": 59,"line": 1954,"col": 8},{"file": 59,"line": 1955,"col": 8},{"file": 59,"line": 1956,"col": 8},{"file": 59,"line": 1957,"col": 8},{"file": 59,"line": 1958,"col": 8},{"file": 59,"line": 1959,"col": 8},{"file": 59,"line": 1960,"col": 8},{"file": 59,"line": 1961,"col": 8},{"file": 59,"line": 1962,"col": 8},{"file": 59,"line": 1963,"col": 8},{"file": 59,"line": 1964,"col": 8},{"file": 59,"line": 1965,"col": 8},{"file": 59,"line": 1966,"col": 8},{"file": 59,"line": 1967,"col": 8},{"file": 59,"line": 1968,"col": 8},{"file": 59,"line": 1969,"col": 8},{"file": 59,"line": 1970,"col": 8},{"file": 59,"line": 1971,"col": 8},{"file": 59,"line": 1972,"col": 8},{"file": 59,"line": 1973,"col": 8},{"file": 59,"line": 1974,"col": 8},{"file": 59,"line": 1975,"col": 8},{"file": 59,"line": 1976,"col": 8},{"file": 59,"line": 1977,"col": 8},{"file": 59,"line": 1978,"col": 8},{"file": 59,"line": 1979,"col": 8},{"file": 59,"line": 1980,"col": 8},{"file": 59,"line": 1981,"col": 8},{"file": 59,"line": 1982,"col": 8},{"file": 59,"line": 1983,"col": 8},{"file": 59,"line": 1984,"col": 8},{"file": 59,"line": 1985,"col": 8},{"file": 59,"line": 1986,"col": 8},{"file": 59,"line": 1988,"col": 8},{"file": 59,"line": 1989,"col": 8},{"file": 59,"line": 1990,"col": 8},{"file": 59,"line": 3046,"col": 8},{"file": 59,"line": 3047,"col": 8},{"file": 68,"line": 12,"col": 4},{"file": 68,"line": 97,"col": 4},{"file": 68,"line": 317,"col": 4},{"file": 68,"line": 360,"col": 4},{"file": 68,"line": 0,"col": 0},{"file": 68,"line": 1,"col": 0},{"file": 68,"line": 2,"col": 0},{"file": 68,"line": 3,"col": 0},{"file": 68,"line": 4,"col": 0},{"file": 68,"line": 5,"col": 0},{"file": 68,"line": 6,"col": 0},{"file": 68,"line": 7,"col": 0},{"file": 68,"line": 8,"col": 0},{"file": 68,"line": 9,"col": 0},{"file": 68,"line": 10,"col": 0},{"file": 68,"line": 24,"col": 0},{"file": 68,"line": 48,"col": 0},{"file": 68,"line": 303,"col": 0,"fields": [12414,12415,12416,12417]},{"file": 48,"line": 492,"col": 8},{"file": 48,"line": 503,"col": 8,"fields": [12418,12419]},{"file": 48,"line": 520,"col": 8,"fields": [12420]},{"file": 48,"line": 526,"col": 8,"fields": [12421]},{"file": 48,"line": 606,"col": 8,"fields": [12422]},{"file": 48,"line": 670,"col": 8,"fields": [12423,12424,12425]},{"file": 48,"line": 694,"col": 8,"fields": [12426,12427,12428]},{"file": 48,"line": 791,"col": 8,"fields": [12429,12430]},{"file": 48,"line": 844,"col": 8,"fields": [12431,12432]},{"file": 48,"line": 850,"col": 8,"fields": [12433,12434]},{"file": 48,"line": 861,"col": 4,"fields": [12435,12436]},{"file": 48,"line": 1003,"col": 8},{"file": 48,"line": 1047,"col": 8,"fields": [12437,12438]},{"file": 48,"line": 1053,"col": 8,"fields": [12439,12440]},{"file": 48,"line": 1071,"col": 8,"fields": [12441]},{"file": 48,"line": 1005,"col": 4,"fields": [12442,12443,12444]},{"file": 48,"line": 1016,"col": 4,"fields": [12445,12446]},{"file": 48,"line": 1059,"col": 4,"fields": [12447]},{"file": 48,"line": 1063,"col": 4,"fields": [12448]},{"file": 51,"line": 149,"col": 8},{"file": 51,"line": 160,"col": 8,"docs": " Initialize the timer structure. Can only fail when running in a hostile environment that intentionally injects error values into syscalls, such as using seccomp on Linux to intercept `clock_gettime`.","fields": []},{"file": 51,"line": 205,"col": 8,"docs": " Reads the timer value since start or the last reset in nanoseconds","fields": [12449]},{"file": 51,"line": 211,"col": 8,"docs": " Resets the timer value to 0/now.","fields": [12450]},{"file": 51,"line": 216,"col": 8,"docs": " Returns the current value of the timer in nanoseconds, then resets it","fields": [12451]},{"file": 51,"line": 154,"col": 4,"docs": " At some point we may change our minds on RAW, but for now we're sticking with posix standard MONOTONIC. For more information, see: https://github.com/ziglang/zig/pull/933"},{"file": 51,"line": 223,"col": 4,"fields": []},{"file": 51,"line": 235,"col": 4,"fields": [12452,12453]},{"file": 54,"line": 193,"col": 8,"fields": [12454,12455]},{"file": 68,"line": 31,"col": 8},{"file": 12,"line": 488,"col": 12,"fields": [12456,12457]},{"file": 12,"line": 496,"col": 12,"docs": " Checks if system is guaranteed to be at least `version` or older than `version`. Returns `null` if a runtime check is required.","fields": [12458,12459]},{"file": 3,"line": 143,"col": 20,"fields": [12460,12461]},{"file": 3,"line": 149,"col": 20,"docs": " Checks if system is guaranteed to be at least `version` or older than `version`. Returns `null` if a runtime check is required.","fields": [12462,12463]},{"file": 69,"line": 108,"col": 4},{"file": 69,"line": 0,"col": 0},{"file": 69,"line": 1,"col": 0},{"file": 69,"line": 2,"col": 0},{"file": 69,"line": 3,"col": 0},{"file": 69,"line": 4,"col": 0},{"file": 69,"line": 5,"col": 0},{"file": 69,"line": 6,"col": 0},{"file": 69,"line": 44,"col": 0},{"file": 69,"line": 49,"col": 0},{"file": 69,"line": 56,"col": 0},{"file": 69,"line": 65,"col": 0},{"file": 69,"line": 73,"col": 0},{"file": 69,"line": 78,"col": 0},{"file": 69,"line": 85,"col": 0},{"file": 69,"line": 90,"col": 0},{"file": 69,"line": 96,"col": 0},{"file": 69,"line": 306,"col": 0},{"file": 59,"line": 1748,"col": 8},{"file": 59,"line": 1749,"col": 8},{"file": 59,"line": 1750,"col": 8},{"file": 59,"line": 1751,"col": 8},{"file": 59,"line": 1752,"col": 8},{"file": 59,"line": 1753,"col": 8},{"file": 59,"line": 1754,"col": 8},{"file": 59,"line": 1755,"col": 8},{"file": 59,"line": 1756,"col": 8},{"file": 59,"line": 1757,"col": 8},{"file": 59,"line": 1758,"col": 8},{"file": 59,"line": 1759,"col": 8},{"file": 59,"line": 1760,"col": 8},{"file": 59,"line": 1762,"col": 8},{"file": 59,"line": 1764,"col": 8},{"file": 59,"line": 2717,"col": 8},{"file": 59,"line": 2718,"col": 8},{"file": 59,"line": 2719,"col": 8},{"file": 59,"line": 2720,"col": 8},{"file": 59,"line": 2721,"col": 8},{"file": 59,"line": 2722,"col": 8},{"file": 59,"line": 2723,"col": 8},{"file": 59,"line": 2724,"col": 8},{"file": 59,"line": 2725,"col": 8},{"file": 59,"line": 2726,"col": 8},{"file": 59,"line": 2727,"col": 8},{"file": 59,"line": 2728,"col": 8},{"file": 59,"line": 2729,"col": 8},{"file": 59,"line": 2730,"col": 8},{"file": 59,"line": 2731,"col": 8},{"file": 59,"line": 2732,"col": 8},{"file": 59,"line": 2733,"col": 8},{"file": 59,"line": 2734,"col": 8},{"file": 59,"line": 2735,"col": 8},{"file": 59,"line": 2736,"col": 8},{"file": 59,"line": 2737,"col": 8},{"file": 59,"line": 2738,"col": 8},{"file": 59,"line": 2739,"col": 8},{"file": 59,"line": 2740,"col": 8},{"file": 59,"line": 2741,"col": 8},{"file": 59,"line": 2742,"col": 8},{"file": 59,"line": 2743,"col": 8},{"file": 59,"line": 2744,"col": 8},{"file": 59,"line": 2745,"col": 8},{"file": 59,"line": 2746,"col": 8},{"file": 59,"line": 2747,"col": 8},{"file": 59,"line": 2748,"col": 8},{"file": 59,"line": 2749,"col": 8},{"file": 59,"line": 2750,"col": 8},{"file": 59,"line": 2751,"col": 8},{"file": 59,"line": 2752,"col": 8},{"file": 59,"line": 2753,"col": 8},{"file": 59,"line": 2754,"col": 8},{"file": 59,"line": 2755,"col": 8},{"file": 59,"line": 2756,"col": 8},{"file": 59,"line": 2757,"col": 8},{"file": 59,"line": 2758,"col": 8},{"file": 59,"line": 2759,"col": 8},{"file": 59,"line": 2760,"col": 8},{"file": 59,"line": 2761,"col": 8},{"file": 59,"line": 2762,"col": 8},{"file": 59,"line": 2763,"col": 8},{"file": 59,"line": 2764,"col": 8},{"file": 59,"line": 2765,"col": 8},{"file": 59,"line": 2766,"col": 8},{"file": 59,"line": 2767,"col": 8},{"file": 59,"line": 2768,"col": 8},{"file": 59,"line": 2769,"col": 8},{"file": 59,"line": 2770,"col": 8},{"file": 59,"line": 2771,"col": 8},{"file": 70,"line": 0,"col": 0},{"file": 70,"line": 1,"col": 0},{"file": 70,"line": 2,"col": 0},{"file": 70,"line": 3,"col": 0},{"file": 70,"line": 4,"col": 0},{"file": 70,"line": 5,"col": 0},{"file": 70,"line": 6,"col": 0},{"file": 70,"line": 7,"col": 0},{"file": 70,"line": 9,"col": 0},{"file": 70,"line": 10,"col": 0},{"file": 70,"line": 11,"col": 0},{"file": 17,"line": 853,"col": 8,"docs": " Initialize the delay queue by spawning the timer thread and starting any timer resources.","fields": [12464]},{"file": 17,"line": 868,"col": 8,"docs": " Entry point for the timer thread which waits for timer entries to expire and reschedules them.","fields": [12465]},{"file": 17,"line": 891,"col": 8},{"file": 33,"line": 702,"col": 8,"docs": " Calls `munmap(mapped.ptr, mapped.len)` then `exit(1)` without touching the stack (which lives in `mapped.ptr`). Ported over from musl libc's pthread detached implementation: https://github.com/ifduyue/musl/search?q=__unmapself","fields": [12466]},{"file": 17,"line": 894,"col": 12},{"file": 17,"line": 905,"col": 12,"docs": " Registers the entry into the queue of waiting frames","fields": [12467,12468]},{"file": 17,"line": 910,"col": 12,"docs": " Dequeues one expired event relative to `now`","fields": [12469,12470]},{"file": 17,"line": 921,"col": 12,"docs": " Returns an estimate for the amount of time to wait until the next waiting entry expires.","fields": [12471]},{"file": 17,"line": 926,"col": 12,"fields": [12472]},{"file": 47,"line": 879,"col": 4},{"file": 47,"line": 880,"col": 4},{"file": 47,"line": 881,"col": 4},{"file": 47,"line": 882,"col": 4},{"file": 47,"line": 884,"col": 4,"docs": " In WASI, this error may occur when the file descriptor does not hold the required rights to write to it."},{"file": 47,"line": 887,"col": 4},{"file": 47,"line": 888,"col": 4},{"file": 47,"line": 889,"col": 4},{"file": 47,"line": 890,"col": 4},{"file": 47,"line": 892,"col": 4,"docs": " This error occurs when no global event loop is configured, and reading from the file descriptor would block."},{"file": 47,"line": 896,"col": 4,"docs": " Connection reset by peer."},{"file": 47,"line": 4989,"col": 4,"docs": " The Operating System returned an undocumented error code. This error is in theory not possible, but it would be better to handle this error than to invoke undefined behavior."},{"file": 47,"line": 513,"col": 4},{"file": 47,"line": 514,"col": 4},{"file": 47,"line": 515,"col": 4},{"file": 47,"line": 516,"col": 4},{"file": 47,"line": 517,"col": 4},{"file": 47,"line": 518,"col": 4},{"file": 47,"line": 519,"col": 4},{"file": 47,"line": 520,"col": 4},{"file": 47,"line": 522,"col": 4,"docs": " This error occurs when no global event loop is configured, and reading from the file descriptor would block."},{"file": 47,"line": 526,"col": 4,"docs": " In WASI, this error occurs when the file descriptor does not hold the required rights to read from it."},{"file": 9,"line": 15,"col": 37},{"file": 5,"line": 57,"col": 8},{"file": 5,"line": 58,"col": 8},{"file": 5,"line": 59,"col": 8},{"file": 5,"line": 60,"col": 8},{"file": 5,"line": 61,"col": 8},{"file": 5,"line": 62,"col": 8},{"file": 5,"line": 63,"col": 8,"docs": " On Windows, file paths must be valid Unicode."},{"file": 5,"line": 65,"col": 8,"docs": " On Windows, file paths cannot contain these characters: '/', '*', '?', '\"', '<', '>', '|'"},{"file": 5,"line": 68,"col": 8},{"file": 47,"line": 1238,"col": 4},{"file": 47,"line": 1239,"col": 4},{"file": 47,"line": 1240,"col": 4},{"file": 47,"line": 1241,"col": 4},{"file": 47,"line": 1247,"col": 4,"docs": " Insufficient kernel memory was available, or the named file is a FIFO and per-user hard limit on memory allocation for pipes has been reached."},{"file": 47,"line": 1252,"col": 4,"docs": " The file is too large to be opened. This error is unreachable for 64-bit targets, as well as when opening directories."},{"file": 47,"line": 1256,"col": 4,"docs": " The path refers to directory but the `O.DIRECTORY` flag was not provided."},{"file": 47,"line": 1259,"col": 4,"docs": " A new path cannot be created because the device has no room for the new file. This error is only reachable when the `O.CREAT` flag is provided."},{"file": 47,"line": 1263,"col": 4,"docs": " A component used as a directory in the path was not, in fact, a directory, or `O.DIRECTORY` was specified and the path was not a directory."},{"file": 47,"line": 1269,"col": 4},{"file": 47,"line": 1271,"col": 4,"docs": " The underlying filesystem does not support file locks"},{"file": 47,"line": 1277,"col": 4},{"file": 47,"line": 4310,"col": 4},{"file": 47,"line": 4312,"col": 4,"docs": " In WASI, this error may occur when the file descriptor does not hold the required rights to seek on it."},{"file": 47,"line": 3682,"col": 4},{"file": 47,"line": 3684,"col": 4,"docs": " In WASI, this error may occur when the file descriptor does not hold the required rights to get its filestat information."},{"file": 36,"line": 1190,"col": 17},{"file": 55,"line": 8,"col": 24},{"file": 40,"line": 2466,"col": 4},{"file": 40,"line": 2467,"col": 4},{"file": 40,"line": 2468,"col": 4},{"file": 40,"line": 2469,"col": 4},{"file": 40,"line": 2470,"col": 4},{"file": 40,"line": 2471,"col": 4},{"file": 40,"line": 2472,"col": 4,"docs": " On Windows, file paths must be valid Unicode."},{"file": 40,"line": 2474,"col": 4,"docs": " On Windows, file paths cannot contain these characters: '/', '*', '?', '\"', '<', '>', '|'"},{"file": 40,"line": 2477,"col": 4},{"file": 47,"line": 2671,"col": 4},{"file": 47,"line": 2676,"col": 4},{"file": 47,"line": 2680,"col": 4,"docs": " Windows-only. This error may occur if the opened reparse point is of unsupported type."},{"file": 47,"line": 4244,"col": 4},{"file": 47,"line": 4247,"col": 4},{"file": 47,"line": 4612,"col": 4},{"file": 47,"line": 4615,"col": 4},{"file": 47,"line": 3954,"col": 4,"docs": " The underlying filesystem of the specified file does not support memory mapping."},{"file": 47,"line": 3957,"col": 4,"docs": " A file descriptor refers to a non-regular file. Or a file mapping was requested, but the file descriptor is not open for reading. Or `MAP.SHARED` was requested and `PROT_WRITE` is set, but the file descriptor is not open in `O.RDWR` mode. Or `PROT_WRITE` is set, but the file is append-only."},{"file": 47,"line": 3963,"col": 4,"docs": " The `prot` argument asks for `PROT_EXEC` but the mapped area belongs to a file on a filesystem that was mounted no-exec."},{"file": 47,"line": 3966,"col": 4},{"file": 47,"line": 3967,"col": 4},{"file": 45,"line": 992,"col": 49},{"file": 10,"line": 44,"col": 48},{"file": 25,"line": 461,"col": 53},{"file": 36,"line": 1188,"col": 24},{"file": 25,"line": 471,"col": 64},{"file": 10,"line": 116,"col": 32},{"file": 47,"line": 6373,"col": 34},{"file": 47,"line": 6373,"col": 52},{"file": 52,"line": 81,"col": 4},{"file": 52,"line": 82,"col": 4},{"file": 52,"line": 101,"col": 4},{"file": 52,"line": 125,"col": 4},{"file": 52,"line": 179,"col": 43},{"file": 52,"line": 25,"col": 21},{"file": 42,"line": 238,"col": 95},{"file": 68,"line": 76,"col": 64},{"file": 45,"line": 454,"col": 48},{"file": 45,"line": 1072,"col": 57},{"file": 52,"line": 99,"col": 4},{"file": 52,"line": 100,"col": 4},{"file": 52,"line": 123,"col": 4},{"file": 52,"line": 124,"col": 4},{"file": 45,"line": 448,"col": 48},{"file": 47,"line": 1235,"col": 4,"docs": " In WASI, this error may occur when the file descriptor does not hold the required rights to open a new resource relative to it."},{"file": 47,"line": 1242,"col": 4},{"file": 47,"line": 1244,"col": 4,"docs": " The path exceeded `MAX_PATH_BYTES` bytes."},{"file": 47,"line": 1267,"col": 4,"docs": " The path already exists and the `O.CREAT` and `O.EXCL` flags were provided."},{"file": 47,"line": 1274,"col": 4},{"file": 47,"line": 1275,"col": 4},{"file": 47,"line": 4582,"col": 4},{"file": 47,"line": 4584,"col": 4,"docs": " The kernel ran out of memory for allocating file locks"},{"file": 47,"line": 4587,"col": 4,"docs": " The underlying filesystem does not support file locks"},{"file": 45,"line": 461,"col": 48},{"file": 54,"line": 219,"col": 45},{"file": 39,"line": 1803,"col": 34},{"file": 39,"line": 1782,"col": 4,"docs": " As much as possible was written to the buffer, but it was too small to fit all the printed bytes."},{"file": 39,"line": 1545,"col": 4,"docs": " The result cannot fit in the type specified"},{"file": 39,"line": 1548,"col": 4,"docs": " The input was empty or had a byte that was not a digit"},{"file": 39,"line": 1760,"col": 44},{"file": 47,"line": 2668,"col": 4,"docs": " In WASI, this error may occur when the file descriptor does not hold the required rights to read value of a symbolic link relative to it."},{"file": 47,"line": 2672,"col": 4},{"file": 47,"line": 2673,"col": 4},{"file": 47,"line": 2674,"col": 4},{"file": 47,"line": 2675,"col": 4},{"file": 47,"line": 2677,"col": 4},{"file": 47,"line": 2678,"col": 4},{"file": 47,"line": 2679,"col": 4},{"file": 47,"line": 4616,"col": 4},{"file": 47,"line": 4617,"col": 4},{"file": 47,"line": 4618,"col": 4},{"file": 47,"line": 4619,"col": 4},{"file": 47,"line": 4620,"col": 4},{"file": 47,"line": 4622,"col": 4},{"file": 47,"line": 4625,"col": 4},{"file": 47,"line": 4627,"col": 4},{"file": 47,"line": 4628,"col": 4},{"file": 47,"line": 4633,"col": 4},{"file": 47,"line": 652,"col": 42},{"file": 47,"line": 1050,"col": 44},{"file": 47,"line": 4029,"col": 4},{"file": 47,"line": 4030,"col": 4},{"file": 47,"line": 4031,"col": 4},{"file": 47,"line": 4032,"col": 4},{"file": 47,"line": 4033,"col": 4},{"file": 47,"line": 4034,"col": 4},{"file": 47,"line": 4035,"col": 4},{"file": 47,"line": 4036,"col": 4},{"file": 47,"line": 4037,"col": 4},{"file": 47,"line": 4039,"col": 4,"docs": " On Windows, file paths must be valid Unicode."},{"file": 47,"line": 4245,"col": 4},{"file": 47,"line": 4246,"col": 4},{"file": 47,"line": 4609,"col": 4},{"file": 47,"line": 4610,"col": 4},{"file": 47,"line": 4611,"col": 4},{"file": 47,"line": 4613,"col": 4},{"file": 47,"line": 4614,"col": 4},{"file": 47,"line": 4621,"col": 4},{"file": 47,"line": 4623,"col": 4},{"file": 47,"line": 4624,"col": 4},{"file": 47,"line": 4630,"col": 4,"docs": " On Windows, file paths must be valid Unicode."},{"file": 12,"line": 693,"col": 21,"name": "msg"},{"file": 12,"line": 693,"col": 38,"name": "error_return_trace"},{"file": 3,"line": 725,"col": 38,"name": "features"},{"file": 3,"line": 664,"col": 34,"name": "set"},{"file": 3,"line": 664,"col": 45,"name": "arch_feature_index"},{"file": 3,"line": 848,"col": 26,"name": "arch"},{"file": 3,"line": 862,"col": 26,"name": "arch"},{"file": 36,"line": 271,"col": 17,"name": "trace"},{"file": 36,"line": 271,"col": 56,"name": "first_trace_addr"},{"file": 36,"line": 271,"col": 82,"name": "msg"},{"file": 15,"line": 42,"col": 12,"name": "m"},{"file": 5,"line": 604,"col": 17,"name": "self"},{"file": 5,"line": 604,"col": 29,"name": "bytes"},{"file": 5,"line": 868,"col": 18,"name": "file"},{"file": 4,"line": 26,"col": 21,"name": "self"},{"file": 4,"line": 26,"col": 33,"name": "format","comptime": true},{"file": 4,"line": 26,"col": 62,"name": "args"},{"file": 36,"line": 196,"col": 22,"name": "stack_trace"},{"file": 36,"line": 105,"col": 29,"name": "start_addr"},{"file": 15,"line": 46,"col": 14,"name": "m"},{"file": 54,"line": 38,"col": 12,"name": "ev"},{"file": 3,"line": 827,"col": 25,"name": "arch"},{"file": 69,"line": 308,"col": 21,"name": "phdrs"},{"file": 53,"line": 411,"col": 19,"name": "phdrs"},{"file": 47,"line": 487,"col": 12,"name": "status"},{"file": 53,"line": 438,"col": 20,"name": "argc"},{"file": 53,"line": 438,"col": 33,"name": "argv"},{"file": 53,"line": 438,"col": 51,"name": "envp"},{"file": 3,"line": 883,"col": 27,"name": "arch"},{"file": 47,"line": 5025,"col": 17,"name": "sig"},{"file": 47,"line": 5025,"col": 26,"name": "act"},{"file": 47,"line": 5025,"col": 50,"name": "oact"},{"file": 15,"line": 79,"col": 16,"name": "m"},{"file": 47,"line": 922,"col": 13,"name": "fd"},{"file": 47,"line": 922,"col": 23,"name": "bytes"},{"file": 39,"line": 73,"col": 4,"name": "writer"},{"file": 39,"line": 74,"col": 4,"name": "fmt","comptime": true},{"file": 39,"line": 75,"col": 4,"name": "args"},{"file": 4,"line": 19,"col": 24,"name": "self"},{"file": 4,"line": 19,"col": 36,"name": "bytes"},{"file": 36,"line": 224,"col": 14,"name": "ok"},{"file": 39,"line": 412,"col": 4,"name": "value"},{"file": 39,"line": 413,"col": 4,"name": "fmt","comptime": true},{"file": 39,"line": 414,"col": 4,"name": "options"},{"file": 39,"line": 415,"col": 4,"name": "writer"},{"file": 39,"line": 416,"col": 4,"name": "max_depth"},{"file": 47,"line": 446,"col": 13,"name": "sig"},{"file": 6,"line": 25,"col": 16,"name": "ctx"},{"file": 6,"line": 25,"col": 30,"name": "key"},{"file": 6,"line": 40,"col": 15,"name": "ctx"},{"file": 6,"line": 40,"col": 29,"name": "a"},{"file": 6,"line": 40,"col": 35,"name": "b"},{"file": 36,"line": 666,"col": 25,"name": "allocator"},{"file": 36,"line": 341,"col": 4,"name": "stack_trace"},{"file": 36,"line": 342,"col": 4,"name": "out_stream"},{"file": 36,"line": 343,"col": 4,"name": "allocator"},{"file": 36,"line": 344,"col": 4,"name": "debug_info"},{"file": 36,"line": 345,"col": 4,"name": "tty_config"},{"file": 45,"line": 333,"col": 11,"name": "x"},{"file": 45,"line": 333,"col": 23,"name": "y"},{"file": 36,"line": 580,"col": 28,"name": "debug_info"},{"file": 36,"line": 580,"col": 52,"name": "out_stream"},{"file": 36,"line": 580,"col": 73,"name": "address"},{"file": 36,"line": 580,"col": 89,"name": "tty_config"},{"file": 36,"line": 1003,"col": 31,"name": "self"},{"file": 36,"line": 1003,"col": 49,"name": "address"},{"file": 3,"line": 1422,"col": 20,"name": "self"},{"file": 3,"line": 59,"col": 28,"name": "tag"},{"file": 36,"line": 1153,"col": 22,"name": "self"},{"file": 36,"line": 1153,"col": 40,"name": "address"},{"file": 36,"line": 1164,"col": 24,"name": "info"},{"file": 36,"line": 1164,"col": 48,"name": "size"},{"file": 36,"line": 1164,"col": 61,"name": "context"},{"file": 47,"line": 4808,"col": 4,"name": "context"},{"file": 47,"line": 4809,"col": 4,"name": "Error","comptime": true},{"file": 47,"line": 4810,"col": 4,"name": "callback","comptime": true},{"file": 6,"line": 577,"col": 19,"name": "self"},{"file": 6,"line": 577,"col": 31,"name": "key"},{"file": 55,"line": 155,"col": 14,"name": "self"},{"file": 55,"line": 155,"col": 32,"name": "T","comptime": true},{"file": 40,"line": 930,"col": 20,"name": "self"},{"file": 40,"line": 930,"col": 31,"name": "sub_path"},{"file": 40,"line": 930,"col": 53,"name": "flags"},{"file": 40,"line": 2480,"col": 19,"name": "flags"},{"file": 55,"line": 163,"col": 15,"name": "self"},{"file": 55,"line": 163,"col": 33,"name": "ptr"},{"file": 36,"line": 759,"col": 24,"name": "allocator"},{"file": 36,"line": 759,"col": 51,"name": "elf_file"},{"file": 36,"line": 968,"col": 16,"name": "file"},{"file": 5,"line": 257,"col": 21,"name": "self"},{"file": 5,"line": 181,"col": 17,"name": "self"},{"file": 45,"line": 992,"col": 12,"name": "T","comptime": true},{"file": 45,"line": 992,"col": 30,"name": "x"},{"file": 47,"line": 3976,"col": 4,"name": "ptr"},{"file": 47,"line": 3977,"col": 4,"name": "length"},{"file": 47,"line": 3978,"col": 4,"name": "prot"},{"file": 47,"line": 3979,"col": 4,"name": "flags"},{"file": 47,"line": 3980,"col": 4,"name": "fd"},{"file": 47,"line": 3981,"col": 4,"name": "offset"},{"file": 21,"line": 527,"col": 11,"name": "T","comptime": true},{"file": 21,"line": 527,"col": 29,"name": "a"},{"file": 21,"line": 527,"col": 43,"name": "b"},{"file": 3,"line": 1035,"col": 26,"name": "arch"},{"file": 46,"line": 293,"col": 22,"name": "p"},{"file": 46,"line": 293,"col": 34,"name": "sentinel_val","comptime": true},{"file": 21,"line": 621,"col": 12,"name": "ptr"},{"file": 36,"line": 749,"col": 13,"name": "ptr"},{"file": 36,"line": 749,"col": 30,"name": "offset"},{"file": 36,"line": 749,"col": 43,"name": "size"},{"file": 25,"line": 1094,"col": 26,"name": "di"},{"file": 25,"line": 1094,"col": 42,"name": "allocator"},{"file": 7,"line": 49,"col": 20,"name": "allocator"},{"file": 25,"line": 622,"col": 24,"name": "di"},{"file": 9,"line": 115,"col": 25,"name": "buffer"},{"file": 9,"line": 46,"col": 20,"name": "self"},{"file": 9,"line": 46,"col": 33,"name": "dest"},{"file": 9,"line": 34,"col": 22,"name": "self"},{"file": 9,"line": 77,"col": 22,"name": "self"},{"file": 9,"line": 77,"col": 35,"name": "pos"},{"file": 9,"line": 81,"col": 22,"name": "self"},{"file": 9,"line": 81,"col": 35,"name": "amt"},{"file": 9,"line": 101,"col": 22,"name": "self"},{"file": 9,"line": 97,"col": 25,"name": "self"},{"file": 9,"line": 42,"col": 30,"name": "self"},{"file": 11,"line": 26,"col": 25,"name": "self"},{"file": 11,"line": 18,"col": 22,"name": "self"},{"file": 11,"line": 18,"col": 34,"name": "pos"},{"file": 25,"line": 455,"col": 18,"name": "in_stream"},{"file": 25,"line": 455,"col": 38,"name": "endian"},{"file": 25,"line": 455,"col": 66,"name": "is_64"},{"file": 10,"line": 266,"col": 23,"name": "self"},{"file": 10,"line": 266,"col": 35,"name": "T","comptime": true},{"file": 10,"line": 266,"col": 53,"name": "endian"},{"file": 10,"line": 238,"col": 30,"name": "self"},{"file": 10,"line": 238,"col": 42,"name": "num_bytes","comptime": true},{"file": 10,"line": 42,"col": 25,"name": "self"},{"file": 10,"line": 42,"col": 37,"name": "buf"},{"file": 10,"line": 31,"col": 23,"name": "self"},{"file": 10,"line": 31,"col": 35,"name": "buffer"},{"file": 21,"line": 1387,"col": 15,"name": "T","comptime": true},{"file": 21,"line": 1387,"col": 33,"name": "bytes"},{"file": 21,"line": 1387,"col": 88,"name": "endian"},{"file": 10,"line": 224,"col": 24,"name": "self"},{"file": 10,"line": 24,"col": 20,"name": "self"},{"file": 10,"line": 24,"col": 32,"name": "buffer"},{"file": 11,"line": 30,"col": 22,"name": "self"},{"file": 25,"line": 841,"col": 22,"name": "di"},{"file": 25,"line": 841,"col": 38,"name": "abbrev_offset"},{"file": 7,"line": 173,"col": 22,"name": "self"},{"file": 7,"line": 173,"col": 35,"name": "item"},{"file": 25,"line": 854,"col": 24,"name": "di"},{"file": 25,"line": 854,"col": 40,"name": "offset"},{"file": 25,"line": 606,"col": 21,"name": "self"},{"file": 63,"line": 5,"col": 19,"name": "T","comptime": true},{"file": 63,"line": 5,"col": 37,"name": "reader"},{"file": 7,"line": 67,"col": 22,"name": "self"},{"file": 7,"line": 361,"col": 22,"name": "self"},{"file": 7,"line": 314,"col": 35,"name": "self"},{"file": 7,"line": 314,"col": 48,"name": "new_capacity"},{"file": 7,"line": 334,"col": 42,"name": "self"},{"file": 7,"line": 334,"col": 55,"name": "new_capacity"},{"file": 7,"line": 419,"col": 30,"name": "self"},{"file": 55,"line": 337,"col": 22,"name": "self"},{"file": 55,"line": 337,"col": 40,"name": "old_mem"},{"file": 55,"line": 337,"col": 58,"name": "new_n"},{"file": 7,"line": 371,"col": 36,"name": "self"},{"file": 25,"line": 885,"col": 16,"name": "di"},{"file": 25,"line": 885,"col": 32,"name": "in_stream"},{"file": 25,"line": 885,"col": 52,"name": "abbrev_table"},{"file": 25,"line": 885,"col": 86,"name": "is_64"},{"file": 25,"line": 586,"col": 23,"name": "abbrev_table"},{"file": 25,"line": 586,"col": 57,"name": "abbrev_code"},{"file": 7,"line": 267,"col": 22,"name": "self"},{"file": 7,"line": 267,"col": 35,"name": "new_len"},{"file": 25,"line": 537,"col": 18,"name": "allocator"},{"file": 25,"line": 537,"col": 45,"name": "in_stream"},{"file": 25,"line": 537,"col": 65,"name": "form_id"},{"file": 25,"line": 537,"col": 79,"name": "endian"},{"file": 25,"line": 537,"col": 107,"name": "is_64"},{"file": 25,"line": 298,"col": 15,"name": "self"},{"file": 25,"line": 298,"col": 33,"name": "id"},{"file": 25,"line": 338,"col": 25,"name": "self"},{"file": 25,"line": 338,"col": 43,"name": "di"},{"file": 25,"line": 338,"col": 59,"name": "id"},{"file": 25,"line": 1075,"col": 17,"name": "di"},{"file": 25,"line": 1075,"col": 33,"name": "offset"},{"file": 25,"line": 330,"col": 18,"name": "self"},{"file": 25,"line": 330,"col": 36,"name": "id"},{"file": 25,"line": 305,"col": 19,"name": "self"},{"file": 25,"line": 305,"col": 37,"name": "id"},{"file": 25,"line": 282,"col": 20,"name": "self"},{"file": 25,"line": 726,"col": 27,"name": "di"},{"file": 6,"line": 538,"col": 28,"name": "self"},{"file": 6,"line": 538,"col": 41,"name": "key"},{"file": 6,"line": 538,"col": 49,"name": "value"},{"file": 6,"line": 973,"col": 35,"name": "self"},{"file": 6,"line": 973,"col": 48,"name": "allocator"},{"file": 6,"line": 973,"col": 71,"name": "key"},{"file": 6,"line": 973,"col": 79,"name": "value"},{"file": 6,"line": 973,"col": 89,"name": "ctx"},{"file": 6,"line": 1367,"col": 31,"name": "self"},{"file": 6,"line": 1367,"col": 50,"name": "key"},{"file": 6,"line": 1367,"col": 58,"name": "ctx"},{"file": 6,"line": 1409,"col": 24,"name": "self"},{"file": 6,"line": 1409,"col": 37,"name": "allocator"},{"file": 6,"line": 1409,"col": 60,"name": "new_count"},{"file": 6,"line": 1409,"col": 77,"name": "ctx"},{"file": 6,"line": 1445,"col": 16,"name": "self"},{"file": 6,"line": 1445,"col": 29,"name": "allocator"},{"file": 6,"line": 1445,"col": 52,"name": "new_capacity"},{"file": 6,"line": 1445,"col": 72,"name": "ctx"},{"file": 6,"line": 869,"col": 27,"name": "size"},{"file": 6,"line": 1403,"col": 16,"name": "self"},{"file": 45,"line": 402,"col": 11,"name": "x"},{"file": 45,"line": 402,"col": 23,"name": "y"},{"file": 6,"line": 925,"col": 24,"name": "self"},{"file": 45,"line": 1025,"col": 20,"name": "v"},{"file": 6,"line": 1476,"col": 20,"name": "self"},{"file": 6,"line": 1476,"col": 33,"name": "allocator"},{"file": 6,"line": 1476,"col": 56,"name": "new_capacity"},{"file": 21,"line": 2925,"col": 20,"name": "addr"},{"file": 21,"line": 2925,"col": 33,"name": "alignment"},{"file": 55,"line": 239,"col": 4,"name": "self"},{"file": 55,"line": 240,"col": 4,"name": "T","comptime": true},{"file": 55,"line": 242,"col": 4,"docs": " null means naturally aligned","name": "alignment","comptime": true},{"file": 55,"line": 243,"col": 4,"name": "n"},{"file": 6,"line": 864,"col": 22,"name": "self"},{"file": 6,"line": 864,"col": 35,"name": "allocator"},{"file": 6,"line": 1397,"col": 25,"name": "self"},{"file": 6,"line": 917,"col": 16,"name": "self"},{"file": 6,"line": 921,"col": 18,"name": "self"},{"file": 6,"line": 755,"col": 26,"name": "self"},{"file": 6,"line": 1000,"col": 49,"name": "self"},{"file": 6,"line": 1000,"col": 62,"name": "key"},{"file": 6,"line": 1000,"col": 70,"name": "value"},{"file": 6,"line": 1000,"col": 80,"name": "ctx"},{"file": 21,"line": 2238,"col": 12,"name": "T","comptime": true},{"file": 21,"line": 2238,"col": 30,"name": "a"},{"file": 21,"line": 2238,"col": 37,"name": "b"},{"file": 36,"line": 611,"col": 4,"name": "out_stream"},{"file": 36,"line": 612,"col": 4,"name": "line_info"},{"file": 36,"line": 613,"col": 4,"name": "address"},{"file": 36,"line": 614,"col": 4,"name": "symbol_name"},{"file": 36,"line": 615,"col": 4,"name": "compile_unit_name"},{"file": 36,"line": 616,"col": 4,"name": "tty_config"},{"file": 36,"line": 617,"col": 4,"name": "printLineFromFile","comptime": true},{"file": 36,"line": 1453,"col": 34,"name": "self"},{"file": 36,"line": 1453,"col": 50,"name": "address"},{"file": 36,"line": 1462,"col": 22,"name": "address"},{"file": 36,"line": 1462,"col": 36,"name": "di"},{"file": 25,"line": 793,"col": 27,"name": "di"},{"file": 25,"line": 793,"col": 43,"name": "target_address"},{"file": 25,"line": 313,"col": 24,"name": "self"},{"file": 25,"line": 313,"col": 42,"name": "id"},{"file": 25,"line": 610,"col": 25,"name": "di"},{"file": 25,"line": 610,"col": 41,"name": "address"},{"file": 25,"line": 905,"col": 29,"name": "di"},{"file": 25,"line": 905,"col": 45,"name": "compile_unit"},{"file": 25,"line": 905,"col": 72,"name": "target_address"},{"file": 10,"line": 232,"col": 30,"name": "self"},{"file": 55,"line": 179,"col": 13,"name": "self"},{"file": 55,"line": 179,"col": 31,"name": "T","comptime": true},{"file": 55,"line": 179,"col": 49,"name": "n"},{"file": 55,"line": 443,"col": 12,"name": "self"},{"file": 55,"line": 443,"col": 30,"name": "memory"},{"file": 10,"line": 128,"col": 12,"name": "self"},{"file": 10,"line": 129,"col": 12,"name": "allocator"},{"file": 10,"line": 130,"col": 12,"name": "delimiter"},{"file": 10,"line": 131,"col": 12,"name": "max_size"},{"file": 10,"line": 102,"col": 12,"name": "self"},{"file": 10,"line": 103,"col": 12,"name": "array_list"},{"file": 10,"line": 104,"col": 12,"name": "delimiter"},{"file": 10,"line": 105,"col": 12,"name": "max_size"},{"file": 7,"line": 292,"col": 39,"name": "self"},{"file": 7,"line": 292,"col": 52,"name": "new_len"},{"file": 7,"line": 110,"col": 28,"name": "self"},{"file": 25,"line": 398,"col": 16,"name": "is_stmt"},{"file": 25,"line": 398,"col": 31,"name": "include_dirs"},{"file": 25,"line": 398,"col": 65,"name": "file_entries"},{"file": 25,"line": 398,"col": 102,"name": "target_address"},{"file": 11,"line": 22,"col": 22,"name": "self"},{"file": 11,"line": 22,"col": 34,"name": "amt"},{"file": 25,"line": 422,"col": 26,"name": "self"},{"file": 66,"line": 101,"col": 12,"name": "allocator"},{"file": 66,"line": 101,"col": 35,"name": "paths"},{"file": 66,"line": 37,"col": 17,"name": "allocator"},{"file": 66,"line": 37,"col": 40,"name": "separator"},{"file": 66,"line": 37,"col": 55,"name": "sepPredicate"},{"file": 66,"line": 37,"col": 83,"name": "paths"},{"file": 66,"line": 37,"col": 110,"name": "zero"},{"file": 66,"line": 27,"col": 13,"name": "byte"},{"file": 55,"line": 455,"col": 12,"name": "allocator"},{"file": 55,"line": 455,"col": 35,"name": "T","comptime": true},{"file": 55,"line": 455,"col": 53,"name": "m"},{"file": 21,"line": 193,"col": 12,"name": "T","comptime": true},{"file": 21,"line": 193,"col": 30,"name": "dest"},{"file": 21,"line": 193,"col": 41,"name": "source"},{"file": 25,"line": 379,"col": 17,"name": "self"},{"file": 63,"line": 54,"col": 19,"name": "T","comptime": true},{"file": 63,"line": 54,"col": 37,"name": "reader"},{"file": 36,"line": 44,"col": 18,"name": "self"},{"file": 36,"line": 450,"col": 4,"name": "out_stream"},{"file": 36,"line": 451,"col": 4,"name": "debug_info"},{"file": 36,"line": 452,"col": 4,"name": "tty_config"},{"file": 36,"line": 453,"col": 4,"name": "start_addr"},{"file": 36,"line": 367,"col": 16,"name": "first_address"},{"file": 36,"line": 367,"col": 39,"name": "fp"},{"file": 36,"line": 405,"col": 16,"name": "self"},{"file": 15,"line": 86,"col": 18,"name": "m"},{"file": 54,"line": 140,"col": 16,"name": "ev"},{"file": 69,"line": 187,"col": 11,"name": "phdrs"},{"file": 69,"line": 275,"col": 18,"name": "area"},{"file": 69,"line": 110,"col": 24,"name": "addr"},{"file": 47,"line": 6375,"col": 17,"name": "resource"},{"file": 47,"line": 6375,"col": 44,"name": "limits"},{"file": 59,"line": 767,"col": 18,"name": "status"},{"file": 59,"line": 189,"col": 16,"name": "r"},{"file": 59,"line": 1046,"col": 17,"name": "sig"},{"file": 59,"line": 1046,"col": 26,"name": "act","noalias": true},{"file": 59,"line": 1046,"col": 58,"name": "oact","noalias": true},{"file": 15,"line": 94,"col": 16,"name": "m"},{"file": 15,"line": 94,"col": 33,"name": "current_state"},{"file": 59,"line": 584,"col": 13,"name": "fd"},{"file": 59,"line": 584,"col": 22,"name": "buf"},{"file": 59,"line": 584,"col": 40,"name": "count"},{"file": 47,"line": 4997,"col": 23,"name": "err"},{"file": 4,"line": 15,"col": 21,"name": "self"},{"file": 4,"line": 15,"col": 33,"name": "bytes"},{"file": 39,"line": 634,"col": 4,"name": "value"},{"file": 39,"line": 635,"col": 4,"name": "fmt","comptime": true},{"file": 39,"line": 636,"col": 4,"name": "options"},{"file": 39,"line": 637,"col": 4,"name": "writer"},{"file": 39,"line": 655,"col": 4,"name": "value"},{"file": 39,"line": 656,"col": 4,"name": "fmt","comptime": true},{"file": 39,"line": 657,"col": 4,"name": "options"},{"file": 39,"line": 658,"col": 4,"name": "writer"},{"file": 39,"line": 1313,"col": 4,"name": "value"},{"file": 39,"line": 1314,"col": 4,"name": "base"},{"file": 39,"line": 1315,"col": 4,"name": "case"},{"file": 39,"line": 1316,"col": 4,"name": "options"},{"file": 39,"line": 1317,"col": 4,"name": "writer"},{"file": 45,"line": 933,"col": 15,"name": "x"},{"file": 39,"line": 1773,"col": 19,"name": "digit"},{"file": 39,"line": 1773,"col": 30,"name": "case"},{"file": 39,"line": 933,"col": 4,"name": "buf"},{"file": 39,"line": 934,"col": 4,"name": "options"},{"file": 39,"line": 935,"col": 4,"name": "writer"},{"file": 52,"line": 162,"col": 27,"name": "s"},{"file": 21,"line": 1333,"col": 21,"name": "T","comptime": true},{"file": 21,"line": 1333,"col": 39,"name": "bytes"},{"file": 52,"line": 18,"col": 30,"name": "first_byte"},{"file": 52,"line": 70,"col": 18,"name": "bytes"},{"file": 4,"line": 35,"col": 31,"name": "self"},{"file": 4,"line": 35,"col": 43,"name": "byte"},{"file": 4,"line": 35,"col": 53,"name": "n"},{"file": 59,"line": 1042,"col": 19,"name": "flags"},{"file": 59,"line": 1042,"col": 31,"name": "set","noalias": true},{"file": 59,"line": 1042,"col": 62,"name": "oldset","noalias": true},{"file": 59,"line": 780,"col": 13,"name": "tid"},{"file": 59,"line": 780,"col": 25,"name": "sig"},{"file": 39,"line": 884,"col": 4,"name": "bytes"},{"file": 39,"line": 885,"col": 4,"name": "fmt","comptime": true},{"file": 39,"line": 886,"col": 4,"name": "options"},{"file": 39,"line": 887,"col": 4,"name": "writer"},{"file": 57,"line": 168,"col": 16,"name": "seed"},{"file": 57,"line": 168,"col": 27,"name": "input"},{"file": 21,"line": 2569,"col": 15,"name": "ptr"},{"file": 46,"line": 676,"col": 11,"name": "a"},{"file": 46,"line": 676,"col": 23,"name": "b"},{"file": 36,"line": 991,"col": 16,"name": "allocator"},{"file": 56,"line": 33,"col": 16,"name": "child_allocator"},{"file": 3,"line": 1418,"col": 18,"name": "self"},{"file": 42,"line": 238,"col": 13,"name": "allocator"},{"file": 42,"line": 238,"col": 36,"name": "n"},{"file": 42,"line": 238,"col": 46,"name": "alignment"},{"file": 42,"line": 238,"col": 62,"name": "len_align"},{"file": 42,"line": 238,"col": 78,"name": "ra"},{"file": 42,"line": 337,"col": 8,"name": "allocator"},{"file": 42,"line": 338,"col": 8,"name": "buf_unaligned"},{"file": 42,"line": 339,"col": 8,"name": "buf_align"},{"file": 42,"line": 340,"col": 8,"name": "new_size"},{"file": 42,"line": 341,"col": 8,"name": "len_align"},{"file": 42,"line": 342,"col": 8,"name": "return_address"},{"file": 49,"line": 176,"col": 25,"name": "key","comptime": true},{"file": 5,"line": 198,"col": 35,"name": "self"},{"file": 21,"line": 650,"col": 13,"name": "ptr"},{"file": 68,"line": 61,"col": 24,"name": "phdrs"},{"file": 68,"line": 34,"col": 19,"name": "self"},{"file": 68,"line": 38,"col": 20,"name": "self"},{"file": 6,"line": 1227,"col": 26,"name": "self"},{"file": 6,"line": 1227,"col": 38,"name": "key"},{"file": 6,"line": 1227,"col": 46,"name": "ctx"},{"file": 55,"line": 262,"col": 4,"name": "self"},{"file": 55,"line": 263,"col": 4,"name": "T","comptime": true},{"file": 55,"line": 265,"col": 4,"docs": " null means naturally aligned","name": "alignment","comptime": true},{"file": 55,"line": 266,"col": 4,"name": "n"},{"file": 55,"line": 267,"col": 4,"name": "exact"},{"file": 55,"line": 268,"col": 4,"name": "return_address"},{"file": 47,"line": 4972,"col": 19,"name": "file_path"},{"file": 21,"line": 1032,"col": 21,"name": "T","comptime": true},{"file": 21,"line": 1032,"col": 39,"name": "slice"},{"file": 21,"line": 1032,"col": 57,"name": "value"},{"file": 40,"line": 970,"col": 21,"name": "self"},{"file": 40,"line": 970,"col": 32,"name": "sub_path"},{"file": 40,"line": 970,"col": 57,"name": "flags"},{"file": 40,"line": 2280,"col": 25,"name": "absolute_path_c"},{"file": 40,"line": 2280,"col": 57,"name": "flags"},{"file": 55,"line": 474,"col": 4,"name": "self"},{"file": 55,"line": 475,"col": 4,"name": "buf"},{"file": 55,"line": 476,"col": 4,"name": "buf_align"},{"file": 55,"line": 477,"col": 4,"name": "new_len"},{"file": 55,"line": 478,"col": 4,"name": "len_align"},{"file": 55,"line": 479,"col": 4,"name": "return_address"},{"file": 5,"line": 299,"col": 16,"name": "self"},{"file": 47,"line": 235,"col": 13,"name": "fd"},{"file": 59,"line": 376,"col": 12,"name": "address"},{"file": 59,"line": 376,"col": 29,"name": "length"},{"file": 59,"line": 376,"col": 44,"name": "prot"},{"file": 59,"line": 376,"col": 57,"name": "flags"},{"file": 59,"line": 376,"col": 69,"name": "fd"},{"file": 59,"line": 376,"col": 78,"name": "offset"},{"file": 21,"line": 865,"col": 11,"name": "value"},{"file": 45,"line": 454,"col": 11,"name": "T","comptime": true},{"file": 45,"line": 454,"col": 29,"name": "a"},{"file": 45,"line": 454,"col": 35,"name": "b"},{"file": 21,"line": 1341,"col": 22,"name": "T","comptime": true},{"file": 21,"line": 1341,"col": 40,"name": "bytes"},{"file": 55,"line": 359,"col": 4,"name": "self"},{"file": 55,"line": 360,"col": 4,"name": "old_mem"},{"file": 55,"line": 361,"col": 4,"name": "new_alignment","comptime": true},{"file": 55,"line": 362,"col": 4,"name": "new_n"},{"file": 55,"line": 363,"col": 4,"name": "exact"},{"file": 55,"line": 364,"col": 4,"name": "return_address"},{"file": 25,"line": 476,"col": 15,"name": "in_stream"},{"file": 25,"line": 476,"col": 35,"name": "endian"},{"file": 25,"line": 476,"col": 63,"name": "is_64"},{"file": 25,"line": 489,"col": 23,"name": "allocator"},{"file": 25,"line": 489,"col": 50,"name": "in_stream"},{"file": 25,"line": 489,"col": 70,"name": "endian"},{"file": 25,"line": 489,"col": 98,"name": "size"},{"file": 25,"line": 483,"col": 26,"name": "allocator"},{"file": 25,"line": 483,"col": 53,"name": "in_stream"},{"file": 25,"line": 483,"col": 73,"name": "size"},{"file": 25,"line": 494,"col": 26,"name": "allocator"},{"file": 25,"line": 494,"col": 53,"name": "in_stream"},{"file": 25,"line": 494,"col": 73,"name": "signed"},{"file": 25,"line": 494,"col": 87,"name": "endian"},{"file": 25,"line": 494,"col": 115,"name": "size","comptime": true},{"file": 25,"line": 468,"col": 18,"name": "allocator"},{"file": 25,"line": 468,"col": 45,"name": "in_stream"},{"file": 25,"line": 468,"col": 65,"name": "size"},{"file": 25,"line": 522,"col": 21,"name": "allocator"},{"file": 25,"line": 522,"col": 48,"name": "in_stream"},{"file": 25,"line": 522,"col": 68,"name": "endian"},{"file": 25,"line": 522,"col": 96,"name": "size"},{"file": 21,"line": 1046,"col": 24,"name": "T","comptime": true},{"file": 21,"line": 1046,"col": 42,"name": "slice"},{"file": 21,"line": 1046,"col": 60,"name": "start_index"},{"file": 21,"line": 1046,"col": 80,"name": "value"},{"file": 6,"line": 1370,"col": 31,"name": "self"},{"file": 6,"line": 1370,"col": 50,"name": "key"},{"file": 6,"line": 1370,"col": 64,"name": "ctx"},{"file": 45,"line": 1072,"col": 22,"name": "T","comptime": true},{"file": 45,"line": 1072,"col": 40,"name": "value"},{"file": 6,"line": 913,"col": 18,"name": "self"},{"file": 21,"line": 2931,"col": 27,"name": "T","comptime": true},{"file": 21,"line": 2931,"col": 45,"name": "addr"},{"file": 21,"line": 2931,"col": 54,"name": "alignment"},{"file": 6,"line": 1509,"col": 22,"name": "self"},{"file": 6,"line": 1509,"col": 35,"name": "allocator"},{"file": 6,"line": 759,"col": 31,"name": "self"},{"file": 6,"line": 763,"col": 35,"name": "hash"},{"file": 6,"line": 769,"col": 24,"name": "self"},{"file": 6,"line": 769,"col": 41,"name": "fp"},{"file": 36,"line": 506,"col": 24,"name": "conf"},{"file": 36,"line": 506,"col": 38,"name": "out_stream"},{"file": 36,"line": 506,"col": 59,"name": "color"},{"file": 36,"line": 916,"col": 26,"name": "out_stream"},{"file": 36,"line": 916,"col": 47,"name": "line_info"},{"file": 5,"line": 467,"col": 16,"name": "self"},{"file": 5,"line": 467,"col": 28,"name": "buffer"},{"file": 4,"line": 30,"col": 25,"name": "self"},{"file": 4,"line": 30,"col": 37,"name": "byte"},{"file": 21,"line": 2828,"col": 20,"name": "slice"},{"file": 55,"line": 392,"col": 14,"name": "self"},{"file": 55,"line": 392,"col": 32,"name": "old_mem"},{"file": 55,"line": 392,"col": 50,"name": "new_n"},{"file": 36,"line": 33,"col": 18,"name": "self"},{"file": 36,"line": 418,"col": 21,"name": "self"},{"file": 15,"line": 145,"col": 18,"name": "m"},{"file": 54,"line": 147,"col": 21,"name": "ev"},{"file": 54,"line": 147,"col": 39,"name": "timeout"},{"file": 21,"line": 220,"col": 11,"name": "T","comptime": true},{"file": 21,"line": 220,"col": 29,"name": "dest"},{"file": 21,"line": 220,"col": 40,"name": "value"},{"file": 69,"line": 269,"col": 23,"name": "T","comptime": true},{"file": 69,"line": 269,"col": 41,"name": "ptr"},{"file": 20,"line": 33,"col": 16,"name": "number"},{"file": 20,"line": 33,"col": 29,"name": "arg1"},{"file": 20,"line": 33,"col": 42,"name": "arg2"},{"file": 59,"line": 1523,"col": 17,"name": "resource"},{"file": 59,"line": 1523,"col": 44,"name": "rlim"},{"file": 20,"line": 24,"col": 16,"name": "number"},{"file": 20,"line": 24,"col": 29,"name": "arg1"},{"file": 20,"line": 54,"col": 16,"name": "number"},{"file": 20,"line": 54,"col": 29,"name": "arg1"},{"file": 20,"line": 54,"col": 42,"name": "arg2"},{"file": 20,"line": 54,"col": 55,"name": "arg3"},{"file": 20,"line": 54,"col": 68,"name": "arg4"},{"file": 59,"line": 286,"col": 18,"name": "uaddr"},{"file": 59,"line": 286,"col": 37,"name": "futex_op"},{"file": 59,"line": 286,"col": 52,"name": "val"},{"file": 59,"line": 286,"col": 62,"name": "timeout"},{"file": 20,"line": 43,"col": 16,"name": "number"},{"file": 20,"line": 43,"col": 29,"name": "arg1"},{"file": 20,"line": 43,"col": 42,"name": "arg2"},{"file": 20,"line": 43,"col": 55,"name": "arg3"},{"file": 36,"line": 63,"col": 13,"name": "fmt","comptime": true},{"file": 36,"line": 63,"col": 39,"name": "args"},{"file": 20,"line": 16,"col": 16,"name": "number"},{"file": 52,"line": 84,"col": 19,"name": "bytes"},{"file": 52,"line": 103,"col": 19,"name": "bytes"},{"file": 52,"line": 127,"col": 19,"name": "bytes"},{"file": 57,"line": 119,"col": 16,"name": "seed"},{"file": 57,"line": 119,"col": 27,"name": "input"},{"file": 6,"line": 394,"col": 20,"name": "allocator"},{"file": 56,"line": 19,"col": 23,"name": "self"},{"file": 56,"line": 19,"col": 36,"name": "child_allocator"},{"file": 21,"line": 3001,"col": 17,"name": "addr"},{"file": 21,"line": 3001,"col": 30,"name": "alignment"},{"file": 21,"line": 2517,"col": 20,"name": "ptr"},{"file": 21,"line": 2517,"col": 34,"name": "align_to"},{"file": 47,"line": 4019,"col": 14,"name": "memory"},{"file": 42,"line": 228,"col": 25,"name": "full_len"},{"file": 42,"line": 228,"col": 42,"name": "len"},{"file": 42,"line": 228,"col": 54,"name": "len_align"},{"file": 47,"line": 1637,"col": 14,"name": "key"},{"file": 5,"line": 193,"col": 17,"name": "self"},{"file": 47,"line": 1686,"col": 15,"name": "key"},{"file": 59,"line": 140,"col": 17,"name": "index"},{"file": 6,"line": 1230,"col": 26,"name": "self"},{"file": 6,"line": 1230,"col": 38,"name": "key"},{"file": 6,"line": 1230,"col": 52,"name": "ctx"},{"file": 45,"line": 448,"col": 11,"name": "T","comptime": true},{"file": 45,"line": 448,"col": 29,"name": "a"},{"file": 45,"line": 448,"col": 35,"name": "b"},{"file": 47,"line": 1436,"col": 15,"name": "dir_fd"},{"file": 47,"line": 1436,"col": 29,"name": "file_path"},{"file": 47,"line": 1436,"col": 55,"name": "flags"},{"file": 47,"line": 1436,"col": 67,"name": "mode"},{"file": 47,"line": 4592,"col": 13,"name": "fd"},{"file": 47,"line": 4592,"col": 23,"name": "operation"},{"file": 66,"line": 191,"col": 19,"name": "path_c"},{"file": 47,"line": 3690,"col": 13,"name": "fd"},{"file": 20,"line": 648,"col": 17,"name": "self"},{"file": 20,"line": 652,"col": 17,"name": "self"},{"file": 20,"line": 656,"col": 17,"name": "self"},{"file": 59,"line": 731,"col": 13,"name": "fd"},{"file": 20,"line": 80,"col": 4,"name": "number"},{"file": 20,"line": 81,"col": 4,"name": "arg1"},{"file": 20,"line": 82,"col": 4,"name": "arg2"},{"file": 20,"line": 83,"col": 4,"name": "arg3"},{"file": 20,"line": 84,"col": 4,"name": "arg4"},{"file": 20,"line": 85,"col": 4,"name": "arg5"},{"file": 20,"line": 86,"col": 4,"name": "arg6"},{"file": 21,"line": 975,"col": 23,"name": "Elem","comptime": true},{"file": 21,"line": 975,"col": 44,"name": "sentinel","comptime": true},{"file": 21,"line": 975,"col": 69,"name": "ptr"},{"file": 55,"line": 83,"col": 4,"name": "self"},{"file": 55,"line": 88,"col": 4,"docs": " Guaranteed to be the same as what was returned from most recent call to `allocFn` or `resizeFn`. If `old_mem.len == 0` then this is a new allocation and `new_byte_count` is guaranteed to be >= 1.","name": "old_mem"},{"file": 55,"line": 93,"col": 4,"docs": " If `old_mem.len == 0` then this is `undefined`, otherwise: Guaranteed to be the same as what was passed to `allocFn`. Guaranteed to be >= 1. Guaranteed to be a power of 2.","name": "old_alignment"},{"file": 55,"line": 96,"col": 4,"docs": " If `new_byte_count` is 0 then this is a free and it is guaranteed that `old_mem.len != 0`.","name": "new_byte_count"},{"file": 55,"line": 100,"col": 4,"docs": " Guaranteed to be >= 1. Guaranteed to be a power of 2. Returned slice's pointer must have this alignment.","name": "new_alignment"},{"file": 55,"line": 104,"col": 4,"docs": " 0 indicates the length of the slice returned MUST match `new_byte_count` exactly non-zero means the length of the returned slice must be aligned by `len_align` `new_len` must be aligned by `len_align`","name": "len_align"},{"file": 55,"line": 105,"col": 4,"name": "return_address"},{"file": 21,"line": 2740,"col": 20,"name": "T","comptime": true},{"file": 21,"line": 2740,"col": 38,"name": "bytes"},{"file": 10,"line": 271,"col": 26,"name": "self"},{"file": 10,"line": 271,"col": 38,"name": "ReturnType","comptime": true},{"file": 10,"line": 271,"col": 65,"name": "endian"},{"file": 10,"line": 271,"col": 93,"name": "size"},{"file": 21,"line": 1310,"col": 18,"name": "ReturnType","comptime": true},{"file": 21,"line": 1310,"col": 45,"name": "bytes"},{"file": 21,"line": 1310,"col": 64,"name": "endian"},{"file": 6,"line": 1101,"col": 27,"name": "self"},{"file": 6,"line": 1101,"col": 39,"name": "key"},{"file": 6,"line": 1101,"col": 53,"name": "ctx"},{"file": 45,"line": 1060,"col": 29,"name": "T","comptime": true},{"file": 45,"line": 1060,"col": 47,"name": "value"},{"file": 21,"line": 2978,"col": 28,"name": "T","comptime": true},{"file": 21,"line": 2978,"col": 46,"name": "addr"},{"file": 21,"line": 2978,"col": 55,"name": "alignment"},{"file": 47,"line": 541,"col": 12,"name": "fd"},{"file": 47,"line": 541,"col": 22,"name": "buf"},{"file": 55,"line": 416,"col": 4,"name": "self"},{"file": 55,"line": 417,"col": 4,"name": "old_mem"},{"file": 55,"line": 418,"col": 4,"name": "new_alignment","comptime": true},{"file": 55,"line": 419,"col": 4,"name": "new_n"},{"file": 55,"line": 420,"col": 4,"name": "return_address"},{"file": 3,"line": 855,"col": 27,"name": "arch"},{"file": 45,"line": 461,"col": 11,"name": "T","comptime": true},{"file": 45,"line": 461,"col": 29,"name": "a"},{"file": 45,"line": 461,"col": 35,"name": "b"},{"file": 59,"line": 290,"col": 18,"name": "uaddr"},{"file": 59,"line": 290,"col": 37,"name": "futex_op"},{"file": 59,"line": 290,"col": 52,"name": "val"},{"file": 54,"line": 201,"col": 16,"name": "waiters"},{"file": 54,"line": 201,"col": 31,"name": "timeout"},{"file": 59,"line": 1528,"col": 15,"name": "pid"},{"file": 59,"line": 1528,"col": 27,"name": "resource"},{"file": 59,"line": 1528,"col": 54,"name": "new_limit"},{"file": 59,"line": 1528,"col": 81,"name": "old_limit"},{"file": 36,"line": 1552,"col": 23,"name": "sig"},{"file": 36,"line": 1552,"col": 33,"name": "info"},{"file": 36,"line": 1552,"col": 60,"name": "ctx_ptr"},{"file": 19,"line": 189,"col": 12,"name": "format","comptime": true},{"file": 19,"line": 190,"col": 12,"name": "args"},{"file": 57,"line": 41,"col": 16,"name": "seed"},{"file": 57,"line": 62,"col": 18,"name": "self"},{"file": 57,"line": 62,"col": 42,"name": "b"},{"file": 57,"line": 73,"col": 17,"name": "self"},{"file": 57,"line": 73,"col": 41,"name": "b"},{"file": 56,"line": 62,"col": 13,"name": "allocator"},{"file": 56,"line": 62,"col": 36,"name": "n"},{"file": 56,"line": 62,"col": 46,"name": "ptr_align"},{"file": 56,"line": 62,"col": 62,"name": "len_align"},{"file": 56,"line": 62,"col": 78,"name": "ra"},{"file": 56,"line": 47,"col": 18,"name": "self"},{"file": 56,"line": 47,"col": 41,"name": "prev_len"},{"file": 56,"line": 47,"col": 58,"name": "minimum_size"},{"file": 13,"line": 73,"col": 23,"name": "list"},{"file": 13,"line": 73,"col": 36,"name": "new_node"},{"file": 55,"line": 304,"col": 14,"name": "self"},{"file": 55,"line": 304,"col": 32,"name": "old_mem"},{"file": 55,"line": 304,"col": 50,"name": "new_n"},{"file": 56,"line": 93,"col": 14,"name": "allocator"},{"file": 56,"line": 93,"col": 37,"name": "buf"},{"file": 56,"line": 93,"col": 48,"name": "buf_align"},{"file": 56,"line": 93,"col": 64,"name": "new_len"},{"file": 56,"line": 93,"col": 80,"name": "len_align"},{"file": 56,"line": 93,"col": 96,"name": "ret_addr"},{"file": 21,"line": 3005,"col": 24,"name": "T","comptime": true},{"file": 21,"line": 3005,"col": 42,"name": "addr"},{"file": 21,"line": 3005,"col": 51,"name": "alignment"},{"file": 21,"line": 2485,"col": 26,"name": "ptr"},{"file": 21,"line": 2485,"col": 40,"name": "align_to"},{"file": 59,"line": 408,"col": 14,"name": "address"},{"file": 59,"line": 408,"col": 36,"name": "length"},{"file": 21,"line": 121,"col": 21,"name": "full_len"},{"file": 21,"line": 121,"col": 38,"name": "alloc_len"},{"file": 21,"line": 121,"col": 56,"name": "len_align"},{"file": 47,"line": 2861,"col": 14,"name": "handle"},{"file": 21,"line": 925,"col": 12,"name": "ptr"},{"file": 59,"line": 716,"col": 14,"name": "dirfd"},{"file": 59,"line": 716,"col": 26,"name": "path"},{"file": 59,"line": 716,"col": 47,"name": "flags"},{"file": 59,"line": 716,"col": 59,"name": "mode"},{"file": 59,"line": 843,"col": 13,"name": "fd"},{"file": 59,"line": 843,"col": 23,"name": "operation"},{"file": 66,"line": 254,"col": 24,"name": "path_c"},{"file": 59,"line": 1272,"col": 13,"name": "fd"},{"file": 59,"line": 1272,"col": 22,"name": "stat_buf"},{"file": 21,"line": 231,"col": 14,"name": "T","comptime": true},{"file": 55,"line": 135,"col": 4,"name": "self"},{"file": 55,"line": 136,"col": 4,"name": "old_mem"},{"file": 55,"line": 137,"col": 4,"name": "old_align"},{"file": 55,"line": 138,"col": 4,"name": "new_len"},{"file": 55,"line": 139,"col": 4,"name": "new_alignment"},{"file": 55,"line": 140,"col": 4,"name": "len_align"},{"file": 55,"line": 141,"col": 4,"name": "return_address"},{"file": 59,"line": 437,"col": 12,"name": "fd"},{"file": 59,"line": 437,"col": 21,"name": "buf"},{"file": 59,"line": 437,"col": 33,"name": "count"},{"file": 36,"line": 126,"col": 30,"name": "bp"},{"file": 36,"line": 126,"col": 41,"name": "ip"},{"file": 26,"line": 3,"col": 13,"name": "input"},{"file": 26,"line": 20,"col": 13,"name": "input"},{"file": 27,"line": 3,"col": 13,"name": "input"},{"file": 27,"line": 27,"col": 13,"name": "input"},{"file": 28,"line": 3,"col": 13,"name": "input"},{"file": 28,"line": 8,"col": 13,"name": "input"},{"file": 23,"line": 62,"col": 13,"name": "input"},{"file": 23,"line": 98,"col": 13,"name": "input"},{"file": 29,"line": 44,"col": 13,"name": "input"},{"file": 29,"line": 112,"col": 13,"name": "input"},{"file": 30,"line": 44,"col": 13,"name": "input"},{"file": 30,"line": 48,"col": 13,"name": "input"},{"file": 31,"line": 11,"col": 13,"name": "input"},{"file": 31,"line": 40,"col": 13,"name": "input"},{"file": 32,"line": 21,"col": 13,"name": "input"},{"file": 32,"line": 40,"col": 13,"name": "input"},{"file": 39,"line": 1805,"col": 18,"name": "allocator"},{"file": 39,"line": 1805,"col": 45,"name": "fmt","comptime": true},{"file": 39,"line": 1805,"col": 71,"name": "args"},{"file": 40,"line": 1827,"col": 25,"name": "self"},{"file": 40,"line": 1827,"col": 36,"name": "allocator"},{"file": 40,"line": 1827,"col": 63,"name": "file_path"},{"file": 40,"line": 1827,"col": 86,"name": "max_bytes"},{"file": 40,"line": 1837,"col": 8,"name": "self"},{"file": 40,"line": 1838,"col": 8,"name": "allocator"},{"file": 40,"line": 1839,"col": 8,"name": "file_path"},{"file": 40,"line": 1840,"col": 8,"name": "max_bytes"},{"file": 40,"line": 1841,"col": 8,"name": "size_hint"},{"file": 40,"line": 1842,"col": 8,"name": "alignment","comptime": true},{"file": 40,"line": 1843,"col": 8,"name": "optional_sentinel","comptime": true},{"file": 5,"line": 433,"col": 8,"name": "self"},{"file": 5,"line": 434,"col": 8,"name": "allocator"},{"file": 5,"line": 435,"col": 8,"name": "max_bytes"},{"file": 5,"line": 436,"col": 8,"name": "size_hint"},{"file": 5,"line": 437,"col": 8,"name": "alignment","comptime": true},{"file": 5,"line": 438,"col": 8,"name": "optional_sentinel","comptime": true},{"file": 7,"line": 60,"col": 28,"name": "allocator"},{"file": 7,"line": 60,"col": 51,"name": "num"},{"file": 5,"line": 862,"col": 18,"name": "file"},{"file": 10,"line": 57,"col": 12,"name": "self"},{"file": 10,"line": 58,"col": 12,"name": "alignment","comptime": true},{"file": 10,"line": 59,"col": 12,"name": "array_list"},{"file": 10,"line": 60,"col": 12,"name": "max_append_size"},{"file": 7,"line": 355,"col": 32,"name": "self"},{"file": 7,"line": 274,"col": 29,"name": "self"},{"file": 7,"line": 274,"col": 42,"name": "new_len"},{"file": 19,"line": 212,"col": 12,"name": "format","comptime": true},{"file": 19,"line": 213,"col": 12,"name": "args"},{"file": 19,"line": 127,"col": 4,"name": "message_level","comptime": true},{"file": 19,"line": 128,"col": 4,"name": "scope","comptime": true},{"file": 19,"line": 129,"col": 4,"name": "format","comptime": true},{"file": 19,"line": 130,"col": 4,"name": "args"},{"file": 57,"line": 48,"col": 13,"name": "self"},{"file": 57,"line": 48,"col": 37,"name": "b"},{"file": 57,"line": 26,"col": 8,"name": "a"},{"file": 57,"line": 26,"col": 16,"name": "b"},{"file": 57,"line": 26,"col": 24,"name": "seed"},{"file": 57,"line": 11,"col": 14,"name": "bytes","comptime": true},{"file": 57,"line": 11,"col": 34,"name": "data"},{"file": 57,"line": 16,"col": 23,"name": "data"},{"file": 57,"line": 30,"col": 8,"name": "a"},{"file": 57,"line": 30,"col": 16,"name": "b"},{"file": 57,"line": 30,"col": 24,"name": "seed"},{"file": 57,"line": 20,"col": 7,"name": "a"},{"file": 57,"line": 20,"col": 15,"name": "b"},{"file": 21,"line": 2963,"col": 29,"name": "i"},{"file": 21,"line": 2963,"col": 39,"name": "alignment"},{"file": 3,"line": 876,"col": 27,"name": "arch"},{"file": 66,"line": 248,"col": 23,"name": "path"},{"file": 21,"line": 1720,"col": 13,"name": "T","comptime": true},{"file": 21,"line": 1720,"col": 31,"name": "buffer"},{"file": 21,"line": 1720,"col": 50,"name": "delimiter"},{"file": 21,"line": 1858,"col": 20,"name": "self"},{"file": 22,"line": 2,"col": 16,"name": "T","comptime": true},{"file": 22,"line": 2,"col": 34,"name": "str"},{"file": 22,"line": 24,"col": 17,"name": "T","comptime": true},{"file": 22,"line": 24,"col": 35,"name": "iterator"},{"file": 22,"line": 14,"col": 20,"name": "self"},{"file": 21,"line": 1009,"col": 17,"name": "T","comptime": true},{"file": 21,"line": 1009,"col": 35,"name": "slice"},{"file": 21,"line": 1009,"col": 53,"name": "values_to_strip"},{"file": 21,"line": 1626,"col": 16,"name": "T","comptime": true},{"file": 21,"line": 1626,"col": 34,"name": "buffer"},{"file": 21,"line": 1626,"col": 53,"name": "delimiter_bytes"},{"file": 21,"line": 1810,"col": 20,"name": "self"},{"file": 23,"line": 14,"col": 12,"name": "self"},{"file": 23,"line": 14,"col": 25,"name": "call"},{"file": 29,"line": 21,"col": 12,"name": "self"},{"file": 29,"line": 21,"col": 25,"name": "x"},{"file": 29,"line": 21,"col": 33,"name": "y"},{"file": 6,"line": 468,"col": 24,"name": "self"},{"file": 6,"line": 468,"col": 37,"name": "key"},{"file": 6,"line": 1242,"col": 31,"name": "self"},{"file": 6,"line": 1242,"col": 44,"name": "allocator"},{"file": 6,"line": 1242,"col": 67,"name": "key"},{"file": 6,"line": 1242,"col": 75,"name": "ctx"},{"file": 6,"line": 1254,"col": 38,"name": "self"},{"file": 6,"line": 1254,"col": 51,"name": "allocator"},{"file": 6,"line": 1254,"col": 74,"name": "key"},{"file": 6,"line": 1254,"col": 88,"name": "key_ctx"},{"file": 6,"line": 1254,"col": 106,"name": "ctx"},{"file": 6,"line": 1281,"col": 45,"name": "self"},{"file": 6,"line": 1281,"col": 58,"name": "key"},{"file": 6,"line": 1281,"col": 72,"name": "ctx"},{"file": 29,"line": 17,"col": 14,"name": "self"},{"file": 29,"line": 34,"col": 13,"name": "self"},{"file": 29,"line": 104,"col": 7,"name": "n"},{"file": 29,"line": 94,"col": 10,"name": "n"},{"file": 30,"line": 24,"col": 12,"name": "input"},{"file": 30,"line": 24,"col": 31,"name": "days"},{"file": 30,"line": 5,"col": 19,"name": "clock"},{"file": 30,"line": 5,"col": 31,"name": "days"},{"file": 30,"line": 5,"col": 44,"name": "known"},{"file": 6,"line": 418,"col": 22,"name": "self"},{"file": 6,"line": 532,"col": 19,"name": "self"},{"file": 6,"line": 532,"col": 32,"name": "key"},{"file": 6,"line": 532,"col": 40,"name": "value"},{"file": 6,"line": 1168,"col": 26,"name": "self"},{"file": 6,"line": 1168,"col": 39,"name": "allocator"},{"file": 6,"line": 1168,"col": 62,"name": "key"},{"file": 6,"line": 1168,"col": 70,"name": "value"},{"file": 6,"line": 1168,"col": 80,"name": "ctx"},{"file": 50,"line": 1130,"col": 17,"name": "context"},{"file": 50,"line": 1130,"col": 32,"name": "a"},{"file": 50,"line": 1130,"col": 38,"name": "b"},{"file": 50,"line": 183,"col": 4,"name": "T","comptime": true},{"file": 50,"line": 184,"col": 4,"name": "items"},{"file": 50,"line": 185,"col": 4,"name": "context"},{"file": 50,"line": 186,"col": 4,"name": "lessThan","comptime": true},{"file": 31,"line": 3,"col": 7,"name": "n"},{"file": 39,"line": 1797,"col": 13,"name": "fmt","comptime": true},{"file": 39,"line": 1797,"col": 39,"name": "args"},{"file": 39,"line": 1785,"col": 16,"name": "buf"},{"file": 39,"line": 1785,"col": 27,"name": "fmt","comptime": true},{"file": 39,"line": 1785,"col": 53,"name": "args"},{"file": 55,"line": 329,"col": 15,"name": "self"},{"file": 55,"line": 329,"col": 33,"name": "old_mem"},{"file": 55,"line": 329,"col": 51,"name": "new_n"},{"file": 19,"line": 153,"col": 4,"name": "message_level","comptime": true},{"file": 19,"line": 154,"col": 4,"name": "scope","comptime": true},{"file": 19,"line": 155,"col": 4,"name": "format","comptime": true},{"file": 19,"line": 156,"col": 4,"name": "args"},{"file": 45,"line": 1273,"col": 15,"name": "T","comptime": true},{"file": 45,"line": 1273,"col": 33,"name": "a"},{"file": 45,"line": 1273,"col": 39,"name": "b"},{"file": 21,"line": 2972,"col": 21,"name": "addr"},{"file": 21,"line": 2972,"col": 34,"name": "alignment"},{"file": 21,"line": 1162,"col": 18,"name": "T","comptime": true},{"file": 21,"line": 1162,"col": 36,"name": "haystack"},{"file": 21,"line": 1162,"col": 57,"name": "start_index"},{"file": 21,"line": 1162,"col": 77,"name": "needle"},{"file": 39,"line": 1589,"col": 16,"name": "T","comptime": true},{"file": 39,"line": 1589,"col": 34,"name": "buf"},{"file": 39,"line": 1589,"col": 51,"name": "radix"},{"file": 21,"line": 1838,"col": 23,"name": "self"},{"file": 21,"line": 1838,"col": 35,"name": "byte"},{"file": 23,"line": 31,"col": 18,"name": "self"},{"file": 23,"line": 31,"col": 37,"name": "row"},{"file": 23,"line": 40,"col": 18,"name": "self"},{"file": 23,"line": 40,"col": 37,"name": "col"},{"file": 23,"line": 49,"col": 20,"name": "self"},{"file": 6,"line": 458,"col": 29,"name": "self"},{"file": 6,"line": 822,"col": 28,"name": "self"},{"file": 57,"line": 136,"col": 16,"name": "seed"},{"file": 67,"line": 191,"col": 16,"name": "hasher"},{"file": 67,"line": 191,"col": 33,"name": "key"},{"file": 57,"line": 162,"col": 17,"name": "self"},{"file": 50,"line": 118,"col": 12,"name": "size2"},{"file": 50,"line": 118,"col": 26,"name": "min_level"},{"file": 50,"line": 153,"col": 16,"name": "self"},{"file": 50,"line": 137,"col": 17,"name": "self"},{"file": 50,"line": 104,"col": 14,"name": "self"},{"file": 50,"line": 1113,"col": 4,"name": "T","comptime": true},{"file": 50,"line": 1114,"col": 4,"name": "items"},{"file": 50,"line": 1115,"col": 4,"name": "context"},{"file": 50,"line": 1116,"col": 4,"name": "lessThan","comptime": true},{"file": 50,"line": 1117,"col": 4,"name": "order"},{"file": 50,"line": 1118,"col": 4,"name": "x"},{"file": 50,"line": 1119,"col": 4,"name": "y"},{"file": 50,"line": 168,"col": 14,"name": "self"},{"file": 50,"line": 132,"col": 13,"name": "self"},{"file": 50,"line": 1039,"col": 4,"name": "T","comptime": true},{"file": 50,"line": 1040,"col": 4,"name": "from"},{"file": 50,"line": 1041,"col": 4,"name": "A"},{"file": 50,"line": 1042,"col": 4,"name": "B"},{"file": 50,"line": 1043,"col": 4,"name": "context"},{"file": 50,"line": 1044,"col": 4,"name": "lessThan","comptime": true},{"file": 50,"line": 1045,"col": 4,"name": "into"},{"file": 50,"line": 97,"col": 12,"name": "start"},{"file": 50,"line": 97,"col": 26,"name": "end"},{"file": 50,"line": 157,"col": 17,"name": "self"},{"file": 21,"line": 2262,"col": 14,"name": "T","comptime": true},{"file": 21,"line": 2262,"col": 32,"name": "items"},{"file": 21,"line": 2262,"col": 44,"name": "amount"},{"file": 50,"line": 1077,"col": 4,"name": "T","comptime": true},{"file": 50,"line": 1078,"col": 4,"name": "items"},{"file": 50,"line": 1079,"col": 4,"name": "A"},{"file": 50,"line": 1080,"col": 4,"name": "B"},{"file": 50,"line": 1081,"col": 4,"name": "context"},{"file": 50,"line": 1082,"col": 4,"name": "lessThan","comptime": true},{"file": 50,"line": 1083,"col": 4,"name": "cache"},{"file": 71,"line": 14,"col": 12,"name": "x"},{"file": 50,"line": 949,"col": 4,"name": "T","comptime": true},{"file": 50,"line": 950,"col": 4,"name": "items"},{"file": 50,"line": 951,"col": 4,"name": "value"},{"file": 50,"line": 952,"col": 4,"name": "range"},{"file": 50,"line": 953,"col": 4,"name": "context"},{"file": 50,"line": 954,"col": 4,"name": "lessThan","comptime": true},{"file": 50,"line": 955,"col": 4,"name": "unique"},{"file": 50,"line": 927,"col": 4,"name": "T","comptime": true},{"file": 50,"line": 928,"col": 4,"name": "items"},{"file": 50,"line": 929,"col": 4,"name": "value"},{"file": 50,"line": 930,"col": 4,"name": "range"},{"file": 50,"line": 931,"col": 4,"name": "context"},{"file": 50,"line": 932,"col": 4,"name": "lessThan","comptime": true},{"file": 50,"line": 933,"col": 4,"name": "unique"},{"file": 50,"line": 895,"col": 13,"name": "T","comptime": true},{"file": 50,"line": 895,"col": 31,"name": "items"},{"file": 50,"line": 895,"col": 43,"name": "start1"},{"file": 50,"line": 895,"col": 58,"name": "start2"},{"file": 50,"line": 895,"col": 73,"name": "block_size"},{"file": 50,"line": 993,"col": 4,"name": "T","comptime": true},{"file": 50,"line": 994,"col": 4,"name": "items"},{"file": 50,"line": 995,"col": 4,"name": "value"},{"file": 50,"line": 996,"col": 4,"name": "range"},{"file": 50,"line": 997,"col": 4,"name": "context"},{"file": 50,"line": 998,"col": 4,"name": "lessThan","comptime": true},{"file": 50,"line": 861,"col": 4,"name": "T","comptime": true},{"file": 50,"line": 862,"col": 4,"name": "items"},{"file": 50,"line": 863,"col": 4,"name": "A"},{"file": 50,"line": 864,"col": 4,"name": "B"},{"file": 50,"line": 865,"col": 4,"name": "context"},{"file": 50,"line": 866,"col": 4,"name": "lessThan","comptime": true},{"file": 50,"line": 867,"col": 4,"name": "buffer"},{"file": 50,"line": 812,"col": 4,"name": "T","comptime": true},{"file": 50,"line": 813,"col": 4,"name": "items"},{"file": 50,"line": 814,"col": 4,"name": "A_arg"},{"file": 50,"line": 815,"col": 4,"name": "B_arg"},{"file": 50,"line": 816,"col": 4,"name": "context"},{"file": 50,"line": 817,"col": 4,"name": "lessThan","comptime": true},{"file": 50,"line": 77,"col": 4,"name": "T","comptime": true},{"file": 50,"line": 78,"col": 4,"name": "items"},{"file": 50,"line": 79,"col": 4,"name": "context"},{"file": 50,"line": 80,"col": 4,"name": "lessThan","comptime": true},{"file": 50,"line": 905,"col": 4,"name": "T","comptime": true},{"file": 50,"line": 906,"col": 4,"name": "items"},{"file": 50,"line": 907,"col": 4,"name": "value"},{"file": 50,"line": 908,"col": 4,"name": "range"},{"file": 50,"line": 909,"col": 4,"name": "context"},{"file": 50,"line": 910,"col": 4,"name": "lessThan","comptime": true},{"file": 50,"line": 911,"col": 4,"name": "unique"},{"file": 50,"line": 971,"col": 4,"name": "T","comptime": true},{"file": 50,"line": 972,"col": 4,"name": "items"},{"file": 50,"line": 973,"col": 4,"name": "value"},{"file": 50,"line": 974,"col": 4,"name": "range"},{"file": 50,"line": 975,"col": 4,"name": "context"},{"file": 50,"line": 976,"col": 4,"name": "lessThan","comptime": true},{"file": 50,"line": 977,"col": 4,"name": "unique"},{"file": 43,"line": 157,"col": 14,"name": "context"},{"file": 43,"line": 157,"col": 29,"name": "data"},{"file": 24,"line": 27,"col": 22,"name": "child_stream"},{"file": 24,"line": 15,"col": 21,"name": "self"},{"file": 24,"line": 15,"col": 34,"name": "bytes"},{"file": 24,"line": 21,"col": 22,"name": "self"},{"file": 9,"line": 60,"col": 21,"name": "self"},{"file": 9,"line": 60,"col": 34,"name": "bytes"},{"file": 9,"line": 38,"col": 22,"name": "self"},{"file": 9,"line": 105,"col": 26,"name": "self"},{"file": 58,"line": 547,"col": 31,"name": "T","comptime": true},{"file": 21,"line": 1097,"col": 24,"name": "T","comptime": true},{"file": 21,"line": 1097,"col": 42,"name": "haystack"},{"file": 21,"line": 1097,"col": 63,"name": "start_index"},{"file": 21,"line": 1097,"col": 83,"name": "needle"},{"file": 21,"line": 1119,"col": 32,"name": "pattern"},{"file": 21,"line": 1119,"col": 53,"name": "table"},{"file": 39,"line": 1648,"col": 4,"name": "T","comptime": true},{"file": 39,"line": 1649,"col": 4,"name": "buf"},{"file": 39,"line": 1650,"col": 4,"name": "radix"},{"file": 39,"line": 1651,"col": 4,"name": "sign","comptime": true},{"file": 6,"line": 951,"col": 29,"name": "self"},{"file": 67,"line": 71,"col": 12,"name": "hasher"},{"file": 67,"line": 71,"col": 29,"name": "key"},{"file": 67,"line": 71,"col": 43,"name": "strat","comptime": true},{"file": 45,"line": 1032,"col": 23,"name": "T","comptime": true},{"file": 45,"line": 1032,"col": 41,"name": "value"},{"file": 21,"line": 2245,"col": 15,"name": "T","comptime": true},{"file": 21,"line": 2245,"col": 33,"name": "items"},{"file": 71,"line": 35,"col": 12,"name": "T","comptime": true},{"file": 71,"line": 35,"col": 30,"name": "value"},{"file": 50,"line": 1016,"col": 4,"name": "T","comptime": true},{"file": 50,"line": 1017,"col": 4,"name": "items"},{"file": 50,"line": 1018,"col": 4,"name": "value"},{"file": 50,"line": 1019,"col": 4,"name": "range"},{"file": 50,"line": 1020,"col": 4,"name": "context"},{"file": 50,"line": 1021,"col": 4,"name": "lessThan","comptime": true},{"file": 39,"line": 1760,"col": 19,"name": "c"},{"file": 39,"line": 1760,"col": 26,"name": "radix"},{"file": 57,"line": 144,"col": 18,"name": "self"},{"file": 57,"line": 144,"col": 33,"name": "b"},{"file": 6,"line": 76,"col": 16,"name": "self"},{"file": 6,"line": 76,"col": 31,"name": "s"},{"file": 6,"line": 80,"col": 15,"name": "self"},{"file": 6,"line": 80,"col": 30,"name": "a"},{"file": 6,"line": 80,"col": 45,"name": "b"},{"file": 6,"line": 90,"col": 18,"name": "s"},{"file": 6,"line": 86,"col": 17,"name": "a"},{"file": 6,"line": 86,"col": 32,"name": "b"},{"file": 3,"line": 722,"col": 35,"name": "F","comptime": true},{"file": 46,"line": 859,"col": 11,"name": "signedness","comptime": true},{"file": 46,"line": 859,"col": 56,"name": "bit_count","comptime": true},{"file": 45,"line": 615,"col": 15,"name": "T","comptime": true},{"file": 4,"line": 5,"col": 4,"name": "Context","comptime": true},{"file": 4,"line": 6,"col": 4,"name": "WriteError","comptime": true},{"file": 4,"line": 7,"col": 4,"name": "writeFn","comptime": true},{"file": 6,"line": 55,"col": 19,"name": "K","comptime": true},{"file": 6,"line": 12,"col": 21,"name": "K","comptime": true},{"file": 6,"line": 12,"col": 39,"name": "Context","comptime": true},{"file": 6,"line": 38,"col": 20,"name": "K","comptime": true},{"file": 6,"line": 38,"col": 38,"name": "Context","comptime": true},{"file": 6,"line": 135,"col": 21,"name": "RawContext","comptime": true},{"file": 6,"line": 135,"col": 48,"name": "PseudoKey","comptime": true},{"file": 6,"line": 135,"col": 74,"name": "Key","comptime": true},{"file": 6,"line": 135,"col": 94,"name": "Hash","comptime": true},{"file": 6,"line": 359,"col": 4,"name": "K","comptime": true},{"file": 6,"line": 360,"col": 4,"name": "V","comptime": true},{"file": 6,"line": 361,"col": 4,"name": "Context","comptime": true},{"file": 6,"line": 362,"col": 4,"name": "max_load_percentage","comptime": true},{"file": 6,"line": 47,"col": 19,"name": "K","comptime": true},{"file": 6,"line": 47,"col": 37,"name": "V","comptime": true},{"file": 6,"line": 674,"col": 4,"name": "K","comptime": true},{"file": 6,"line": 675,"col": 4,"name": "V","comptime": true},{"file": 6,"line": 676,"col": 4,"name": "Context","comptime": true},{"file": 6,"line": 677,"col": 4,"name": "max_load_percentage","comptime": true},{"file": 45,"line": 314,"col": 11,"name": "A","comptime": true},{"file": 45,"line": 314,"col": 29,"name": "B","comptime": true},{"file": 7,"line": 23,"col": 24,"name": "T","comptime": true},{"file": 7,"line": 23,"col": 42,"name": "alignment","comptime": true},{"file": 7,"line": 12,"col": 17,"name": "T","comptime": true},{"file": 46,"line": 159,"col": 12,"name": "T","comptime": true},{"file": 46,"line": 226,"col": 16,"name": "T","comptime": true},{"file": 46,"line": 226,"col": 34,"name": "sentinel_val","comptime": true},{"file": 21,"line": 563,"col": 12,"name": "T","comptime": true},{"file": 9,"line": 119,"col": 19,"name": "T","comptime": true},{"file": 9,"line": 8,"col": 25,"name": "Buffer","comptime": true},{"file": 10,"line": 7,"col": 4,"name": "Context","comptime": true},{"file": 10,"line": 8,"col": 4,"name": "ReadError","comptime": true},{"file": 10,"line": 12,"col": 4,"docs": " Returns the number of bytes read. It may be less than buffer.len. If the number of bytes read is 0, it means end of stream. End of stream is not an error condition.","name": "readFn","comptime": true},{"file": 11,"line": 3,"col": 4,"name": "Context","comptime": true},{"file": 11,"line": 4,"col": 4,"name": "SeekErrorType","comptime": true},{"file": 11,"line": 5,"col": 4,"name": "GetSeekPosErrorType","comptime": true},{"file": 11,"line": 6,"col": 4,"name": "seekToFn","comptime": true},{"file": 11,"line": 7,"col": 4,"name": "seekByFn","comptime": true},{"file": 11,"line": 8,"col": 4,"name": "getPosFn","comptime": true},{"file": 11,"line": 9,"col": 4,"name": "getEndPosFn","comptime": true},{"file": 45,"line": 412,"col": 12,"name": "x"},{"file": 45,"line": 412,"col": 24,"name": "y"},{"file": 45,"line": 412,"col": 36,"name": "z"},{"file": 45,"line": 1213,"col": 14,"name": "T","comptime": true},{"file": 58,"line": 45,"col": 13,"name": "name","comptime": true},{"file": 58,"line": 47,"col": 21,"name": "T","comptime": true},{"file": 58,"line": 354,"col": 19,"name": "T","comptime": true},{"file": 46,"line": 599,"col": 11,"name": "T","comptime": true},{"file": 58,"line": 99,"col": 10,"name": "id","comptime": true},{"file": 58,"line": 101,"col": 21,"name": "T","comptime": true},{"file": 58,"line": 218,"col": 23,"name": "T","comptime": true},{"file": 46,"line": 140,"col": 13,"name": "T","comptime": true},{"file": 21,"line": 2543,"col": 16,"name": "source","comptime": true},{"file": 21,"line": 2543,"col": 39,"name": "size","comptime": true},{"file": 21,"line": 2543,"col": 89,"name": "child","comptime": true},{"file": 21,"line": 2559,"col": 21,"name": "P","comptime": true},{"file": 13,"line": 14,"col": 24,"name": "T","comptime": true},{"file": 45,"line": 1221,"col": 14,"name": "T","comptime": true},{"file": 58,"line": 248,"col": 15,"name": "T","comptime": true},{"file": 21,"line": 2819,"col": 26,"name": "sliceType","comptime": true},{"file": 14,"line": 9,"col": 13,"name": "T","comptime": true},{"file": 13,"line": 161,"col": 17,"name": "T","comptime": true},{"file": 16,"line": 6,"col": 14,"name": "T","comptime": true},{"file": 18,"line": 8,"col": 13,"name": "T","comptime": true},{"file": 58,"line": 116,"col": 15,"name": "id","comptime": true},{"file": 58,"line": 118,"col": 21,"name": "T","comptime": true},{"file": 21,"line": 2726,"col": 26,"name": "T","comptime": true},{"file": 21,"line": 2726,"col": 44,"name": "bytesType","comptime": true},{"file": 46,"line": 190,"col": 16,"name": "T","comptime": true},{"file": 19,"line": 174,"col": 14,"name": "scope","comptime": true},{"file": 46,"line": 328,"col": 23,"name": "T","comptime": true},{"file": 21,"line": 1849,"col": 21,"name": "T","comptime": true},{"file": 22,"line": 6,"col": 25,"name": "I","comptime": true},{"file": 22,"line": 6,"col": 43,"name": "T","comptime": true},{"file": 21,"line": 1801,"col": 21,"name": "T","comptime": true},{"file": 50,"line": 1128,"col": 11,"name": "T","comptime": true},{"file": 6,"line": 816,"col": 25,"name": "T","comptime": true},{"file": 71,"line": 77,"col": 12,"name": "T","comptime": true},{"file": 24,"line": 5,"col": 22,"name": "WriterType","comptime": true},{"file": 19,"line": 87,"col": 18,"name": "self","comptime": true},{"file": 67,"line": 164,"col": 21,"name": "K","comptime": true},{"file": 6,"line": 65,"col": 21,"name": "V","comptime": true},{"file": 58,"line": 308,"col": 18,"name": "T","comptime": true},{"file": 16,"line": 108,"col": 22,"name": "condition","comptime": true},{"file": 16,"line": 108,"col": 48,"name": "functions","comptime": true},{"file": 58,"line": 287,"col": 16,"name": "T","comptime": true},{"file": 8,"line": 7,"col": 4,"name": "16bit_mode"},{"file": 8,"line": 8,"col": 4,"name": "32bit_mode"},{"file": 8,"line": 9,"col": 4,"name": "3dnow"},{"file": 8,"line": 10,"col": 4,"name": "3dnowa"},{"file": 8,"line": 11,"col": 4,"name": "64bit"},{"file": 8,"line": 12,"col": 4,"name": "adx"},{"file": 8,"line": 13,"col": 4,"name": "aes"},{"file": 8,"line": 14,"col": 4,"name": "amx_bf16"},{"file": 8,"line": 15,"col": 4,"name": "amx_int8"},{"file": 8,"line": 16,"col": 4,"name": "amx_tile"},{"file": 8,"line": 17,"col": 4,"name": "avx"},{"file": 8,"line": 18,"col": 4,"name": "avx2"},{"file": 8,"line": 19,"col": 4,"name": "avx512bf16"},{"file": 8,"line": 20,"col": 4,"name": "avx512bitalg"},{"file": 8,"line": 21,"col": 4,"name": "avx512bw"},{"file": 8,"line": 22,"col": 4,"name": "avx512cd"},{"file": 8,"line": 23,"col": 4,"name": "avx512dq"},{"file": 8,"line": 24,"col": 4,"name": "avx512er"},{"file": 8,"line": 25,"col": 4,"name": "avx512f"},{"file": 8,"line": 26,"col": 4,"name": "avx512ifma"},{"file": 8,"line": 27,"col": 4,"name": "avx512pf"},{"file": 8,"line": 28,"col": 4,"name": "avx512vbmi"},{"file": 8,"line": 29,"col": 4,"name": "avx512vbmi2"},{"file": 8,"line": 30,"col": 4,"name": "avx512vl"},{"file": 8,"line": 31,"col": 4,"name": "avx512vnni"},{"file": 8,"line": 32,"col": 4,"name": "avx512vp2intersect"},{"file": 8,"line": 33,"col": 4,"name": "avx512vpopcntdq"},{"file": 8,"line": 34,"col": 4,"name": "avxvnni"},{"file": 8,"line": 35,"col": 4,"name": "bmi"},{"file": 8,"line": 36,"col": 4,"name": "bmi2"},{"file": 8,"line": 37,"col": 4,"name": "branchfusion"},{"file": 8,"line": 38,"col": 4,"name": "cldemote"},{"file": 8,"line": 39,"col": 4,"name": "clflushopt"},{"file": 8,"line": 40,"col": 4,"name": "clwb"},{"file": 8,"line": 41,"col": 4,"name": "clzero"},{"file": 8,"line": 42,"col": 4,"name": "cmov"},{"file": 8,"line": 43,"col": 4,"name": "cx16"},{"file": 8,"line": 44,"col": 4,"name": "cx8"},{"file": 8,"line": 45,"col": 4,"name": "enqcmd"},{"file": 8,"line": 46,"col": 4,"name": "ermsb"},{"file": 8,"line": 47,"col": 4,"name": "f16c"},{"file": 8,"line": 48,"col": 4,"name": "false_deps_lzcnt_tzcnt"},{"file": 8,"line": 49,"col": 4,"name": "false_deps_popcnt"},{"file": 8,"line": 50,"col": 4,"name": "fast_11bytenop"},{"file": 8,"line": 51,"col": 4,"name": "fast_15bytenop"},{"file": 8,"line": 52,"col": 4,"name": "fast_7bytenop"},{"file": 8,"line": 53,"col": 4,"name": "fast_bextr"},{"file": 8,"line": 54,"col": 4,"name": "fast_gather"},{"file": 8,"line": 55,"col": 4,"name": "fast_hops"},{"file": 8,"line": 56,"col": 4,"name": "fast_lzcnt"},{"file": 8,"line": 57,"col": 4,"name": "fast_movbe"},{"file": 8,"line": 58,"col": 4,"name": "fast_scalar_fsqrt"},{"file": 8,"line": 59,"col": 4,"name": "fast_scalar_shift_masks"},{"file": 8,"line": 60,"col": 4,"name": "fast_shld_rotate"},{"file": 8,"line": 61,"col": 4,"name": "fast_variable_crosslane_shuffle"},{"file": 8,"line": 62,"col": 4,"name": "fast_variable_perlane_shuffle"},{"file": 8,"line": 63,"col": 4,"name": "fast_vector_fsqrt"},{"file": 8,"line": 64,"col": 4,"name": "fast_vector_shift_masks"},{"file": 8,"line": 65,"col": 4,"name": "fma"},{"file": 8,"line": 66,"col": 4,"name": "fma4"},{"file": 8,"line": 67,"col": 4,"name": "fsgsbase"},{"file": 8,"line": 68,"col": 4,"name": "fsrm"},{"file": 8,"line": 69,"col": 4,"name": "fxsr"},{"file": 8,"line": 70,"col": 4,"name": "gfni"},{"file": 8,"line": 71,"col": 4,"name": "hreset"},{"file": 8,"line": 72,"col": 4,"name": "idivl_to_divb"},{"file": 8,"line": 73,"col": 4,"name": "idivq_to_divl"},{"file": 8,"line": 74,"col": 4,"name": "invpcid"},{"file": 8,"line": 75,"col": 4,"name": "kl"},{"file": 8,"line": 76,"col": 4,"name": "lea_sp"},{"file": 8,"line": 77,"col": 4,"name": "lea_uses_ag"},{"file": 8,"line": 78,"col": 4,"name": "lvi_cfi"},{"file": 8,"line": 79,"col": 4,"name": "lvi_load_hardening"},{"file": 8,"line": 80,"col": 4,"name": "lwp"},{"file": 8,"line": 81,"col": 4,"name": "lzcnt"},{"file": 8,"line": 82,"col": 4,"name": "macrofusion"},{"file": 8,"line": 83,"col": 4,"name": "mmx"},{"file": 8,"line": 84,"col": 4,"name": "movbe"},{"file": 8,"line": 85,"col": 4,"name": "movdir64b"},{"file": 8,"line": 86,"col": 4,"name": "movdiri"},{"file": 8,"line": 87,"col": 4,"name": "mwaitx"},{"file": 8,"line": 88,"col": 4,"name": "nopl"},{"file": 8,"line": 89,"col": 4,"name": "pad_short_functions"},{"file": 8,"line": 90,"col": 4,"name": "pclmul"},{"file": 8,"line": 91,"col": 4,"name": "pconfig"},{"file": 8,"line": 92,"col": 4,"name": "pku"},{"file": 8,"line": 93,"col": 4,"name": "popcnt"},{"file": 8,"line": 94,"col": 4,"name": "prefer_128_bit"},{"file": 8,"line": 95,"col": 4,"name": "prefer_256_bit"},{"file": 8,"line": 96,"col": 4,"name": "prefer_mask_registers"},{"file": 8,"line": 97,"col": 4,"name": "prefetchwt1"},{"file": 8,"line": 98,"col": 4,"name": "prfchw"},{"file": 8,"line": 99,"col": 4,"name": "ptwrite"},{"file": 8,"line": 100,"col": 4,"name": "rdpid"},{"file": 8,"line": 101,"col": 4,"name": "rdrnd"},{"file": 8,"line": 102,"col": 4,"name": "rdseed"},{"file": 8,"line": 103,"col": 4,"name": "retpoline"},{"file": 8,"line": 104,"col": 4,"name": "retpoline_external_thunk"},{"file": 8,"line": 105,"col": 4,"name": "retpoline_indirect_branches"},{"file": 8,"line": 106,"col": 4,"name": "retpoline_indirect_calls"},{"file": 8,"line": 107,"col": 4,"name": "rtm"},{"file": 8,"line": 108,"col": 4,"name": "sahf"},{"file": 8,"line": 109,"col": 4,"name": "serialize"},{"file": 8,"line": 110,"col": 4,"name": "seses"},{"file": 8,"line": 111,"col": 4,"name": "sgx"},{"file": 8,"line": 112,"col": 4,"name": "sha"},{"file": 8,"line": 113,"col": 4,"name": "shstk"},{"file": 8,"line": 114,"col": 4,"name": "slow_3ops_lea"},{"file": 8,"line": 115,"col": 4,"name": "slow_incdec"},{"file": 8,"line": 116,"col": 4,"name": "slow_lea"},{"file": 8,"line": 117,"col": 4,"name": "slow_pmaddwd"},{"file": 8,"line": 118,"col": 4,"name": "slow_pmulld"},{"file": 8,"line": 119,"col": 4,"name": "slow_shld"},{"file": 8,"line": 120,"col": 4,"name": "slow_two_mem_ops"},{"file": 8,"line": 121,"col": 4,"name": "slow_unaligned_mem_16"},{"file": 8,"line": 122,"col": 4,"name": "slow_unaligned_mem_32"},{"file": 8,"line": 123,"col": 4,"name": "soft_float"},{"file": 8,"line": 124,"col": 4,"name": "sse"},{"file": 8,"line": 125,"col": 4,"name": "sse2"},{"file": 8,"line": 126,"col": 4,"name": "sse3"},{"file": 8,"line": 127,"col": 4,"name": "sse4_1"},{"file": 8,"line": 128,"col": 4,"name": "sse4_2"},{"file": 8,"line": 129,"col": 4,"name": "sse4a"},{"file": 8,"line": 130,"col": 4,"name": "sse_unaligned_mem"},{"file": 8,"line": 131,"col": 4,"name": "ssse3"},{"file": 8,"line": 132,"col": 4,"name": "tbm"},{"file": 8,"line": 133,"col": 4,"name": "tsxldtrk"},{"file": 8,"line": 134,"col": 4,"name": "uintr"},{"file": 8,"line": 135,"col": 4,"name": "use_aa"},{"file": 8,"line": 136,"col": 4,"name": "use_glm_div_sqrt_costs"},{"file": 8,"line": 137,"col": 4,"name": "vaes"},{"file": 8,"line": 138,"col": 4,"name": "vpclmulqdq"},{"file": 8,"line": 139,"col": 4,"name": "vzeroupper"},{"file": 8,"line": 140,"col": 4,"name": "waitpkg"},{"file": 8,"line": 141,"col": 4,"name": "wbnoinvd"},{"file": 8,"line": 142,"col": 4,"name": "widekl"},{"file": 8,"line": 143,"col": 4,"name": "x87"},{"file": 8,"line": 144,"col": 4,"name": "xop"},{"file": 8,"line": 145,"col": 4,"name": "xsave"},{"file": 8,"line": 146,"col": 4,"name": "xsavec"},{"file": 8,"line": 147,"col": 4,"name": "xsaveopt"},{"file": 8,"line": 148,"col": 4,"name": "xsaves"},{"file": 12,"line": 451,"col": 4,"name": "signed"},{"file": 12,"line": 452,"col": 4,"name": "unsigned"},{"file": 3,"line": 760,"col": 12,"name": "arm"},{"file": 3,"line": 761,"col": 12,"name": "armeb"},{"file": 3,"line": 762,"col": 12,"name": "aarch64"},{"file": 3,"line": 763,"col": 12,"name": "aarch64_be"},{"file": 3,"line": 764,"col": 12,"name": "aarch64_32"},{"file": 3,"line": 765,"col": 12,"name": "arc"},{"file": 3,"line": 766,"col": 12,"name": "avr"},{"file": 3,"line": 767,"col": 12,"name": "bpfel"},{"file": 3,"line": 768,"col": 12,"name": "bpfeb"},{"file": 3,"line": 769,"col": 12,"name": "csky"},{"file": 3,"line": 770,"col": 12,"name": "hexagon"},{"file": 3,"line": 771,"col": 12,"name": "m68k"},{"file": 3,"line": 772,"col": 12,"name": "mips"},{"file": 3,"line": 773,"col": 12,"name": "mipsel"},{"file": 3,"line": 774,"col": 12,"name": "mips64"},{"file": 3,"line": 775,"col": 12,"name": "mips64el"},{"file": 3,"line": 776,"col": 12,"name": "msp430"},{"file": 3,"line": 777,"col": 12,"name": "powerpc"},{"file": 3,"line": 778,"col": 12,"name": "powerpcle"},{"file": 3,"line": 779,"col": 12,"name": "powerpc64"},{"file": 3,"line": 780,"col": 12,"name": "powerpc64le"},{"file": 3,"line": 781,"col": 12,"name": "r600"},{"file": 3,"line": 782,"col": 12,"name": "amdgcn"},{"file": 3,"line": 783,"col": 12,"name": "riscv32"},{"file": 3,"line": 784,"col": 12,"name": "riscv64"},{"file": 3,"line": 785,"col": 12,"name": "sparc"},{"file": 3,"line": 786,"col": 12,"name": "sparcv9"},{"file": 3,"line": 787,"col": 12,"name": "sparcel"},{"file": 3,"line": 788,"col": 12,"name": "s390x"},{"file": 3,"line": 789,"col": 12,"name": "tce"},{"file": 3,"line": 790,"col": 12,"name": "tcele"},{"file": 3,"line": 791,"col": 12,"name": "thumb"},{"file": 3,"line": 792,"col": 12,"name": "thumbeb"},{"file": 3,"line": 793,"col": 12,"name": "i386"},{"file": 3,"line": 794,"col": 12,"name": "x86_64"},{"file": 3,"line": 795,"col": 12,"name": "xcore"},{"file": 3,"line": 796,"col": 12,"name": "nvptx"},{"file": 3,"line": 797,"col": 12,"name": "nvptx64"},{"file": 3,"line": 798,"col": 12,"name": "le32"},{"file": 3,"line": 799,"col": 12,"name": "le64"},{"file": 3,"line": 800,"col": 12,"name": "amdil"},{"file": 3,"line": 801,"col": 12,"name": "amdil64"},{"file": 3,"line": 802,"col": 12,"name": "hsail"},{"file": 3,"line": 803,"col": 12,"name": "hsail64"},{"file": 3,"line": 804,"col": 12,"name": "spir"},{"file": 3,"line": 805,"col": 12,"name": "spir64"},{"file": 3,"line": 806,"col": 12,"name": "kalimba"},{"file": 3,"line": 807,"col": 12,"name": "shave"},{"file": 3,"line": 808,"col": 12,"name": "lanai"},{"file": 3,"line": 809,"col": 12,"name": "wasm32"},{"file": 3,"line": 810,"col": 12,"name": "wasm64"},{"file": 3,"line": 811,"col": 12,"name": "renderscript32"},{"file": 3,"line": 812,"col": 12,"name": "renderscript64"},{"file": 3,"line": 813,"col": 12,"name": "ve"},{"file": 3,"line": 816,"col": 12,"name": "spu_2"},{"file": 3,"line": 817,"col": 12,"name": "spirv32"},{"file": 3,"line": 818,"col": 12,"name": "spirv64"},{"file": 4,"line": 10,"col": 8,"name": "context"},{"file": 5,"line": 14,"col": 4,"docs": " The OS-specific file descriptor or file handle.","name": "handle"},{"file": 5,"line": 21,"col": 4,"docs": " On some systems, such as Linux, file system file descriptors are incapable of non-blocking I/O. This forces us to perform asynchronous I/O on a dedicated thread, to achieve non-blocking file-system I/O. To do this, `File` must be aware of whether it is a file system file descriptor, or, more specifically, whether the I/O is always blocking.","name": "capable_io_mode"},{"file": 5,"line": 28,"col": 4,"docs": " Furthermore, even when `std.io.mode` is async, it is still sometimes desirable to perform blocking I/O, although not by default. For example, when printing a stack trace to stderr. This field tracks both by acting as an overriding I/O mode. When not building in async I/O mode, the type only has the `.blocking` tag, making it a zero-bit type.","name": "intended_io_mode"},{"file": 6,"line": 366,"col": 8,"name": "unmanaged"},{"file": 6,"line": 367,"col": 8,"name": "allocator"},{"file": 6,"line": 368,"col": 8,"name": "ctx"},{"file": 6,"line": 694,"col": 8,"docs": " Pointer to the metadata.","name": "metadata"},{"file": 6,"line": 697,"col": 8,"docs": " Current number of elements in the hashmap.","name": "size"},{"file": 6,"line": 703,"col": 8,"docs": " Number of available slots before a grow is needed to satisfy the `max_load_percentage`.","name": "available"},{"file": 7,"line": 40,"col": 8,"docs": " Contents of the list. Pointers to elements in this slice are **invalid after resizing operations** on the ArrayList, unless the operation explicitly either: (1) states otherwise or (2) lists the invalidated pointers. The allocator used determines how element pointers are invalidated, so the behavior may vary between lists. To avoid illegal behavior, take into account the above paragraph plus the explicit statements given in each method.","name": "items"},{"file": 7,"line": 43,"col": 8,"docs": " How many T values this list can hold without allocating additional memory.","name": "capacity"},{"file": 7,"line": 44,"col": 8,"name": "allocator"},{"file": 25,"line": 249,"col": 4,"name": "offset"},{"file": 25,"line": 250,"col": 4,"name": "table"},{"file": 25,"line": 254,"col": 4,"name": "has_children"},{"file": 25,"line": 255,"col": 4,"name": "abbrev_code"},{"file": 25,"line": 256,"col": 4,"name": "tag_id"},{"file": 25,"line": 257,"col": 4,"name": "attrs"},{"file": 25,"line": 261,"col": 4,"name": "attr_id"},{"file": 25,"line": 262,"col": 4,"name": "form_id"},{"file": 25,"line": 239,"col": 4,"name": "version"},{"file": 25,"line": 240,"col": 4,"name": "is_64"},{"file": 25,"line": 241,"col": 4,"name": "die"},{"file": 25,"line": 242,"col": 4,"name": "pc_range"},{"file": 25,"line": 294,"col": 8,"name": "id"},{"file": 25,"line": 295,"col": 8,"name": "value"},{"file": 25,"line": 234,"col": 4,"name": "pc_range"},{"file": 25,"line": 235,"col": 4,"name": "name"},{"file": 3,"line": 17,"col": 12,"name": "freestanding"},{"file": 3,"line": 18,"col": 12,"name": "ananas"},{"file": 3,"line": 19,"col": 12,"name": "cloudabi"},{"file": 3,"line": 20,"col": 12,"name": "dragonfly"},{"file": 3,"line": 21,"col": 12,"name": "freebsd"},{"file": 3,"line": 22,"col": 12,"name": "fuchsia"},{"file": 3,"line": 23,"col": 12,"name": "ios"},{"file": 3,"line": 24,"col": 12,"name": "kfreebsd"},{"file": 3,"line": 25,"col": 12,"name": "linux"},{"file": 3,"line": 26,"col": 12,"name": "lv2"},{"file": 3,"line": 27,"col": 12,"name": "macos"},{"file": 3,"line": 28,"col": 12,"name": "netbsd"},{"file": 3,"line": 29,"col": 12,"name": "openbsd"},{"file": 3,"line": 30,"col": 12,"name": "solaris"},{"file": 3,"line": 31,"col": 12,"name": "windows"},{"file": 3,"line": 32,"col": 12,"name": "zos"},{"file": 3,"line": 33,"col": 12,"name": "haiku"},{"file": 3,"line": 34,"col": 12,"name": "minix"},{"file": 3,"line": 35,"col": 12,"name": "rtems"},{"file": 3,"line": 36,"col": 12,"name": "nacl"},{"file": 3,"line": 37,"col": 12,"name": "aix"},{"file": 3,"line": 38,"col": 12,"name": "cuda"},{"file": 3,"line": 39,"col": 12,"name": "nvcl"},{"file": 3,"line": 40,"col": 12,"name": "amdhsa"},{"file": 3,"line": 41,"col": 12,"name": "ps4"},{"file": 3,"line": 42,"col": 12,"name": "elfiamcu"},{"file": 3,"line": 43,"col": 12,"name": "tvos"},{"file": 3,"line": 44,"col": 12,"name": "watchos"},{"file": 3,"line": 45,"col": 12,"name": "mesa3d"},{"file": 3,"line": 46,"col": 12,"name": "contiki"},{"file": 3,"line": 47,"col": 12,"name": "amdpal"},{"file": 3,"line": 48,"col": 12,"name": "hermit"},{"file": 3,"line": 49,"col": 12,"name": "hurd"},{"file": 3,"line": 50,"col": 12,"name": "wasi"},{"file": 3,"line": 51,"col": 12,"name": "emscripten"},{"file": 3,"line": 52,"col": 12,"name": "uefi"},{"file": 3,"line": 53,"col": 12,"name": "opencl"},{"file": 3,"line": 54,"col": 12,"name": "glsl450"},{"file": 3,"line": 55,"col": 12,"name": "vulkan"},{"file": 3,"line": 56,"col": 12,"name": "plan9"},{"file": 3,"line": 57,"col": 12,"name": "other"},{"file": 3,"line": 8,"col": 4,"name": "cpu"},{"file": 3,"line": 9,"col": 4,"name": "os"},{"file": 3,"line": 10,"col": 4,"name": "abi"},{"file": 12,"line": 444,"col": 4,"name": "Big"},{"file": 12,"line": 445,"col": 4,"name": "Little"},{"file": 9,"line": 11,"col": 8,"docs": " `Buffer` is either a `[]u8` or `[]const u8`.","name": "buffer"},{"file": 9,"line": 12,"col": 8,"name": "pos"},{"file": 10,"line": 17,"col": 8,"name": "context"},{"file": 11,"line": 12,"col": 8,"name": "context"},{"file": 25,"line": 349,"col": 4,"name": "file_name"},{"file": 25,"line": 350,"col": 4,"name": "dir_index"},{"file": 25,"line": 351,"col": 4,"name": "mtime"},{"file": 25,"line": 352,"col": 4,"name": "len_bytes"},{"file": 12,"line": 197,"col": 4,"name": "Type"},{"file": 12,"line": 198,"col": 4,"name": "Void"},{"file": 12,"line": 199,"col": 4,"name": "Bool"},{"file": 12,"line": 200,"col": 4,"name": "NoReturn"},{"file": 12,"line": 201,"col": 4,"name": "Int"},{"file": 12,"line": 202,"col": 4,"name": "Float"},{"file": 12,"line": 203,"col": 4,"name": "Pointer"},{"file": 12,"line": 204,"col": 4,"name": "Array"},{"file": 12,"line": 205,"col": 4,"name": "Struct"},{"file": 12,"line": 206,"col": 4,"name": "ComptimeFloat"},{"file": 12,"line": 207,"col": 4,"name": "ComptimeInt"},{"file": 12,"line": 208,"col": 4,"name": "Undefined"},{"file": 12,"line": 209,"col": 4,"name": "Null"},{"file": 12,"line": 210,"col": 4,"name": "Optional"},{"file": 12,"line": 211,"col": 4,"name": "ErrorUnion"},{"file": 12,"line": 212,"col": 4,"name": "ErrorSet"},{"file": 12,"line": 213,"col": 4,"name": "Enum"},{"file": 12,"line": 214,"col": 4,"name": "Union"},{"file": 12,"line": 215,"col": 4,"name": "Fn"},{"file": 12,"line": 216,"col": 4,"name": "BoundFn"},{"file": 12,"line": 217,"col": 4,"name": "Opaque"},{"file": 12,"line": 218,"col": 4,"name": "Frame"},{"file": 12,"line": 219,"col": 4,"name": "AnyFrame"},{"file": 12,"line": 220,"col": 4,"name": "Vector"},{"file": 12,"line": 221,"col": 4,"name": "EnumLiteral"},{"file": 12,"line": 256,"col": 12,"name": "One"},{"file": 12,"line": 257,"col": 12,"name": "Many"},{"file": 12,"line": 258,"col": 12,"name": "Slice"},{"file": 12,"line": 259,"col": 12,"name": "C"},{"file": 13,"line": 67,"col": 8,"name": "first"},{"file": 14,"line": 11,"col": 8,"name": "head"},{"file": 14,"line": 12,"col": 8,"name": "tail"},{"file": 14,"line": 13,"col": 8,"name": "mutex"},{"file": 13,"line": 172,"col": 8,"name": "first"},{"file": 13,"line": 173,"col": 8,"name": "last"},{"file": 13,"line": 174,"col": 8,"name": "len"},{"file": 16,"line": 8,"col": 8,"name": "value"},{"file": 33,"line": 320,"col": 4,"name": "running"},{"file": 33,"line": 321,"col": 4,"name": "detached"},{"file": 33,"line": 322,"col": 4,"name": "completed"},{"file": 17,"line": 1566,"col": 8,"name": "msg"},{"file": 17,"line": 1567,"col": 8,"name": "finish"},{"file": 18,"line": 10,"col": 8,"name": "root"},{"file": 18,"line": 11,"col": 8,"name": "lock"},{"file": 17,"line": 72,"col": 16,"name": "base"},{"file": 17,"line": 73,"col": 16,"name": "epoll_op"},{"file": 17,"line": 74,"col": 16,"name": "eventfd"},{"file": 12,"line": 279,"col": 8,"name": "Auto"},{"file": 12,"line": 280,"col": 8,"name": "Extern"},{"file": 12,"line": 281,"col": 8,"name": "Packed"},{"file": 20,"line": 630,"col": 4,"name": "dev"},{"file": 20,"line": 631,"col": 4,"name": "ino"},{"file": 20,"line": 632,"col": 4,"name": "nlink"},{"file": 20,"line": 634,"col": 4,"name": "mode"},{"file": 20,"line": 635,"col": 4,"name": "uid"},{"file": 20,"line": 636,"col": 4,"name": "gid"},{"file": 20,"line": 637,"col": 4,"name": "__pad0"},{"file": 20,"line": 638,"col": 4,"name": "rdev"},{"file": 20,"line": 639,"col": 4,"name": "size"},{"file": 20,"line": 640,"col": 4,"name": "blksize"},{"file": 20,"line": 641,"col": 4,"name": "blocks"},{"file": 20,"line": 643,"col": 4,"name": "atim"},{"file": 20,"line": 644,"col": 4,"name": "mtim"},{"file": 20,"line": 645,"col": 4,"name": "ctim"},{"file": 20,"line": 646,"col": 4,"name": "__unused"},{"file": 21,"line": 1851,"col": 8,"name": "buffer"},{"file": 21,"line": 1852,"col": 8,"name": "index"},{"file": 21,"line": 1853,"col": 8,"name": "delimiter"},{"file": 22,"line": 8,"col": 8,"name": "inner"},{"file": 22,"line": 9,"col": 8,"name": "index"},{"file": 21,"line": 1803,"col": 8,"name": "buffer"},{"file": 21,"line": 1804,"col": 8,"name": "delimiter_bytes"},{"file": 21,"line": 1805,"col": 8,"name": "index"},{"file": 23,"line": 4,"col": 4,"name": "grid"},{"file": 23,"line": 5,"col": 4,"name": "marked"},{"file": 23,"line": 6,"col": 4,"name": "done"},{"file": 29,"line": 9,"col": 27,"name": "x"},{"file": 29,"line": 9,"col": 35,"name": "y"},{"file": 30,"line": 3,"col": 21,"name": "clock"},{"file": 30,"line": 3,"col": 33,"name": "days_left"},{"file": 6,"line": 818,"col": 16,"name": "len"},{"file": 6,"line": 819,"col": 16,"name": "metadata"},{"file": 6,"line": 820,"col": 16,"name": "items"},{"file": 24,"line": 7,"col": 8,"name": "bytes_written"},{"file": 24,"line": 8,"col": 8,"name": "child_stream"},{"file": 19,"line": 77,"col": 4,"docs": " Error: something has gone wrong. This might be recoverable or might be followed by the program exiting.","name": "err"},{"file": 19,"line": 80,"col": 4,"docs": " Warning: it is uncertain if something has gone wrong or not, but the circumstances would be worth investigating.","name": "warn"},{"file": 19,"line": 82,"col": 4,"docs": " Info: general messages about the state of the program.","name": "info"},{"file": 19,"line": 84,"col": 4,"docs": " Debug: messages only useful for debugging.","name": "debug"},{"file": 25,"line": 594,"col": 4,"name": "endian"},{"file": 25,"line": 596,"col": 4,"name": "debug_info"},{"file": 25,"line": 597,"col": 4,"name": "debug_abbrev"},{"file": 25,"line": 598,"col": 4,"name": "debug_str"},{"file": 25,"line": 599,"col": 4,"name": "debug_line"},{"file": 25,"line": 600,"col": 4,"name": "debug_ranges"},{"file": 25,"line": 602,"col": 4,"name": "abbrev_table_list"},{"file": 25,"line": 603,"col": 4,"name": "compile_unit_list"},{"file": 25,"line": 604,"col": 4,"name": "func_list"},{"file": 35,"line": 375,"col": 4,"name": "header"},{"file": 3,"line": 638,"col": 16,"name": "ints"},{"file": 12,"line": 54,"col": 4,"name": "index"},{"file": 12,"line": 55,"col": 4,"name": "instruction_addresses"},{"file": 39,"line": 20,"col": 4,"name": "precision"},{"file": 39,"line": 21,"col": 4,"name": "width"},{"file": 39,"line": 22,"col": 4,"name": "alignment"},{"file": 39,"line": 23,"col": 4,"name": "fill"},{"file": 36,"line": 501,"col": 8,"name": "no_color"},{"file": 36,"line": 502,"col": 8,"name": "escape_codes"},{"file": 36,"line": 504,"col": 8,"name": "windows_api"},{"file": 40,"line": 291,"col": 4,"name": "fd"},{"file": 5,"line": 75,"col": 8,"name": "read"},{"file": 5,"line": 76,"col": 8,"name": "write"},{"file": 5,"line": 102,"col": 8,"docs": " Open the file with an advisory lock to coordinate with other processes accessing it at the same time. An exclusive lock will prevent other processes from acquiring a lock. A shared lock will prevent other processes from acquiring a exclusive lock, but does not prevent other process from getting their own shared locks. The lock is advisory, except on Linux in very specific cirsumstances[1]. This means that a process that does not respect the locking API can still get access to the file, despite the lock. On these operating systems, the lock is acquired atomically with opening the file: * Darwin * DragonFlyBSD * FreeBSD * Haiku * NetBSD * OpenBSD On these operating systems, the lock is acquired via a separate syscall after opening the file: * Linux * Windows [1]: https://www.kernel.org/doc/Documentation/filesystems/mandatory-locking.txt","name": "lock"},{"file": 5,"line": 110,"col": 8,"docs": " Sets whether or not to wait until the file is locked to return. If set to true, `error.WouldBlock` will be returned. Otherwise, the file will wait until the file is available to proceed. In async I/O mode, non-blocking at the OS level is determined by `intended_io_mode`, and `true` means `error.WouldBlock` is returned, and `false` means `error.WouldBlock` is handled by the event loop.","name": "lock_nonblocking"},{"file": 5,"line": 115,"col": 8,"docs": " Setting this to `.blocking` prevents `O.NONBLOCK` from being passed even if `std.io.is_async`. It allows the use of `nosuspend` when calling functions related to opening the file, reading, writing, and locking.","name": "intended_io_mode"},{"file": 5,"line": 119,"col": 8,"docs": " Set this to allow the opened file to automatically become the controlling TTY for the current process.","name": "allow_ctty"},{"file": 6,"line": 752,"col": 12,"name": "fingerprint"},{"file": 6,"line": 753,"col": 12,"name": "used"},{"file": 25,"line": 356,"col": 4,"name": "address"},{"file": 25,"line": 357,"col": 4,"name": "file"},{"file": 25,"line": 358,"col": 4,"name": "line"},{"file": 25,"line": 359,"col": 4,"name": "column"},{"file": 25,"line": 360,"col": 4,"name": "is_stmt"},{"file": 25,"line": 361,"col": 4,"name": "basic_block"},{"file": 25,"line": 362,"col": 4,"name": "end_sequence"},{"file": 25,"line": 364,"col": 4,"name": "default_is_stmt"},{"file": 25,"line": 365,"col": 4,"name": "target_address"},{"file": 25,"line": 366,"col": 4,"name": "include_dirs"},{"file": 25,"line": 367,"col": 4,"name": "file_entries"},{"file": 25,"line": 369,"col": 4,"name": "prev_valid"},{"file": 25,"line": 370,"col": 4,"name": "prev_address"},{"file": 25,"line": 371,"col": 4,"name": "prev_file"},{"file": 25,"line": 372,"col": 4,"name": "prev_line"},{"file": 25,"line": 373,"col": 4,"name": "prev_column"},{"file": 25,"line": 374,"col": 4,"name": "prev_is_stmt"},{"file": 25,"line": 375,"col": 4,"name": "prev_basic_block"},{"file": 25,"line": 376,"col": 4,"name": "prev_end_sequence"},{"file": 36,"line": 40,"col": 4,"name": "symbol_name"},{"file": 36,"line": 41,"col": 4,"name": "compile_unit_name"},{"file": 36,"line": 42,"col": 4,"name": "line_info"},{"file": 36,"line": 363,"col": 4,"name": "first_address"},{"file": 36,"line": 365,"col": 4,"name": "fp"},{"file": 59,"line": 4201,"col": 4,"docs": " Per-process CPU limit, in seconds.","name": "CPU"},{"file": 59,"line": 4204,"col": 4,"docs": " Largest file that can be created, in bytes.","name": "FSIZE"},{"file": 59,"line": 4207,"col": 4,"docs": " Maximum size of data segment, in bytes.","name": "DATA"},{"file": 59,"line": 4210,"col": 4,"docs": " Maximum size of stack segment, in bytes.","name": "STACK"},{"file": 59,"line": 4213,"col": 4,"docs": " Largest core file that can be created, in bytes.","name": "CORE"},{"file": 59,"line": 4219,"col": 4,"docs": " Largest resident set size, in bytes. This affects swapping; processes that are exceeding their resident set size will be more likely to have physical memory taken from them.","name": "RSS"},{"file": 59,"line": 4222,"col": 4,"docs": " Number of processes.","name": "NPROC"},{"file": 59,"line": 4225,"col": 4,"docs": " Number of open files.","name": "NOFILE"},{"file": 59,"line": 4228,"col": 4,"docs": " Locked-in-memory address space.","name": "MEMLOCK"},{"file": 59,"line": 4231,"col": 4,"docs": " Address space limit.","name": "AS"},{"file": 59,"line": 4234,"col": 4,"docs": " Maximum number of file locks.","name": "LOCKS"},{"file": 59,"line": 4237,"col": 4,"docs": " Maximum number of pending signals.","name": "SIGPENDING"},{"file": 59,"line": 4240,"col": 4,"docs": " Maximum bytes in POSIX message queues.","name": "MSGQUEUE"},{"file": 59,"line": 4245,"col": 4,"docs": " Maximum nice priority allowed to raise to. Nice levels 19 .. -20 correspond to 0 .. 39 values of this resource limit.","name": "NICE"},{"file": 59,"line": 4249,"col": 4,"docs": " Maximum realtime priority allowed for non-priviledged processes.","name": "RTPRIO"},{"file": 59,"line": 4254,"col": 4,"docs": " Maximum CPU time in µs that a process scheduled under a real-time scheduling policy may consume without making a blocking system call before being forcibly descheduled.","name": "RTTIME"},{"file": 59,"line": 4256,"col": 4,"name": "_"},{"file": 59,"line": 4271,"col": 4,"docs": " Soft limit","name": "cur"},{"file": 59,"line": 4273,"col": 4,"docs": " Hard limit","name": "max"},{"file": 72,"line": 3,"col": 4,"docs": " No error occurred. Same code used for `NSROK`.","name": "SUCCESS"},{"file": 72,"line": 6,"col": 4,"docs": " Operation not permitted","name": "PERM"},{"file": 72,"line": 9,"col": 4,"docs": " No such file or directory","name": "NOENT"},{"file": 72,"line": 12,"col": 4,"docs": " No such process","name": "SRCH"},{"file": 72,"line": 15,"col": 4,"docs": " Interrupted system call","name": "INTR"},{"file": 72,"line": 18,"col": 4,"docs": " I/O error","name": "IO"},{"file": 72,"line": 21,"col": 4,"docs": " No such device or address","name": "NXIO"},{"file": 72,"line": 24,"col": 4,"docs": " Arg list too long","name": "2BIG"},{"file": 72,"line": 27,"col": 4,"docs": " Exec format error","name": "NOEXEC"},{"file": 72,"line": 30,"col": 4,"docs": " Bad file number","name": "BADF"},{"file": 72,"line": 33,"col": 4,"docs": " No child processes","name": "CHILD"},{"file": 72,"line": 37,"col": 4,"docs": " Try again Also means: WOULDBLOCK: operation would block","name": "AGAIN"},{"file": 72,"line": 40,"col": 4,"docs": " Out of memory","name": "NOMEM"},{"file": 72,"line": 43,"col": 4,"docs": " Permission denied","name": "ACCES"},{"file": 72,"line": 46,"col": 4,"docs": " Bad address","name": "FAULT"},{"file": 72,"line": 49,"col": 4,"docs": " Block device required","name": "NOTBLK"},{"file": 72,"line": 52,"col": 4,"docs": " Device or resource busy","name": "BUSY"},{"file": 72,"line": 55,"col": 4,"docs": " File exists","name": "EXIST"},{"file": 72,"line": 58,"col": 4,"docs": " Cross-device link","name": "XDEV"},{"file": 72,"line": 61,"col": 4,"docs": " No such device","name": "NODEV"},{"file": 72,"line": 64,"col": 4,"docs": " Not a directory","name": "NOTDIR"},{"file": 72,"line": 67,"col": 4,"docs": " Is a directory","name": "ISDIR"},{"file": 72,"line": 70,"col": 4,"docs": " Invalid argument","name": "INVAL"},{"file": 72,"line": 73,"col": 4,"docs": " File table overflow","name": "NFILE"},{"file": 72,"line": 76,"col": 4,"docs": " Too many open files","name": "MFILE"},{"file": 72,"line": 79,"col": 4,"docs": " Not a typewriter","name": "NOTTY"},{"file": 72,"line": 82,"col": 4,"docs": " Text file busy","name": "TXTBSY"},{"file": 72,"line": 85,"col": 4,"docs": " File too large","name": "FBIG"},{"file": 72,"line": 88,"col": 4,"docs": " No space left on device","name": "NOSPC"},{"file": 72,"line": 91,"col": 4,"docs": " Illegal seek","name": "SPIPE"},{"file": 72,"line": 94,"col": 4,"docs": " Read-only file system","name": "ROFS"},{"file": 72,"line": 97,"col": 4,"docs": " Too many links","name": "MLINK"},{"file": 72,"line": 100,"col": 4,"docs": " Broken pipe","name": "PIPE"},{"file": 72,"line": 103,"col": 4,"docs": " Math argument out of domain of func","name": "DOM"},{"file": 72,"line": 106,"col": 4,"docs": " Math result not representable","name": "RANGE"},{"file": 72,"line": 109,"col": 4,"docs": " Resource deadlock would occur","name": "DEADLK"},{"file": 72,"line": 112,"col": 4,"docs": " File name too long","name": "NAMETOOLONG"},{"file": 72,"line": 115,"col": 4,"docs": " No record locks available","name": "NOLCK"},{"file": 72,"line": 118,"col": 4,"docs": " Function not implemented","name": "NOSYS"},{"file": 72,"line": 121,"col": 4,"docs": " Directory not empty","name": "NOTEMPTY"},{"file": 72,"line": 124,"col": 4,"docs": " Too many symbolic links encountered","name": "LOOP"},{"file": 72,"line": 127,"col": 4,"docs": " No message of desired type","name": "NOMSG"},{"file": 72,"line": 130,"col": 4,"docs": " Identifier removed","name": "IDRM"},{"file": 72,"line": 133,"col": 4,"docs": " Channel number out of range","name": "CHRNG"},{"file": 72,"line": 136,"col": 4,"docs": " Level 2 not synchronized","name": "L2NSYNC"},{"file": 72,"line": 139,"col": 4,"docs": " Level 3 halted","name": "L3HLT"},{"file": 72,"line": 142,"col": 4,"docs": " Level 3 reset","name": "L3RST"},{"file": 72,"line": 145,"col": 4,"docs": " Link number out of range","name": "LNRNG"},{"file": 72,"line": 148,"col": 4,"docs": " Protocol driver not attached","name": "UNATCH"},{"file": 72,"line": 151,"col": 4,"docs": " No CSI structure available","name": "NOCSI"},{"file": 72,"line": 154,"col": 4,"docs": " Level 2 halted","name": "L2HLT"},{"file": 72,"line": 157,"col": 4,"docs": " Invalid exchange","name": "BADE"},{"file": 72,"line": 160,"col": 4,"docs": " Invalid request descriptor","name": "BADR"},{"file": 72,"line": 163,"col": 4,"docs": " Exchange full","name": "XFULL"},{"file": 72,"line": 166,"col": 4,"docs": " No anode","name": "NOANO"},{"file": 72,"line": 169,"col": 4,"docs": " Invalid request code","name": "BADRQC"},{"file": 72,"line": 172,"col": 4,"docs": " Invalid slot","name": "BADSLT"},{"file": 72,"line": 175,"col": 4,"docs": " Bad font file format","name": "BFONT"},{"file": 72,"line": 178,"col": 4,"docs": " Device not a stream","name": "NOSTR"},{"file": 72,"line": 181,"col": 4,"docs": " No data available","name": "NODATA"},{"file": 72,"line": 184,"col": 4,"docs": " Timer expired","name": "TIME"},{"file": 72,"line": 187,"col": 4,"docs": " Out of streams resources","name": "NOSR"},{"file": 72,"line": 190,"col": 4,"docs": " Machine is not on the network","name": "NONET"},{"file": 72,"line": 193,"col": 4,"docs": " Package not installed","name": "NOPKG"},{"file": 72,"line": 196,"col": 4,"docs": " Object is remote","name": "REMOTE"},{"file": 72,"line": 199,"col": 4,"docs": " Link has been severed","name": "NOLINK"},{"file": 72,"line": 202,"col": 4,"docs": " Advertise error","name": "ADV"},{"file": 72,"line": 205,"col": 4,"docs": " Srmount error","name": "SRMNT"},{"file": 72,"line": 208,"col": 4,"docs": " Communication error on send","name": "COMM"},{"file": 72,"line": 211,"col": 4,"docs": " Protocol error","name": "PROTO"},{"file": 72,"line": 214,"col": 4,"docs": " Multihop attempted","name": "MULTIHOP"},{"file": 72,"line": 217,"col": 4,"docs": " RFS specific error","name": "DOTDOT"},{"file": 72,"line": 220,"col": 4,"docs": " Not a data message","name": "BADMSG"},{"file": 72,"line": 223,"col": 4,"docs": " Value too large for defined data type","name": "OVERFLOW"},{"file": 72,"line": 226,"col": 4,"docs": " Name not unique on network","name": "NOTUNIQ"},{"file": 72,"line": 229,"col": 4,"docs": " File descriptor in bad state","name": "BADFD"},{"file": 72,"line": 232,"col": 4,"docs": " Remote address changed","name": "REMCHG"},{"file": 72,"line": 235,"col": 4,"docs": " Can not access a needed shared library","name": "LIBACC"},{"file": 72,"line": 238,"col": 4,"docs": " Accessing a corrupted shared library","name": "LIBBAD"},{"file": 72,"line": 241,"col": 4,"docs": " .lib section in a.out corrupted","name": "LIBSCN"},{"file": 72,"line": 244,"col": 4,"docs": " Attempting to link in too many shared libraries","name": "LIBMAX"},{"file": 72,"line": 247,"col": 4,"docs": " Cannot exec a shared library directly","name": "LIBEXEC"},{"file": 72,"line": 250,"col": 4,"docs": " Illegal byte sequence","name": "ILSEQ"},{"file": 72,"line": 253,"col": 4,"docs": " Interrupted system call should be restarted","name": "RESTART"},{"file": 72,"line": 256,"col": 4,"docs": " Streams pipe error","name": "STRPIPE"},{"file": 72,"line": 259,"col": 4,"docs": " Too many users","name": "USERS"},{"file": 72,"line": 262,"col": 4,"docs": " Socket operation on non-socket","name": "NOTSOCK"},{"file": 72,"line": 265,"col": 4,"docs": " Destination address required","name": "DESTADDRREQ"},{"file": 72,"line": 268,"col": 4,"docs": " Message too long","name": "MSGSIZE"},{"file": 72,"line": 271,"col": 4,"docs": " Protocol wrong type for socket","name": "PROTOTYPE"},{"file": 72,"line": 274,"col": 4,"docs": " Protocol not available","name": "NOPROTOOPT"},{"file": 72,"line": 277,"col": 4,"docs": " Protocol not supported","name": "PROTONOSUPPORT"},{"file": 72,"line": 280,"col": 4,"docs": " Socket type not supported","name": "SOCKTNOSUPPORT"},{"file": 72,"line": 284,"col": 4,"docs": " Operation not supported on transport endpoint This code also means `NOTSUP`.","name": "OPNOTSUPP"},{"file": 72,"line": 287,"col": 4,"docs": " Protocol family not supported","name": "PFNOSUPPORT"},{"file": 72,"line": 290,"col": 4,"docs": " Address family not supported by protocol","name": "AFNOSUPPORT"},{"file": 72,"line": 293,"col": 4,"docs": " Address already in use","name": "ADDRINUSE"},{"file": 72,"line": 296,"col": 4,"docs": " Cannot assign requested address","name": "ADDRNOTAVAIL"},{"file": 72,"line": 299,"col": 4,"docs": " Network is down","name": "NETDOWN"},{"file": 72,"line": 302,"col": 4,"docs": " Network is unreachable","name": "NETUNREACH"},{"file": 72,"line": 305,"col": 4,"docs": " Network dropped connection because of reset","name": "NETRESET"},{"file": 72,"line": 308,"col": 4,"docs": " Software caused connection abort","name": "CONNABORTED"},{"file": 72,"line": 311,"col": 4,"docs": " Connection reset by peer","name": "CONNRESET"},{"file": 72,"line": 314,"col": 4,"docs": " No buffer space available","name": "NOBUFS"},{"file": 72,"line": 317,"col": 4,"docs": " Transport endpoint is already connected","name": "ISCONN"},{"file": 72,"line": 320,"col": 4,"docs": " Transport endpoint is not connected","name": "NOTCONN"},{"file": 72,"line": 323,"col": 4,"docs": " Cannot send after transport endpoint shutdown","name": "SHUTDOWN"},{"file": 72,"line": 326,"col": 4,"docs": " Too many references: cannot splice","name": "TOOMANYREFS"},{"file": 72,"line": 329,"col": 4,"docs": " Connection timed out","name": "TIMEDOUT"},{"file": 72,"line": 332,"col": 4,"docs": " Connection refused","name": "CONNREFUSED"},{"file": 72,"line": 335,"col": 4,"docs": " Host is down","name": "HOSTDOWN"},{"file": 72,"line": 338,"col": 4,"docs": " No route to host","name": "HOSTUNREACH"},{"file": 72,"line": 341,"col": 4,"docs": " Operation already in progress","name": "ALREADY"},{"file": 72,"line": 344,"col": 4,"docs": " Operation now in progress","name": "INPROGRESS"},{"file": 72,"line": 347,"col": 4,"docs": " Stale NFS file handle","name": "STALE"},{"file": 72,"line": 350,"col": 4,"docs": " Structure needs cleaning","name": "UCLEAN"},{"file": 72,"line": 353,"col": 4,"docs": " Not a XENIX named type file","name": "NOTNAM"},{"file": 72,"line": 356,"col": 4,"docs": " No XENIX semaphores available","name": "NAVAIL"},{"file": 72,"line": 359,"col": 4,"docs": " Is a named type file","name": "ISNAM"},{"file": 72,"line": 362,"col": 4,"docs": " Remote I/O error","name": "REMOTEIO"},{"file": 72,"line": 365,"col": 4,"docs": " Quota exceeded","name": "DQUOT"},{"file": 72,"line": 368,"col": 4,"docs": " No medium found","name": "NOMEDIUM"},{"file": 72,"line": 371,"col": 4,"docs": " Wrong medium type","name": "MEDIUMTYPE"},{"file": 72,"line": 374,"col": 4,"docs": " Operation canceled","name": "CANCELED"},{"file": 72,"line": 377,"col": 4,"docs": " Required key not available","name": "NOKEY"},{"file": 72,"line": 380,"col": 4,"docs": " Key has expired","name": "KEYEXPIRED"},{"file": 72,"line": 383,"col": 4,"docs": " Key has been revoked","name": "KEYREVOKED"},{"file": 72,"line": 386,"col": 4,"docs": " Key was rejected by service","name": "KEYREJECTED"},{"file": 72,"line": 391,"col": 4,"docs": " Owner died","name": "OWNERDEAD"},{"file": 72,"line": 394,"col": 4,"docs": " State not recoverable","name": "NOTRECOVERABLE"},{"file": 72,"line": 397,"col": 4,"docs": " Operation not possible due to RF-kill","name": "RFKILL"},{"file": 72,"line": 400,"col": 4,"docs": " Memory page has hardware error","name": "HWPOISON"},{"file": 72,"line": 405,"col": 4,"docs": " DNS server returned answer with no data","name": "NSRNODATA"},{"file": 72,"line": 408,"col": 4,"docs": " DNS server claims query was misformatted","name": "NSRFORMERR"},{"file": 72,"line": 411,"col": 4,"docs": " DNS server returned general failure","name": "NSRSERVFAIL"},{"file": 72,"line": 414,"col": 4,"docs": " Domain name not found","name": "NSRNOTFOUND"},{"file": 72,"line": 417,"col": 4,"docs": " DNS server does not implement requested operation","name": "NSRNOTIMP"},{"file": 72,"line": 420,"col": 4,"docs": " DNS server refused query","name": "NSRREFUSED"},{"file": 72,"line": 423,"col": 4,"docs": " Misformatted DNS query","name": "NSRBADQUERY"},{"file": 72,"line": 426,"col": 4,"docs": " Misformatted domain name","name": "NSRBADNAME"},{"file": 72,"line": 429,"col": 4,"docs": " Unsupported address family","name": "NSRBADFAMILY"},{"file": 72,"line": 432,"col": 4,"docs": " Misformatted DNS reply","name": "NSRBADRESP"},{"file": 72,"line": 435,"col": 4,"docs": " Could not contact DNS servers","name": "NSRCONNREFUSED"},{"file": 72,"line": 438,"col": 4,"docs": " Timeout while contacting DNS servers","name": "NSRTIMEOUT"},{"file": 72,"line": 441,"col": 4,"docs": " End of file","name": "NSROF"},{"file": 72,"line": 444,"col": 4,"docs": " Error reading file","name": "NSRFILE"},{"file": 72,"line": 447,"col": 4,"docs": " Out of memory","name": "NSRNOMEM"},{"file": 72,"line": 450,"col": 4,"docs": " Application terminated lookup","name": "NSRDESTRUCTION"},{"file": 72,"line": 453,"col": 4,"docs": " Domain name is too long","name": "NSRQUERYDOMAINTOOLONG"},{"file": 72,"line": 456,"col": 4,"docs": " Domain name is too long","name": "NSRCNAMELOOP"},{"file": 72,"line": 458,"col": 4,"name": "_"},{"file": 15,"line": 63,"col": 8,"name": "unlocked"},{"file": 15,"line": 64,"col": 8,"name": "locked"},{"file": 15,"line": 65,"col": 8,"name": "waiting"},{"file": 39,"line": 734,"col": 24,"name": "lower"},{"file": 39,"line": 734,"col": 31,"name": "upper"},{"file": 36,"line": 988,"col": 4,"name": "allocator"},{"file": 36,"line": 989,"col": 4,"name": "address_map"},{"file": 56,"line": 8,"col": 4,"name": "allocator"},{"file": 56,"line": 10,"col": 4,"name": "child_allocator"},{"file": 56,"line": 11,"col": 4,"name": "state"},{"file": 55,"line": 259,"col": 25,"name": "exact"},{"file": 55,"line": 259,"col": 32,"name": "at_least"},{"file": 36,"line": 491,"col": 8,"name": "Red"},{"file": 36,"line": 492,"col": 8,"name": "Green"},{"file": 36,"line": 493,"col": 8,"name": "Cyan"},{"file": 36,"line": 494,"col": 8,"name": "White"},{"file": 36,"line": 495,"col": 8,"name": "Dim"},{"file": 36,"line": 496,"col": 8,"name": "Bold"},{"file": 36,"line": 497,"col": 8,"name": "Reset"},{"file": 36,"line": 28,"col": 4,"name": "line"},{"file": 36,"line": 29,"col": 4,"name": "column"},{"file": 36,"line": 30,"col": 4,"name": "file_name"},{"file": 36,"line": 31,"col": 4,"name": "allocator"},{"file": 65,"line": 64,"col": 35,"name": "event_set"},{"file": 65,"line": 64,"col": 46,"name": "timed_out"},{"file": 20,"line": 121,"col": 4,"name": "read"},{"file": 20,"line": 122,"col": 4,"name": "write"},{"file": 20,"line": 123,"col": 4,"name": "open"},{"file": 20,"line": 124,"col": 4,"name": "close"},{"file": 20,"line": 125,"col": 4,"name": "stat"},{"file": 20,"line": 126,"col": 4,"name": "fstat"},{"file": 20,"line": 127,"col": 4,"name": "lstat"},{"file": 20,"line": 128,"col": 4,"name": "poll"},{"file": 20,"line": 129,"col": 4,"name": "lseek"},{"file": 20,"line": 130,"col": 4,"name": "mmap"},{"file": 20,"line": 131,"col": 4,"name": "mprotect"},{"file": 20,"line": 132,"col": 4,"name": "munmap"},{"file": 20,"line": 133,"col": 4,"name": "brk"},{"file": 20,"line": 134,"col": 4,"name": "rt_sigaction"},{"file": 20,"line": 135,"col": 4,"name": "rt_sigprocmask"},{"file": 20,"line": 136,"col": 4,"name": "rt_sigreturn"},{"file": 20,"line": 137,"col": 4,"name": "ioctl"},{"file": 20,"line": 138,"col": 4,"name": "pread"},{"file": 20,"line": 139,"col": 4,"name": "pwrite"},{"file": 20,"line": 140,"col": 4,"name": "readv"},{"file": 20,"line": 141,"col": 4,"name": "writev"},{"file": 20,"line": 142,"col": 4,"name": "access"},{"file": 20,"line": 143,"col": 4,"name": "pipe"},{"file": 20,"line": 144,"col": 4,"name": "select"},{"file": 20,"line": 145,"col": 4,"name": "sched_yield"},{"file": 20,"line": 146,"col": 4,"name": "mremap"},{"file": 20,"line": 147,"col": 4,"name": "msync"},{"file": 20,"line": 148,"col": 4,"name": "mincore"},{"file": 20,"line": 149,"col": 4,"name": "madvise"},{"file": 20,"line": 150,"col": 4,"name": "shmget"},{"file": 20,"line": 151,"col": 4,"name": "shmat"},{"file": 20,"line": 152,"col": 4,"name": "shmctl"},{"file": 20,"line": 153,"col": 4,"name": "dup"},{"file": 20,"line": 154,"col": 4,"name": "dup2"},{"file": 20,"line": 155,"col": 4,"name": "pause"},{"file": 20,"line": 156,"col": 4,"name": "nanosleep"},{"file": 20,"line": 157,"col": 4,"name": "getitimer"},{"file": 20,"line": 158,"col": 4,"name": "alarm"},{"file": 20,"line": 159,"col": 4,"name": "setitimer"},{"file": 20,"line": 160,"col": 4,"name": "getpid"},{"file": 20,"line": 161,"col": 4,"name": "sendfile"},{"file": 20,"line": 162,"col": 4,"name": "socket"},{"file": 20,"line": 163,"col": 4,"name": "connect"},{"file": 20,"line": 164,"col": 4,"name": "accept"},{"file": 20,"line": 165,"col": 4,"name": "sendto"},{"file": 20,"line": 166,"col": 4,"name": "recvfrom"},{"file": 20,"line": 167,"col": 4,"name": "sendmsg"},{"file": 20,"line": 168,"col": 4,"name": "recvmsg"},{"file": 20,"line": 169,"col": 4,"name": "shutdown"},{"file": 20,"line": 170,"col": 4,"name": "bind"},{"file": 20,"line": 171,"col": 4,"name": "listen"},{"file": 20,"line": 172,"col": 4,"name": "getsockname"},{"file": 20,"line": 173,"col": 4,"name": "getpeername"},{"file": 20,"line": 174,"col": 4,"name": "socketpair"},{"file": 20,"line": 175,"col": 4,"name": "setsockopt"},{"file": 20,"line": 176,"col": 4,"name": "getsockopt"},{"file": 20,"line": 177,"col": 4,"name": "clone"},{"file": 20,"line": 178,"col": 4,"name": "fork"},{"file": 20,"line": 179,"col": 4,"name": "vfork"},{"file": 20,"line": 180,"col": 4,"name": "execve"},{"file": 20,"line": 181,"col": 4,"name": "exit"},{"file": 20,"line": 182,"col": 4,"name": "wait4"},{"file": 20,"line": 183,"col": 4,"name": "kill"},{"file": 20,"line": 184,"col": 4,"name": "uname"},{"file": 20,"line": 185,"col": 4,"name": "semget"},{"file": 20,"line": 186,"col": 4,"name": "semop"},{"file": 20,"line": 187,"col": 4,"name": "semctl"},{"file": 20,"line": 188,"col": 4,"name": "shmdt"},{"file": 20,"line": 189,"col": 4,"name": "msgget"},{"file": 20,"line": 190,"col": 4,"name": "msgsnd"},{"file": 20,"line": 191,"col": 4,"name": "msgrcv"},{"file": 20,"line": 192,"col": 4,"name": "msgctl"},{"file": 20,"line": 193,"col": 4,"name": "fcntl"},{"file": 20,"line": 194,"col": 4,"name": "flock"},{"file": 20,"line": 195,"col": 4,"name": "fsync"},{"file": 20,"line": 196,"col": 4,"name": "fdatasync"},{"file": 20,"line": 197,"col": 4,"name": "truncate"},{"file": 20,"line": 198,"col": 4,"name": "ftruncate"},{"file": 20,"line": 199,"col": 4,"name": "getdents"},{"file": 20,"line": 200,"col": 4,"name": "getcwd"},{"file": 20,"line": 201,"col": 4,"name": "chdir"},{"file": 20,"line": 202,"col": 4,"name": "fchdir"},{"file": 20,"line": 203,"col": 4,"name": "rename"},{"file": 20,"line": 204,"col": 4,"name": "mkdir"},{"file": 20,"line": 205,"col": 4,"name": "rmdir"},{"file": 20,"line": 206,"col": 4,"name": "creat"},{"file": 20,"line": 207,"col": 4,"name": "link"},{"file": 20,"line": 208,"col": 4,"name": "unlink"},{"file": 20,"line": 209,"col": 4,"name": "symlink"},{"file": 20,"line": 210,"col": 4,"name": "readlink"},{"file": 20,"line": 211,"col": 4,"name": "chmod"},{"file": 20,"line": 212,"col": 4,"name": "fchmod"},{"file": 20,"line": 213,"col": 4,"name": "chown"},{"file": 20,"line": 214,"col": 4,"name": "fchown"},{"file": 20,"line": 215,"col": 4,"name": "lchown"},{"file": 20,"line": 216,"col": 4,"name": "umask"},{"file": 20,"line": 217,"col": 4,"name": "gettimeofday"},{"file": 20,"line": 218,"col": 4,"name": "getrlimit"},{"file": 20,"line": 219,"col": 4,"name": "getrusage"},{"file": 20,"line": 220,"col": 4,"name": "sysinfo"},{"file": 20,"line": 221,"col": 4,"name": "times"},{"file": 20,"line": 222,"col": 4,"name": "ptrace"},{"file": 20,"line": 223,"col": 4,"name": "getuid"},{"file": 20,"line": 224,"col": 4,"name": "syslog"},{"file": 20,"line": 225,"col": 4,"name": "getgid"},{"file": 20,"line": 226,"col": 4,"name": "setuid"},{"file": 20,"line": 227,"col": 4,"name": "setgid"},{"file": 20,"line": 228,"col": 4,"name": "geteuid"},{"file": 20,"line": 229,"col": 4,"name": "getegid"},{"file": 20,"line": 230,"col": 4,"name": "setpgid"},{"file": 20,"line": 231,"col": 4,"name": "getppid"},{"file": 20,"line": 232,"col": 4,"name": "getpgrp"},{"file": 20,"line": 233,"col": 4,"name": "setsid"},{"file": 20,"line": 234,"col": 4,"name": "setreuid"},{"file": 20,"line": 235,"col": 4,"name": "setregid"},{"file": 20,"line": 236,"col": 4,"name": "getgroups"},{"file": 20,"line": 237,"col": 4,"name": "setgroups"},{"file": 20,"line": 238,"col": 4,"name": "setresuid"},{"file": 20,"line": 239,"col": 4,"name": "getresuid"},{"file": 20,"line": 240,"col": 4,"name": "setresgid"},{"file": 20,"line": 241,"col": 4,"name": "getresgid"},{"file": 20,"line": 242,"col": 4,"name": "getpgid"},{"file": 20,"line": 243,"col": 4,"name": "setfsuid"},{"file": 20,"line": 244,"col": 4,"name": "setfsgid"},{"file": 20,"line": 245,"col": 4,"name": "getsid"},{"file": 20,"line": 246,"col": 4,"name": "capget"},{"file": 20,"line": 247,"col": 4,"name": "capset"},{"file": 20,"line": 248,"col": 4,"name": "rt_sigpending"},{"file": 20,"line": 249,"col": 4,"name": "rt_sigtimedwait"},{"file": 20,"line": 250,"col": 4,"name": "rt_sigqueueinfo"},{"file": 20,"line": 251,"col": 4,"name": "rt_sigsuspend"},{"file": 20,"line": 252,"col": 4,"name": "sigaltstack"},{"file": 20,"line": 253,"col": 4,"name": "utime"},{"file": 20,"line": 254,"col": 4,"name": "mknod"},{"file": 20,"line": 255,"col": 4,"name": "uselib"},{"file": 20,"line": 256,"col": 4,"name": "personality"},{"file": 20,"line": 257,"col": 4,"name": "ustat"},{"file": 20,"line": 258,"col": 4,"name": "statfs"},{"file": 20,"line": 259,"col": 4,"name": "fstatfs"},{"file": 20,"line": 260,"col": 4,"name": "sysfs"},{"file": 20,"line": 261,"col": 4,"name": "getpriority"},{"file": 20,"line": 262,"col": 4,"name": "setpriority"},{"file": 20,"line": 263,"col": 4,"name": "sched_setparam"},{"file": 20,"line": 264,"col": 4,"name": "sched_getparam"},{"file": 20,"line": 265,"col": 4,"name": "sched_setscheduler"},{"file": 20,"line": 266,"col": 4,"name": "sched_getscheduler"},{"file": 20,"line": 267,"col": 4,"name": "sched_get_priority_max"},{"file": 20,"line": 268,"col": 4,"name": "sched_get_priority_min"},{"file": 20,"line": 269,"col": 4,"name": "sched_rr_get_interval"},{"file": 20,"line": 270,"col": 4,"name": "mlock"},{"file": 20,"line": 271,"col": 4,"name": "munlock"},{"file": 20,"line": 272,"col": 4,"name": "mlockall"},{"file": 20,"line": 273,"col": 4,"name": "munlockall"},{"file": 20,"line": 274,"col": 4,"name": "vhangup"},{"file": 20,"line": 275,"col": 4,"name": "modify_ldt"},{"file": 20,"line": 276,"col": 4,"name": "pivot_root"},{"file": 20,"line": 277,"col": 4,"name": "_sysctl"},{"file": 20,"line": 278,"col": 4,"name": "prctl"},{"file": 20,"line": 279,"col": 4,"name": "arch_prctl"},{"file": 20,"line": 280,"col": 4,"name": "adjtimex"},{"file": 20,"line": 281,"col": 4,"name": "setrlimit"},{"file": 20,"line": 282,"col": 4,"name": "chroot"},{"file": 20,"line": 283,"col": 4,"name": "sync"},{"file": 20,"line": 284,"col": 4,"name": "acct"},{"file": 20,"line": 285,"col": 4,"name": "settimeofday"},{"file": 20,"line": 286,"col": 4,"name": "mount"},{"file": 20,"line": 287,"col": 4,"name": "umount2"},{"file": 20,"line": 288,"col": 4,"name": "swapon"},{"file": 20,"line": 289,"col": 4,"name": "swapoff"},{"file": 20,"line": 290,"col": 4,"name": "reboot"},{"file": 20,"line": 291,"col": 4,"name": "sethostname"},{"file": 20,"line": 292,"col": 4,"name": "setdomainname"},{"file": 20,"line": 293,"col": 4,"name": "iopl"},{"file": 20,"line": 294,"col": 4,"name": "ioperm"},{"file": 20,"line": 295,"col": 4,"name": "create_module"},{"file": 20,"line": 296,"col": 4,"name": "init_module"},{"file": 20,"line": 297,"col": 4,"name": "delete_module"},{"file": 20,"line": 298,"col": 4,"name": "get_kernel_syms"},{"file": 20,"line": 299,"col": 4,"name": "query_module"},{"file": 20,"line": 300,"col": 4,"name": "quotactl"},{"file": 20,"line": 301,"col": 4,"name": "nfsservctl"},{"file": 20,"line": 302,"col": 4,"name": "getpmsg"},{"file": 20,"line": 303,"col": 4,"name": "putpmsg"},{"file": 20,"line": 304,"col": 4,"name": "afs_syscall"},{"file": 20,"line": 305,"col": 4,"name": "tuxcall"},{"file": 20,"line": 306,"col": 4,"name": "security"},{"file": 20,"line": 307,"col": 4,"name": "gettid"},{"file": 20,"line": 308,"col": 4,"name": "readahead"},{"file": 20,"line": 309,"col": 4,"name": "setxattr"},{"file": 20,"line": 310,"col": 4,"name": "lsetxattr"},{"file": 20,"line": 311,"col": 4,"name": "fsetxattr"},{"file": 20,"line": 312,"col": 4,"name": "getxattr"},{"file": 20,"line": 313,"col": 4,"name": "lgetxattr"},{"file": 20,"line": 314,"col": 4,"name": "fgetxattr"},{"file": 20,"line": 315,"col": 4,"name": "listxattr"},{"file": 20,"line": 316,"col": 4,"name": "llistxattr"},{"file": 20,"line": 317,"col": 4,"name": "flistxattr"},{"file": 20,"line": 318,"col": 4,"name": "removexattr"},{"file": 20,"line": 319,"col": 4,"name": "lremovexattr"},{"file": 20,"line": 320,"col": 4,"name": "fremovexattr"},{"file": 20,"line": 321,"col": 4,"name": "tkill"},{"file": 20,"line": 322,"col": 4,"name": "time"},{"file": 20,"line": 323,"col": 4,"name": "futex"},{"file": 20,"line": 324,"col": 4,"name": "sched_setaffinity"},{"file": 20,"line": 325,"col": 4,"name": "sched_getaffinity"},{"file": 20,"line": 326,"col": 4,"name": "set_thread_area"},{"file": 20,"line": 327,"col": 4,"name": "io_setup"},{"file": 20,"line": 328,"col": 4,"name": "io_destroy"},{"file": 20,"line": 329,"col": 4,"name": "io_getevents"},{"file": 20,"line": 330,"col": 4,"name": "io_submit"},{"file": 20,"line": 331,"col": 4,"name": "io_cancel"},{"file": 20,"line": 332,"col": 4,"name": "get_thread_area"},{"file": 20,"line": 333,"col": 4,"name": "lookup_dcookie"},{"file": 20,"line": 334,"col": 4,"name": "epoll_create"},{"file": 20,"line": 335,"col": 4,"name": "epoll_ctl_old"},{"file": 20,"line": 336,"col": 4,"name": "epoll_wait_old"},{"file": 20,"line": 337,"col": 4,"name": "remap_file_pages"},{"file": 20,"line": 338,"col": 4,"name": "getdents64"},{"file": 20,"line": 339,"col": 4,"name": "set_tid_address"},{"file": 20,"line": 340,"col": 4,"name": "restart_syscall"},{"file": 20,"line": 341,"col": 4,"name": "semtimedop"},{"file": 20,"line": 342,"col": 4,"name": "fadvise64"},{"file": 20,"line": 343,"col": 4,"name": "timer_create"},{"file": 20,"line": 344,"col": 4,"name": "timer_settime"},{"file": 20,"line": 345,"col": 4,"name": "timer_gettime"},{"file": 20,"line": 346,"col": 4,"name": "timer_getoverrun"},{"file": 20,"line": 347,"col": 4,"name": "timer_delete"},{"file": 20,"line": 348,"col": 4,"name": "clock_settime"},{"file": 20,"line": 349,"col": 4,"name": "clock_gettime"},{"file": 20,"line": 350,"col": 4,"name": "clock_getres"},{"file": 20,"line": 351,"col": 4,"name": "clock_nanosleep"},{"file": 20,"line": 352,"col": 4,"name": "exit_group"},{"file": 20,"line": 353,"col": 4,"name": "epoll_wait"},{"file": 20,"line": 354,"col": 4,"name": "epoll_ctl"},{"file": 20,"line": 355,"col": 4,"name": "tgkill"},{"file": 20,"line": 356,"col": 4,"name": "utimes"},{"file": 20,"line": 357,"col": 4,"name": "vserver"},{"file": 20,"line": 358,"col": 4,"name": "mbind"},{"file": 20,"line": 359,"col": 4,"name": "set_mempolicy"},{"file": 20,"line": 360,"col": 4,"name": "get_mempolicy"},{"file": 20,"line": 361,"col": 4,"name": "mq_open"},{"file": 20,"line": 362,"col": 4,"name": "mq_unlink"},{"file": 20,"line": 363,"col": 4,"name": "mq_timedsend"},{"file": 20,"line": 364,"col": 4,"name": "mq_timedreceive"},{"file": 20,"line": 365,"col": 4,"name": "mq_notify"},{"file": 20,"line": 366,"col": 4,"name": "mq_getsetattr"},{"file": 20,"line": 367,"col": 4,"name": "kexec_load"},{"file": 20,"line": 368,"col": 4,"name": "waitid"},{"file": 20,"line": 369,"col": 4,"name": "add_key"},{"file": 20,"line": 370,"col": 4,"name": "request_key"},{"file": 20,"line": 371,"col": 4,"name": "keyctl"},{"file": 20,"line": 372,"col": 4,"name": "ioprio_set"},{"file": 20,"line": 373,"col": 4,"name": "ioprio_get"},{"file": 20,"line": 374,"col": 4,"name": "inotify_init"},{"file": 20,"line": 375,"col": 4,"name": "inotify_add_watch"},{"file": 20,"line": 376,"col": 4,"name": "inotify_rm_watch"},{"file": 20,"line": 377,"col": 4,"name": "migrate_pages"},{"file": 20,"line": 378,"col": 4,"name": "openat"},{"file": 20,"line": 379,"col": 4,"name": "mkdirat"},{"file": 20,"line": 380,"col": 4,"name": "mknodat"},{"file": 20,"line": 381,"col": 4,"name": "fchownat"},{"file": 20,"line": 382,"col": 4,"name": "futimesat"},{"file": 20,"line": 383,"col": 4,"name": "fstatat"},{"file": 20,"line": 384,"col": 4,"name": "unlinkat"},{"file": 20,"line": 385,"col": 4,"name": "renameat"},{"file": 20,"line": 386,"col": 4,"name": "linkat"},{"file": 20,"line": 387,"col": 4,"name": "symlinkat"},{"file": 20,"line": 388,"col": 4,"name": "readlinkat"},{"file": 20,"line": 389,"col": 4,"name": "fchmodat"},{"file": 20,"line": 390,"col": 4,"name": "faccessat"},{"file": 20,"line": 391,"col": 4,"name": "pselect6"},{"file": 20,"line": 392,"col": 4,"name": "ppoll"},{"file": 20,"line": 393,"col": 4,"name": "unshare"},{"file": 20,"line": 394,"col": 4,"name": "set_robust_list"},{"file": 20,"line": 395,"col": 4,"name": "get_robust_list"},{"file": 20,"line": 396,"col": 4,"name": "splice"},{"file": 20,"line": 397,"col": 4,"name": "tee"},{"file": 20,"line": 398,"col": 4,"name": "sync_file_range"},{"file": 20,"line": 399,"col": 4,"name": "vmsplice"},{"file": 20,"line": 400,"col": 4,"name": "move_pages"},{"file": 20,"line": 401,"col": 4,"name": "utimensat"},{"file": 20,"line": 402,"col": 4,"name": "epoll_pwait"},{"file": 20,"line": 403,"col": 4,"name": "signalfd"},{"file": 20,"line": 404,"col": 4,"name": "timerfd_create"},{"file": 20,"line": 405,"col": 4,"name": "eventfd"},{"file": 20,"line": 406,"col": 4,"name": "fallocate"},{"file": 20,"line": 407,"col": 4,"name": "timerfd_settime"},{"file": 20,"line": 408,"col": 4,"name": "timerfd_gettime"},{"file": 20,"line": 409,"col": 4,"name": "accept4"},{"file": 20,"line": 410,"col": 4,"name": "signalfd4"},{"file": 20,"line": 411,"col": 4,"name": "eventfd2"},{"file": 20,"line": 412,"col": 4,"name": "epoll_create1"},{"file": 20,"line": 413,"col": 4,"name": "dup3"},{"file": 20,"line": 414,"col": 4,"name": "pipe2"},{"file": 20,"line": 415,"col": 4,"name": "inotify_init1"},{"file": 20,"line": 416,"col": 4,"name": "preadv"},{"file": 20,"line": 417,"col": 4,"name": "pwritev"},{"file": 20,"line": 418,"col": 4,"name": "rt_tgsigqueueinfo"},{"file": 20,"line": 419,"col": 4,"name": "perf_event_open"},{"file": 20,"line": 420,"col": 4,"name": "recvmmsg"},{"file": 20,"line": 421,"col": 4,"name": "fanotify_init"},{"file": 20,"line": 422,"col": 4,"name": "fanotify_mark"},{"file": 20,"line": 423,"col": 4,"name": "prlimit64"},{"file": 20,"line": 424,"col": 4,"name": "name_to_handle_at"},{"file": 20,"line": 425,"col": 4,"name": "open_by_handle_at"},{"file": 20,"line": 426,"col": 4,"name": "clock_adjtime"},{"file": 20,"line": 427,"col": 4,"name": "syncfs"},{"file": 20,"line": 428,"col": 4,"name": "sendmmsg"},{"file": 20,"line": 429,"col": 4,"name": "setns"},{"file": 20,"line": 430,"col": 4,"name": "getcpu"},{"file": 20,"line": 431,"col": 4,"name": "process_vm_readv"},{"file": 20,"line": 432,"col": 4,"name": "process_vm_writev"},{"file": 20,"line": 433,"col": 4,"name": "kcmp"},{"file": 20,"line": 434,"col": 4,"name": "finit_module"},{"file": 20,"line": 435,"col": 4,"name": "sched_setattr"},{"file": 20,"line": 436,"col": 4,"name": "sched_getattr"},{"file": 20,"line": 437,"col": 4,"name": "renameat2"},{"file": 20,"line": 438,"col": 4,"name": "seccomp"},{"file": 20,"line": 439,"col": 4,"name": "getrandom"},{"file": 20,"line": 440,"col": 4,"name": "memfd_create"},{"file": 20,"line": 441,"col": 4,"name": "kexec_file_load"},{"file": 20,"line": 442,"col": 4,"name": "bpf"},{"file": 20,"line": 443,"col": 4,"name": "execveat"},{"file": 20,"line": 444,"col": 4,"name": "userfaultfd"},{"file": 20,"line": 445,"col": 4,"name": "membarrier"},{"file": 20,"line": 446,"col": 4,"name": "mlock2"},{"file": 20,"line": 447,"col": 4,"name": "copy_file_range"},{"file": 20,"line": 448,"col": 4,"name": "preadv2"},{"file": 20,"line": 449,"col": 4,"name": "pwritev2"},{"file": 20,"line": 450,"col": 4,"name": "pkey_mprotect"},{"file": 20,"line": 451,"col": 4,"name": "pkey_alloc"},{"file": 20,"line": 452,"col": 4,"name": "pkey_free"},{"file": 20,"line": 453,"col": 4,"name": "statx"},{"file": 20,"line": 454,"col": 4,"name": "io_pgetevents"},{"file": 20,"line": 455,"col": 4,"name": "rseq"},{"file": 20,"line": 456,"col": 4,"name": "pidfd_send_signal"},{"file": 20,"line": 457,"col": 4,"name": "io_uring_setup"},{"file": 20,"line": 458,"col": 4,"name": "io_uring_enter"},{"file": 20,"line": 459,"col": 4,"name": "io_uring_register"},{"file": 20,"line": 460,"col": 4,"name": "open_tree"},{"file": 20,"line": 461,"col": 4,"name": "move_mount"},{"file": 20,"line": 462,"col": 4,"name": "fsopen"},{"file": 20,"line": 463,"col": 4,"name": "fsconfig"},{"file": 20,"line": 464,"col": 4,"name": "fsmount"},{"file": 20,"line": 465,"col": 4,"name": "fspick"},{"file": 20,"line": 466,"col": 4,"name": "pidfd_open"},{"file": 20,"line": 467,"col": 4,"name": "clone3"},{"file": 20,"line": 468,"col": 4,"name": "close_range"},{"file": 20,"line": 469,"col": 4,"name": "openat2"},{"file": 20,"line": 470,"col": 4,"name": "pidfd_getfd"},{"file": 20,"line": 471,"col": 4,"name": "faccessat2"},{"file": 20,"line": 472,"col": 4,"name": "process_madvise"},{"file": 20,"line": 473,"col": 4,"name": "epoll_pwait2"},{"file": 20,"line": 474,"col": 4,"name": "mount_setattr"},{"file": 20,"line": 475,"col": 4,"name": "landlock_create_ruleset"},{"file": 20,"line": 476,"col": 4,"name": "landlock_add_rule"},{"file": 20,"line": 477,"col": 4,"name": "landlock_restrict_self"},{"file": 20,"line": 478,"col": 4,"name": "memfd_secret"},{"file": 20,"line": 480,"col": 4,"name": "_"},{"file": 56,"line": 16,"col": 8,"name": "buffer_list"},{"file": 56,"line": 17,"col": 8,"name": "end_index"},{"file": 59,"line": 4333,"col": 4,"name": "tv_sec"},{"file": 59,"line": 4334,"col": 4,"name": "tv_nsec"},{"file": 57,"line": 38,"col": 4,"name": "seed"},{"file": 57,"line": 39,"col": 4,"name": "msg_len"},{"file": 29,"line": 5,"col": 4,"name": "data"},{"file": 6,"line": 839,"col": 12,"name": "key_ptr"},{"file": 6,"line": 840,"col": 12,"name": "value_ptr"},{"file": 6,"line": 841,"col": 12,"name": "found_existing"},{"file": 57,"line": 131,"col": 4,"name": "state"},{"file": 57,"line": 133,"col": 4,"name": "buf"},{"file": 57,"line": 134,"col": 4,"name": "buf_len"},{"file": 50,"line": 110,"col": 4,"name": "size"},{"file": 50,"line": 111,"col": 4,"name": "power_of_two"},{"file": 50,"line": 112,"col": 4,"name": "numerator"},{"file": 50,"line": 113,"col": 4,"name": "decimal"},{"file": 50,"line": 114,"col": 4,"name": "denominator"},{"file": 50,"line": 115,"col": 4,"name": "decimal_step"},{"file": 50,"line": 116,"col": 4,"name": "numerator_step"},{"file": 50,"line": 94,"col": 4,"name": "start"},{"file": 50,"line": 95,"col": 4,"name": "end"},{"file": 5,"line": 37,"col": 8,"name": "BlockDevice"},{"file": 5,"line": 38,"col": 8,"name": "CharacterDevice"},{"file": 5,"line": 39,"col": 8,"name": "Directory"},{"file": 5,"line": 40,"col": 8,"name": "NamedPipe"},{"file": 5,"line": 41,"col": 8,"name": "SymLink"},{"file": 5,"line": 42,"col": 8,"name": "File"},{"file": 5,"line": 43,"col": 8,"name": "UnixDomainSocket"},{"file": 5,"line": 44,"col": 8,"name": "Whiteout"},{"file": 5,"line": 45,"col": 8,"name": "Door"},{"file": 5,"line": 46,"col": 8,"name": "EventPort"},{"file": 5,"line": 47,"col": 8,"name": "Unknown"},{"file": 5,"line": 71,"col": 28,"name": "None"},{"file": 5,"line": 71,"col": 34,"name": "Shared"},{"file": 5,"line": 71,"col": 42,"name": "Exclusive"},{"file": 5,"line": 283,"col": 8,"docs": " A number that the system uses to point to the file metadata. This number is not guaranteed to be unique across time, as some file systems may reuse an inode after its file has been deleted. Some systems may change the inode of a file over time. On Linux, the inode is a structure that stores the metadata, and the inode _number_ is what you see here: the index number of the inode. The FileIndex on Windows is similar. It is a number for a file that is unique to each filesystem.","name": "inode"},{"file": 5,"line": 284,"col": 8,"name": "size"},{"file": 5,"line": 285,"col": 8,"name": "mode"},{"file": 5,"line": 286,"col": 8,"name": "kind"},{"file": 5,"line": 289,"col": 8,"docs": " Access time in nanoseconds, relative to UTC 1970-01-01.","name": "atime"},{"file": 5,"line": 291,"col": 8,"docs": " Last modification time in nanoseconds, relative to UTC 1970-01-01.","name": "mtime"},{"file": 5,"line": 293,"col": 8,"docs": " Creation time in nanoseconds, relative to UTC 1970-01-01.","name": "ctime"},{"file": 43,"line": 34,"col": 56,"name": "blocking"},{"file": 36,"line": 1449,"col": 8,"name": "base_address"},{"file": 36,"line": 1450,"col": 8,"name": "dwarf"},{"file": 36,"line": 1451,"col": 8,"name": "mapped_memory"},{"file": 6,"line": 727,"col": 12,"name": "values"},{"file": 6,"line": 728,"col": 12,"name": "keys"},{"file": 6,"line": 729,"col": 12,"name": "capacity"},{"file": 25,"line": 266,"col": 4,"name": "Address"},{"file": 25,"line": 267,"col": 4,"name": "Block"},{"file": 25,"line": 268,"col": 4,"name": "Const"},{"file": 25,"line": 269,"col": 4,"name": "ExprLoc"},{"file": 25,"line": 270,"col": 4,"name": "Flag"},{"file": 25,"line": 271,"col": 4,"name": "SecOffset"},{"file": 25,"line": 272,"col": 4,"name": "Ref"},{"file": 25,"line": 273,"col": 4,"name": "RefAddr"},{"file": 25,"line": 274,"col": 4,"name": "String"},{"file": 25,"line": 275,"col": 4,"name": "StrPtr"},{"file": 3,"line": 13,"col": 8,"name": "tag"},{"file": 3,"line": 14,"col": 8,"name": "version_range"},{"file": 3,"line": 461,"col": 8,"name": "none"},{"file": 3,"line": 462,"col": 8,"name": "gnu"},{"file": 3,"line": 463,"col": 8,"name": "gnuabin32"},{"file": 3,"line": 464,"col": 8,"name": "gnuabi64"},{"file": 3,"line": 465,"col": 8,"name": "gnueabi"},{"file": 3,"line": 466,"col": 8,"name": "gnueabihf"},{"file": 3,"line": 467,"col": 8,"name": "gnux32"},{"file": 3,"line": 468,"col": 8,"name": "gnuilp32"},{"file": 3,"line": 469,"col": 8,"name": "code16"},{"file": 3,"line": 470,"col": 8,"name": "eabi"},{"file": 3,"line": 471,"col": 8,"name": "eabihf"},{"file": 3,"line": 472,"col": 8,"name": "android"},{"file": 3,"line": 473,"col": 8,"name": "musl"},{"file": 3,"line": 474,"col": 8,"name": "musleabi"},{"file": 3,"line": 475,"col": 8,"name": "musleabihf"},{"file": 3,"line": 476,"col": 8,"name": "muslx32"},{"file": 3,"line": 477,"col": 8,"name": "msvc"},{"file": 3,"line": 478,"col": 8,"name": "itanium"},{"file": 3,"line": 479,"col": 8,"name": "cygnus"},{"file": 3,"line": 480,"col": 8,"name": "coreclr"},{"file": 3,"line": 481,"col": 8,"name": "simulator"},{"file": 3,"line": 482,"col": 8,"name": "macabi"},{"file": 3,"line": 564,"col": 8,"docs": " Common Object File Format (Windows)","name": "coff"},{"file": 3,"line": 566,"col": 8,"docs": " Executable and Linking Format","name": "elf"},{"file": 3,"line": 568,"col": 8,"docs": " macOS relocatables","name": "macho"},{"file": 3,"line": 570,"col": 8,"docs": " WebAssembly","name": "wasm"},{"file": 3,"line": 572,"col": 8,"docs": " C source code","name": "c"},{"file": 3,"line": 574,"col": 8,"docs": " Standard, Portable Intermediate Representation V","name": "spirv"},{"file": 3,"line": 576,"col": 8,"docs": " Intel IHEX","name": "hex"},{"file": 3,"line": 578,"col": 8,"docs": " Machine code with no metadata.","name": "raw"},{"file": 3,"line": 580,"col": 8,"docs": " Plan 9 from Bell Labs","name": "plan9"},{"file": 3,"line": 608,"col": 8,"docs": " Architecture","name": "arch"},{"file": 3,"line": 612,"col": 8,"docs": " The CPU model to target. It has a set of features which are overridden with the `features` field.","name": "model"},{"file": 3,"line": 615,"col": 8,"docs": " An explicit list of the entire CPU feature set. It may differ from the specific CPU model's features.","name": "features"},{"file": 12,"line": 226,"col": 8,"name": "signedness"},{"file": 12,"line": 227,"col": 8,"name": "bits"},{"file": 12,"line": 233,"col": 8,"name": "bits"},{"file": 12,"line": 239,"col": 8,"name": "size"},{"file": 12,"line": 240,"col": 8,"name": "is_const"},{"file": 12,"line": 241,"col": 8,"name": "is_volatile"},{"file": 12,"line": 242,"col": 8,"name": "alignment"},{"file": 12,"line": 243,"col": 8,"name": "address_space"},{"file": 12,"line": 244,"col": 8,"name": "child"},{"file": 12,"line": 245,"col": 8,"name": "is_allowzero"},{"file": 12,"line": 251,"col": 8,"docs": " This field is an optional type. The type of the sentinel is the element type of the pointer, which is the value of the `child` field in this struct. However there is no way to refer to that type here, so we use `anytype`.","name": "sentinel"},{"file": 12,"line": 266,"col": 8,"name": "len"},{"file": 12,"line": 267,"col": 8,"name": "child"},{"file": 12,"line": 273,"col": 8,"docs": " This field is an optional type. The type of the sentinel is the element type of the array, which is the value of the `child` field in this struct. However there is no way to refer to that type here, so we use `anytype`.","name": "sentinel"},{"file": 12,"line": 287,"col": 8,"name": "name"},{"file": 12,"line": 288,"col": 8,"name": "field_type"},{"file": 12,"line": 289,"col": 8,"name": "default_value"},{"file": 12,"line": 290,"col": 8,"name": "is_comptime"},{"file": 12,"line": 291,"col": 8,"name": "alignment"},{"file": 12,"line": 297,"col": 8,"name": "layout"},{"file": 12,"line": 298,"col": 8,"name": "fields"},{"file": 12,"line": 299,"col": 8,"name": "decls"},{"file": 12,"line": 300,"col": 8,"name": "is_tuple"},{"file": 12,"line": 306,"col": 8,"name": "child"},{"file": 12,"line": 312,"col": 8,"name": "error_set"},{"file": 12,"line": 313,"col": 8,"name": "payload"},{"file": 12,"line": 319,"col": 8,"name": "name"},{"file": 12,"line": 329,"col": 8,"name": "name"},{"file": 12,"line": 330,"col": 8,"name": "value"},{"file": 12,"line": 336,"col": 8,"name": "layout"},{"file": 12,"line": 337,"col": 8,"name": "tag_type"},{"file": 12,"line": 338,"col": 8,"name": "fields"},{"file": 12,"line": 339,"col": 8,"name": "decls"},{"file": 12,"line": 340,"col": 8,"name": "is_exhaustive"},{"file": 12,"line": 346,"col": 8,"name": "name"},{"file": 12,"line": 347,"col": 8,"name": "field_type"},{"file": 12,"line": 348,"col": 8,"name": "alignment"},{"file": 12,"line": 354,"col": 8,"name": "layout"},{"file": 12,"line": 355,"col": 8,"name": "tag_type"},{"file": 12,"line": 356,"col": 8,"name": "fields"},{"file": 12,"line": 357,"col": 8,"name": "decls"},{"file": 12,"line": 363,"col": 8,"name": "is_generic"},{"file": 12,"line": 364,"col": 8,"name": "is_noalias"},{"file": 12,"line": 365,"col": 8,"name": "arg_type"},{"file": 12,"line": 371,"col": 8,"name": "calling_convention"},{"file": 12,"line": 372,"col": 8,"name": "alignment"},{"file": 12,"line": 373,"col": 8,"name": "is_generic"},{"file": 12,"line": 374,"col": 8,"name": "is_var_args"},{"file": 12,"line": 375,"col": 8,"name": "return_type"},{"file": 12,"line": 376,"col": 8,"name": "args"},{"file": 12,"line": 382,"col": 8,"name": "decls"},{"file": 12,"line": 388,"col": 8,"name": "function"},{"file": 12,"line": 394,"col": 8,"name": "child"},{"file": 12,"line": 400,"col": 8,"name": "len"},{"file": 12,"line": 401,"col": 8,"name": "child"},{"file": 12,"line": 407,"col": 8,"name": "name"},{"file": 12,"line": 408,"col": 8,"name": "is_pub"},{"file": 12,"line": 409,"col": 8,"name": "data"},{"file": 13,"line": 20,"col": 12,"name": "next"},{"file": 13,"line": 21,"col": 12,"name": "data"},{"file": 13,"line": 167,"col": 12,"name": "prev"},{"file": 13,"line": 168,"col": 12,"name": "next"},{"file": 13,"line": 169,"col": 12,"name": "data"},{"file": 15,"line": 22,"col": 0,"name": "impl"},{"file": 17,"line": 1572,"col": 12,"name": "TickNode"},{"file": 17,"line": 1573,"col": 12,"name": "NoAction"},{"file": 17,"line": 1577,"col": 12,"name": "read"},{"file": 17,"line": 1578,"col": 12,"name": "readv"},{"file": 17,"line": 1579,"col": 12,"name": "write"},{"file": 17,"line": 1580,"col": 12,"name": "writev"},{"file": 17,"line": 1581,"col": 12,"name": "pwrite"},{"file": 17,"line": 1582,"col": 12,"name": "pwritev"},{"file": 17,"line": 1583,"col": 12,"name": "pread"},{"file": 17,"line": 1584,"col": 12,"name": "preadv"},{"file": 17,"line": 1585,"col": 12,"name": "open"},{"file": 17,"line": 1586,"col": 12,"name": "openat"},{"file": 17,"line": 1587,"col": 12,"name": "close"},{"file": 17,"line": 1588,"col": 12,"name": "faccessat"},{"file": 17,"line": 1591,"col": 12,"docs": " special - means the fs thread should exit","name": "end"},{"file": 18,"line": 18,"col": 12,"name": "next"},{"file": 18,"line": 19,"col": 12,"name": "data"},{"file": 17,"line": 43,"col": 8,"name": "id"},{"file": 17,"line": 44,"col": 8,"name": "handle"},{"file": 17,"line": 45,"col": 8,"name": "overlapped"},{"file": 22,"line": 12,"col": 30,"name": "index"},{"file": 22,"line": 12,"col": 44,"name": "value"},{"file": 35,"line": 384,"col": 4,"name": "name"},{"file": 35,"line": 385,"col": 4,"name": "misc"},{"file": 35,"line": 386,"col": 4,"name": "virtual_address"},{"file": 35,"line": 387,"col": 4,"name": "size_of_raw_data"},{"file": 35,"line": 388,"col": 4,"name": "pointer_to_raw_data"},{"file": 35,"line": 389,"col": 4,"name": "pointer_to_relocations"},{"file": 35,"line": 390,"col": 4,"name": "pointer_to_line_numbers"},{"file": 35,"line": 391,"col": 4,"name": "number_of_relocations"},{"file": 35,"line": 392,"col": 4,"name": "number_of_line_numbers"},{"file": 35,"line": 393,"col": 4,"name": "characteristics"},{"file": 0,"line": 11,"col": 26,"name": "part1"},{"file": 0,"line": 11,"col": 45,"name": "part2"},{"file": 33,"line": 34,"col": 0,"name": "impl"},{"file": 12,"line": 458,"col": 4,"name": "Exe"},{"file": 12,"line": 459,"col": 4,"name": "Lib"},{"file": 12,"line": 460,"col": 4,"name": "Obj"},{"file": 12,"line": 148,"col": 4,"name": "Debug"},{"file": 12,"line": 149,"col": 4,"name": "ReleaseSafe"},{"file": 12,"line": 150,"col": 4,"name": "ReleaseFast"},{"file": 12,"line": 151,"col": 4,"name": "ReleaseSmall"},{"file": 54,"line": 19,"col": 0,"name": "impl"},{"file": 37,"line": 605,"col": 4,"name": "p_type"},{"file": 37,"line": 606,"col": 4,"name": "p_flags"},{"file": 37,"line": 607,"col": 4,"name": "p_offset"},{"file": 37,"line": 608,"col": 4,"name": "p_vaddr"},{"file": 37,"line": 609,"col": 4,"name": "p_paddr"},{"file": 37,"line": 610,"col": 4,"name": "p_filesz"},{"file": 37,"line": 611,"col": 4,"name": "p_memsz"},{"file": 37,"line": 612,"col": 4,"name": "p_align"},{"file": 15,"line": 60,"col": 4,"name": "state"},{"file": 39,"line": 14,"col": 4,"name": "Left"},{"file": 39,"line": 15,"col": 4,"name": "Center"},{"file": 39,"line": 16,"col": 4,"name": "Right"},{"file": 55,"line": 19,"col": 0,"docs": " Attempt to allocate at least `len` bytes aligned to `ptr_align`. If `len_align` is `0`, then the length returned MUST be exactly `len` bytes, otherwise, the length must be aligned to `len_align`. `len` must be greater than or equal to `len_align` and must be aligned by `len_align`. `ret_addr` is optionally provided as the first return address of the allocation call stack. If the value is `0` it means no return address has been provided.","name": "allocFn"},{"file": 55,"line": 41,"col": 0,"docs": " Attempt to expand or shrink memory in place. `buf.len` must equal the most recent length returned by `allocFn` or `resizeFn`. `buf_align` must equal the same value that was passed as the `ptr_align` parameter to the original `allocFn` call. Passing a `new_len` of 0 frees and invalidates the buffer such that it can no longer be passed to `resizeFn`. error.OutOfMemory can only be returned if `new_len` is greater than `buf.len`. If `buf` cannot be expanded to accomodate `new_len`, then the allocation MUST be unmodified and error.OutOfMemory MUST be returned. If `len_align` is `0`, then the length returned MUST be exactly `len` bytes, otherwise, the length must be aligned to `len_align`. Note that `len_align` does *not* provide a way to modify the alignment of a pointer. Rather it provides an API for accepting more bytes of memory from the allocator than requested. `new_len` must be greater than or equal to `len_align` and must be aligned by `len_align`. `ret_addr` is optionally provided as the first return address of the allocation call stack. If the value is `0` it means no return address has been provided.","name": "resizeFn"},{"file": 59,"line": 3295,"col": 4,"name": "dlpi_addr"},{"file": 59,"line": 3296,"col": 4,"name": "dlpi_name"},{"file": 59,"line": 3297,"col": 4,"name": "dlpi_phdr"},{"file": 59,"line": 3298,"col": 4,"name": "dlpi_phnum"},{"file": 36,"line": 1156,"col": 12,"name": "address"},{"file": 36,"line": 1158,"col": 12,"name": "base_address"},{"file": 36,"line": 1159,"col": 12,"name": "name"},{"file": 25,"line": 289,"col": 4,"name": "tag_id"},{"file": 25,"line": 290,"col": 4,"name": "has_children"},{"file": 25,"line": 291,"col": 4,"name": "attrs"},{"file": 25,"line": 279,"col": 4,"name": "payload"},{"file": 25,"line": 280,"col": 4,"name": "signed"},{"file": 54,"line": 116,"col": 4,"name": "waiters"},{"file": 68,"line": 32,"col": 8,"name": "current"},{"file": 69,"line": 91,"col": 4,"name": "entries"},{"file": 69,"line": 92,"col": 4,"name": "tls_block"},{"file": 59,"line": 3400,"col": 8,"name": "signo"},{"file": 59,"line": 3401,"col": 8,"name": "errno"},{"file": 59,"line": 3402,"col": 8,"name": "code"},{"file": 59,"line": 3403,"col": 8,"name": "fields"},{"file": 12,"line": 480,"col": 4,"name": "major"},{"file": 12,"line": 481,"col": 4,"name": "minor"},{"file": 12,"line": 482,"col": 4,"name": "patch"},{"file": 25,"line": 229,"col": 4,"name": "start"},{"file": 25,"line": 230,"col": 4,"name": "end"},{"file": 3,"line": 94,"col": 12,"name": "nt4"},{"file": 3,"line": 95,"col": 12,"name": "win2k"},{"file": 3,"line": 96,"col": 12,"name": "xp"},{"file": 3,"line": 97,"col": 12,"name": "ws2003"},{"file": 3,"line": 98,"col": 12,"name": "vista"},{"file": 3,"line": 99,"col": 12,"name": "win7"},{"file": 3,"line": 100,"col": 12,"name": "win8"},{"file": 3,"line": 101,"col": 12,"name": "win8_1"},{"file": 3,"line": 102,"col": 12,"name": "win10"},{"file": 3,"line": 103,"col": 12,"name": "win10_th2"},{"file": 3,"line": 104,"col": 12,"name": "win10_rs1"},{"file": 3,"line": 105,"col": 12,"name": "win10_rs2"},{"file": 3,"line": 106,"col": 12,"name": "win10_rs3"},{"file": 3,"line": 107,"col": 12,"name": "win10_rs4"},{"file": 3,"line": 108,"col": 12,"name": "win10_rs5"},{"file": 3,"line": 109,"col": 12,"name": "win10_19h1"},{"file": 3,"line": 110,"col": 12,"name": "win10_vb"},{"file": 3,"line": 111,"col": 12,"name": "win10_mn"},{"file": 3,"line": 112,"col": 12,"name": "win10_fe"},{"file": 3,"line": 113,"col": 12,"name": "_"},{"file": 3,"line": 182,"col": 12,"name": "range"},{"file": 3,"line": 183,"col": 12,"name": "glibc"},{"file": 3,"line": 221,"col": 12,"name": "none"},{"file": 3,"line": 222,"col": 12,"name": "semver"},{"file": 3,"line": 223,"col": 12,"name": "linux"},{"file": 3,"line": 224,"col": 12,"name": "windows"},{"file": 3,"line": 620,"col": 12,"docs": " The bit index into `Set`. Has a default value of `undefined` because the canonical structures are populated via comptime logic.","name": "index"},{"file": 3,"line": 624,"col": 12,"docs": " Has a default value of `undefined` because the canonical structures are populated via comptime logic.","name": "name"},{"file": 3,"line": 628,"col": 12,"docs": " If this corresponds to an LLVM-recognized feature, this will be populated; otherwise null.","name": "llvm_name"},{"file": 3,"line": 631,"col": 12,"docs": " Human-friendly UTF-8 text.","name": "description"},{"file": 3,"line": 634,"col": 12,"docs": " Sparse `Set` of features this depends on.","name": "dependencies"},{"file": 3,"line": 1248,"col": 12,"name": "name"},{"file": 3,"line": 1249,"col": 12,"name": "llvm_name"},{"file": 3,"line": 1250,"col": 12,"name": "features"},{"file": 12,"line": 87,"col": 4,"name": "Internal"},{"file": 12,"line": 88,"col": 4,"name": "Strong"},{"file": 12,"line": 89,"col": 4,"name": "Weak"},{"file": 12,"line": 90,"col": 4,"name": "LinkOnce"},{"file": 12,"line": 96,"col": 4,"name": "Unordered"},{"file": 12,"line": 97,"col": 4,"name": "Monotonic"},{"file": 12,"line": 98,"col": 4,"name": "Acquire"},{"file": 12,"line": 99,"col": 4,"name": "Release"},{"file": 12,"line": 100,"col": 4,"name": "AcqRel"},{"file": 12,"line": 101,"col": 4,"name": "SeqCst"},{"file": 12,"line": 119,"col": 4,"name": "Xchg"},{"file": 12,"line": 120,"col": 4,"name": "Add"},{"file": 12,"line": 121,"col": 4,"name": "Sub"},{"file": 12,"line": 122,"col": 4,"name": "And"},{"file": 12,"line": 123,"col": 4,"name": "Nand"},{"file": 12,"line": 124,"col": 4,"name": "Or"},{"file": 12,"line": 125,"col": 4,"name": "Xor"},{"file": 12,"line": 126,"col": 4,"name": "Max"},{"file": 12,"line": 127,"col": 4,"name": "Min"},{"file": 12,"line": 157,"col": 4,"name": "Unspecified"},{"file": 12,"line": 158,"col": 4,"name": "C"},{"file": 12,"line": 159,"col": 4,"name": "Naked"},{"file": 12,"line": 160,"col": 4,"name": "Async"},{"file": 12,"line": 161,"col": 4,"name": "Inline"},{"file": 12,"line": 162,"col": 4,"name": "Interrupt"},{"file": 12,"line": 163,"col": 4,"name": "Signal"},{"file": 12,"line": 164,"col": 4,"name": "Stdcall"},{"file": 12,"line": 165,"col": 4,"name": "Fastcall"},{"file": 12,"line": 166,"col": 4,"name": "Vectorcall"},{"file": 12,"line": 167,"col": 4,"name": "Thiscall"},{"file": 12,"line": 168,"col": 4,"name": "APCS"},{"file": 12,"line": 169,"col": 4,"name": "AAPCS"},{"file": 12,"line": 170,"col": 4,"name": "AAPCSVFP"},{"file": 12,"line": 171,"col": 4,"name": "SysV"},{"file": 12,"line": 177,"col": 4,"name": "generic"},{"file": 12,"line": 178,"col": 4,"name": "gs"},{"file": 12,"line": 179,"col": 4,"name": "fs"},{"file": 12,"line": 180,"col": 4,"name": "ss"},{"file": 12,"line": 613,"col": 4,"name": "modifier"},{"file": 12,"line": 616,"col": 4,"docs": " Only valid when `Modifier` is `Modifier.async_kw`.","name": "stack"},{"file": 12,"line": 656,"col": 4,"name": "name"},{"file": 12,"line": 657,"col": 4,"name": "linkage"},{"file": 12,"line": 658,"col": 4,"name": "section"},{"file": 12,"line": 664,"col": 4,"name": "name"},{"file": 12,"line": 665,"col": 4,"name": "library_name"},{"file": 12,"line": 666,"col": 4,"name": "linkage"},{"file": 12,"line": 667,"col": 4,"name": "is_thread_local"},{"file": 12,"line": 414,"col": 12,"name": "Type"},{"file": 12,"line": 415,"col": 12,"name": "Var"},{"file": 12,"line": 416,"col": 12,"name": "Fn"},{"file": 17,"line": 14,"col": 4,"name": "next_tick_queue"},{"file": 17,"line": 15,"col": 4,"name": "os_data"},{"file": 17,"line": 16,"col": 4,"name": "final_resume_node"},{"file": 17,"line": 17,"col": 4,"name": "pending_event_count"},{"file": 17,"line": 18,"col": 4,"name": "extra_threads"},{"file": 17,"line": 23,"col": 4,"docs": " TODO change this to a pool of configurable number of threads and rename it to be not file-system-specific. it will become a thread pool for turning non-CPU-bound blocking things into async things. A fallback for any missing OS-specific API.","name": "fs_thread"},{"file": 17,"line": 24,"col": 4,"name": "fs_queue"},{"file": 17,"line": 25,"col": 4,"name": "fs_end_request"},{"file": 17,"line": 26,"col": 4,"name": "fs_thread_wakeup"},{"file": 17,"line": 30,"col": 4,"docs": " For resources that have the same lifetime as the `Loop`. This is only used by `Loop` for the thread pool and associated resources.","name": "arena"},{"file": 17,"line": 33,"col": 4,"docs": " State which manages frames that are sleeping on timers","name": "delay_queue"},{"file": 17,"line": 37,"col": 4,"docs": " Pre-allocated eventfds. All permanently active. This is how `Loop` sends promises to be resumed on other threads.","name": "available_eventfd_resume_nodes"},{"file": 17,"line": 38,"col": 4,"name": "eventfd_resume_nodes"},{"file": 17,"line": 1594,"col": 16,"name": "fd"},{"file": 17,"line": 1595,"col": 16,"name": "buf"},{"file": 17,"line": 1596,"col": 16,"name": "result"},{"file": 17,"line": 1602,"col": 16,"name": "fd"},{"file": 17,"line": 1603,"col": 16,"name": "iov"},{"file": 17,"line": 1604,"col": 16,"name": "result"},{"file": 17,"line": 1610,"col": 16,"name": "fd"},{"file": 17,"line": 1611,"col": 16,"name": "bytes"},{"file": 17,"line": 1612,"col": 16,"name": "result"},{"file": 17,"line": 1618,"col": 16,"name": "fd"},{"file": 17,"line": 1619,"col": 16,"name": "iov"},{"file": 17,"line": 1620,"col": 16,"name": "result"},{"file": 17,"line": 1626,"col": 16,"name": "fd"},{"file": 17,"line": 1627,"col": 16,"name": "bytes"},{"file": 17,"line": 1628,"col": 16,"name": "offset"},{"file": 17,"line": 1629,"col": 16,"name": "result"},{"file": 17,"line": 1635,"col": 16,"name": "fd"},{"file": 17,"line": 1636,"col": 16,"name": "iov"},{"file": 17,"line": 1637,"col": 16,"name": "offset"},{"file": 17,"line": 1638,"col": 16,"name": "result"},{"file": 17,"line": 1644,"col": 16,"name": "fd"},{"file": 17,"line": 1645,"col": 16,"name": "buf"},{"file": 17,"line": 1646,"col": 16,"name": "offset"},{"file": 17,"line": 1647,"col": 16,"name": "result"},{"file": 17,"line": 1653,"col": 16,"name": "fd"},{"file": 17,"line": 1654,"col": 16,"name": "iov"},{"file": 17,"line": 1655,"col": 16,"name": "offset"},{"file": 17,"line": 1656,"col": 16,"name": "result"},{"file": 17,"line": 1662,"col": 16,"name": "path"},{"file": 17,"line": 1663,"col": 16,"name": "flags"},{"file": 17,"line": 1664,"col": 16,"name": "mode"},{"file": 17,"line": 1665,"col": 16,"name": "result"},{"file": 17,"line": 1671,"col": 16,"name": "fd"},{"file": 17,"line": 1672,"col": 16,"name": "path"},{"file": 17,"line": 1673,"col": 16,"name": "flags"},{"file": 17,"line": 1674,"col": 16,"name": "mode"},{"file": 17,"line": 1675,"col": 16,"name": "result"},{"file": 17,"line": 1681,"col": 16,"name": "fd"},{"file": 17,"line": 1685,"col": 16,"name": "dirfd"},{"file": 17,"line": 1686,"col": 16,"name": "path"},{"file": 17,"line": 1687,"col": 16,"name": "mode"},{"file": 17,"line": 1688,"col": 16,"name": "flags"},{"file": 17,"line": 1689,"col": 16,"name": "result"},{"file": 17,"line": 64,"col": 12,"name": "Basic"},{"file": 17,"line": 65,"col": 12,"name": "Stop"},{"file": 17,"line": 66,"col": 12,"name": "EventFd"},{"file": 19,"line": 117,"col": 4,"name": "scope"},{"file": 19,"line": 118,"col": 4,"name": "level"},{"file": 20,"line": 676,"col": 4,"name": "cwd"},{"file": 20,"line": 677,"col": 4,"name": "swd"},{"file": 20,"line": 678,"col": 4,"name": "ftw"},{"file": 20,"line": 679,"col": 4,"name": "fop"},{"file": 20,"line": 680,"col": 4,"name": "rip"},{"file": 20,"line": 681,"col": 4,"name": "rdp"},{"file": 20,"line": 682,"col": 4,"name": "mxcsr"},{"file": 20,"line": 683,"col": 4,"name": "mxcr_mask"},{"file": 20,"line": 684,"col": 4,"name": "st"},{"file": 20,"line": 689,"col": 4,"name": "xmm"},{"file": 20,"line": 692,"col": 4,"name": "padding"},{"file": 20,"line": 731,"col": 4,"name": "gregs"},{"file": 20,"line": 732,"col": 4,"name": "fpregs"},{"file": 20,"line": 733,"col": 4,"name": "reserved1"},{"file": 20,"line": 737,"col": 4,"name": "flags"},{"file": 20,"line": 738,"col": 4,"name": "link"},{"file": 20,"line": 739,"col": 4,"name": "stack"},{"file": 20,"line": 740,"col": 4,"name": "mcontext"},{"file": 20,"line": 741,"col": 4,"name": "sigmask"},{"file": 20,"line": 742,"col": 4,"name": "fpregs_mem"},{"file": 59,"line": 3337,"col": 8,"name": "sp"},{"file": 59,"line": 3338,"col": 8,"name": "flags"},{"file": 59,"line": 3339,"col": 8,"name": "size"},{"file": 35,"line": 380,"col": 8,"name": "physical_address"},{"file": 35,"line": 381,"col": 8,"name": "virtual_size"},{"file": 64,"line": 25,"col": 0,"name": "state"},{"file": 65,"line": 17,"col": 0,"name": "impl"},{"file": 33,"line": 691,"col": 4,"name": "thread"},{"file": 35,"line": 99,"col": 4,"name": "in_file"},{"file": 35,"line": 100,"col": 4,"name": "allocator"},{"file": 35,"line": 102,"col": 4,"name": "coff_header"},{"file": 35,"line": 103,"col": 4,"name": "pe_header"},{"file": 35,"line": 104,"col": 4,"name": "sections"},{"file": 35,"line": 106,"col": 4,"name": "guid"},{"file": 35,"line": 107,"col": 4,"name": "age"},{"file": 35,"line": 343,"col": 4,"name": "machine"},{"file": 35,"line": 344,"col": 4,"name": "number_of_sections"},{"file": 35,"line": 345,"col": 4,"name": "timedate_stamp"},{"file": 35,"line": 346,"col": 4,"name": "pointer_to_symbol_table"},{"file": 35,"line": 347,"col": 4,"name": "number_of_symbols"},{"file": 35,"line": 348,"col": 4,"name": "size_of_optional_header"},{"file": 35,"line": 349,"col": 4,"name": "characteristics"},{"file": 35,"line": 358,"col": 4,"name": "magic"},{"file": 35,"line": 359,"col": 4,"name": "data_directory"},{"file": 35,"line": 360,"col": 4,"name": "image_base"},{"file": 36,"line": 51,"col": 4,"name": "pdb"},{"file": 36,"line": 52,"col": 4,"name": "dwarf"},{"file": 36,"line": 950,"col": 4,"name": "nlist"},{"file": 36,"line": 951,"col": 4,"name": "ofile"},{"file": 36,"line": 952,"col": 4,"name": "reloc"},{"file": 37,"line": 310,"col": 4,"docs": " No file type","name": "NONE"},{"file": 37,"line": 313,"col": 4,"docs": " Relocatable file","name": "REL"},{"file": 37,"line": 316,"col": 4,"docs": " Executable file","name": "EXEC"},{"file": 37,"line": 319,"col": 4,"docs": " Shared object file","name": "DYN"},{"file": 37,"line": 322,"col": 4,"docs": " Core file","name": "CORE"},{"file": 37,"line": 563,"col": 4,"name": "e_ident"},{"file": 37,"line": 564,"col": 4,"name": "e_type"},{"file": 37,"line": 565,"col": 4,"name": "e_machine"},{"file": 37,"line": 566,"col": 4,"name": "e_version"},{"file": 37,"line": 567,"col": 4,"name": "e_entry"},{"file": 37,"line": 568,"col": 4,"name": "e_phoff"},{"file": 37,"line": 569,"col": 4,"name": "e_shoff"},{"file": 37,"line": 570,"col": 4,"name": "e_flags"},{"file": 37,"line": 571,"col": 4,"name": "e_ehsize"},{"file": 37,"line": 572,"col": 4,"name": "e_phentsize"},{"file": 37,"line": 573,"col": 4,"name": "e_phnum"},{"file": 37,"line": 574,"col": 4,"name": "e_shentsize"},{"file": 37,"line": 575,"col": 4,"name": "e_shnum"},{"file": 37,"line": 576,"col": 4,"name": "e_shstrndx"},{"file": 37,"line": 579,"col": 4,"name": "e_ident"},{"file": 37,"line": 580,"col": 4,"name": "e_type"},{"file": 37,"line": 581,"col": 4,"name": "e_machine"},{"file": 37,"line": 582,"col": 4,"name": "e_version"},{"file": 37,"line": 583,"col": 4,"name": "e_entry"},{"file": 37,"line": 584,"col": 4,"name": "e_phoff"},{"file": 37,"line": 585,"col": 4,"name": "e_shoff"},{"file": 37,"line": 586,"col": 4,"name": "e_flags"},{"file": 37,"line": 587,"col": 4,"name": "e_ehsize"},{"file": 37,"line": 588,"col": 4,"name": "e_phentsize"},{"file": 37,"line": 589,"col": 4,"name": "e_phnum"},{"file": 37,"line": 590,"col": 4,"name": "e_shentsize"},{"file": 37,"line": 591,"col": 4,"name": "e_shnum"},{"file": 37,"line": 592,"col": 4,"name": "e_shstrndx"},{"file": 37,"line": 595,"col": 4,"name": "p_type"},{"file": 37,"line": 596,"col": 4,"name": "p_offset"},{"file": 37,"line": 597,"col": 4,"name": "p_vaddr"},{"file": 37,"line": 598,"col": 4,"name": "p_paddr"},{"file": 37,"line": 599,"col": 4,"name": "p_filesz"},{"file": 37,"line": 600,"col": 4,"name": "p_memsz"},{"file": 37,"line": 601,"col": 4,"name": "p_flags"},{"file": 37,"line": 602,"col": 4,"name": "p_align"},{"file": 37,"line": 615,"col": 4,"name": "sh_name"},{"file": 37,"line": 616,"col": 4,"name": "sh_type"},{"file": 37,"line": 617,"col": 4,"name": "sh_flags"},{"file": 37,"line": 618,"col": 4,"name": "sh_addr"},{"file": 37,"line": 619,"col": 4,"name": "sh_offset"},{"file": 37,"line": 620,"col": 4,"name": "sh_size"},{"file": 37,"line": 621,"col": 4,"name": "sh_link"},{"file": 37,"line": 622,"col": 4,"name": "sh_info"},{"file": 37,"line": 623,"col": 4,"name": "sh_addralign"},{"file": 37,"line": 624,"col": 4,"name": "sh_entsize"},{"file": 37,"line": 627,"col": 4,"name": "sh_name"},{"file": 37,"line": 628,"col": 4,"name": "sh_type"},{"file": 37,"line": 629,"col": 4,"name": "sh_flags"},{"file": 37,"line": 630,"col": 4,"name": "sh_addr"},{"file": 37,"line": 631,"col": 4,"name": "sh_offset"},{"file": 37,"line": 632,"col": 4,"name": "sh_size"},{"file": 37,"line": 633,"col": 4,"name": "sh_link"},{"file": 37,"line": 634,"col": 4,"name": "sh_info"},{"file": 37,"line": 635,"col": 4,"name": "sh_addralign"},{"file": 37,"line": 636,"col": 4,"name": "sh_entsize"},{"file": 37,"line": 724,"col": 4,"name": "d_tag"},{"file": 37,"line": 725,"col": 4,"name": "d_val"},{"file": 37,"line": 788,"col": 4,"name": "a_type"},{"file": 37,"line": 789,"col": 4,"name": "a_un"},{"file": 37,"line": 949,"col": 4,"docs": " No machine","name": "_NONE"},{"file": 37,"line": 952,"col": 4,"docs": " AT&T WE 32100","name": "_M32"},{"file": 37,"line": 955,"col": 4,"docs": " SPARC","name": "_SPARC"},{"file": 37,"line": 958,"col": 4,"docs": " Intel 386","name": "_386"},{"file": 37,"line": 961,"col": 4,"docs": " Motorola 68000","name": "_68K"},{"file": 37,"line": 964,"col": 4,"docs": " Motorola 88000","name": "_88K"},{"file": 37,"line": 967,"col": 4,"docs": " Intel MCU","name": "_IAMCU"},{"file": 37,"line": 970,"col": 4,"docs": " Intel 80860","name": "_860"},{"file": 37,"line": 973,"col": 4,"docs": " MIPS R3000","name": "_MIPS"},{"file": 37,"line": 976,"col": 4,"docs": " IBM System/370","name": "_S370"},{"file": 37,"line": 979,"col": 4,"docs": " MIPS RS3000 Little-endian","name": "_MIPS_RS3_LE"},{"file": 37,"line": 982,"col": 4,"docs": " SPU Mark II","name": "_SPU_2"},{"file": 37,"line": 985,"col": 4,"docs": " Hewlett-Packard PA-RISC","name": "_PARISC"},{"file": 37,"line": 988,"col": 4,"docs": " Fujitsu VPP500","name": "_VPP500"},{"file": 37,"line": 991,"col": 4,"docs": " Enhanced instruction set SPARC","name": "_SPARC32PLUS"},{"file": 37,"line": 994,"col": 4,"docs": " Intel 80960","name": "_960"},{"file": 37,"line": 997,"col": 4,"docs": " PowerPC","name": "_PPC"},{"file": 37,"line": 1000,"col": 4,"docs": " PowerPC64","name": "_PPC64"},{"file": 37,"line": 1003,"col": 4,"docs": " IBM System/390","name": "_S390"},{"file": 37,"line": 1006,"col": 4,"docs": " IBM SPU/SPC","name": "_SPU"},{"file": 37,"line": 1009,"col": 4,"docs": " NEC V800","name": "_V800"},{"file": 37,"line": 1012,"col": 4,"docs": " Fujitsu FR20","name": "_FR20"},{"file": 37,"line": 1015,"col": 4,"docs": " TRW RH-32","name": "_RH32"},{"file": 37,"line": 1018,"col": 4,"docs": " Motorola RCE","name": "_RCE"},{"file": 37,"line": 1021,"col": 4,"docs": " ARM","name": "_ARM"},{"file": 37,"line": 1024,"col": 4,"docs": " DEC Alpha","name": "_ALPHA"},{"file": 37,"line": 1027,"col": 4,"docs": " Hitachi SH","name": "_SH"},{"file": 37,"line": 1030,"col": 4,"docs": " SPARC V9","name": "_SPARCV9"},{"file": 37,"line": 1033,"col": 4,"docs": " Siemens TriCore","name": "_TRICORE"},{"file": 37,"line": 1036,"col": 4,"docs": " Argonaut RISC Core","name": "_ARC"},{"file": 37,"line": 1039,"col": 4,"docs": " Hitachi H8/300","name": "_H8_300"},{"file": 37,"line": 1042,"col": 4,"docs": " Hitachi H8/300H","name": "_H8_300H"},{"file": 37,"line": 1045,"col": 4,"docs": " Hitachi H8S","name": "_H8S"},{"file": 37,"line": 1048,"col": 4,"docs": " Hitachi H8/500","name": "_H8_500"},{"file": 37,"line": 1051,"col": 4,"docs": " Intel IA-64 processor architecture","name": "_IA_64"},{"file": 37,"line": 1054,"col": 4,"docs": " Stanford MIPS-X","name": "_MIPS_X"},{"file": 37,"line": 1057,"col": 4,"docs": " Motorola ColdFire","name": "_COLDFIRE"},{"file": 37,"line": 1060,"col": 4,"docs": " Motorola M68HC12","name": "_68HC12"},{"file": 37,"line": 1063,"col": 4,"docs": " Fujitsu MMA Multimedia Accelerator","name": "_MMA"},{"file": 37,"line": 1066,"col": 4,"docs": " Siemens PCP","name": "_PCP"},{"file": 37,"line": 1069,"col": 4,"docs": " Sony nCPU embedded RISC processor","name": "_NCPU"},{"file": 37,"line": 1072,"col": 4,"docs": " Denso NDR1 microprocessor","name": "_NDR1"},{"file": 37,"line": 1075,"col": 4,"docs": " Motorola Star*Core processor","name": "_STARCORE"},{"file": 37,"line": 1078,"col": 4,"docs": " Toyota ME16 processor","name": "_ME16"},{"file": 37,"line": 1081,"col": 4,"docs": " STMicroelectronics ST100 processor","name": "_ST100"},{"file": 37,"line": 1084,"col": 4,"docs": " Advanced Logic Corp. TinyJ embedded processor family","name": "_TINYJ"},{"file": 37,"line": 1087,"col": 4,"docs": " AMD x86-64 architecture","name": "_X86_64"},{"file": 37,"line": 1090,"col": 4,"docs": " Sony DSP Processor","name": "_PDSP"},{"file": 37,"line": 1093,"col": 4,"docs": " Digital Equipment Corp. PDP-10","name": "_PDP10"},{"file": 37,"line": 1096,"col": 4,"docs": " Digital Equipment Corp. PDP-11","name": "_PDP11"},{"file": 37,"line": 1099,"col": 4,"docs": " Siemens FX66 microcontroller","name": "_FX66"},{"file": 37,"line": 1102,"col": 4,"docs": " STMicroelectronics ST9+ 8/16 bit microcontroller","name": "_ST9PLUS"},{"file": 37,"line": 1105,"col": 4,"docs": " STMicroelectronics ST7 8-bit microcontroller","name": "_ST7"},{"file": 37,"line": 1108,"col": 4,"docs": " Motorola MC68HC16 Microcontroller","name": "_68HC16"},{"file": 37,"line": 1111,"col": 4,"docs": " Motorola MC68HC11 Microcontroller","name": "_68HC11"},{"file": 37,"line": 1114,"col": 4,"docs": " Motorola MC68HC08 Microcontroller","name": "_68HC08"},{"file": 37,"line": 1117,"col": 4,"docs": " Motorola MC68HC05 Microcontroller","name": "_68HC05"},{"file": 37,"line": 1120,"col": 4,"docs": " Silicon Graphics SVx","name": "_SVX"},{"file": 37,"line": 1123,"col": 4,"docs": " STMicroelectronics ST19 8-bit microcontroller","name": "_ST19"},{"file": 37,"line": 1126,"col": 4,"docs": " Digital VAX","name": "_VAX"},{"file": 37,"line": 1129,"col": 4,"docs": " Axis Communications 32-bit embedded processor","name": "_CRIS"},{"file": 37,"line": 1132,"col": 4,"docs": " Infineon Technologies 32-bit embedded processor","name": "_JAVELIN"},{"file": 37,"line": 1135,"col": 4,"docs": " Element 14 64-bit DSP Processor","name": "_FIREPATH"},{"file": 37,"line": 1138,"col": 4,"docs": " LSI Logic 16-bit DSP Processor","name": "_ZSP"},{"file": 37,"line": 1141,"col": 4,"docs": " Donald Knuth's educational 64-bit processor","name": "_MMIX"},{"file": 37,"line": 1144,"col": 4,"docs": " Harvard University machine-independent object files","name": "_HUANY"},{"file": 37,"line": 1147,"col": 4,"docs": " SiTera Prism","name": "_PRISM"},{"file": 37,"line": 1150,"col": 4,"docs": " Atmel AVR 8-bit microcontroller","name": "_AVR"},{"file": 37,"line": 1153,"col": 4,"docs": " Fujitsu FR30","name": "_FR30"},{"file": 37,"line": 1156,"col": 4,"docs": " Mitsubishi D10V","name": "_D10V"},{"file": 37,"line": 1159,"col": 4,"docs": " Mitsubishi D30V","name": "_D30V"},{"file": 37,"line": 1162,"col": 4,"docs": " NEC v850","name": "_V850"},{"file": 37,"line": 1165,"col": 4,"docs": " Mitsubishi M32R","name": "_M32R"},{"file": 37,"line": 1168,"col": 4,"docs": " Matsushita MN10300","name": "_MN10300"},{"file": 37,"line": 1171,"col": 4,"docs": " Matsushita MN10200","name": "_MN10200"},{"file": 37,"line": 1174,"col": 4,"docs": " picoJava","name": "_PJ"},{"file": 37,"line": 1177,"col": 4,"docs": " OpenRISC 32-bit embedded processor","name": "_OPENRISC"},{"file": 37,"line": 1180,"col": 4,"docs": " ARC International ARCompact processor (old spelling/synonym: EM_ARC_A5)","name": "_ARC_COMPACT"},{"file": 37,"line": 1183,"col": 4,"docs": " Tensilica Xtensa Architecture","name": "_XTENSA"},{"file": 37,"line": 1186,"col": 4,"docs": " Alphamosaic VideoCore processor","name": "_VIDEOCORE"},{"file": 37,"line": 1189,"col": 4,"docs": " Thompson Multimedia General Purpose Processor","name": "_TMM_GPP"},{"file": 37,"line": 1192,"col": 4,"docs": " National Semiconductor 32000 series","name": "_NS32K"},{"file": 37,"line": 1195,"col": 4,"docs": " Tenor Network TPC processor","name": "_TPC"},{"file": 37,"line": 1198,"col": 4,"docs": " Trebia SNP 1000 processor","name": "_SNP1K"},{"file": 37,"line": 1201,"col": 4,"docs": " STMicroelectronics (www.st.com) ST200","name": "_ST200"},{"file": 37,"line": 1204,"col": 4,"docs": " Ubicom IP2xxx microcontroller family","name": "_IP2K"},{"file": 37,"line": 1207,"col": 4,"docs": " MAX Processor","name": "_MAX"},{"file": 37,"line": 1210,"col": 4,"docs": " National Semiconductor CompactRISC microprocessor","name": "_CR"},{"file": 37,"line": 1213,"col": 4,"docs": " Fujitsu F2MC16","name": "_F2MC16"},{"file": 37,"line": 1216,"col": 4,"docs": " Texas Instruments embedded microcontroller msp430","name": "_MSP430"},{"file": 37,"line": 1219,"col": 4,"docs": " Analog Devices Blackfin (DSP) processor","name": "_BLACKFIN"},{"file": 37,"line": 1222,"col": 4,"docs": " S1C33 Family of Seiko Epson processors","name": "_SE_C33"},{"file": 37,"line": 1225,"col": 4,"docs": " Sharp embedded microprocessor","name": "_SEP"},{"file": 37,"line": 1228,"col": 4,"docs": " Arca RISC Microprocessor","name": "_ARCA"},{"file": 37,"line": 1231,"col": 4,"docs": " Microprocessor series from PKU-Unity Ltd. and MPRC of Peking University","name": "_UNICORE"},{"file": 37,"line": 1234,"col": 4,"docs": " eXcess: 16/32/64-bit configurable embedded CPU","name": "_EXCESS"},{"file": 37,"line": 1237,"col": 4,"docs": " Icera Semiconductor Inc. Deep Execution Processor","name": "_DXP"},{"file": 37,"line": 1240,"col": 4,"docs": " Altera Nios II soft-core processor","name": "_ALTERA_NIOS2"},{"file": 37,"line": 1243,"col": 4,"docs": " National Semiconductor CompactRISC CRX","name": "_CRX"},{"file": 37,"line": 1246,"col": 4,"docs": " Motorola XGATE embedded processor","name": "_XGATE"},{"file": 37,"line": 1249,"col": 4,"docs": " Infineon C16x/XC16x processor","name": "_C166"},{"file": 37,"line": 1252,"col": 4,"docs": " Renesas M16C series microprocessors","name": "_M16C"},{"file": 37,"line": 1255,"col": 4,"docs": " Microchip Technology dsPIC30F Digital Signal Controller","name": "_DSPIC30F"},{"file": 37,"line": 1258,"col": 4,"docs": " Freescale Communication Engine RISC core","name": "_CE"},{"file": 37,"line": 1261,"col": 4,"docs": " Renesas M32C series microprocessors","name": "_M32C"},{"file": 37,"line": 1264,"col": 4,"docs": " Altium TSK3000 core","name": "_TSK3000"},{"file": 37,"line": 1267,"col": 4,"docs": " Freescale RS08 embedded processor","name": "_RS08"},{"file": 37,"line": 1270,"col": 4,"docs": " Analog Devices SHARC family of 32-bit DSP processors","name": "_SHARC"},{"file": 37,"line": 1273,"col": 4,"docs": " Cyan Technology eCOG2 microprocessor","name": "_ECOG2"},{"file": 37,"line": 1276,"col": 4,"docs": " Sunplus S+core7 RISC processor","name": "_SCORE7"},{"file": 37,"line": 1279,"col": 4,"docs": " New Japan Radio (NJR) 24-bit DSP Processor","name": "_DSP24"},{"file": 37,"line": 1282,"col": 4,"docs": " Broadcom VideoCore III processor","name": "_VIDEOCORE3"},{"file": 37,"line": 1285,"col": 4,"docs": " RISC processor for Lattice FPGA architecture","name": "_LATTICEMICO32"},{"file": 37,"line": 1288,"col": 4,"docs": " Seiko Epson C17 family","name": "_SE_C17"},{"file": 37,"line": 1291,"col": 4,"docs": " The Texas Instruments TMS320C6000 DSP family","name": "_TI_C6000"},{"file": 37,"line": 1294,"col": 4,"docs": " The Texas Instruments TMS320C2000 DSP family","name": "_TI_C2000"},{"file": 37,"line": 1297,"col": 4,"docs": " The Texas Instruments TMS320C55x DSP family","name": "_TI_C5500"},{"file": 37,"line": 1300,"col": 4,"docs": " STMicroelectronics 64bit VLIW Data Signal Processor","name": "_MMDSP_PLUS"},{"file": 37,"line": 1303,"col": 4,"docs": " Cypress M8C microprocessor","name": "_CYPRESS_M8C"},{"file": 37,"line": 1306,"col": 4,"docs": " Renesas R32C series microprocessors","name": "_R32C"},{"file": 37,"line": 1309,"col": 4,"docs": " NXP Semiconductors TriMedia architecture family","name": "_TRIMEDIA"},{"file": 37,"line": 1312,"col": 4,"docs": " Qualcomm Hexagon processor","name": "_HEXAGON"},{"file": 37,"line": 1315,"col": 4,"docs": " Intel 8051 and variants","name": "_8051"},{"file": 37,"line": 1318,"col": 4,"docs": " STMicroelectronics STxP7x family of configurable and extensible RISC processors","name": "_STXP7X"},{"file": 37,"line": 1321,"col": 4,"docs": " Andes Technology compact code size embedded RISC processor family","name": "_NDS32"},{"file": 37,"line": 1324,"col": 4,"docs": " Cyan Technology eCOG1X family","name": "_ECOG1X"},{"file": 37,"line": 1327,"col": 4,"docs": " Dallas Semiconductor MAXQ30 Core Micro-controllers","name": "_MAXQ30"},{"file": 37,"line": 1330,"col": 4,"docs": " New Japan Radio (NJR) 16-bit DSP Processor","name": "_XIMO16"},{"file": 37,"line": 1333,"col": 4,"docs": " M2000 Reconfigurable RISC Microprocessor","name": "_MANIK"},{"file": 37,"line": 1336,"col": 4,"docs": " Cray Inc. NV2 vector architecture","name": "_CRAYNV2"},{"file": 37,"line": 1339,"col": 4,"docs": " Renesas RX family","name": "_RX"},{"file": 37,"line": 1342,"col": 4,"docs": " Imagination Technologies META processor architecture","name": "_METAG"},{"file": 37,"line": 1345,"col": 4,"docs": " MCST Elbrus general purpose hardware architecture","name": "_MCST_ELBRUS"},{"file": 37,"line": 1348,"col": 4,"docs": " Cyan Technology eCOG16 family","name": "_ECOG16"},{"file": 37,"line": 1351,"col": 4,"docs": " National Semiconductor CompactRISC CR16 16-bit microprocessor","name": "_CR16"},{"file": 37,"line": 1354,"col": 4,"docs": " Freescale Extended Time Processing Unit","name": "_ETPU"},{"file": 37,"line": 1357,"col": 4,"docs": " Infineon Technologies SLE9X core","name": "_SLE9X"},{"file": 37,"line": 1360,"col": 4,"docs": " Intel L10M","name": "_L10M"},{"file": 37,"line": 1363,"col": 4,"docs": " Intel K10M","name": "_K10M"},{"file": 37,"line": 1366,"col": 4,"docs": " ARM AArch64","name": "_AARCH64"},{"file": 37,"line": 1369,"col": 4,"docs": " Atmel Corporation 32-bit microprocessor family","name": "_AVR32"},{"file": 37,"line": 1372,"col": 4,"docs": " STMicroeletronics STM8 8-bit microcontroller","name": "_STM8"},{"file": 37,"line": 1375,"col": 4,"docs": " Tilera TILE64 multicore architecture family","name": "_TILE64"},{"file": 37,"line": 1378,"col": 4,"docs": " Tilera TILEPro multicore architecture family","name": "_TILEPRO"},{"file": 37,"line": 1381,"col": 4,"docs": " NVIDIA CUDA architecture","name": "_CUDA"},{"file": 37,"line": 1384,"col": 4,"docs": " Tilera TILE-Gx multicore architecture family","name": "_TILEGX"},{"file": 37,"line": 1387,"col": 4,"docs": " CloudShield architecture family","name": "_CLOUDSHIELD"},{"file": 37,"line": 1390,"col": 4,"docs": " KIPO-KAIST Core-A 1st generation processor family","name": "_COREA_1ST"},{"file": 37,"line": 1393,"col": 4,"docs": " KIPO-KAIST Core-A 2nd generation processor family","name": "_COREA_2ND"},{"file": 37,"line": 1396,"col": 4,"docs": " Synopsys ARCompact V2","name": "_ARC_COMPACT2"},{"file": 37,"line": 1399,"col": 4,"docs": " Open8 8-bit RISC soft processor core","name": "_OPEN8"},{"file": 37,"line": 1402,"col": 4,"docs": " Renesas RL78 family","name": "_RL78"},{"file": 37,"line": 1405,"col": 4,"docs": " Broadcom VideoCore V processor","name": "_VIDEOCORE5"},{"file": 37,"line": 1408,"col": 4,"docs": " Renesas 78KOR family","name": "_78KOR"},{"file": 37,"line": 1411,"col": 4,"docs": " Freescale 56800EX Digital Signal Controller (DSC)","name": "_56800EX"},{"file": 37,"line": 1414,"col": 4,"docs": " Beyond BA1 CPU architecture","name": "_BA1"},{"file": 37,"line": 1417,"col": 4,"docs": " Beyond BA2 CPU architecture","name": "_BA2"},{"file": 37,"line": 1420,"col": 4,"docs": " XMOS xCORE processor family","name": "_XCORE"},{"file": 37,"line": 1423,"col": 4,"docs": " Microchip 8-bit PIC(r) family","name": "_MCHP_PIC"},{"file": 37,"line": 1426,"col": 4,"docs": " Reserved by Intel","name": "_INTEL205"},{"file": 37,"line": 1429,"col": 4,"docs": " Reserved by Intel","name": "_INTEL206"},{"file": 37,"line": 1432,"col": 4,"docs": " Reserved by Intel","name": "_INTEL207"},{"file": 37,"line": 1435,"col": 4,"docs": " Reserved by Intel","name": "_INTEL208"},{"file": 37,"line": 1438,"col": 4,"docs": " Reserved by Intel","name": "_INTEL209"},{"file": 37,"line": 1441,"col": 4,"docs": " KM211 KM32 32-bit processor","name": "_KM32"},{"file": 37,"line": 1444,"col": 4,"docs": " KM211 KMX32 32-bit processor","name": "_KMX32"},{"file": 37,"line": 1447,"col": 4,"docs": " KM211 KMX16 16-bit processor","name": "_KMX16"},{"file": 37,"line": 1450,"col": 4,"docs": " KM211 KMX8 8-bit processor","name": "_KMX8"},{"file": 37,"line": 1453,"col": 4,"docs": " KM211 KVARC processor","name": "_KVARC"},{"file": 37,"line": 1456,"col": 4,"docs": " Paneve CDP architecture family","name": "_CDP"},{"file": 37,"line": 1459,"col": 4,"docs": " Cognitive Smart Memory Processor","name": "_COGE"},{"file": 37,"line": 1462,"col": 4,"docs": " iCelero CoolEngine","name": "_COOL"},{"file": 37,"line": 1465,"col": 4,"docs": " Nanoradio Optimized RISC","name": "_NORC"},{"file": 37,"line": 1468,"col": 4,"docs": " CSR Kalimba architecture family","name": "_CSR_KALIMBA"},{"file": 37,"line": 1471,"col": 4,"docs": " AMD GPU architecture","name": "_AMDGPU"},{"file": 37,"line": 1474,"col": 4,"docs": " RISC-V","name": "_RISCV"},{"file": 37,"line": 1477,"col": 4,"docs": " Lanai 32-bit processor","name": "_LANAI"},{"file": 37,"line": 1480,"col": 4,"docs": " Linux kernel bpf virtual machine","name": "_BPF"},{"file": 37,"line": 1482,"col": 4,"name": "_"},{"file": 43,"line": 16,"col": 4,"docs": " I/O operates normally, waiting for the operating system syscalls to complete.","name": "blocking"},{"file": 43,"line": 19,"col": 4,"docs": " I/O functions are generated async and rely on a global event loop. Event-based I/O.","name": "evented"},{"file": 44,"line": 741,"col": 4,"name": "n_strx"},{"file": 44,"line": 742,"col": 4,"name": "n_type"},{"file": 44,"line": 743,"col": 4,"name": "n_sect"},{"file": 44,"line": 744,"col": 4,"name": "n_desc"},{"file": 44,"line": 745,"col": 4,"name": "n_value"},{"file": 59,"line": 3049,"col": 4,"name": "handler"},{"file": 59,"line": 3053,"col": 4,"name": "mask"},{"file": 59,"line": 3054,"col": 4,"name": "flags"},{"file": 59,"line": 3055,"col": 4,"name": "restorer"},{"file": 47,"line": 182,"col": 4,"name": "iov_base"},{"file": 47,"line": 183,"col": 4,"name": "iov_len"},{"file": 47,"line": 187,"col": 4,"name": "iov_base"},{"file": 47,"line": 188,"col": 4,"name": "iov_len"},{"file": 48,"line": 42,"col": 4,"docs": " COFF Section index, 1-based","name": "Section"},{"file": 48,"line": 43,"col": 4,"name": "Padding1"},{"file": 48,"line": 44,"col": 4,"name": "Offset"},{"file": 48,"line": 45,"col": 4,"name": "Size"},{"file": 48,"line": 46,"col": 4,"name": "Characteristics"},{"file": 48,"line": 47,"col": 4,"name": "ModuleIndex"},{"file": 48,"line": 48,"col": 4,"name": "Padding2"},{"file": 48,"line": 49,"col": 4,"name": "DataCrc"},{"file": 48,"line": 50,"col": 4,"name": "RelocCrc"},{"file": 48,"line": 54,"col": 4,"name": "Unused1"},{"file": 48,"line": 55,"col": 4,"name": "SectionContr"},{"file": 48,"line": 56,"col": 4,"name": "Flags"},{"file": 48,"line": 57,"col": 4,"name": "ModuleSymStream"},{"file": 48,"line": 58,"col": 4,"name": "SymByteSize"},{"file": 48,"line": 59,"col": 4,"name": "C11ByteSize"},{"file": 48,"line": 60,"col": 4,"name": "C13ByteSize"},{"file": 48,"line": 61,"col": 4,"name": "SourceFileCount"},{"file": 48,"line": 62,"col": 4,"name": "Padding"},{"file": 48,"line": 63,"col": 4,"name": "Unused2"},{"file": 48,"line": 64,"col": 4,"name": "SourceFileNameIndex"},{"file": 48,"line": 65,"col": 4,"name": "PdbFilePathNameIndex"},{"file": 48,"line": 482,"col": 4,"name": "in_file"},{"file": 48,"line": 483,"col": 4,"name": "msf"},{"file": 48,"line": 484,"col": 4,"name": "allocator"},{"file": 48,"line": 485,"col": 4,"name": "string_table"},{"file": 48,"line": 486,"col": 4,"name": "dbi"},{"file": 48,"line": 487,"col": 4,"name": "modules"},{"file": 48,"line": 488,"col": 4,"name": "sect_contribs"},{"file": 48,"line": 489,"col": 4,"name": "guid"},{"file": 48,"line": 490,"col": 4,"name": "age"},{"file": 48,"line": 858,"col": 4,"name": "directory"},{"file": 48,"line": 859,"col": 4,"name": "streams"},{"file": 48,"line": 998,"col": 4,"name": "in_file"},{"file": 48,"line": 999,"col": 4,"name": "pos"},{"file": 48,"line": 1000,"col": 4,"name": "blocks"},{"file": 48,"line": 1001,"col": 4,"name": "block_size"},{"file": 50,"line": 174,"col": 4,"name": "from"},{"file": 50,"line": 175,"col": 4,"name": "to"},{"file": 50,"line": 176,"col": 4,"name": "count"},{"file": 50,"line": 177,"col": 4,"name": "range"},{"file": 51,"line": 141,"col": 4,"docs": "if we used resolution's value when performing the  performance counter calc on windows/darwin, it would  be less precise","name": "frequency"},{"file": 51,"line": 146,"col": 4,"name": "resolution"},{"file": 51,"line": 147,"col": 4,"name": "start_time"},{"file": 68,"line": 25,"col": 4,"name": "l_addr"},{"file": 68,"line": 26,"col": 4,"name": "l_name"},{"file": 68,"line": 27,"col": 4,"name": "l_ld"},{"file": 68,"line": 28,"col": 4,"name": "l_next"},{"file": 68,"line": 29,"col": 4,"name": "l_prev"},{"file": 59,"line": 3348,"col": 4,"name": "pad"},{"file": 59,"line": 3349,"col": 4,"name": "common"},{"file": 59,"line": 3369,"col": 4,"name": "sigfault"},{"file": 59,"line": 3380,"col": 4,"name": "sigpoll"},{"file": 59,"line": 3384,"col": 4,"name": "sigsys"},{"file": 12,"line": 485,"col": 8,"name": "min"},{"file": 12,"line": 486,"col": 8,"name": "max"},{"file": 3,"line": 140,"col": 16,"name": "min"},{"file": 3,"line": 141,"col": 16,"name": "max"},{"file": 12,"line": 620,"col": 8,"docs": " Equivalent to function call syntax.","name": "auto"},{"file": 12,"line": 623,"col": 8,"docs": " Equivalent to async keyword used with function call syntax.","name": "async_kw"},{"file": 12,"line": 629,"col": 8,"docs": " Prevents tail call optimization. This guarantees that the return address will point to the callsite, as opposed to the callsite's callsite. If the call is otherwise required to be tail-called or inlined, a compile error is emitted instead.","name": "never_tail"},{"file": 12,"line": 633,"col": 8,"docs": " Guarantees that the call will not be inlined. If the call is otherwise required to be inlined, a compile error is emitted instead.","name": "never_inline"},{"file": 12,"line": 637,"col": 8,"docs": " Asserts that the function call will not suspend. This allows a non-async function to call an async function.","name": "no_async"},{"file": 12,"line": 641,"col": 8,"docs": " Guarantees that the call will be generated with tail call optimization. If this is not possible, a compile error is emitted instead.","name": "always_tail"},{"file": 12,"line": 645,"col": 8,"docs": " Guarantees that the call will inlined at the callsite. If this is not possible, a compile error is emitted instead.","name": "always_inline"},{"file": 12,"line": 649,"col": 8,"docs": " Evaluates the call at compile-time. If the call cannot be completed at compile-time, a compile error is emitted instead.","name": "compile_time"},{"file": 12,"line": 421,"col": 16,"name": "fn_type"},{"file": 12,"line": 422,"col": 16,"name": "is_noinline"},{"file": 12,"line": 423,"col": 16,"name": "is_var_args"},{"file": 12,"line": 424,"col": 16,"name": "is_extern"},{"file": 12,"line": 425,"col": 16,"name": "is_export"},{"file": 12,"line": 426,"col": 16,"name": "lib_name"},{"file": 12,"line": 427,"col": 16,"name": "return_type"},{"file": 12,"line": 428,"col": 16,"name": "arg_names"},{"file": 59,"line": 3008,"col": 4,"name": "ws_row"},{"file": 59,"line": 3009,"col": 4,"name": "ws_col"},{"file": 59,"line": 3010,"col": 4,"name": "ws_xpixel"},{"file": 59,"line": 3011,"col": 4,"name": "ws_ypixel"},{"file": 59,"line": 3037,"col": 8,"name": "handler"},{"file": 59,"line": 3038,"col": 8,"name": "flags"},{"file": 59,"line": 3039,"col": 8,"name": "restorer"},{"file": 59,"line": 3040,"col": 8,"name": "mask"},{"file": 59,"line": 3156,"col": 4,"name": "ptr"},{"file": 59,"line": 3157,"col": 4,"name": "fd"},{"file": 59,"line": 3158,"col": 4,"name": "u32"},{"file": 59,"line": 3159,"col": 4,"name": "u64"},{"file": 59,"line": 3166,"col": 8,"name": "events"},{"file": 59,"line": 3167,"col": 8,"name": "data"},{"file": 59,"line": 3343,"col": 4,"name": "int"},{"file": 59,"line": 3344,"col": 4,"name": "ptr"},{"file": 17,"line": 845,"col": 8,"name": "timer"},{"file": 17,"line": 846,"col": 8,"name": "waiters"},{"file": 17,"line": 847,"col": 8,"name": "thread"},{"file": 17,"line": 848,"col": 8,"name": "event"},{"file": 17,"line": 849,"col": 8,"name": "is_running"},{"file": 17,"line": 1560,"col": 8,"name": "epollfd"},{"file": 17,"line": 1561,"col": 8,"name": "final_eventfd"},{"file": 17,"line": 1562,"col": 8,"name": "final_eventfd_event"},{"file": 33,"line": 694,"col": 8,"name": "completion"},{"file": 33,"line": 695,"col": 8,"name": "child_tid"},{"file": 33,"line": 696,"col": 8,"name": "parent_tid"},{"file": 33,"line": 697,"col": 8,"name": "mapped"},{"file": 35,"line": 354,"col": 8,"name": "virtual_address"},{"file": 35,"line": 355,"col": 8,"name": "size"},{"file": 37,"line": 790,"col": 8,"name": "a_val"},{"file": 67,"line": 8,"col": 4,"docs": " Do not follow pointers, only hash their value.","name": "Shallow"},{"file": 67,"line": 13,"col": 4,"docs": " Follow pointers, hash the pointee content. Only dereferences one level, ie. it is changed into .Shallow when a pointer type is encountered.","name": "Deep"},{"file": 67,"line": 18,"col": 4,"docs": " Follow pointers, hash the pointee content. Dereferences all pointers encountered. Assumes no cycle.","name": "DeepRecursive"},{"file": 59,"line": 3050,"col": 8,"name": "handler"},{"file": 59,"line": 3051,"col": 8,"name": "sigaction"},{"file": 68,"line": 49,"col": 4,"name": "r_version"},{"file": 68,"line": 50,"col": 4,"name": "r_map"},{"file": 68,"line": 51,"col": 4,"name": "r_brk"},{"file": 68,"line": 52,"col": 4,"name": "r_ldbase"},{"file": 48,"line": 493,"col": 8,"name": "mod_info"},{"file": 48,"line": 494,"col": 8,"name": "module_name"},{"file": 48,"line": 495,"col": 8,"name": "obj_file_name"},{"file": 48,"line": 497,"col": 8,"name": "populated"},{"file": 48,"line": 498,"col": 8,"name": "symbols"},{"file": 48,"line": 499,"col": 8,"name": "subsect_info"},{"file": 48,"line": 500,"col": 8,"name": "checksum_offset"},{"file": 59,"line": 3350,"col": 8,"name": "first"},{"file": 59,"line": 3360,"col": 8,"name": "second"},{"file": 59,"line": 3370,"col": 8,"name": "addr"},{"file": 59,"line": 3371,"col": 8,"name": "addr_lsb"},{"file": 59,"line": 3372,"col": 8,"name": "first"},{"file": 59,"line": 3381,"col": 8,"name": "band"},{"file": 59,"line": 3382,"col": 8,"name": "fd"},{"file": 59,"line": 3385,"col": 8,"name": "call_addr"},{"file": 59,"line": 3386,"col": 8,"name": "syscall"},{"file": 59,"line": 3387,"col": 8,"name": "native_arch"},{"file": 69,"line": 97,"col": 4,"name": "init_data"},{"file": 69,"line": 98,"col": 4,"name": "alloc_size"},{"file": 69,"line": 99,"col": 4,"name": "alloc_align"},{"file": 69,"line": 100,"col": 4,"name": "tcb_offset"},{"file": 69,"line": 101,"col": 4,"name": "dtv_offset"},{"file": 69,"line": 102,"col": 4,"name": "data_offset"},{"file": 69,"line": 103,"col": 4,"name": "data_size"},{"file": 69,"line": 105,"col": 4,"name": "gdt_entry_number"},{"file": 69,"line": 45,"col": 4,"name": "VariantI"},{"file": 69,"line": 46,"col": 4,"name": "VariantII"},{"file": 69,"line": 86,"col": 4,"name": "dummy"},{"file": 17,"line": 892,"col": 12,"name": "entries"},{"file": 20,"line": 685,"col": 8,"name": "significand"},{"file": 20,"line": 686,"col": 8,"name": "exponent"},{"file": 20,"line": 687,"col": 8,"name": "padding"},{"file": 20,"line": 690,"col": 8,"name": "element"},{"file": 59,"line": 3351,"col": 12,"name": "piduid"},{"file": 59,"line": 3355,"col": 12,"name": "timer"},{"file": 59,"line": 3361,"col": 12,"name": "value"},{"file": 59,"line": 3362,"col": 12,"name": "sigchld"},{"file": 59,"line": 3373,"col": 12,"name": "addr_bnd"},{"file": 59,"line": 3377,"col": 12,"name": "pkey"},{"file": 59,"line": 3352,"col": 16,"name": "pid"},{"file": 59,"line": 3353,"col": 16,"name": "uid"},{"file": 59,"line": 3356,"col": 16,"name": "timerid"},{"file": 59,"line": 3357,"col": 16,"name": "overrun"},{"file": 59,"line": 3363,"col": 16,"name": "status"},{"file": 59,"line": 3364,"col": 16,"name": "utime"},{"file": 59,"line": 3365,"col": 16,"name": "stime"},{"file": 59,"line": 3374,"col": 16,"name": "lower"},{"file": 59,"line": 3375,"col": 16,"name": "upper"},{"file": 3,"line": 734,"col": 41,"name": "set"},{"file": 3,"line": 734,"col": 51,"name": "feature"},{"file": 3,"line": 739,"col": 44,"name": "set"},{"file": 3,"line": 739,"col": 54,"name": "features"},{"file": 3,"line": 748,"col": 44,"name": "set"},{"file": 3,"line": 748,"col": 54,"name": "features"},{"file": 3,"line": 820,"col": 25,"name": "arch"},{"file": 3,"line": 834,"col": 29,"name": "arch"},{"file": 3,"line": 841,"col": 27,"name": "arch"},{"file": 3,"line": 869,"col": 25,"name": "arch"},{"file": 3,"line": 890,"col": 27,"name": "arch"},{"file": 3,"line": 897,"col": 25,"name": "arch"},{"file": 3,"line": 904,"col": 33,"name": "arch"},{"file": 3,"line": 904,"col": 45,"name": "cpu_name"},{"file": 3,"line": 913,"col": 32,"name": "arch"},{"file": 3,"line": 974,"col": 33,"name": "arch"},{"file": 3,"line": 1101,"col": 31,"name": "arch"},{"file": 3,"line": 1169,"col": 31,"name": "arch"},{"file": 3,"line": 1189,"col": 35,"name": "arch"},{"file": 3,"line": 1214,"col": 32,"name": "arch"},{"file": 3,"line": 1237,"col": 32,"name": "cpus","comptime": true},{"file": 4,"line": 49,"col": 30,"name": "self"},{"file": 4,"line": 49,"col": 42,"name": "T","comptime": true},{"file": 4,"line": 49,"col": 60,"name": "value"},{"file": 4,"line": 57,"col": 31,"name": "self"},{"file": 4,"line": 57,"col": 43,"name": "T","comptime": true},{"file": 4,"line": 57,"col": 61,"name": "value"},{"file": 4,"line": 64,"col": 30,"name": "self"},{"file": 4,"line": 64,"col": 42,"name": "T","comptime": true},{"file": 4,"line": 64,"col": 60,"name": "value"},{"file": 4,"line": 71,"col": 27,"name": "self"},{"file": 4,"line": 71,"col": 39,"name": "T","comptime": true},{"file": 4,"line": 71,"col": 57,"name": "value"},{"file": 4,"line": 78,"col": 24,"name": "self"},{"file": 4,"line": 78,"col": 36,"name": "T","comptime": true},{"file": 4,"line": 78,"col": 54,"name": "value"},{"file": 4,"line": 78,"col": 64,"name": "endian"},{"file": 4,"line": 84,"col": 27,"name": "self"},{"file": 4,"line": 84,"col": 39,"name": "value"},{"file": 5,"line": 225,"col": 21,"name": "self"},{"file": 5,"line": 225,"col": 33,"name": "length"},{"file": 5,"line": 233,"col": 18,"name": "self"},{"file": 5,"line": 233,"col": 30,"name": "offset"},{"file": 5,"line": 239,"col": 23,"name": "self"},{"file": 5,"line": 239,"col": 35,"name": "offset"},{"file": 5,"line": 245,"col": 18,"name": "self"},{"file": 5,"line": 245,"col": 30,"name": "offset"},{"file": 5,"line": 252,"col": 18,"name": "self"},{"file": 5,"line": 267,"col": 16,"name": "self"},{"file": 5,"line": 372,"col": 17,"name": "self"},{"file": 5,"line": 372,"col": 29,"name": "new_mode"},{"file": 5,"line": 383,"col": 17,"name": "self"},{"file": 5,"line": 383,"col": 29,"name": "owner"},{"file": 5,"line": 383,"col": 42,"name": "group"},{"file": 5,"line": 395,"col": 8,"name": "self"},{"file": 5,"line": 397,"col": 8,"docs": " access timestamp in nanoseconds","name": "atime"},{"file": 5,"line": 399,"col": 8,"docs": " last modification timestamp in nanoseconds","name": "mtime"},{"file": 5,"line": 422,"col": 26,"name": "self"},{"file": 5,"line": 422,"col": 38,"name": "allocator"},{"file": 5,"line": 422,"col": 65,"name": "max_bytes"},{"file": 5,"line": 481,"col": 19,"name": "self"},{"file": 5,"line": 481,"col": 31,"name": "buffer"},{"file": 5,"line": 491,"col": 17,"name": "self"},{"file": 5,"line": 491,"col": 29,"name": "buffer"},{"file": 5,"line": 491,"col": 43,"name": "offset"},{"file": 5,"line": 505,"col": 20,"name": "self"},{"file": 5,"line": 505,"col": 32,"name": "buffer"},{"file": 5,"line": 505,"col": 46,"name": "offset"},{"file": 5,"line": 516,"col": 17,"name": "self"},{"file": 5,"line": 516,"col": 29,"name": "iovecs"},{"file": 5,"line": 537,"col": 20,"name": "self"},{"file": 5,"line": 537,"col": 32,"name": "iovecs"},{"file": 5,"line": 559,"col": 18,"name": "self"},{"file": 5,"line": 559,"col": 30,"name": "iovecs"},{"file": 5,"line": 559,"col": 56,"name": "offset"},{"file": 5,"line": 580,"col": 21,"name": "self"},{"file": 5,"line": 580,"col": 33,"name": "iovecs"},{"file": 5,"line": 580,"col": 53,"name": "offset"},{"file": 5,"line": 616,"col": 20,"name": "self"},{"file": 5,"line": 616,"col": 32,"name": "bytes"},{"file": 5,"line": 623,"col": 18,"name": "self"},{"file": 5,"line": 623,"col": 30,"name": "bytes"},{"file": 5,"line": 623,"col": 49,"name": "offset"},{"file": 5,"line": 635,"col": 21,"name": "self"},{"file": 5,"line": 635,"col": 33,"name": "bytes"},{"file": 5,"line": 635,"col": 52,"name": "offset"},{"file": 5,"line": 644,"col": 18,"name": "self"},{"file": 5,"line": 644,"col": 30,"name": "iovecs"},{"file": 5,"line": 663,"col": 21,"name": "self"},{"file": 5,"line": 663,"col": 33,"name": "iovecs"},{"file": 5,"line": 680,"col": 19,"name": "self"},{"file": 5,"line": 680,"col": 31,"name": "iovecs"},{"file": 5,"line": 680,"col": 57,"name": "offset"},{"file": 5,"line": 698,"col": 22,"name": "self"},{"file": 5,"line": 698,"col": 34,"name": "iovecs"},{"file": 5,"line": 698,"col": 60,"name": "offset"},{"file": 5,"line": 718,"col": 21,"name": "in"},{"file": 5,"line": 718,"col": 31,"name": "in_offset"},{"file": 5,"line": 718,"col": 47,"name": "out"},{"file": 5,"line": 718,"col": 58,"name": "out_offset"},{"file": 5,"line": 718,"col": 75,"name": "len"},{"file": 5,"line": 726,"col": 24,"name": "in"},{"file": 5,"line": 726,"col": 34,"name": "in_offset"},{"file": 5,"line": 726,"col": 50,"name": "out"},{"file": 5,"line": 726,"col": 61,"name": "out_offset"},{"file": 5,"line": 726,"col": 78,"name": "len"},{"file": 5,"line": 758,"col": 24,"name": "self"},{"file": 5,"line": 758,"col": 36,"name": "in_file"},{"file": 5,"line": 758,"col": 51,"name": "args"},{"file": 5,"line": 774,"col": 34,"name": "self"},{"file": 5,"line": 774,"col": 46,"name": "in_file"},{"file": 5,"line": 774,"col": 61,"name": "args"},{"file": 5,"line": 882,"col": 26,"name": "file"},{"file": 5,"line": 901,"col": 16,"name": "file"},{"file": 5,"line": 901,"col": 28,"name": "l"},{"file": 5,"line": 937,"col": 18,"name": "file"},{"file": 5,"line": 968,"col": 19,"name": "file"},{"file": 5,"line": 968,"col": 31,"name": "l"},{"file": 5,"line": 1008,"col": 25,"name": "file"},{"file": 5,"line": 796,"col": 28,"name": "self"},{"file": 5,"line": 796,"col": 40,"name": "in_file"},{"file": 5,"line": 796,"col": 55,"name": "args"},{"file": 6,"line": 406,"col": 27,"name": "allocator"},{"file": 6,"line": 406,"col": 50,"name": "ctx"},{"file": 6,"line": 427,"col": 38,"name": "self"},{"file": 6,"line": 435,"col": 28,"name": "self"},{"file": 6,"line": 440,"col": 21,"name": "self"},{"file": 6,"line": 446,"col": 24,"name": "self"},{"file": 6,"line": 452,"col": 27,"name": "self"},{"file": 6,"line": 478,"col": 31,"name": "self"},{"file": 6,"line": 478,"col": 44,"name": "key"},{"file": 6,"line": 478,"col": 58,"name": "ctx"},{"file": 6,"line": 489,"col": 38,"name": "self"},{"file": 6,"line": 489,"col": 51,"name": "key"},{"file": 6,"line": 500,"col": 45,"name": "self"},{"file": 6,"line": 500,"col": 58,"name": "key"},{"file": 6,"line": 500,"col": 72,"name": "ctx"},{"file": 6,"line": 504,"col": 29,"name": "self"},{"file": 6,"line": 504,"col": 42,"name": "key"},{"file": 6,"line": 504,"col": 50,"name": "value"},{"file": 6,"line": 513,"col": 35,"name": "self"},{"file": 6,"line": 513,"col": 48,"name": "expected_count"},{"file": 6,"line": 520,"col": 36,"name": "self"},{"file": 6,"line": 520,"col": 49,"name": "additional_count"},{"file": 6,"line": 526,"col": 24,"name": "self"},{"file": 6,"line": 545,"col": 33,"name": "self"},{"file": 6,"line": 545,"col": 46,"name": "key"},{"file": 6,"line": 545,"col": 54,"name": "value"},{"file": 6,"line": 552,"col": 42,"name": "self"},{"file": 6,"line": 552,"col": 55,"name": "key"},{"file": 6,"line": 552,"col": 63,"name": "value"},{"file": 6,"line": 557,"col": 24,"name": "self"},{"file": 6,"line": 557,"col": 37,"name": "key"},{"file": 6,"line": 557,"col": 45,"name": "value"},{"file": 6,"line": 563,"col": 38,"name": "self"},{"file": 6,"line": 563,"col": 51,"name": "key"},{"file": 6,"line": 563,"col": 59,"name": "value"},{"file": 6,"line": 568,"col": 27,"name": "self"},{"file": 6,"line": 568,"col": 40,"name": "key"},{"file": 6,"line": 572,"col": 34,"name": "self"},{"file": 6,"line": 572,"col": 47,"name": "key"},{"file": 6,"line": 572,"col": 61,"name": "ctx"},{"file": 6,"line": 580,"col": 26,"name": "self"},{"file": 6,"line": 580,"col": 38,"name": "key"},{"file": 6,"line": 580,"col": 52,"name": "ctx"},{"file": 6,"line": 584,"col": 22,"name": "self"},{"file": 6,"line": 584,"col": 34,"name": "key"},{"file": 6,"line": 587,"col": 29,"name": "self"},{"file": 6,"line": 587,"col": 41,"name": "key"},{"file": 6,"line": 587,"col": 55,"name": "ctx"},{"file": 6,"line": 592,"col": 22,"name": "self"},{"file": 6,"line": 592,"col": 34,"name": "key"},{"file": 6,"line": 595,"col": 29,"name": "self"},{"file": 6,"line": 595,"col": 41,"name": "key"},{"file": 6,"line": 595,"col": 55,"name": "ctx"},{"file": 6,"line": 599,"col": 25,"name": "self"},{"file": 6,"line": 599,"col": 37,"name": "key"},{"file": 6,"line": 602,"col": 32,"name": "self"},{"file": 6,"line": 602,"col": 44,"name": "key"},{"file": 6,"line": 602,"col": 58,"name": "ctx"},{"file": 6,"line": 607,"col": 24,"name": "self"},{"file": 6,"line": 607,"col": 36,"name": "key"},{"file": 6,"line": 611,"col": 31,"name": "self"},{"file": 6,"line": 611,"col": 43,"name": "key"},{"file": 6,"line": 611,"col": 57,"name": "ctx"},{"file": 6,"line": 616,"col": 24,"name": "self"},{"file": 6,"line": 616,"col": 36,"name": "key"},{"file": 6,"line": 620,"col": 31,"name": "self"},{"file": 6,"line": 620,"col": 43,"name": "key"},{"file": 6,"line": 620,"col": 57,"name": "ctx"},{"file": 6,"line": 626,"col": 22,"name": "self"},{"file": 6,"line": 626,"col": 35,"name": "key"},{"file": 6,"line": 630,"col": 29,"name": "self"},{"file": 6,"line": 630,"col": 42,"name": "key"},{"file": 6,"line": 630,"col": 56,"name": "ctx"},{"file": 6,"line": 635,"col": 21,"name": "self"},{"file": 6,"line": 641,"col": 34,"name": "self"},{"file": 6,"line": 641,"col": 46,"name": "new_allocator"},{"file": 6,"line": 647,"col": 32,"name": "self"},{"file": 6,"line": 647,"col": 44,"name": "new_ctx"},{"file": 6,"line": 654,"col": 12,"name": "self"},{"file": 6,"line": 655,"col": 12,"name": "new_allocator"},{"file": 6,"line": 656,"col": 12,"name": "new_ctx"},{"file": 6,"line": 846,"col": 23,"name": "self"},{"file": 6,"line": 846,"col": 35,"name": "allocator"},{"file": 6,"line": 852,"col": 30,"name": "self"},{"file": 6,"line": 852,"col": 42,"name": "allocator"},{"file": 6,"line": 852,"col": 65,"name": "ctx"},{"file": 6,"line": 878,"col": 35,"name": "self"},{"file": 6,"line": 878,"col": 48,"name": "allocator"},{"file": 6,"line": 878,"col": 71,"name": "new_size"},{"file": 6,"line": 883,"col": 42,"name": "self"},{"file": 6,"line": 883,"col": 55,"name": "allocator"},{"file": 6,"line": 883,"col": 78,"name": "new_size"},{"file": 6,"line": 883,"col": 94,"name": "ctx"},{"file": 6,"line": 888,"col": 36,"name": "self"},{"file": 6,"line": 888,"col": 49,"name": "allocator"},{"file": 6,"line": 888,"col": 72,"name": "additional_size"},{"file": 6,"line": 891,"col": 43,"name": "self"},{"file": 6,"line": 891,"col": 56,"name": "allocator"},{"file": 6,"line": 891,"col": 79,"name": "additional_size"},{"file": 6,"line": 891,"col": 102,"name": "ctx"},{"file": 6,"line": 895,"col": 38,"name": "self"},{"file": 6,"line": 903,"col": 28,"name": "self"},{"file": 6,"line": 903,"col": 41,"name": "allocator"},{"file": 6,"line": 909,"col": 21,"name": "self"},{"file": 6,"line": 931,"col": 24,"name": "self"},{"file": 6,"line": 935,"col": 27,"name": "self"},{"file": 6,"line": 968,"col": 28,"name": "self"},{"file": 6,"line": 968,"col": 41,"name": "allocator"},{"file": 6,"line": 968,"col": 64,"name": "key"},{"file": 6,"line": 968,"col": 72,"name": "value"},{"file": 6,"line": 983,"col": 33,"name": "self"},{"file": 6,"line": 983,"col": 46,"name": "key"},{"file": 6,"line": 983,"col": 54,"name": "value"},{"file": 6,"line": 988,"col": 40,"name": "self"},{"file": 6,"line": 988,"col": 53,"name": "key"},{"file": 6,"line": 988,"col": 61,"name": "value"},{"file": 6,"line": 988,"col": 71,"name": "ctx"},{"file": 6,"line": 995,"col": 42,"name": "self"},{"file": 6,"line": 995,"col": 55,"name": "key"},{"file": 6,"line": 995,"col": 63,"name": "value"},{"file": 6,"line": 1027,"col": 24,"name": "self"},{"file": 6,"line": 1027,"col": 37,"name": "allocator"},{"file": 6,"line": 1027,"col": 60,"name": "key"},{"file": 6,"line": 1027,"col": 68,"name": "value"},{"file": 6,"line": 1032,"col": 31,"name": "self"},{"file": 6,"line": 1032,"col": 44,"name": "allocator"},{"file": 6,"line": 1032,"col": 67,"name": "key"},{"file": 6,"line": 1032,"col": 75,"name": "value"},{"file": 6,"line": 1032,"col": 85,"name": "ctx"},{"file": 6,"line": 1047,"col": 38,"name": "self"},{"file": 6,"line": 1047,"col": 51,"name": "key"},{"file": 6,"line": 1047,"col": 59,"name": "value"},{"file": 6,"line": 1052,"col": 45,"name": "self"},{"file": 6,"line": 1052,"col": 58,"name": "key"},{"file": 6,"line": 1052,"col": 66,"name": "value"},{"file": 6,"line": 1052,"col": 76,"name": "ctx"},{"file": 6,"line": 1067,"col": 27,"name": "self"},{"file": 6,"line": 1067,"col": 40,"name": "key"},{"file": 6,"line": 1072,"col": 34,"name": "self"},{"file": 6,"line": 1072,"col": 47,"name": "key"},{"file": 6,"line": 1072,"col": 55,"name": "ctx"},{"file": 6,"line": 1075,"col": 34,"name": "self"},{"file": 6,"line": 1075,"col": 47,"name": "key"},{"file": 6,"line": 1075,"col": 61,"name": "ctx"},{"file": 6,"line": 1144,"col": 24,"name": "self"},{"file": 6,"line": 1144,"col": 36,"name": "key"},{"file": 6,"line": 1149,"col": 31,"name": "self"},{"file": 6,"line": 1149,"col": 43,"name": "key"},{"file": 6,"line": 1149,"col": 51,"name": "ctx"},{"file": 6,"line": 1152,"col": 31,"name": "self"},{"file": 6,"line": 1152,"col": 43,"name": "key"},{"file": 6,"line": 1152,"col": 57,"name": "ctx"},{"file": 6,"line": 1163,"col": 19,"name": "self"},{"file": 6,"line": 1163,"col": 32,"name": "allocator"},{"file": 6,"line": 1163,"col": 55,"name": "key"},{"file": 6,"line": 1163,"col": 63,"name": "value"},{"file": 6,"line": 1174,"col": 25,"name": "self"},{"file": 6,"line": 1174,"col": 37,"name": "key"},{"file": 6,"line": 1179,"col": 32,"name": "self"},{"file": 6,"line": 1179,"col": 44,"name": "key"},{"file": 6,"line": 1179,"col": 52,"name": "ctx"},{"file": 6,"line": 1182,"col": 32,"name": "self"},{"file": 6,"line": 1182,"col": 44,"name": "key"},{"file": 6,"line": 1182,"col": 58,"name": "ctx"},{"file": 6,"line": 1190,"col": 22,"name": "self"},{"file": 6,"line": 1190,"col": 34,"name": "key"},{"file": 6,"line": 1195,"col": 29,"name": "self"},{"file": 6,"line": 1195,"col": 41,"name": "key"},{"file": 6,"line": 1195,"col": 49,"name": "ctx"},{"file": 6,"line": 1198,"col": 29,"name": "self"},{"file": 6,"line": 1198,"col": 41,"name": "key"},{"file": 6,"line": 1198,"col": 55,"name": "ctx"},{"file": 6,"line": 1206,"col": 22,"name": "self"},{"file": 6,"line": 1206,"col": 34,"name": "key"},{"file": 6,"line": 1211,"col": 29,"name": "self"},{"file": 6,"line": 1211,"col": 41,"name": "key"},{"file": 6,"line": 1211,"col": 49,"name": "ctx"},{"file": 6,"line": 1214,"col": 29,"name": "self"},{"file": 6,"line": 1214,"col": 41,"name": "key"},{"file": 6,"line": 1214,"col": 55,"name": "ctx"},{"file": 6,"line": 1222,"col": 19,"name": "self"},{"file": 6,"line": 1222,"col": 31,"name": "key"},{"file": 6,"line": 1237,"col": 24,"name": "self"},{"file": 6,"line": 1237,"col": 37,"name": "allocator"},{"file": 6,"line": 1237,"col": 60,"name": "key"},{"file": 6,"line": 1249,"col": 31,"name": "self"},{"file": 6,"line": 1249,"col": 44,"name": "allocator"},{"file": 6,"line": 1249,"col": 67,"name": "key"},{"file": 6,"line": 1249,"col": 81,"name": "key_ctx"},{"file": 6,"line": 1269,"col": 38,"name": "self"},{"file": 6,"line": 1269,"col": 51,"name": "key"},{"file": 6,"line": 1274,"col": 45,"name": "self"},{"file": 6,"line": 1274,"col": 58,"name": "key"},{"file": 6,"line": 1274,"col": 66,"name": "ctx"},{"file": 6,"line": 1347,"col": 29,"name": "self"},{"file": 6,"line": 1347,"col": 42,"name": "allocator"},{"file": 6,"line": 1347,"col": 65,"name": "key"},{"file": 6,"line": 1347,"col": 73,"name": "value"},{"file": 6,"line": 1352,"col": 36,"name": "self"},{"file": 6,"line": 1352,"col": 49,"name": "allocator"},{"file": 6,"line": 1352,"col": 72,"name": "key"},{"file": 6,"line": 1352,"col": 80,"name": "value"},{"file": 6,"line": 1352,"col": 90,"name": "ctx"},{"file": 6,"line": 1362,"col": 24,"name": "self"},{"file": 6,"line": 1362,"col": 43,"name": "key"},{"file": 6,"line": 1377,"col": 22,"name": "self"},{"file": 6,"line": 1377,"col": 35,"name": "key"},{"file": 6,"line": 1382,"col": 29,"name": "self"},{"file": 6,"line": 1382,"col": 42,"name": "key"},{"file": 6,"line": 1382,"col": 50,"name": "ctx"},{"file": 6,"line": 1385,"col": 29,"name": "self"},{"file": 6,"line": 1385,"col": 42,"name": "key"},{"file": 6,"line": 1385,"col": 56,"name": "ctx"},{"file": 6,"line": 1415,"col": 21,"name": "self"},{"file": 6,"line": 1415,"col": 33,"name": "allocator"},{"file": 6,"line": 1420,"col": 28,"name": "self"},{"file": 6,"line": 1420,"col": 40,"name": "allocator"},{"file": 6,"line": 1420,"col": 63,"name": "new_ctx"},{"file": 6,"line": 860,"col": 36,"name": "size"},{"file": 6,"line": 860,"col": 48,"name": "cap"},{"file": 7,"line": 85,"col": 30,"name": "allocator"},{"file": 7,"line": 85,"col": 53,"name": "slice"},{"file": 7,"line": 96,"col": 27,"name": "self"},{"file": 7,"line": 102,"col": 31,"name": "self"},{"file": 7,"line": 118,"col": 36,"name": "self"},{"file": 7,"line": 118,"col": 49,"name": "sentinel","comptime": true},{"file": 7,"line": 126,"col": 22,"name": "self"},{"file": 7,"line": 126,"col": 35,"name": "n"},{"file": 7,"line": 126,"col": 45,"name": "item"},{"file": 7,"line": 136,"col": 27,"name": "self"},{"file": 7,"line": 136,"col": 40,"name": "i"},{"file": 7,"line": 136,"col": 50,"name": "items"},{"file": 7,"line": 148,"col": 28,"name": "self"},{"file": 7,"line": 148,"col": 41,"name": "start"},{"file": 7,"line": 148,"col": 55,"name": "len"},{"file": 7,"line": 148,"col": 67,"name": "new_items"},{"file": 7,"line": 181,"col": 36,"name": "self"},{"file": 7,"line": 181,"col": 49,"name": "item"},{"file": 7,"line": 191,"col": 29,"name": "self"},{"file": 7,"line": 191,"col": 42,"name": "i"},{"file": 7,"line": 205,"col": 26,"name": "self"},{"file": 7,"line": 205,"col": 39,"name": "i"},{"file": 7,"line": 215,"col": 27,"name": "self"},{"file": 7,"line": 215,"col": 40,"name": "items"},{"file": 7,"line": 222,"col": 41,"name": "self"},{"file": 7,"line": 222,"col": 54,"name": "items"},{"file": 7,"line": 237,"col": 22,"name": "self"},{"file": 7,"line": 250,"col": 28,"name": "self"},{"file": 7,"line": 250,"col": 41,"name": "value"},{"file": 7,"line": 250,"col": 51,"name": "n"},{"file": 7,"line": 258,"col": 42,"name": "self"},{"file": 7,"line": 258,"col": 55,"name": "value"},{"file": 7,"line": 258,"col": 65,"name": "n"},{"file": 7,"line": 298,"col": 38,"name": "self"},{"file": 7,"line": 303,"col": 28,"name": "self"},{"file": 7,"line": 349,"col": 36,"name": "self"},{"file": 7,"line": 349,"col": 49,"name": "additional_count"},{"file": 7,"line": 382,"col": 30,"name": "self"},{"file": 7,"line": 382,"col": 43,"name": "n","comptime": true},{"file": 7,"line": 393,"col": 44,"name": "self"},{"file": 7,"line": 393,"col": 57,"name": "n","comptime": true},{"file": 7,"line": 403,"col": 19,"name": "self"},{"file": 7,"line": 412,"col": 25,"name": "self"},{"file": 7,"line": 429,"col": 35,"name": "self"},{"file": 7,"line": 243,"col": 23,"name": "self"},{"file": 7,"line": 243,"col": 36,"name": "m"},{"file": 3,"line": 66,"col": 25,"name": "tag"},{"file": 3,"line": 73,"col": 36,"name": "tag"},{"file": 3,"line": 83,"col": 39,"name": "tag"},{"file": 3,"line": 83,"col": 49,"name": "arch"},{"file": 3,"line": 1325,"col": 21,"name": "self"},{"file": 3,"line": 1325,"col": 35,"name": "allocator"},{"file": 3,"line": 1329,"col": 29,"name": "allocator"},{"file": 3,"line": 1329,"col": 56,"name": "cpu_arch"},{"file": 3,"line": 1329,"col": 76,"name": "os_tag"},{"file": 3,"line": 1329,"col": 92,"name": "abi"},{"file": 3,"line": 1333,"col": 23,"name": "self"},{"file": 3,"line": 1333,"col": 37,"name": "allocator"},{"file": 3,"line": 1337,"col": 28,"name": "cpu_arch"},{"file": 3,"line": 1337,"col": 48,"name": "os_tag"},{"file": 3,"line": 1349,"col": 22,"name": "self"},{"file": 3,"line": 1353,"col": 34,"name": "os_tag"},{"file": 3,"line": 1353,"col": 50,"name": "abi"},{"file": 3,"line": 1363,"col": 27,"name": "self"},{"file": 3,"line": 1367,"col": 28,"name": "self"},{"file": 3,"line": 1371,"col": 28,"name": "os_tag"},{"file": 3,"line": 1371,"col": 44,"name": "abi"},{"file": 3,"line": 1381,"col": 21,"name": "self"},{"file": 3,"line": 1385,"col": 33,"name": "os_tag"},{"file": 3,"line": 1385,"col": 49,"name": "cpu_arch"},{"file": 3,"line": 1398,"col": 27,"name": "self"},{"file": 3,"line": 1402,"col": 19,"name": "self"},{"file": 3,"line": 1406,"col": 17,"name": "self"},{"file": 3,"line": 1410,"col": 18,"name": "self"},{"file": 3,"line": 1414,"col": 21,"name": "self"},{"file": 3,"line": 1426,"col": 17,"name": "self"},{"file": 3,"line": 1430,"col": 29,"name": "self"},{"file": 3,"line": 1434,"col": 32,"name": "os_tag"},{"file": 3,"line": 1434,"col": 48,"name": "abi"},{"file": 3,"line": 1438,"col": 21,"name": "self"},{"file": 3,"line": 1442,"col": 32,"name": "self"},{"file": 3,"line": 1452,"col": 23,"name": "self"},{"file": 3,"line": 1456,"col": 28,"name": "self"},{"file": 3,"line": 1512,"col": 37,"name": "self"},{"file": 3,"line": 1693,"col": 29,"name": "host_target"},{"file": 3,"line": 1693,"col": 50,"name": "binary_target"},{"file": 3,"line": 1722,"col": 20,"name": "cpu_arch"},{"file": 3,"line": 1736,"col": 35,"name": "target"},{"file": 9,"line": 109,"col": 21,"name": "self"},{"file": 10,"line": 52,"col": 32,"name": "self"},{"file": 10,"line": 52,"col": 44,"name": "array_list"},{"file": 10,"line": 52,"col": 76,"name": "max_append_size"},{"file": 10,"line": 90,"col": 28,"name": "self"},{"file": 10,"line": 90,"col": 40,"name": "allocator"},{"file": 10,"line": 90,"col": 67,"name": "max_size"},{"file": 10,"line": 143,"col": 34,"name": "self"},{"file": 10,"line": 143,"col": 46,"name": "buf"},{"file": 10,"line": 143,"col": 57,"name": "delimiter"},{"file": 10,"line": 164,"col": 12,"name": "self"},{"file": 10,"line": 165,"col": 12,"name": "allocator"},{"file": 10,"line": 166,"col": 12,"name": "delimiter"},{"file": 10,"line": 167,"col": 12,"name": "max_size"},{"file": 10,"line": 188,"col": 39,"name": "self"},{"file": 10,"line": 188,"col": 51,"name": "buf"},{"file": 10,"line": 188,"col": 62,"name": "delimiter"},{"file": 10,"line": 213,"col": 39,"name": "self"},{"file": 10,"line": 213,"col": 51,"name": "delimiter"},{"file": 10,"line": 245,"col": 29,"name": "self"},{"file": 10,"line": 245,"col": 41,"name": "T","comptime": true},{"file": 10,"line": 251,"col": 30,"name": "self"},{"file": 10,"line": 251,"col": 42,"name": "T","comptime": true},{"file": 10,"line": 256,"col": 29,"name": "self"},{"file": 10,"line": 256,"col": 41,"name": "T","comptime": true},{"file": 10,"line": 261,"col": 26,"name": "self"},{"file": 10,"line": 261,"col": 38,"name": "T","comptime": true},{"file": 10,"line": 286,"col": 25,"name": "self"},{"file": 10,"line": 286,"col": 37,"name": "num_bytes"},{"file": 10,"line": 286,"col": 53,"name": "options","comptime": true},{"file": 10,"line": 298,"col": 23,"name": "self"},{"file": 10,"line": 298,"col": 35,"name": "slice"},{"file": 10,"line": 309,"col": 26,"name": "self"},{"file": 10,"line": 309,"col": 38,"name": "T","comptime": true},{"file": 10,"line": 320,"col": 24,"name": "self"},{"file": 10,"line": 320,"col": 36,"name": "Enum","comptime": true},{"file": 10,"line": 320,"col": 57,"name": "endian"},{"file": 13,"line": 82,"col": 22,"name": "list"},{"file": 13,"line": 82,"col": 35,"name": "node"},{"file": 13,"line": 98,"col": 24,"name": "list"},{"file": 13,"line": 106,"col": 19,"name": "list"},{"file": 14,"line": 30,"col": 19,"name": "self"},{"file": 14,"line": 30,"col": 32,"name": "node"},{"file": 14,"line": 49,"col": 19,"name": "self"},{"file": 14,"line": 66,"col": 21,"name": "self"},{"file": 14,"line": 66,"col": 34,"name": "node"},{"file": 14,"line": 85,"col": 22,"name": "self"},{"file": 14,"line": 85,"col": 35,"name": "node"},{"file": 14,"line": 111,"col": 23,"name": "self"},{"file": 14,"line": 118,"col": 20,"name": "self"},{"file": 14,"line": 125,"col": 28,"name": "self"},{"file": 14,"line": 125,"col": 41,"name": "stream"},{"file": 13,"line": 181,"col": 27,"name": "list"},{"file": 13,"line": 181,"col": 40,"name": "node"},{"file": 13,"line": 181,"col": 53,"name": "new_node"},{"file": 13,"line": 202,"col": 28,"name": "list"},{"file": 13,"line": 202,"col": 41,"name": "node"},{"file": 13,"line": 202,"col": 54,"name": "new_node"},{"file": 13,"line": 223,"col": 30,"name": "list1"},{"file": 13,"line": 223,"col": 44,"name": "list2"},{"file": 13,"line": 244,"col": 22,"name": "list"},{"file": 13,"line": 244,"col": 35,"name": "new_node"},{"file": 13,"line": 258,"col": 23,"name": "list"},{"file": 13,"line": 258,"col": 36,"name": "new_node"},{"file": 13,"line": 277,"col": 22,"name": "list"},{"file": 13,"line": 277,"col": 35,"name": "node"},{"file": 13,"line": 302,"col": 19,"name": "list"},{"file": 13,"line": 312,"col": 24,"name": "list"},{"file": 16,"line": 12,"col": 20,"name": "value"},{"file": 16,"line": 18,"col": 29,"name": "self"},{"file": 16,"line": 24,"col": 30,"name": "self"},{"file": 16,"line": 24,"col": 43,"name": "value"},{"file": 16,"line": 28,"col": 20,"name": "self"},{"file": 16,"line": 28,"col": 39,"name": "ordering","comptime": true},{"file": 16,"line": 36,"col": 21,"name": "self"},{"file": 16,"line": 36,"col": 34,"name": "value"},{"file": 16,"line": 36,"col": 44,"name": "ordering","comptime": true},{"file": 16,"line": 44,"col": 27,"name": "self"},{"file": 16,"line": 44,"col": 40,"name": "value"},{"file": 16,"line": 44,"col": 50,"name": "ordering","comptime": true},{"file": 16,"line": 49,"col": 12,"name": "self"},{"file": 16,"line": 50,"col": 12,"name": "compare"},{"file": 16,"line": 51,"col": 12,"name": "exchange"},{"file": 16,"line": 52,"col": 12,"name": "success","comptime": true},{"file": 16,"line": 53,"col": 12,"name": "failure","comptime": true},{"file": 16,"line": 59,"col": 12,"name": "self"},{"file": 16,"line": 60,"col": 12,"name": "compare"},{"file": 16,"line": 61,"col": 12,"name": "exchange"},{"file": 16,"line": 62,"col": 12,"name": "success","comptime": true},{"file": 16,"line": 63,"col": 12,"name": "failure","comptime": true},{"file": 16,"line": 69,"col": 12,"name": "self"},{"file": 16,"line": 70,"col": 12,"name": "is_strong","comptime": true},{"file": 16,"line": 71,"col": 12,"name": "compare"},{"file": 16,"line": 72,"col": 12,"name": "exchange"},{"file": 16,"line": 73,"col": 12,"name": "success","comptime": true},{"file": 16,"line": 74,"col": 12,"name": "failure","comptime": true},{"file": 16,"line": 100,"col": 12,"name": "self"},{"file": 16,"line": 101,"col": 12,"name": "op","comptime": true},{"file": 16,"line": 102,"col": 12,"name": "value"},{"file": 16,"line": 103,"col": 12,"name": "ordering","comptime": true},{"file": 16,"line": 131,"col": 35,"name": "self"},{"file": 16,"line": 131,"col": 48,"name": "value"},{"file": 16,"line": 131,"col": 58,"name": "ordering","comptime": true},{"file": 16,"line": 135,"col": 36,"name": "self"},{"file": 16,"line": 135,"col": 49,"name": "value"},{"file": 16,"line": 135,"col": 59,"name": "ordering","comptime": true},{"file": 16,"line": 139,"col": 34,"name": "self"},{"file": 16,"line": 139,"col": 47,"name": "value"},{"file": 16,"line": 139,"col": 57,"name": "ordering","comptime": true},{"file": 16,"line": 143,"col": 35,"name": "self"},{"file": 16,"line": 143,"col": 48,"name": "value"},{"file": 16,"line": 143,"col": 58,"name": "ordering","comptime": true},{"file": 16,"line": 154,"col": 33,"name": "self"},{"file": 16,"line": 154,"col": 46,"name": "bit"},{"file": 16,"line": 154,"col": 56,"name": "ordering","comptime": true},{"file": 16,"line": 158,"col": 35,"name": "self"},{"file": 16,"line": 158,"col": 48,"name": "bit"},{"file": 16,"line": 158,"col": 58,"name": "ordering","comptime": true},{"file": 16,"line": 162,"col": 36,"name": "self"},{"file": 16,"line": 162,"col": 49,"name": "bit"},{"file": 16,"line": 162,"col": 59,"name": "ordering","comptime": true},{"file": 16,"line": 113,"col": 35,"name": "self"},{"file": 16,"line": 113,"col": 48,"name": "value"},{"file": 16,"line": 113,"col": 58,"name": "ordering","comptime": true},{"file": 16,"line": 117,"col": 35,"name": "self"},{"file": 16,"line": 117,"col": 48,"name": "value"},{"file": 16,"line": 117,"col": 58,"name": "ordering","comptime": true},{"file": 16,"line": 121,"col": 35,"name": "self"},{"file": 16,"line": 121,"col": 48,"name": "value"},{"file": 16,"line": 121,"col": 58,"name": "ordering","comptime": true},{"file": 16,"line": 125,"col": 35,"name": "self"},{"file": 16,"line": 125,"col": 48,"name": "value"},{"file": 16,"line": 125,"col": 58,"name": "ordering","comptime": true},{"file": 18,"line": 31,"col": 25,"name": "self"},{"file": 18,"line": 31,"col": 38,"name": "node"},{"file": 18,"line": 36,"col": 20,"name": "self"},{"file": 18,"line": 36,"col": 33,"name": "node"},{"file": 18,"line": 49,"col": 19,"name": "self"},{"file": 18,"line": 64,"col": 23,"name": "self"},{"file": 19,"line": 200,"col": 12,"name": "format","comptime": true},{"file": 19,"line": 201,"col": 12,"name": "args"},{"file": 19,"line": 221,"col": 12,"name": "format","comptime": true},{"file": 19,"line": 222,"col": 12,"name": "args"},{"file": 21,"line": 1871,"col": 20,"name": "self"},{"file": 21,"line": 1826,"col": 20,"name": "self"},{"file": 21,"line": 1834,"col": 21,"name": "self"},{"file": 16,"line": 167,"col": 16,"name": "self"},{"file": 16,"line": 168,"col": 16,"name": "op","comptime": true},{"file": 16,"line": 169,"col": 16,"name": "bit"},{"file": 16,"line": 170,"col": 16,"name": "ordering","comptime": true},{"file": 3,"line": 651,"col": 31,"name": "set"},{"file": 3,"line": 657,"col": 33,"name": "set"},{"file": 3,"line": 657,"col": 43,"name": "arch_feature_index"},{"file": 3,"line": 671,"col": 37,"name": "set"},{"file": 3,"line": 671,"col": 48,"name": "other_set"},{"file": 3,"line": 677,"col": 37,"name": "set"},{"file": 3,"line": 677,"col": 48,"name": "arch_feature_index"},{"file": 3,"line": 684,"col": 40,"name": "set"},{"file": 3,"line": 684,"col": 51,"name": "other_set"},{"file": 3,"line": 689,"col": 44,"name": "set"},{"file": 3,"line": 689,"col": 55,"name": "all_features_list"},{"file": 3,"line": 706,"col": 31,"name": "set"},{"file": 3,"line": 710,"col": 27,"name": "set"},{"file": 3,"line": 710,"col": 37,"name": "other_set"},{"file": 3,"line": 714,"col": 36,"name": "set"},{"file": 3,"line": 714,"col": 46,"name": "other_set"},{"file": 12,"line": 58,"col": 8,"name": "self"},{"file": 12,"line": 59,"col": 8,"name": "fmt","comptime": true},{"file": 12,"line": 60,"col": 8,"name": "options"},{"file": 12,"line": 61,"col": 8,"name": "writer"},{"file": 40,"line": 763,"col": 19,"name": "self"},{"file": 40,"line": 884,"col": 16,"name": "self"},{"file": 40,"line": 884,"col": 27,"name": "allocator"},{"file": 40,"line": 917,"col": 17,"name": "self"},{"file": 40,"line": 943,"col": 24,"name": "self"},{"file": 40,"line": 943,"col": 35,"name": "sub_path"},{"file": 40,"line": 943,"col": 57,"name": "flags"},{"file": 40,"line": 1050,"col": 21,"name": "self"},{"file": 40,"line": 1050,"col": 32,"name": "sub_path_w"},{"file": 40,"line": 1050,"col": 57,"name": "flags"},{"file": 40,"line": 1090,"col": 22,"name": "self"},{"file": 40,"line": 1090,"col": 33,"name": "sub_path"},{"file": 40,"line": 1090,"col": 55,"name": "flags"},{"file": 40,"line": 1105,"col": 26,"name": "self"},{"file": 40,"line": 1105,"col": 37,"name": "sub_path"},{"file": 40,"line": 1105,"col": 59,"name": "flags"},{"file": 40,"line": 1133,"col": 23,"name": "self"},{"file": 40,"line": 1133,"col": 34,"name": "sub_path_c"},{"file": 40,"line": 1133,"col": 61,"name": "flags"},{"file": 40,"line": 1204,"col": 23,"name": "self"},{"file": 40,"line": 1204,"col": 34,"name": "sub_path_w"},{"file": 40,"line": 1204,"col": 59,"name": "flags"},{"file": 40,"line": 1249,"col": 19,"name": "self"},{"file": 40,"line": 1249,"col": 30,"name": "sub_path"},{"file": 40,"line": 1253,"col": 20,"name": "self"},{"file": 40,"line": 1253,"col": 31,"name": "sub_path"},{"file": 40,"line": 1257,"col": 20,"name": "self"},{"file": 40,"line": 1257,"col": 31,"name": "sub_path"},{"file": 40,"line": 1265,"col": 20,"name": "self"},{"file": 40,"line": 1265,"col": 31,"name": "sub_path"},{"file": 40,"line": 1298,"col": 24,"name": "self"},{"file": 40,"line": 1298,"col": 35,"name": "sub_path"},{"file": 40,"line": 1298,"col": 57,"name": "open_dir_options"},{"file": 40,"line": 1311,"col": 20,"name": "self"},{"file": 40,"line": 1311,"col": 31,"name": "pathname"},{"file": 40,"line": 1311,"col": 53,"name": "out_buffer"},{"file": 40,"line": 1325,"col": 21,"name": "self"},{"file": 40,"line": 1325,"col": 32,"name": "pathname"},{"file": 40,"line": 1325,"col": 57,"name": "out_buffer"},{"file": 40,"line": 1358,"col": 21,"name": "self"},{"file": 40,"line": 1358,"col": 32,"name": "pathname"},{"file": 40,"line": 1358,"col": 55,"name": "out_buffer"},{"file": 40,"line": 1410,"col": 25,"name": "self"},{"file": 40,"line": 1410,"col": 36,"name": "allocator"},{"file": 40,"line": 1410,"col": 59,"name": "pathname"},{"file": 40,"line": 1428,"col": 20,"name": "self"},{"file": 40,"line": 1453,"col": 19,"name": "self"},{"file": 40,"line": 1453,"col": 30,"name": "sub_path"},{"file": 40,"line": 1453,"col": 52,"name": "args"},{"file": 40,"line": 1468,"col": 23,"name": "self"},{"file": 40,"line": 1468,"col": 34,"name": "sub_path"},{"file": 40,"line": 1468,"col": 56,"name": "args"},{"file": 40,"line": 1506,"col": 20,"name": "self"},{"file": 40,"line": 1506,"col": 31,"name": "sub_path_c"},{"file": 40,"line": 1506,"col": 58,"name": "args"},{"file": 40,"line": 1522,"col": 20,"name": "self"},{"file": 40,"line": 1522,"col": 31,"name": "sub_path_w"},{"file": 40,"line": 1522,"col": 59,"name": "args"},{"file": 40,"line": 1600,"col": 22,"name": "self"},{"file": 40,"line": 1600,"col": 33,"name": "sub_path"},{"file": 40,"line": 1618,"col": 23,"name": "self"},{"file": 40,"line": 1618,"col": 34,"name": "sub_path_c"},{"file": 40,"line": 1637,"col": 23,"name": "self"},{"file": 40,"line": 1637,"col": 34,"name": "sub_path_w"},{"file": 40,"line": 1663,"col": 21,"name": "self"},{"file": 40,"line": 1663,"col": 32,"name": "sub_path"},{"file": 40,"line": 1679,"col": 22,"name": "self"},{"file": 40,"line": 1679,"col": 33,"name": "sub_path_c"},{"file": 40,"line": 1688,"col": 22,"name": "self"},{"file": 40,"line": 1688,"col": 33,"name": "sub_path_w"},{"file": 40,"line": 1701,"col": 18,"name": "self"},{"file": 40,"line": 1701,"col": 29,"name": "old_sub_path"},{"file": 40,"line": 1701,"col": 55,"name": "new_sub_path"},{"file": 40,"line": 1706,"col": 19,"name": "self"},{"file": 40,"line": 1706,"col": 30,"name": "old_sub_path_z"},{"file": 40,"line": 1706,"col": 61,"name": "new_sub_path_z"},{"file": 40,"line": 1712,"col": 19,"name": "self"},{"file": 40,"line": 1712,"col": 30,"name": "old_sub_path_w"},{"file": 40,"line": 1712,"col": 59,"name": "new_sub_path_w"},{"file": 40,"line": 1721,"col": 8,"name": "self"},{"file": 40,"line": 1722,"col": 8,"name": "target_path"},{"file": 40,"line": 1723,"col": 8,"name": "sym_link_path"},{"file": 40,"line": 1724,"col": 8,"name": "flags"},{"file": 40,"line": 1741,"col": 8,"name": "self"},{"file": 40,"line": 1742,"col": 8,"name": "target_path"},{"file": 40,"line": 1743,"col": 8,"name": "sym_link_path"},{"file": 40,"line": 1744,"col": 8,"name": "_"},{"file": 40,"line": 1751,"col": 8,"name": "self"},{"file": 40,"line": 1752,"col": 8,"name": "target_path_c"},{"file": 40,"line": 1753,"col": 8,"name": "sym_link_path_c"},{"file": 40,"line": 1754,"col": 8,"name": "flags"},{"file": 40,"line": 1767,"col": 8,"name": "self"},{"file": 40,"line": 1768,"col": 8,"name": "target_path_w"},{"file": 40,"line": 1769,"col": 8,"name": "sym_link_path_w"},{"file": 40,"line": 1770,"col": 8,"name": "flags"},{"file": 40,"line": 1778,"col": 20,"name": "self"},{"file": 40,"line": 1778,"col": 31,"name": "sub_path"},{"file": 40,"line": 1778,"col": 53,"name": "buffer"},{"file": 40,"line": 1793,"col": 24,"name": "self"},{"file": 40,"line": 1793,"col": 35,"name": "sub_path"},{"file": 40,"line": 1793,"col": 57,"name": "buffer"},{"file": 40,"line": 1798,"col": 21,"name": "self"},{"file": 40,"line": 1798,"col": 32,"name": "sub_path_c"},{"file": 40,"line": 1798,"col": 59,"name": "buffer"},{"file": 40,"line": 1808,"col": 21,"name": "self"},{"file": 40,"line": 1808,"col": 32,"name": "sub_path_w"},{"file": 40,"line": 1808,"col": 57,"name": "buffer"},{"file": 40,"line": 1817,"col": 20,"name": "self"},{"file": 40,"line": 1817,"col": 31,"name": "file_path"},{"file": 40,"line": 1817,"col": 54,"name": "buffer"},{"file": 40,"line": 1886,"col": 22,"name": "self"},{"file": 40,"line": 1886,"col": 33,"name": "sub_path"},{"file": 40,"line": 2035,"col": 21,"name": "self"},{"file": 40,"line": 2035,"col": 32,"name": "sub_path"},{"file": 40,"line": 2035,"col": 54,"name": "data"},{"file": 40,"line": 2048,"col": 18,"name": "self"},{"file": 40,"line": 2048,"col": 29,"name": "sub_path"},{"file": 40,"line": 2048,"col": 51,"name": "flags"},{"file": 40,"line": 2058,"col": 19,"name": "self"},{"file": 40,"line": 2058,"col": 30,"name": "sub_path"},{"file": 40,"line": 2058,"col": 55,"name": "flags"},{"file": 40,"line": 2081,"col": 19,"name": "self"},{"file": 40,"line": 2081,"col": 30,"name": "sub_path_w"},{"file": 40,"line": 2081,"col": 58,"name": "flags"},{"file": 40,"line": 2092,"col": 8,"name": "source_dir"},{"file": 40,"line": 2093,"col": 8,"name": "source_path"},{"file": 40,"line": 2094,"col": 8,"name": "dest_dir"},{"file": 40,"line": 2095,"col": 8,"name": "dest_path"},{"file": 40,"line": 2096,"col": 8,"name": "options"},{"file": 40,"line": 2140,"col": 8,"name": "source_dir"},{"file": 40,"line": 2141,"col": 8,"name": "source_path"},{"file": 40,"line": 2142,"col": 8,"name": "dest_dir"},{"file": 40,"line": 2143,"col": 8,"name": "dest_path"},{"file": 40,"line": 2144,"col": 8,"name": "options"},{"file": 40,"line": 2171,"col": 22,"name": "self"},{"file": 40,"line": 2171,"col": 33,"name": "dest_path"},{"file": 40,"line": 2171,"col": 56,"name": "options"},{"file": 40,"line": 2183,"col": 16,"name": "self"},{"file": 40,"line": 2198,"col": 17,"name": "self"},{"file": 40,"line": 2198,"col": 28,"name": "new_mode"},{"file": 40,"line": 2212,"col": 17,"name": "self"},{"file": 40,"line": 2212,"col": 28,"name": "owner"},{"file": 40,"line": 2212,"col": 46,"name": "group"},{"file": 40,"line": 1532,"col": 21,"name": "self"},{"file": 40,"line": 1532,"col": 32,"name": "sub_path_c"},{"file": 40,"line": 1532,"col": 59,"name": "flags"},{"file": 40,"line": 1549,"col": 26,"name": "self"},{"file": 40,"line": 1549,"col": 37,"name": "sub_path_w"},{"file": 40,"line": 1549,"col": 65,"name": "access_mask"},{"file": 40,"line": 1549,"col": 83,"name": "no_follow"},{"file": 6,"line": 774,"col": 26,"name": "self"},{"file": 36,"line": 998,"col": 18,"name": "self"},{"file": 36,"line": 1015,"col": 24,"name": "self"},{"file": 36,"line": 1015,"col": 42,"name": "address"},{"file": 36,"line": 1072,"col": 25,"name": "self"},{"file": 36,"line": 1072,"col": 43,"name": "address"},{"file": 36,"line": 1220,"col": 25,"name": "self"},{"file": 36,"line": 1220,"col": 43,"name": "address"},{"file": 56,"line": 37,"col": 18,"name": "self"},{"file": 29,"line": 30,"col": 11,"name": "self"},{"file": 29,"line": 30,"col": 30,"name": "x"},{"file": 29,"line": 30,"col": 38,"name": "y"},{"file": 6,"line": 51,"col": 28,"name": "K","comptime": true},{"file": 6,"line": 51,"col": 46,"name": "V","comptime": true},{"file": 6,"line": 71,"col": 30,"name": "V","comptime": true},{"file": 7,"line": 439,"col": 26,"name": "T","comptime": true},{"file": 7,"line": 447,"col": 33,"name": "T","comptime": true},{"file": 7,"line": 447,"col": 51,"name": "alignment","comptime": true},{"file": 3,"line": 356,"col": 31,"name": "self"},{"file": 3,"line": 378,"col": 25,"name": "self"},{"file": 3,"line": 378,"col": 35,"name": "tag","comptime": true},{"file": 3,"line": 378,"col": 54,"name": "version"},{"file": 3,"line": 391,"col": 28,"name": "os"},{"file": 3,"line": 484,"col": 23,"name": "arch"},{"file": 3,"line": 484,"col": 39,"name": "target_os"},{"file": 3,"line": 537,"col": 21,"name": "abi"},{"file": 3,"line": 544,"col": 22,"name": "abi"},{"file": 3,"line": 551,"col": 24,"name": "abi"},{"file": 3,"line": 582,"col": 23,"name": "of"},{"file": 3,"line": 582,"col": 41,"name": "cpu_arch"},{"file": 3,"line": 1315,"col": 24,"name": "arch"},{"file": 13,"line": 29,"col": 31,"name": "node"},{"file": 13,"line": 29,"col": 44,"name": "new_node"},{"file": 13,"line": 40,"col": 30,"name": "node"},{"file": 13,"line": 48,"col": 28,"name": "node"},{"file": 13,"line": 57,"col": 33,"name": "node"},{"file": 14,"line": 242,"col": 13,"name": "ctx"},{"file": 14,"line": 261,"col": 13,"name": "ctx"},{"file": 15,"line": 36,"col": 15,"name": "m"},{"file": 15,"line": 279,"col": 10,"name": "ctx"},{"file": 17,"line": 1717,"col": 18,"name": "h"},{"file": 17,"line": 1717,"col": 36,"name": "did_it"},{"file": 17,"line": 1772,"col": 13,"name": "wait_ns"},{"file": 17,"line": 1772,"col": 27,"name": "sleep_count"},{"file": 18,"line": 147,"col": 13,"name": "ctx"},{"file": 18,"line": 165,"col": 13,"name": "ctx"},{"file": 20,"line": 66,"col": 16,"name": "number"},{"file": 20,"line": 66,"col": 29,"name": "arg1"},{"file": 20,"line": 66,"col": 42,"name": "arg2"},{"file": 20,"line": 66,"col": 55,"name": "arg3"},{"file": 20,"line": 66,"col": 68,"name": "arg4"},{"file": 20,"line": 66,"col": 81,"name": "arg5"},{"file": 20,"line": 102,"col": 20,"name": "func"},{"file": 20,"line": 102,"col": 59,"name": "stack"},{"file": 20,"line": 102,"col": 73,"name": "flags"},{"file": 20,"line": 102,"col": 87,"name": "arg"},{"file": 20,"line": 102,"col": 99,"name": "ptid"},{"file": 20,"line": 102,"col": 111,"name": "tls"},{"file": 20,"line": 102,"col": 123,"name": "ctid"},{"file": 21,"line": 36,"col": 27,"name": "T","comptime": true},{"file": 21,"line": 113,"col": 22,"name": "allocator"},{"file": 21,"line": 206,"col": 21,"name": "T","comptime": true},{"file": 21,"line": 206,"col": 39,"name": "dest"},{"file": 21,"line": 206,"col": 50,"name": "source"},{"file": 21,"line": 398,"col": 16,"name": "T","comptime": true},{"file": 21,"line": 398,"col": 34,"name": "init"},{"file": 21,"line": 492,"col": 13,"name": "T","comptime": true},{"file": 21,"line": 492,"col": 31,"name": "lhs"},{"file": 21,"line": 492,"col": 47,"name": "rhs"},{"file": 21,"line": 514,"col": 16,"name": "T","comptime": true},{"file": 21,"line": 514,"col": 34,"name": "lhs"},{"file": 21,"line": 514,"col": 50,"name": "rhs"},{"file": 21,"line": 538,"col": 19,"name": "T","comptime": true},{"file": 21,"line": 538,"col": 37,"name": "a"},{"file": 21,"line": 538,"col": 51,"name": "b"},{"file": 21,"line": 734,"col": 15,"name": "ptr"},{"file": 21,"line": 734,"col": 29,"name": "end","comptime": true},{"file": 21,"line": 984,"col": 16,"name": "T","comptime": true},{"file": 21,"line": 984,"col": 34,"name": "slice"},{"file": 21,"line": 984,"col": 52,"name": "scalar"},{"file": 21,"line": 992,"col": 12,"name": "allocator"},{"file": 21,"line": 992,"col": 35,"name": "T","comptime": true},{"file": 21,"line": 992,"col": 53,"name": "m"},{"file": 21,"line": 997,"col": 13,"name": "allocator"},{"file": 21,"line": 997,"col": 36,"name": "T","comptime": true},{"file": 21,"line": 997,"col": 54,"name": "m"},{"file": 21,"line": 1002,"col": 16,"name": "T","comptime": true},{"file": 21,"line": 1002,"col": 34,"name": "slice"},{"file": 21,"line": 1002,"col": 52,"name": "values_to_strip"},{"file": 21,"line": 1016,"col": 12,"name": "T","comptime": true},{"file": 21,"line": 1016,"col": 30,"name": "slice"},{"file": 21,"line": 1016,"col": 48,"name": "values_to_strip"},{"file": 21,"line": 1037,"col": 25,"name": "T","comptime": true},{"file": 21,"line": 1037,"col": 43,"name": "slice"},{"file": 21,"line": 1037,"col": 61,"name": "value"},{"file": 21,"line": 1054,"col": 18,"name": "T","comptime": true},{"file": 21,"line": 1054,"col": 36,"name": "slice"},{"file": 21,"line": 1054,"col": 54,"name": "values"},{"file": 21,"line": 1058,"col": 22,"name": "T","comptime": true},{"file": 21,"line": 1058,"col": 40,"name": "slice"},{"file": 21,"line": 1058,"col": 58,"name": "values"},{"file": 21,"line": 1069,"col": 21,"name": "T","comptime": true},{"file": 21,"line": 1069,"col": 39,"name": "slice"},{"file": 21,"line": 1069,"col": 57,"name": "start_index"},{"file": 21,"line": 1069,"col": 77,"name": "values"},{"file": 21,"line": 1079,"col": 15,"name": "T","comptime": true},{"file": 21,"line": 1079,"col": 33,"name": "haystack"},{"file": 21,"line": 1079,"col": 54,"name": "needle"},{"file": 21,"line": 1087,"col": 25,"name": "T","comptime": true},{"file": 21,"line": 1087,"col": 43,"name": "haystack"},{"file": 21,"line": 1087,"col": 64,"name": "needle"},{"file": 21,"line": 1135,"col": 19,"name": "T","comptime": true},{"file": 21,"line": 1135,"col": 37,"name": "haystack"},{"file": 21,"line": 1135,"col": 58,"name": "needle"},{"file": 21,"line": 1246,"col": 13,"name": "T","comptime": true},{"file": 21,"line": 1246,"col": 31,"name": "haystack"},{"file": 21,"line": 1246,"col": 52,"name": "needle"},{"file": 21,"line": 1276,"col": 23,"name": "T","comptime": true},{"file": 21,"line": 1276,"col": 41,"name": "haystack"},{"file": 21,"line": 1276,"col": 62,"name": "expected_count"},{"file": 21,"line": 1276,"col": 85,"name": "needle"},{"file": 21,"line": 1360,"col": 26,"name": "T","comptime": true},{"file": 21,"line": 1360,"col": 44,"name": "bytes"},{"file": 21,"line": 1370,"col": 27,"name": "T","comptime": true},{"file": 21,"line": 1370,"col": 45,"name": "bytes"},{"file": 21,"line": 1398,"col": 20,"name": "T","comptime": true},{"file": 21,"line": 1398,"col": 38,"name": "bytes"},{"file": 21,"line": 1398,"col": 57,"name": "endian"},{"file": 21,"line": 1444,"col": 22,"name": "T","comptime": true},{"file": 21,"line": 1444,"col": 40,"name": "buf"},{"file": 21,"line": 1444,"col": 83,"name": "value"},{"file": 21,"line": 1452,"col": 23,"name": "T","comptime": true},{"file": 21,"line": 1452,"col": 41,"name": "buf"},{"file": 21,"line": 1452,"col": 88,"name": "value"},{"file": 21,"line": 1469,"col": 16,"name": "T","comptime": true},{"file": 21,"line": 1469,"col": 34,"name": "buffer"},{"file": 21,"line": 1469,"col": 84,"name": "value"},{"file": 21,"line": 1469,"col": 94,"name": "endian"},{"file": 21,"line": 1483,"col": 27,"name": "T","comptime": true},{"file": 21,"line": 1483,"col": 45,"name": "buffer"},{"file": 21,"line": 1483,"col": 59,"name": "value"},{"file": 21,"line": 1507,"col": 24,"name": "T","comptime": true},{"file": 21,"line": 1507,"col": 42,"name": "buffer"},{"file": 21,"line": 1507,"col": 56,"name": "value"},{"file": 21,"line": 1545,"col": 21,"name": "T","comptime": true},{"file": 21,"line": 1545,"col": 39,"name": "buffer"},{"file": 21,"line": 1545,"col": 53,"name": "value"},{"file": 21,"line": 1545,"col": 63,"name": "endian"},{"file": 21,"line": 1592,"col": 22,"name": "S","comptime": true},{"file": 21,"line": 1592,"col": 40,"name": "ptr"},{"file": 21,"line": 1783,"col": 18,"name": "T","comptime": true},{"file": 21,"line": 1783,"col": 36,"name": "haystack"},{"file": 21,"line": 1783,"col": 57,"name": "needle"},{"file": 21,"line": 1792,"col": 16,"name": "T","comptime": true},{"file": 21,"line": 1792,"col": 34,"name": "haystack"},{"file": 21,"line": 1792,"col": 55,"name": "needle"},{"file": 21,"line": 1881,"col": 12,"name": "allocator"},{"file": 21,"line": 1881,"col": 35,"name": "separator"},{"file": 21,"line": 1881,"col": 58,"name": "slices"},{"file": 21,"line": 1887,"col": 13,"name": "allocator"},{"file": 21,"line": 1887,"col": 36,"name": "separator"},{"file": 21,"line": 1887,"col": 59,"name": "slices"},{"file": 21,"line": 1971,"col": 14,"name": "allocator"},{"file": 21,"line": 1971,"col": 37,"name": "T","comptime": true},{"file": 21,"line": 1971,"col": 55,"name": "slices"},{"file": 21,"line": 2212,"col": 11,"name": "T","comptime": true},{"file": 21,"line": 2212,"col": 29,"name": "slice"},{"file": 21,"line": 2226,"col": 11,"name": "T","comptime": true},{"file": 21,"line": 2226,"col": 29,"name": "slice"},{"file": 21,"line": 2278,"col": 15,"name": "T","comptime": true},{"file": 21,"line": 2278,"col": 33,"name": "input"},{"file": 21,"line": 2278,"col": 51,"name": "needle"},{"file": 21,"line": 2278,"col": 70,"name": "replacement"},{"file": 21,"line": 2278,"col": 94,"name": "output"},{"file": 21,"line": 2333,"col": 21,"name": "T","comptime": true},{"file": 21,"line": 2333,"col": 39,"name": "slice"},{"file": 21,"line": 2333,"col": 51,"name": "needle"},{"file": 21,"line": 2333,"col": 62,"name": "replacement"},{"file": 21,"line": 2342,"col": 26,"name": "T","comptime": true},{"file": 21,"line": 2342,"col": 44,"name": "slice"},{"file": 21,"line": 2342,"col": 56,"name": "elem"},{"file": 21,"line": 2356,"col": 23,"name": "T","comptime": true},{"file": 21,"line": 2356,"col": 41,"name": "slice"},{"file": 21,"line": 2356,"col": 53,"name": "elem"},{"file": 21,"line": 2381,"col": 23,"name": "T","comptime": true},{"file": 21,"line": 2381,"col": 41,"name": "input"},{"file": 21,"line": 2381,"col": 59,"name": "needle"},{"file": 21,"line": 2381,"col": 78,"name": "replacement"},{"file": 21,"line": 2413,"col": 20,"name": "T","comptime": true},{"file": 21,"line": 2413,"col": 38,"name": "allocator"},{"file": 21,"line": 2413,"col": 61,"name": "input"},{"file": 21,"line": 2413,"col": 79,"name": "needle"},{"file": 21,"line": 2413,"col": 98,"name": "replacement"},{"file": 21,"line": 2432,"col": 22,"name": "T","comptime": true},{"file": 21,"line": 2432,"col": 40,"name": "x"},{"file": 21,"line": 2440,"col": 19,"name": "T","comptime": true},{"file": 21,"line": 2440,"col": 37,"name": "x"},{"file": 21,"line": 2448,"col": 16,"name": "T","comptime": true},{"file": 21,"line": 2448,"col": 34,"name": "x"},{"file": 21,"line": 2448,"col": 40,"name": "endianness_of_x"},{"file": 21,"line": 2456,"col": 16,"name": "T","comptime": true},{"file": 21,"line": 2456,"col": 34,"name": "x"},{"file": 21,"line": 2456,"col": 40,"name": "desired_endianness"},{"file": 21,"line": 2464,"col": 22,"name": "T","comptime": true},{"file": 21,"line": 2464,"col": 40,"name": "x"},{"file": 21,"line": 2472,"col": 19,"name": "T","comptime": true},{"file": 21,"line": 2472,"col": 37,"name": "x"},{"file": 21,"line": 2623,"col": 15,"name": "value"},{"file": 21,"line": 2656,"col": 20,"name": "T","comptime": true},{"file": 21,"line": 2656,"col": 38,"name": "bytes"},{"file": 21,"line": 2713,"col": 20,"name": "T","comptime": true},{"file": 21,"line": 2713,"col": 38,"name": "bytes"},{"file": 21,"line": 2938,"col": 25,"name": "val"},{"file": 21,"line": 2988,"col": 20,"name": "alignment"},{"file": 21,"line": 2992,"col": 25,"name": "i"},{"file": 21,"line": 2992,"col": 35,"name": "alignment"},{"file": 21,"line": 3050,"col": 20,"name": "bytes"},{"file": 21,"line": 3050,"col": 33,"name": "new_alignment","comptime": true},{"file": 21,"line": 3064,"col": 20,"name": "slice"},{"file": 21,"line": 3064,"col": 36,"name": "new_alignment","comptime": true},{"file": 21,"line": 136,"col": 22,"name": "self"},{"file": 21,"line": 136,"col": 40,"name": "n"},{"file": 21,"line": 136,"col": 50,"name": "alignment"},{"file": 21,"line": 136,"col": 66,"name": "len_align"},{"file": 21,"line": 136,"col": 82,"name": "ra"},{"file": 21,"line": 676,"col": 11,"name": "T","comptime": true},{"file": 21,"line": 676,"col": 29,"name": "end","comptime": true},{"file": 21,"line": 788,"col": 14,"name": "ptr"},{"file": 21,"line": 788,"col": 28,"name": "end","comptime": true},{"file": 21,"line": 1106,"col": 39,"name": "pattern"},{"file": 21,"line": 1106,"col": 60,"name": "table"},{"file": 21,"line": 1892,"col": 14,"name": "allocator"},{"file": 21,"line": 1892,"col": 37,"name": "separator"},{"file": 21,"line": 1892,"col": 60,"name": "slices"},{"file": 21,"line": 1892,"col": 88,"name": "zero"},{"file": 21,"line": 2360,"col": 23,"name": "str"},{"file": 21,"line": 2360,"col": 40,"name": "elem"},{"file": 21,"line": 2360,"col": 50,"name": "expected"},{"file": 21,"line": 2641,"col": 26,"name": "T","comptime": true},{"file": 21,"line": 2641,"col": 44,"name": "B","comptime": true},{"file": 21,"line": 3032,"col": 16,"name": "AttributeSource","comptime": true},{"file": 21,"line": 3032,"col": 48,"name": "new_alignment","comptime": true},{"file": 32,"line": 13,"col": 19,"name": "signals"},{"file": 33,"line": 53,"col": 15,"name": "self"},{"file": 33,"line": 53,"col": 29,"name": "name"},{"file": 33,"line": 148,"col": 15,"name": "self"},{"file": 33,"line": 148,"col": 29,"name": "buffer_ptr"},{"file": 33,"line": 288,"col": 13,"name": "config"},{"file": 33,"line": 288,"col": 34,"name": "function","comptime": true},{"file": 33,"line": 288,"col": 62,"name": "args"},{"file": 33,"line": 302,"col": 17,"name": "self"},{"file": 33,"line": 308,"col": 14,"name": "self"},{"file": 33,"line": 314,"col": 12,"name": "self"},{"file": 33,"line": 326,"col": 10,"name": "f","comptime": true},{"file": 33,"line": 326,"col": 31,"name": "args"},{"file": 33,"line": 1004,"col": 18,"name": "thread"},{"file": 33,"line": 1103,"col": 23,"name": "value"},{"file": 33,"line": 1103,"col": 38,"name": "event"},{"file": 34,"line": 15,"col": 20,"name": "ordering","comptime": true},{"file": 34,"line": 26,"col": 28,"name": "ordering","comptime": true},{"file": 36,"line": 152,"col": 25,"name": "first_address"},{"file": 36,"line": 152,"col": 48,"name": "stack_trace"},{"file": 36,"line": 228,"col": 13,"name": "format","comptime": true},{"file": 36,"line": 228,"col": 42,"name": "args"},{"file": 36,"line": 237,"col": 4,"name": "trace"},{"file": 36,"line": 238,"col": 4,"name": "format","comptime": true},{"file": 36,"line": 239,"col": 4,"name": "args"},{"file": 36,"line": 470,"col": 4,"name": "out_stream"},{"file": 36,"line": 471,"col": 4,"name": "debug_info"},{"file": 36,"line": 472,"col": 4,"name": "tty_config"},{"file": 36,"line": 473,"col": 4,"name": "start_addr"},{"file": 36,"line": 1666,"col": 28,"name": "prefix"},{"file": 36,"line": 561,"col": 22,"name": "symbols"},{"file": 36,"line": 561,"col": 52,"name": "address"},{"file": 36,"line": 692,"col": 21,"name": "allocator"},{"file": 36,"line": 692,"col": 48,"name": "coff_file"},{"file": 36,"line": 831,"col": 22,"name": "allocator"},{"file": 36,"line": 831,"col": 49,"name": "macho_file"},{"file": 36,"line": 1623,"col": 25,"name": "info"},{"file": 36,"line": 1634,"col": 30,"name": "info"},{"file": 36,"line": 1634,"col": 65,"name": "msg","comptime": true},{"file": 36,"line": 1634,"col": 83,"name": "format","comptime": true},{"file": 37,"line": 406,"col": 29,"name": "ParseSource"},{"file": 37,"line": 456,"col": 29,"name": "ParseSource"},{"file": 37,"line": 508,"col": 11,"name": "is_64"},{"file": 37,"line": 508,"col": 24,"name": "need_bswap"},{"file": 37,"line": 508,"col": 42,"name": "int_32"},{"file": 37,"line": 508,"col": 59,"name": "int_64"},{"file": 37,"line": 520,"col": 13,"name": "need_bswap"},{"file": 37,"line": 520,"col": 31,"name": "int_32"},{"file": 37,"line": 520,"col": 48,"name": "Int64","comptime": true},{"file": 39,"line": 365,"col": 21,"name": "value"},{"file": 39,"line": 365,"col": 37,"name": "options"},{"file": 39,"line": 365,"col": 61,"name": "writer"},{"file": 39,"line": 764,"col": 24,"name": "bytes"},{"file": 39,"line": 770,"col": 24,"name": "bytes"},{"file": 39,"line": 810,"col": 27,"name": "bytes"},{"file": 39,"line": 817,"col": 27,"name": "bytes"},{"file": 39,"line": 872,"col": 21,"name": "value"},{"file": 39,"line": 879,"col": 21,"name": "value"},{"file": 39,"line": 909,"col": 4,"name": "c"},{"file": 39,"line": 910,"col": 4,"name": "options"},{"file": 39,"line": 911,"col": 4,"name": "writer"},{"file": 39,"line": 918,"col": 4,"name": "c"},{"file": 39,"line": 919,"col": 4,"name": "options"},{"file": 39,"line": 920,"col": 4,"name": "writer"},{"file": 39,"line": 972,"col": 4,"name": "value"},{"file": 39,"line": 973,"col": 4,"name": "options"},{"file": 39,"line": 974,"col": 4,"name": "writer"},{"file": 39,"line": 1063,"col": 4,"name": "value"},{"file": 39,"line": 1064,"col": 4,"name": "options"},{"file": 39,"line": 1065,"col": 4,"name": "writer"},{"file": 39,"line": 1174,"col": 4,"name": "value"},{"file": 39,"line": 1175,"col": 4,"name": "options"},{"file": 39,"line": 1176,"col": 4,"name": "writer"},{"file": 39,"line": 1364,"col": 20,"name": "out_buf"},{"file": 39,"line": 1364,"col": 35,"name": "value"},{"file": 39,"line": 1364,"col": 51,"name": "base"},{"file": 39,"line": 1364,"col": 61,"name": "case"},{"file": 39,"line": 1364,"col": 73,"name": "options"},{"file": 39,"line": 1421,"col": 19,"name": "ns"},{"file": 39,"line": 1474,"col": 25,"name": "ns"},{"file": 39,"line": 1563,"col": 17,"name": "format_fn","comptime": true},{"file": 39,"line": 1711,"col": 21,"name": "T","comptime": true},{"file": 39,"line": 1711,"col": 39,"name": "buf"},{"file": 39,"line": 1711,"col": 56,"name": "radix"},{"file": 39,"line": 1791,"col": 17,"name": "buf"},{"file": 39,"line": 1791,"col": 28,"name": "fmt","comptime": true},{"file": 39,"line": 1791,"col": 54,"name": "args"},{"file": 39,"line": 1819,"col": 19,"name": "allocator"},{"file": 39,"line": 1819,"col": 46,"name": "fmt","comptime": true},{"file": 39,"line": 1819,"col": 72,"name": "args"},{"file": 39,"line": 1845,"col": 26,"name": "buf"},{"file": 39,"line": 1845,"col": 37,"name": "value"},{"file": 39,"line": 1845,"col": 53,"name": "base"},{"file": 39,"line": 1845,"col": 63,"name": "case"},{"file": 39,"line": 1845,"col": 75,"name": "options"},{"file": 39,"line": 1849,"col": 21,"name": "fmt","comptime": true},{"file": 39,"line": 1849,"col": 47,"name": "args"},{"file": 39,"line": 2375,"col": 18,"name": "out"},{"file": 39,"line": 2375,"col": 29,"name": "input"},{"file": 39,"line": 394,"col": 15,"name": "T","comptime": true},{"file": 39,"line": 703,"col": 4,"name": "value"},{"file": 39,"line": 704,"col": 4,"name": "fmt","comptime": true},{"file": 39,"line": 705,"col": 4,"name": "options"},{"file": 39,"line": 706,"col": 4,"name": "writer"},{"file": 39,"line": 736,"col": 22,"name": "case","comptime": true},{"file": 39,"line": 774,"col": 25,"name": "case","comptime": true},{"file": 39,"line": 821,"col": 18,"name": "radix","comptime": true},{"file": 39,"line": 1370,"col": 18,"name": "ns"},{"file": 39,"line": 1370,"col": 27,"name": "fmt","comptime": true},{"file": 39,"line": 1370,"col": 53,"name": "options"},{"file": 39,"line": 1370,"col": 85,"name": "writer"},{"file": 39,"line": 1463,"col": 24,"name": "ns"},{"file": 39,"line": 1463,"col": 33,"name": "fmt","comptime": true},{"file": 39,"line": 1463,"col": 59,"name": "options"},{"file": 39,"line": 1463,"col": 91,"name": "writer"},{"file": 40,"line": 67,"col": 21,"name": "allocator"},{"file": 40,"line": 67,"col": 44,"name": "existing_path"},{"file": 40,"line": 67,"col": 71,"name": "new_path"},{"file": 40,"line": 109,"col": 4,"name": "source_path"},{"file": 40,"line": 110,"col": 4,"name": "dest_path"},{"file": 40,"line": 111,"col": 4,"name": "args"},{"file": 40,"line": 122,"col": 24,"name": "source_path"},{"file": 40,"line": 122,"col": 49,"name": "dest_path"},{"file": 40,"line": 122,"col": 72,"name": "args"},{"file": 40,"line": 212,"col": 23,"name": "absolute_path"},{"file": 40,"line": 218,"col": 24,"name": "absolute_path_z"},{"file": 40,"line": 224,"col": 24,"name": "absolute_path_w"},{"file": 40,"line": 234,"col": 25,"name": "dir_path"},{"file": 40,"line": 240,"col": 26,"name": "dir_path"},{"file": 40,"line": 246,"col": 26,"name": "dir_path"},{"file": 40,"line": 254,"col": 22,"name": "old_path"},{"file": 40,"line": 254,"col": 44,"name": "new_path"},{"file": 40,"line": 261,"col": 23,"name": "old_path"},{"file": 40,"line": 261,"col": 48,"name": "new_path"},{"file": 40,"line": 268,"col": 23,"name": "old_path"},{"file": 40,"line": 268,"col": 49,"name": "new_path"},{"file": 40,"line": 275,"col": 14,"name": "old_dir"},{"file": 40,"line": 275,"col": 28,"name": "old_sub_path"},{"file": 40,"line": 275,"col": 54,"name": "new_dir"},{"file": 40,"line": 275,"col": 68,"name": "new_sub_path"},{"file": 40,"line": 280,"col": 15,"name": "old_dir"},{"file": 40,"line": 280,"col": 29,"name": "old_sub_path_z"},{"file": 40,"line": 280,"col": 60,"name": "new_dir"},{"file": 40,"line": 280,"col": 74,"name": "new_sub_path_z"},{"file": 40,"line": 286,"col": 15,"name": "old_dir"},{"file": 40,"line": 286,"col": 29,"name": "old_sub_path_w"},{"file": 40,"line": 286,"col": 58,"name": "new_dir"},{"file": 40,"line": 286,"col": 72,"name": "new_sub_path_w"},{"file": 40,"line": 2241,"col": 23,"name": "absolute_path"},{"file": 40,"line": 2241,"col": 50,"name": "flags"},{"file": 40,"line": 2250,"col": 24,"name": "absolute_path_c"},{"file": 40,"line": 2250,"col": 56,"name": "flags"},{"file": 40,"line": 2258,"col": 24,"name": "absolute_path_c"},{"file": 40,"line": 2258,"col": 57,"name": "flags"},{"file": 40,"line": 2272,"col": 24,"name": "absolute_path"},{"file": 40,"line": 2272,"col": 51,"name": "flags"},{"file": 40,"line": 2286,"col": 25,"name": "absolute_path_w"},{"file": 40,"line": 2286,"col": 55,"name": "flags"},{"file": 40,"line": 2297,"col": 22,"name": "absolute_path"},{"file": 40,"line": 2297,"col": 49,"name": "flags"},{"file": 40,"line": 2305,"col": 23,"name": "absolute_path"},{"file": 40,"line": 2305,"col": 53,"name": "flags"},{"file": 40,"line": 2313,"col": 23,"name": "absolute_path"},{"file": 40,"line": 2313,"col": 53,"name": "flags"},{"file": 40,"line": 2327,"col": 26,"name": "absolute_path"},{"file": 40,"line": 2327,"col": 53,"name": "flags"},{"file": 40,"line": 2335,"col": 27,"name": "absolute_path_c"},{"file": 40,"line": 2335,"col": 59,"name": "flags"},{"file": 40,"line": 2341,"col": 27,"name": "absolute_path_w"},{"file": 40,"line": 2341,"col": 60,"name": "flags"},{"file": 40,"line": 2350,"col": 26,"name": "absolute_path"},{"file": 40,"line": 2358,"col": 27,"name": "absolute_path_c"},{"file": 40,"line": 2364,"col": 27,"name": "absolute_path_w"},{"file": 40,"line": 2374,"col": 26,"name": "absolute_path"},{"file": 40,"line": 2389,"col": 24,"name": "pathname"},{"file": 40,"line": 2389,"col": 46,"name": "buffer"},{"file": 40,"line": 2396,"col": 25,"name": "pathname_w"},{"file": 40,"line": 2396,"col": 53,"name": "buffer"},{"file": 40,"line": 2402,"col": 25,"name": "pathname_c"},{"file": 40,"line": 2402,"col": 52,"name": "buffer"},{"file": 40,"line": 2423,"col": 23,"name": "target_path"},{"file": 40,"line": 2423,"col": 48,"name": "sym_link_path"},{"file": 40,"line": 2423,"col": 75,"name": "flags"},{"file": 40,"line": 2441,"col": 24,"name": "target_path_w"},{"file": 40,"line": 2441,"col": 52,"name": "sym_link_path_w"},{"file": 40,"line": 2441,"col": 82,"name": "flags"},{"file": 40,"line": 2449,"col": 24,"name": "target_path_c"},{"file": 40,"line": 2449,"col": 54,"name": "sym_link_path_c"},{"file": 40,"line": 2449,"col": 86,"name": "flags"},{"file": 40,"line": 2501,"col": 24,"name": "allocator"},{"file": 40,"line": 2523,"col": 19,"name": "out_buffer"},{"file": 40,"line": 2610,"col": 27,"name": "allocator"},{"file": 40,"line": 2624,"col": 22,"name": "out_buffer"},{"file": 40,"line": 2633,"col": 21,"name": "allocator"},{"file": 40,"line": 2633,"col": 44,"name": "pathname"},{"file": 40,"line": 2649,"col": 13,"name": "fd_in"},{"file": 40,"line": 2649,"col": 29,"name": "fd_out"},{"file": 42,"line": 814,"col": 21,"name": "size","comptime": true},{"file": 42,"line": 814,"col": 43,"name": "fallback_allocator"},{"file": 42,"line": 826,"col": 30,"name": "size","comptime": true},{"file": 42,"line": 1050,"col": 21,"name": "base_allocator"},{"file": 42,"line": 1096,"col": 28,"name": "base_allocator"},{"file": 42,"line": 1126,"col": 35,"name": "base_allocator"},{"file": 42,"line": 1158,"col": 34,"name": "base_allocator"},{"file": 42,"line": 174,"col": 4,"name": "self"},{"file": 42,"line": 175,"col": 4,"name": "len"},{"file": 42,"line": 176,"col": 4,"name": "ptr_align"},{"file": 42,"line": 177,"col": 4,"name": "len_align"},{"file": 42,"line": 178,"col": 4,"name": "ret_addr"},{"file": 42,"line": 189,"col": 4,"name": "self"},{"file": 42,"line": 190,"col": 4,"name": "buf"},{"file": 42,"line": 191,"col": 4,"name": "old_align"},{"file": 42,"line": 192,"col": 4,"name": "new_len"},{"file": 42,"line": 193,"col": 4,"name": "len_align"},{"file": 42,"line": 194,"col": 4,"name": "ret_addr"},{"file": 42,"line": 673,"col": 20,"name": "container"},{"file": 42,"line": 673,"col": 37,"name": "ptr"},{"file": 42,"line": 678,"col": 22,"name": "container"},{"file": 42,"line": 678,"col": 39,"name": "slice"},{"file": 45,"line": 118,"col": 19,"name": "T","comptime": true},{"file": 45,"line": 118,"col": 37,"name": "x"},{"file": 45,"line": 118,"col": 43,"name": "y"},{"file": 45,"line": 118,"col": 49,"name": "tolerance"},{"file": 45,"line": 146,"col": 19,"name": "T","comptime": true},{"file": 45,"line": 146,"col": 37,"name": "x"},{"file": 45,"line": 146,"col": 43,"name": "y"},{"file": 45,"line": 146,"col": 49,"name": "tolerance"},{"file": 45,"line": 194,"col": 25,"name": "value"},{"file": 45,"line": 284,"col": 25,"name": "T","comptime": true},{"file": 45,"line": 299,"col": 25,"name": "T","comptime": true},{"file": 45,"line": 387,"col": 12,"name": "x"},{"file": 45,"line": 387,"col": 24,"name": "y"},{"file": 45,"line": 387,"col": 36,"name": "z"},{"file": 45,"line": 426,"col": 13,"name": "val"},{"file": 45,"line": 426,"col": 27,"name": "lower"},{"file": 45,"line": 426,"col": 43,"name": "upper"},{"file": 45,"line": 466,"col": 14,"name": "x"},{"file": 45,"line": 472,"col": 16,"name": "T","comptime": true},{"file": 45,"line": 472,"col": 34,"name": "a"},{"file": 45,"line": 472,"col": 40,"name": "shift_amt"},{"file": 45,"line": 479,"col": 11,"name": "T","comptime": true},{"file": 45,"line": 479,"col": 29,"name": "a"},{"file": 45,"line": 479,"col": 35,"name": "shift_amt"},{"file": 45,"line": 519,"col": 11,"name": "T","comptime": true},{"file": 45,"line": 519,"col": 29,"name": "a"},{"file": 45,"line": 519,"col": 35,"name": "shift_amt"},{"file": 45,"line": 559,"col": 12,"name": "T","comptime": true},{"file": 45,"line": 559,"col": 30,"name": "x"},{"file": 45,"line": 559,"col": 36,"name": "r"},{"file": 45,"line": 587,"col": 12,"name": "T","comptime": true},{"file": 45,"line": 587,"col": 30,"name": "x"},{"file": 45,"line": 587,"col": 36,"name": "r"},{"file": 45,"line": 627,"col": 19,"name": "T","comptime": true},{"file": 45,"line": 639,"col": 23,"name": "from","comptime": true},{"file": 45,"line": 639,"col": 52,"name": "to","comptime": true},{"file": 45,"line": 716,"col": 14,"name": "x"},{"file": 45,"line": 751,"col": 16,"name": "T","comptime": true},{"file": 45,"line": 751,"col": 34,"name": "numerator"},{"file": 45,"line": 751,"col": 48,"name": "denominator"},{"file": 45,"line": 775,"col": 16,"name": "T","comptime": true},{"file": 45,"line": 775,"col": 34,"name": "numerator"},{"file": 45,"line": 775,"col": 48,"name": "denominator"},{"file": 45,"line": 799,"col": 15,"name": "T","comptime": true},{"file": 45,"line": 799,"col": 33,"name": "numerator"},{"file": 45,"line": 799,"col": 47,"name": "denominator"},{"file": 45,"line": 854,"col": 16,"name": "T","comptime": true},{"file": 45,"line": 854,"col": 34,"name": "numerator"},{"file": 45,"line": 854,"col": 48,"name": "denominator"},{"file": 45,"line": 882,"col": 11,"name": "T","comptime": true},{"file": 45,"line": 882,"col": 29,"name": "numerator"},{"file": 45,"line": 882,"col": 43,"name": "denominator"},{"file": 45,"line": 908,"col": 11,"name": "T","comptime": true},{"file": 45,"line": 908,"col": 29,"name": "numerator"},{"file": 45,"line": 908,"col": 43,"name": "denominator"},{"file": 45,"line": 968,"col": 18,"name": "x"},{"file": 45,"line": 1017,"col": 17,"name": "alignment","comptime": true},{"file": 45,"line": 1017,"col": 42,"name": "ptr"},{"file": 45,"line": 1088,"col": 28,"name": "T","comptime": true},{"file": 45,"line": 1088,"col": 46,"name": "value"},{"file": 45,"line": 1128,"col": 16,"name": "T","comptime": true},{"file": 45,"line": 1128,"col": 34,"name": "x"},{"file": 45,"line": 1137,"col": 21,"name": "T","comptime": true},{"file": 45,"line": 1137,"col": 39,"name": "x"},{"file": 45,"line": 1162,"col": 17,"name": "T","comptime": true},{"file": 45,"line": 1162,"col": 35,"name": "value"},{"file": 45,"line": 1340,"col": 13,"name": "a"},{"file": 45,"line": 1340,"col": 25,"name": "b"},{"file": 45,"line": 1371,"col": 15,"name": "a"},{"file": 45,"line": 1371,"col": 27,"name": "op"},{"file": 45,"line": 1371,"col": 48,"name": "b"},{"file": 45,"line": 1433,"col": 23,"name": "MaskInt","comptime": true},{"file": 45,"line": 1433,"col": 47,"name": "value"},{"file": 45,"line": 1478,"col": 19,"name": "num"},{"file": 45,"line": 1478,"col": 33,"name": "denom"},{"file": 46,"line": 12,"col": 15,"name": "v"},{"file": 46,"line": 55,"col": 20,"name": "T","comptime": true},{"file": 46,"line": 55,"col": 38,"name": "str"},{"file": 46,"line": 99,"col": 16,"name": "T","comptime": true},{"file": 46,"line": 118,"col": 17,"name": "T","comptime": true},{"file": 46,"line": 363,"col": 20,"name": "T","comptime": true},{"file": 46,"line": 404,"col": 23,"name": "T","comptime": true},{"file": 46,"line": 404,"col": 41,"name": "decl_name","comptime": true},{"file": 46,"line": 440,"col": 14,"name": "T","comptime": true},{"file": 46,"line": 485,"col": 17,"name": "T","comptime": true},{"file": 46,"line": 485,"col": 35,"name": "field","comptime": true},{"file": 46,"line": 520,"col": 18,"name": "T","comptime": true},{"file": 46,"line": 559,"col": 17,"name": "T","comptime": true},{"file": 46,"line": 622,"col": 17,"name": "u"},{"file": 46,"line": 649,"col": 18,"name": "U","comptime": true},{"file": 46,"line": 649,"col": 36,"name": "tag"},{"file": 46,"line": 816,"col": 17,"name": "EnumTag","comptime": true},{"file": 46,"line": 816,"col": 41,"name": "tag_int"},{"file": 46,"line": 828,"col": 18,"name": "T","comptime": true},{"file": 46,"line": 828,"col": 36,"name": "name","comptime": true},{"file": 46,"line": 839,"col": 16,"name": "Namespace","comptime": true},{"file": 46,"line": 839,"col": 42,"name": "Decl","comptime": true},{"file": 46,"line": 868,"col": 13,"name": "bit_count","comptime": true},{"file": 46,"line": 881,"col": 14,"name": "len","comptime": true},{"file": 46,"line": 881,"col": 33,"name": "child","comptime": true},{"file": 46,"line": 897,"col": 17,"name": "Function","comptime": true},{"file": 46,"line": 939,"col": 13,"name": "types","comptime": true},{"file": 46,"line": 1003,"col": 20,"name": "name","comptime": true},{"file": 46,"line": 1003,"col": 47,"name": "T","comptime": true},{"file": 46,"line": 1010,"col": 15,"name": "error_union"},{"file": 46,"line": 580,"col": 19,"name": "expected"},{"file": 46,"line": 580,"col": 38,"name": "actual"},{"file": 47,"line": 270,"col": 14,"name": "fd"},{"file": 47,"line": 270,"col": 24,"name": "mode"},{"file": 47,"line": 311,"col": 14,"name": "fd"},{"file": 47,"line": 311,"col": 24,"name": "owner"},{"file": 47,"line": 311,"col": 39,"name": "group"},{"file": 47,"line": 345,"col": 17,"name": "buffer"},{"file": 47,"line": 476,"col": 12,"name": "pid"},{"file": 47,"line": 476,"col": 24,"name": "sig"},{"file": 47,"line": 608,"col": 13,"name": "fd"},{"file": 47,"line": 608,"col": 23,"name": "iov"},{"file": 47,"line": 668,"col": 13,"name": "fd"},{"file": 47,"line": 668,"col": 23,"name": "buf"},{"file": 47,"line": 668,"col": 34,"name": "offset"},{"file": 47,"line": 745,"col": 17,"name": "fd"},{"file": 47,"line": 745,"col": 27,"name": "length"},{"file": 47,"line": 816,"col": 14,"name": "fd"},{"file": 47,"line": 816,"col": 24,"name": "iov"},{"file": 47,"line": 816,"col": 44,"name": "offset"},{"file": 47,"line": 999,"col": 14,"name": "fd"},{"file": 47,"line": 999,"col": 24,"name": "iov"},{"file": 47,"line": 1074,"col": 14,"name": "fd"},{"file": 47,"line": 1074,"col": 24,"name": "bytes"},{"file": 47,"line": 1074,"col": 43,"name": "offset"},{"file": 47,"line": 1166,"col": 15,"name": "fd"},{"file": 47,"line": 1166,"col": 25,"name": "iov"},{"file": 47,"line": 1166,"col": 51,"name": "offset"},{"file": 47,"line": 1282,"col": 12,"name": "file_path"},{"file": 47,"line": 1282,"col": 35,"name": "flags"},{"file": 47,"line": 1282,"col": 47,"name": "perm"},{"file": 47,"line": 1295,"col": 13,"name": "file_path"},{"file": 47,"line": 1295,"col": 39,"name": "flags"},{"file": 47,"line": 1295,"col": 51,"name": "perm"},{"file": 47,"line": 1373,"col": 13,"name": "file_path_w"},{"file": 47,"line": 1373,"col": 39,"name": "flags"},{"file": 47,"line": 1373,"col": 51,"name": "perm"},{"file": 47,"line": 1387,"col": 14,"name": "dir_fd"},{"file": 47,"line": 1387,"col": 28,"name": "file_path"},{"file": 47,"line": 1387,"col": 51,"name": "flags"},{"file": 47,"line": 1387,"col": 63,"name": "mode"},{"file": 47,"line": 1400,"col": 18,"name": "dir_fd"},{"file": 47,"line": 1400,"col": 32,"name": "file_path"},{"file": 47,"line": 1400,"col": 55,"name": "lookup_flags"},{"file": 47,"line": 1400,"col": 84,"name": "oflags"},{"file": 47,"line": 1400,"col": 102,"name": "fdflags"},{"file": 47,"line": 1400,"col": 122,"name": "base"},{"file": 47,"line": 1400,"col": 138,"name": "inheriting"},{"file": 47,"line": 1483,"col": 15,"name": "dir_fd"},{"file": 47,"line": 1483,"col": 29,"name": "file_path_w"},{"file": 47,"line": 1483,"col": 55,"name": "flags"},{"file": 47,"line": 1483,"col": 67,"name": "mode"},{"file": 47,"line": 1494,"col": 11,"name": "old_fd"},{"file": 47,"line": 1504,"col": 12,"name": "old_fd"},{"file": 47,"line": 1504,"col": 26,"name": "new_fd"},{"file": 47,"line": 1537,"col": 4,"name": "path"},{"file": 47,"line": 1538,"col": 4,"name": "child_argv"},{"file": 47,"line": 1539,"col": 4,"name": "envp"},{"file": 47,"line": 1574,"col": 4,"name": "arg0_expand","comptime": true},{"file": 47,"line": 1575,"col": 4,"name": "file"},{"file": 47,"line": 1576,"col": 4,"name": "child_argv"},{"file": 47,"line": 1580,"col": 4,"name": "envp"},{"file": 47,"line": 1628,"col": 4,"name": "file"},{"file": 47,"line": 1629,"col": 4,"name": "argv_ptr"},{"file": 47,"line": 1630,"col": 4,"name": "envp"},{"file": 47,"line": 1701,"col": 15,"name": "key"},{"file": 47,"line": 1745,"col": 14,"name": "out_buffer"},{"file": 47,"line": 1792,"col": 15,"name": "target_path"},{"file": 47,"line": 1792,"col": 40,"name": "sym_link_path"},{"file": 47,"line": 1808,"col": 16,"name": "target_path"},{"file": 47,"line": 1808,"col": 44,"name": "sym_link_path"},{"file": 47,"line": 1838,"col": 17,"name": "target_path"},{"file": 47,"line": 1838,"col": 42,"name": "newdirfd"},{"file": 47,"line": 1838,"col": 58,"name": "sym_link_path"},{"file": 47,"line": 1854,"col": 21,"name": "target_path"},{"file": 47,"line": 1854,"col": 46,"name": "newdirfd"},{"file": 47,"line": 1854,"col": 62,"name": "sym_link_path"},{"file": 47,"line": 1878,"col": 18,"name": "target_path"},{"file": 47,"line": 1878,"col": 46,"name": "newdirfd"},{"file": 47,"line": 1878,"col": 62,"name": "sym_link_path"},{"file": 47,"line": 1917,"col": 13,"name": "oldpath"},{"file": 47,"line": 1917,"col": 37,"name": "newpath"},{"file": 47,"line": 1917,"col": 61,"name": "flags"},{"file": 47,"line": 1939,"col": 12,"name": "oldpath"},{"file": 47,"line": 1939,"col": 33,"name": "newpath"},{"file": 47,"line": 1939,"col": 54,"name": "flags"},{"file": 47,"line": 1948,"col": 4,"name": "olddir"},{"file": 47,"line": 1949,"col": 4,"name": "oldpath"},{"file": 47,"line": 1950,"col": 4,"name": "newdir"},{"file": 47,"line": 1951,"col": 4,"name": "newpath"},{"file": 47,"line": 1952,"col": 4,"name": "flags"},{"file": 47,"line": 1977,"col": 4,"name": "olddir"},{"file": 47,"line": 1978,"col": 4,"name": "oldpath"},{"file": 47,"line": 1979,"col": 4,"name": "newdir"},{"file": 47,"line": 1980,"col": 4,"name": "newpath"},{"file": 47,"line": 1981,"col": 4,"name": "flags"},{"file": 47,"line": 2013,"col": 14,"name": "file_path"},{"file": 47,"line": 2028,"col": 15,"name": "file_path"},{"file": 47,"line": 2053,"col": 15,"name": "file_path_w"},{"file": 47,"line": 2064,"col": 16,"name": "dirfd"},{"file": 47,"line": 2064,"col": 29,"name": "file_path"},{"file": 47,"line": 2064,"col": 52,"name": "flags"},{"file": 47,"line": 2080,"col": 20,"name": "dirfd"},{"file": 47,"line": 2080,"col": 33,"name": "file_path"},{"file": 47,"line": 2080,"col": 56,"name": "flags"},{"file": 47,"line": 2111,"col": 17,"name": "dirfd"},{"file": 47,"line": 2111,"col": 30,"name": "file_path_c"},{"file": 47,"line": 2111,"col": 58,"name": "flags"},{"file": 47,"line": 2141,"col": 17,"name": "dirfd"},{"file": 47,"line": 2141,"col": 30,"name": "sub_path_w"},{"file": 47,"line": 2141,"col": 55,"name": "flags"},{"file": 47,"line": 2171,"col": 14,"name": "old_path"},{"file": 47,"line": 2171,"col": 36,"name": "new_path"},{"file": 47,"line": 2188,"col": 15,"name": "old_path"},{"file": 47,"line": 2188,"col": 40,"name": "new_path"},{"file": 47,"line": 2220,"col": 15,"name": "old_path"},{"file": 47,"line": 2220,"col": 41,"name": "new_path"},{"file": 47,"line": 2227,"col": 4,"name": "old_dir_fd"},{"file": 47,"line": 2228,"col": 4,"name": "old_path"},{"file": 47,"line": 2229,"col": 4,"name": "new_dir_fd"},{"file": 47,"line": 2230,"col": 4,"name": "new_path"},{"file": 47,"line": 2247,"col": 20,"name": "old_dir_fd"},{"file": 47,"line": 2247,"col": 38,"name": "old_path"},{"file": 47,"line": 2247,"col": 60,"name": "new_dir_fd"},{"file": 47,"line": 2247,"col": 78,"name": "new_path"},{"file": 47,"line": 2275,"col": 4,"name": "old_dir_fd"},{"file": 47,"line": 2276,"col": 4,"name": "old_path"},{"file": 47,"line": 2277,"col": 4,"name": "new_dir_fd"},{"file": 47,"line": 2278,"col": 4,"name": "new_path"},{"file": 47,"line": 2313,"col": 4,"name": "old_dir_fd"},{"file": 47,"line": 2314,"col": 4,"name": "old_path_w"},{"file": 47,"line": 2315,"col": 4,"name": "new_dir_fd"},{"file": 47,"line": 2316,"col": 4,"name": "new_path_w"},{"file": 47,"line": 2317,"col": 4,"name": "ReplaceIfExists"},{"file": 47,"line": 2368,"col": 15,"name": "dir_fd"},{"file": 47,"line": 2368,"col": 29,"name": "sub_dir_path"},{"file": 47,"line": 2368,"col": 55,"name": "mode"},{"file": 47,"line": 2382,"col": 19,"name": "dir_fd"},{"file": 47,"line": 2382,"col": 33,"name": "sub_dir_path"},{"file": 47,"line": 2382,"col": 59,"name": "mode"},{"file": 47,"line": 2405,"col": 16,"name": "dir_fd"},{"file": 47,"line": 2405,"col": 30,"name": "sub_dir_path"},{"file": 47,"line": 2405,"col": 59,"name": "mode"},{"file": 47,"line": 2430,"col": 16,"name": "dir_fd"},{"file": 47,"line": 2430,"col": 30,"name": "sub_path_w"},{"file": 47,"line": 2430,"col": 55,"name": "mode"},{"file": 47,"line": 2468,"col": 13,"name": "dir_path"},{"file": 47,"line": 2468,"col": 35,"name": "mode"},{"file": 47,"line": 2481,"col": 14,"name": "dir_path"},{"file": 47,"line": 2481,"col": 39,"name": "mode"},{"file": 47,"line": 2506,"col": 14,"name": "dir_path_w"},{"file": 47,"line": 2506,"col": 39,"name": "mode"},{"file": 47,"line": 2538,"col": 13,"name": "dir_path"},{"file": 47,"line": 2553,"col": 14,"name": "dir_path"},{"file": 47,"line": 2578,"col": 14,"name": "dir_path_w"},{"file": 47,"line": 2601,"col": 13,"name": "dir_path"},{"file": 47,"line": 2618,"col": 14,"name": "dir_path"},{"file": 47,"line": 2640,"col": 14,"name": "dir_path"},{"file": 47,"line": 2653,"col": 14,"name": "dirfd"},{"file": 47,"line": 2687,"col": 16,"name": "file_path"},{"file": 47,"line": 2687,"col": 39,"name": "out_buffer"},{"file": 47,"line": 2703,"col": 17,"name": "file_path"},{"file": 47,"line": 2703,"col": 41,"name": "out_buffer"},{"file": 47,"line": 2708,"col": 17,"name": "file_path"},{"file": 47,"line": 2708,"col": 43,"name": "out_buffer"},{"file": 47,"line": 2732,"col": 18,"name": "dirfd"},{"file": 47,"line": 2732,"col": 31,"name": "file_path"},{"file": 47,"line": 2732,"col": 54,"name": "out_buffer"},{"file": 47,"line": 2748,"col": 22,"name": "dirfd"},{"file": 47,"line": 2748,"col": 35,"name": "file_path"},{"file": 47,"line": 2748,"col": 58,"name": "out_buffer"},{"file": 47,"line": 2768,"col": 19,"name": "dirfd"},{"file": 47,"line": 2768,"col": 32,"name": "file_path"},{"file": 47,"line": 2768,"col": 56,"name": "out_buffer"},{"file": 47,"line": 2774,"col": 19,"name": "dirfd"},{"file": 47,"line": 2774,"col": 32,"name": "file_path"},{"file": 47,"line": 2774,"col": 58,"name": "out_buffer"},{"file": 47,"line": 2802,"col": 14,"name": "uid"},{"file": 47,"line": 2812,"col": 15,"name": "uid"},{"file": 47,"line": 2821,"col": 16,"name": "ruid"},{"file": 47,"line": 2821,"col": 29,"name": "euid"},{"file": 47,"line": 2831,"col": 14,"name": "gid"},{"file": 47,"line": 2841,"col": 15,"name": "uid"},{"file": 47,"line": 2850,"col": 16,"name": "rgid"},{"file": 47,"line": 2850,"col": 29,"name": "egid"},{"file": 47,"line": 2905,"col": 19,"name": "handle"},{"file": 47,"line": 2955,"col": 14,"name": "domain"},{"file": 47,"line": 2955,"col": 27,"name": "socket_type"},{"file": 47,"line": 2955,"col": 45,"name": "protocol"},{"file": 47,"line": 3030,"col": 16,"name": "sock"},{"file": 47,"line": 3030,"col": 32,"name": "how"},{"file": 47,"line": 3066,"col": 19,"name": "sock"},{"file": 47,"line": 3117,"col": 12,"name": "sock"},{"file": 47,"line": 3117,"col": 28,"name": "addr"},{"file": 47,"line": 3117,"col": 51,"name": "len"},{"file": 47,"line": 3187,"col": 14,"name": "sock"},{"file": 47,"line": 3187,"col": 30,"name": "backlog"},{"file": 47,"line": 3263,"col": 4,"docs": " This argument is a socket that has been created with `socket`, bound to a local address with `bind`, and is listening for connections after a `listen`.","name": "sock"},{"file": 47,"line": 3268,"col": 4,"docs": " This argument is a pointer to a sockaddr structure.  This structure is filled in with  the address  of  the  peer  socket, as known to the communications layer.  The exact format of the address returned addr is determined by the socket's address  family  (see  `socket`  and  the respective  protocol  man  pages).","name": "addr"},{"file": 47,"line": 3275,"col": 4,"docs": " This argument is a value-result argument: the caller must initialize it to contain  the size (in bytes) of the structure pointed to by addr; on return it will contain the actual size of the peer address. The returned address is truncated if the buffer provided is too small; in this  case,  `addr_size` will return a value greater than was supplied to the call.","name": "addr_size"},{"file": 47,"line": 3282,"col": 4,"docs": " The following values can be bitwise ORed in flags to obtain different behavior: * `SOCK.NONBLOCK` - Set the `O.NONBLOCK` file status flag on the open file description (see `open`)   referred  to by the new file descriptor.  Using this flag saves extra calls to `fcntl` to achieve   the same result. * `SOCK.CLOEXEC`  - Set the close-on-exec (`FD_CLOEXEC`) flag on the new file descriptor.   See  the   description  of the `O.CLOEXEC` flag in `open` for reasons why this may be useful.","name": "flags"},{"file": 47,"line": 3356,"col": 21,"name": "flags"},{"file": 47,"line": 3395,"col": 17,"name": "epfd"},{"file": 47,"line": 3395,"col": 28,"name": "op"},{"file": 47,"line": 3395,"col": 37,"name": "fd"},{"file": 47,"line": 3395,"col": 46,"name": "event"},{"file": 47,"line": 3415,"col": 18,"name": "epfd"},{"file": 47,"line": 3415,"col": 29,"name": "events"},{"file": 47,"line": 3415,"col": 58,"name": "timeout"},{"file": 47,"line": 3436,"col": 15,"name": "initval"},{"file": 47,"line": 3436,"col": 29,"name": "flags"},{"file": 47,"line": 3463,"col": 19,"name": "sock"},{"file": 47,"line": 3463,"col": 35,"name": "addr"},{"file": 47,"line": 3463,"col": 52,"name": "addrlen"},{"file": 47,"line": 3492,"col": 19,"name": "sock"},{"file": 47,"line": 3492,"col": 35,"name": "addr"},{"file": 47,"line": 3492,"col": 52,"name": "addrlen"},{"file": 47,"line": 3571,"col": 15,"name": "sock"},{"file": 47,"line": 3571,"col": 31,"name": "sock_addr"},{"file": 47,"line": 3571,"col": 59,"name": "len"},{"file": 47,"line": 3623,"col": 23,"name": "sockfd"},{"file": 47,"line": 3663,"col": 15,"name": "pid"},{"file": 47,"line": 3663,"col": 27,"name": "flags"},{"file": 47,"line": 3728,"col": 15,"name": "dirfd"},{"file": 47,"line": 3728,"col": 28,"name": "pathname"},{"file": 47,"line": 3728,"col": 50,"name": "flags"},{"file": 47,"line": 3743,"col": 19,"name": "dirfd"},{"file": 47,"line": 3743,"col": 32,"name": "pathname"},{"file": 47,"line": 3743,"col": 54,"name": "flags"},{"file": 47,"line": 3762,"col": 16,"name": "dirfd"},{"file": 47,"line": 3762,"col": 29,"name": "pathname"},{"file": 47,"line": 3762,"col": 54,"name": "flags"},{"file": 47,"line": 3822,"col": 4,"name": "kq"},{"file": 47,"line": 3823,"col": 4,"name": "changelist"},{"file": 47,"line": 3824,"col": 4,"name": "eventlist"},{"file": 47,"line": 3825,"col": 4,"name": "timeout"},{"file": 47,"line": 3858,"col": 21,"name": "flags"},{"file": 47,"line": 3880,"col": 25,"name": "inotify_fd"},{"file": 47,"line": 3880,"col": 42,"name": "pathname"},{"file": 47,"line": 3880,"col": 64,"name": "mask"},{"file": 47,"line": 3888,"col": 26,"name": "inotify_fd"},{"file": 47,"line": 3888,"col": 43,"name": "pathname"},{"file": 47,"line": 3888,"col": 68,"name": "mask"},{"file": 47,"line": 3906,"col": 24,"name": "inotify_fd"},{"file": 47,"line": 3906,"col": 41,"name": "wd"},{"file": 47,"line": 3930,"col": 16,"name": "memory"},{"file": 47,"line": 3930,"col": 51,"name": "protection"},{"file": 47,"line": 4045,"col": 14,"name": "path"},{"file": 47,"line": 4045,"col": 32,"name": "mode"},{"file": 47,"line": 4058,"col": 15,"name": "path"},{"file": 47,"line": 4058,"col": 36,"name": "mode"},{"file": 47,"line": 4084,"col": 15,"name": "path"},{"file": 47,"line": 4084,"col": 37,"name": "mode"},{"file": 47,"line": 4100,"col": 17,"name": "dirfd"},{"file": 47,"line": 4100,"col": 30,"name": "path"},{"file": 47,"line": 4100,"col": 48,"name": "mode"},{"file": 47,"line": 4100,"col": 59,"name": "flags"},{"file": 47,"line": 4110,"col": 18,"name": "dirfd"},{"file": 47,"line": 4110,"col": 31,"name": "path"},{"file": 47,"line": 4110,"col": 52,"name": "mode"},{"file": 47,"line": 4110,"col": 63,"name": "flags"},{"file": 47,"line": 4135,"col": 18,"name": "dirfd"},{"file": 47,"line": 4135,"col": 31,"name": "sub_path_w"},{"file": 47,"line": 4135,"col": 59,"name": "mode"},{"file": 47,"line": 4135,"col": 70,"name": "flags"},{"file": 47,"line": 4192,"col": 13,"name": "flags"},{"file": 47,"line": 4251,"col": 4,"name": "name"},{"file": 47,"line": 4252,"col": 4,"name": "oldp"},{"file": 47,"line": 4253,"col": 4,"name": "oldlenp"},{"file": 47,"line": 4254,"col": 4,"name": "newp"},{"file": 47,"line": 4255,"col": 4,"name": "newlen"},{"file": 47,"line": 4278,"col": 4,"name": "name"},{"file": 47,"line": 4279,"col": 4,"name": "oldp"},{"file": 47,"line": 4280,"col": 4,"name": "oldlenp"},{"file": 47,"line": 4281,"col": 4,"name": "newp"},{"file": 47,"line": 4282,"col": 4,"name": "newlen"},{"file": 47,"line": 4301,"col": 20,"name": "tv"},{"file": 47,"line": 4301,"col": 35,"name": "tz"},{"file": 47,"line": 4318,"col": 17,"name": "fd"},{"file": 47,"line": 4318,"col": 27,"name": "offset"},{"file": 47,"line": 4366,"col": 17,"name": "fd"},{"file": 47,"line": 4366,"col": 27,"name": "offset"},{"file": 47,"line": 4413,"col": 17,"name": "fd"},{"file": 47,"line": 4413,"col": 27,"name": "offset"},{"file": 47,"line": 4460,"col": 21,"name": "fd"},{"file": 47,"line": 4513,"col": 13,"name": "fd"},{"file": 47,"line": 4513,"col": 23,"name": "cmd"},{"file": 47,"line": 4513,"col": 33,"name": "arg"},{"file": 47,"line": 4641,"col": 16,"name": "pathname"},{"file": 47,"line": 4641,"col": 38,"name": "out_buffer"},{"file": 47,"line": 4656,"col": 17,"name": "pathname"},{"file": 47,"line": 4656,"col": 42,"name": "out_buffer"},{"file": 47,"line": 4690,"col": 17,"name": "pathname"},{"file": 47,"line": 4690,"col": 40,"name": "out_buffer"},{"file": 47,"line": 4730,"col": 17,"name": "fd"},{"file": 47,"line": 4730,"col": 27,"name": "out_buffer"},{"file": 47,"line": 4783,"col": 17,"name": "seconds"},{"file": 47,"line": 4783,"col": 31,"name": "nanoseconds"},{"file": 47,"line": 4893,"col": 21,"name": "clk_id"},{"file": 47,"line": 4893,"col": 34,"name": "tp"},{"file": 47,"line": 4934,"col": 20,"name": "clk_id"},{"file": 47,"line": 4934,"col": 33,"name": "res"},{"file": 47,"line": 4958,"col": 25,"name": "pid"},{"file": 47,"line": 5013,"col": 19,"name": "ss"},{"file": 47,"line": 5013,"col": 34,"name": "old_ss"},{"file": 47,"line": 5058,"col": 16,"name": "fd"},{"file": 47,"line": 5058,"col": 26,"name": "times"},{"file": 47,"line": 5091,"col": 19,"name": "name_buffer"},{"file": 47,"line": 5121,"col": 4,"name": "op"},{"file": 47,"line": 5122,"col": 4,"name": "dname"},{"file": 47,"line": 5123,"col": 4,"name": "class"},{"file": 47,"line": 5124,"col": 4,"name": "ty"},{"file": 47,"line": 5125,"col": 4,"name": "data"},{"file": 47,"line": 5126,"col": 4,"name": "newrr"},{"file": 47,"line": 5127,"col": 4,"name": "buf"},{"file": 47,"line": 5238,"col": 4,"docs": " The file descriptor of the sending socket.","name": "sockfd"},{"file": 47,"line": 5240,"col": 4,"docs": " Message header and iovecs","name": "msg"},{"file": 47,"line": 5241,"col": 4,"name": "flags"},{"file": 47,"line": 5336,"col": 4,"docs": " The file descriptor of the sending socket.","name": "sockfd"},{"file": 47,"line": 5338,"col": 4,"docs": " Message to send.","name": "buf"},{"file": 47,"line": 5339,"col": 4,"name": "flags"},{"file": 47,"line": 5340,"col": 4,"name": "dest_addr"},{"file": 47,"line": 5341,"col": 4,"name": "addrlen"},{"file": 47,"line": 5428,"col": 4,"docs": " The file descriptor of the sending socket.","name": "sockfd"},{"file": 47,"line": 5429,"col": 4,"name": "buf"},{"file": 47,"line": 5430,"col": 4,"name": "flags"},{"file": 47,"line": 5490,"col": 4,"name": "out_fd"},{"file": 47,"line": 5491,"col": 4,"name": "in_fd"},{"file": 47,"line": 5492,"col": 4,"name": "in_offset"},{"file": 47,"line": 5493,"col": 4,"name": "in_len"},{"file": 47,"line": 5494,"col": 4,"name": "headers"},{"file": 47,"line": 5495,"col": 4,"name": "trailers"},{"file": 47,"line": 5496,"col": 4,"name": "flags"},{"file": 47,"line": 5811,"col": 23,"name": "fd_in"},{"file": 47,"line": 5811,"col": 36,"name": "off_in"},{"file": 47,"line": 5811,"col": 49,"name": "fd_out"},{"file": 47,"line": 5811,"col": 63,"name": "off_out"},{"file": 47,"line": 5811,"col": 77,"name": "len"},{"file": 47,"line": 5811,"col": 89,"name": "flags"},{"file": 47,"line": 5865,"col": 12,"name": "fds"},{"file": 47,"line": 5865,"col": 27,"name": "timeout"},{"file": 47,"line": 5903,"col": 13,"name": "fds"},{"file": 47,"line": 5903,"col": 28,"name": "timeout"},{"file": 47,"line": 5903,"col": 55,"name": "mask"},{"file": 47,"line": 5949,"col": 12,"name": "sock"},{"file": 47,"line": 5949,"col": 28,"name": "buf"},{"file": 47,"line": 5949,"col": 39,"name": "flags"},{"file": 47,"line": 5956,"col": 4,"name": "sockfd"},{"file": 47,"line": 5957,"col": 4,"name": "buf"},{"file": 47,"line": 5958,"col": 4,"name": "flags"},{"file": 47,"line": 5959,"col": 4,"name": "src_addr"},{"file": 47,"line": 5960,"col": 4,"name": "addrlen"},{"file": 47,"line": 6002,"col": 4,"name": "msg"},{"file": 47,"line": 6003,"col": 4,"name": "comp_dn"},{"file": 47,"line": 6004,"col": 4,"name": "exp_dn"},{"file": 47,"line": 6090,"col": 18,"name": "fd"},{"file": 47,"line": 6090,"col": 32,"name": "level"},{"file": 47,"line": 6090,"col": 44,"name": "optname"},{"file": 47,"line": 6090,"col": 58,"name": "opt"},{"file": 47,"line": 6134,"col": 21,"name": "name"},{"file": 47,"line": 6134,"col": 42,"name": "flags"},{"file": 47,"line": 6163,"col": 20,"name": "name"},{"file": 47,"line": 6163,"col": 38,"name": "flags"},{"file": 47,"line": 6168,"col": 17,"name": "who"},{"file": 47,"line": 6181,"col": 17,"name": "handle"},{"file": 47,"line": 6196,"col": 17,"name": "handle"},{"file": 47,"line": 6196,"col": 31,"name": "optional_action"},{"file": 47,"line": 6196,"col": 54,"name": "termios_p"},{"file": 47,"line": 6215,"col": 26,"name": "fd"},{"file": 47,"line": 6215,"col": 36,"name": "ifr"},{"file": 47,"line": 6232,"col": 16,"name": "fd"},{"file": 47,"line": 6232,"col": 26,"name": "mask"},{"file": 47,"line": 6232,"col": 49,"name": "flags"},{"file": 47,"line": 6259,"col": 14,"name": "fd"},{"file": 47,"line": 6272,"col": 13,"name": "fd"},{"file": 47,"line": 6296,"col": 17,"name": "fd"},{"file": 47,"line": 6329,"col": 13,"name": "option"},{"file": 47,"line": 6329,"col": 25,"name": "args"},{"file": 47,"line": 6358,"col": 17,"name": "resource"},{"file": 47,"line": 6424,"col": 15,"name": "ptr"},{"file": 47,"line": 6424,"col": 48,"name": "length"},{"file": 47,"line": 6424,"col": 63,"name": "advice"},{"file": 47,"line": 6493,"col": 4,"name": "attr"},{"file": 47,"line": 6494,"col": 4,"name": "pid"},{"file": 47,"line": 6495,"col": 4,"name": "cpu"},{"file": 47,"line": 6496,"col": 4,"name": "group_fd"},{"file": 47,"line": 6497,"col": 4,"name": "flags"},{"file": 47,"line": 393,"col": 28,"name": "buf"},{"file": 47,"line": 1335,"col": 24,"name": "flags"},{"file": 47,"line": 4531,"col": 16,"name": "sock"},{"file": 47,"line": 4531,"col": 32,"name": "flags"},{"file": 47,"line": 5447,"col": 21,"name": "iovs"},{"file": 47,"line": 6154,"col": 15,"name": "name"},{"file": 48,"line": 463,"col": 23,"name": "stream"},{"file": 48,"line": 463,"col": 40,"name": "allocator"},{"file": 48,"line": 946,"col": 22,"name": "size"},{"file": 48,"line": 946,"col": 33,"name": "block_size"},{"file": 49,"line": 18,"col": 14,"name": "out_buffer"},{"file": 49,"line": 23,"col": 19,"name": "allocator"},{"file": 49,"line": 56,"col": 17,"name": "allocator"},{"file": 49,"line": 156,"col": 22,"name": "allocator"},{"file": 49,"line": 156,"col": 49,"name": "key"},{"file": 49,"line": 185,"col": 17,"name": "allocator"},{"file": 49,"line": 185,"col": 40,"name": "key"},{"file": 49,"line": 515,"col": 25,"name": "allocator"},{"file": 49,"line": 541,"col": 17,"name": "allocator"},{"file": 49,"line": 581,"col": 16,"name": "allocator"},{"file": 49,"line": 581,"col": 43,"name": "args_alloc"},{"file": 49,"line": 625,"col": 19,"name": "name"},{"file": 49,"line": 634,"col": 24,"name": "name"},{"file": 49,"line": 743,"col": 32,"name": "allocator"},{"file": 49,"line": 835,"col": 13,"name": "allocator"},{"file": 49,"line": 835,"col": 40,"name": "argv"},{"file": 49,"line": 848,"col": 4,"name": "allocator"},{"file": 49,"line": 849,"col": 4,"name": "argv"},{"file": 49,"line": 850,"col": 4,"name": "env_map"},{"file": 49,"line": 609,"col": 22,"name": "input_cmd_line"},{"file": 49,"line": 609,"col": 52,"name": "expected_args"},{"file": 50,"line": 7,"col": 4,"name": "T","comptime": true},{"file": 50,"line": 8,"col": 4,"name": "key"},{"file": 50,"line": 9,"col": 4,"name": "items"},{"file": 50,"line": 10,"col": 4,"name": "context"},{"file": 50,"line": 11,"col": 4,"name": "compareFn","comptime": true},{"file": 50,"line": 1140,"col": 12,"name": "T","comptime": true},{"file": 50,"line": 1362,"col": 4,"name": "T","comptime": true},{"file": 50,"line": 1363,"col": 4,"name": "items"},{"file": 50,"line": 1364,"col": 4,"name": "context"},{"file": 50,"line": 1365,"col": 4,"name": "lessThan","comptime": true},{"file": 50,"line": 1394,"col": 4,"name": "T","comptime": true},{"file": 50,"line": 1395,"col": 4,"name": "items"},{"file": 50,"line": 1396,"col": 4,"name": "context"},{"file": 50,"line": 1397,"col": 4,"name": "lessThan","comptime": true},{"file": 50,"line": 1414,"col": 4,"name": "T","comptime": true},{"file": 50,"line": 1415,"col": 4,"name": "items"},{"file": 50,"line": 1416,"col": 4,"name": "context"},{"file": 50,"line": 1417,"col": 4,"name": "lessThan","comptime": true},{"file": 50,"line": 1446,"col": 4,"name": "T","comptime": true},{"file": 50,"line": 1447,"col": 4,"name": "items"},{"file": 50,"line": 1448,"col": 4,"name": "context"},{"file": 50,"line": 1449,"col": 4,"name": "lessThan","comptime": true},{"file": 50,"line": 1466,"col": 4,"name": "T","comptime": true},{"file": 50,"line": 1467,"col": 4,"name": "items"},{"file": 50,"line": 1468,"col": 4,"name": "context"},{"file": 50,"line": 1469,"col": 4,"name": "lessThan","comptime": true},{"file": 50,"line": 1203,"col": 14,"name": "context"},{"file": 50,"line": 1203,"col": 29,"name": "a"},{"file": 50,"line": 1203,"col": 44,"name": "b"},{"file": 50,"line": 1340,"col": 12,"name": "rng"},{"file": 51,"line": 11,"col": 13,"name": "nanoseconds"},{"file": 51,"line": 248,"col": 14,"name": "a"},{"file": 51,"line": 248,"col": 22,"name": "b"},{"file": 51,"line": 248,"col": 30,"name": "c"},{"file": 52,"line": 7,"col": 35,"name": "c"},{"file": 52,"line": 34,"col": 18,"name": "c"},{"file": 52,"line": 34,"col": 26,"name": "out"},{"file": 52,"line": 151,"col": 26,"name": "value"},{"file": 52,"line": 194,"col": 25,"name": "s"},{"file": 52,"line": 552,"col": 26,"name": "allocator"},{"file": 52,"line": 552,"col": 53,"name": "utf16le"},{"file": 52,"line": 569,"col": 27,"name": "allocator"},{"file": 52,"line": 569,"col": 54,"name": "utf16le"},{"file": 52,"line": 591,"col": 21,"name": "utf8"},{"file": 52,"line": 591,"col": 33,"name": "utf16le"},{"file": 52,"line": 663,"col": 29,"name": "allocator"},{"file": 52,"line": 663,"col": 56,"name": "utf8"},{"file": 52,"line": 691,"col": 21,"name": "utf16le"},{"file": 52,"line": 691,"col": 37,"name": "utf8"},{"file": 52,"line": 752,"col": 34,"name": "utf8","comptime": true},{"file": 52,"line": 804,"col": 18,"name": "utf16le"},{"file": 52,"line": 367,"col": 19,"name": "codePoint"},{"file": 52,"line": 367,"col": 35,"name": "array"},{"file": 52,"line": 367,"col": 48,"name": "expectedErr"},{"file": 52,"line": 536,"col": 13,"name": "bytes"},{"file": 52,"line": 536,"col": 32,"name": "expected_err"},{"file": 52,"line": 540,"col": 13,"name": "bytes"},{"file": 52,"line": 540,"col": 32,"name": "expected_codepoint"},{"file": 52,"line": 544,"col": 14,"name": "bytes"},{"file": 52,"line": 762,"col": 18,"name": "utf8"},{"file": 52,"line": 781,"col": 4,"name": "utf16le"},{"file": 52,"line": 782,"col": 4,"name": "fmt","comptime": true},{"file": 52,"line": 783,"col": 4,"name": "options"},{"file": 52,"line": 784,"col": 4,"name": "writer"},{"file": 53,"line": 123,"col": 9,"name": "code"},{"file": 53,"line": 191,"col": 33,"name": "exit_code"},{"file": 53,"line": 196,"col": 4,"name": "hinstDLL"},{"file": 53,"line": 197,"col": 4,"name": "fdwReason"},{"file": 53,"line": 198,"col": 4,"name": "lpReserved"},{"file": 53,"line": 226,"col": 11,"name": "handle"},{"file": 53,"line": 226,"col": 32,"name": "system_table"},{"file": 53,"line": 447,"col": 8,"name": "c_argc"},{"file": 53,"line": 447,"col": 21,"name": "c_argv"},{"file": 53,"line": 447,"col": 41,"name": "c_envp"},{"file": 53,"line": 462,"col": 18,"name": "c_argc"},{"file": 53,"line": 462,"col": 31,"name": "c_argv"},{"file": 53,"line": 526,"col": 17,"name": "loop"},{"file": 54,"line": 30,"col": 11,"name": "ev"},{"file": 54,"line": 45,"col": 13,"name": "ev"},{"file": 54,"line": 58,"col": 17,"name": "ev"},{"file": 54,"line": 58,"col": 40,"name": "timeout_ns"},{"file": 15,"line": 68,"col": 19,"name": "m"},{"file": 55,"line": 45,"col": 4,"name": "self"},{"file": 55,"line": 46,"col": 4,"name": "buf"},{"file": 55,"line": 47,"col": 4,"name": "buf_align"},{"file": 55,"line": 48,"col": 4,"name": "new_len"},{"file": 55,"line": 49,"col": 4,"name": "len_align"},{"file": 55,"line": 50,"col": 4,"name": "ret_addr"},{"file": 55,"line": 184,"col": 4,"name": "self"},{"file": 55,"line": 185,"col": 4,"name": "Elem","comptime": true},{"file": 55,"line": 186,"col": 4,"name": "n"},{"file": 55,"line": 188,"col": 4,"docs": " null means naturally aligned","name": "optional_alignment","comptime": true},{"file": 55,"line": 189,"col": 4,"name": "optional_sentinel","comptime": true},{"file": 55,"line": 195,"col": 4,"name": "self"},{"file": 55,"line": 196,"col": 4,"name": "Elem","comptime": true},{"file": 55,"line": 197,"col": 4,"name": "n"},{"file": 55,"line": 199,"col": 4,"docs": " null means naturally aligned","name": "optional_alignment","comptime": true},{"file": 55,"line": 200,"col": 4,"name": "optional_sentinel","comptime": true},{"file": 55,"line": 201,"col": 4,"name": "return_address"},{"file": 55,"line": 229,"col": 4,"name": "self"},{"file": 55,"line": 230,"col": 4,"name": "Elem","comptime": true},{"file": 55,"line": 231,"col": 4,"name": "n"},{"file": 55,"line": 232,"col": 4,"name": "sentinel","comptime": true},{"file": 55,"line": 249,"col": 4,"name": "self"},{"file": 55,"line": 250,"col": 4,"name": "T","comptime": true},{"file": 55,"line": 252,"col": 4,"docs": " null means naturally aligned","name": "alignment","comptime": true},{"file": 55,"line": 253,"col": 4,"name": "n"},{"file": 55,"line": 254,"col": 4,"name": "exact"},{"file": 55,"line": 349,"col": 4,"name": "self"},{"file": 55,"line": 350,"col": 4,"name": "old_mem"},{"file": 55,"line": 351,"col": 4,"name": "new_alignment","comptime": true},{"file": 55,"line": 352,"col": 4,"name": "new_n"},{"file": 55,"line": 353,"col": 4,"name": "exact"},{"file": 55,"line": 404,"col": 4,"name": "self"},{"file": 55,"line": 405,"col": 4,"name": "old_mem"},{"file": 55,"line": 406,"col": 4,"name": "new_alignment","comptime": true},{"file": 55,"line": 407,"col": 4,"name": "new_n"},{"file": 55,"line": 462,"col": 13,"name": "allocator"},{"file": 55,"line": 462,"col": 36,"name": "T","comptime": true},{"file": 55,"line": 462,"col": 54,"name": "m"},{"file": 55,"line": 212,"col": 27,"name": "Elem","comptime": true},{"file": 55,"line": 212,"col": 48,"name": "alignment","comptime": true},{"file": 55,"line": 212,"col": 74,"name": "sentinel","comptime": true},{"file": 25,"line": 322,"col": 25,"name": "self"},{"file": 25,"line": 322,"col": 43,"name": "id"},{"file": 54,"line": 123,"col": 16,"name": "ev"},{"file": 54,"line": 129,"col": 18,"name": "ev"},{"file": 54,"line": 133,"col": 15,"name": "ev"},{"file": 54,"line": 161,"col": 17,"name": "ev"},{"file": 12,"line": 503,"col": 17,"name": "lhs"},{"file": 12,"line": 503,"col": 31,"name": "rhs"},{"file": 12,"line": 513,"col": 17,"name": "text"},{"file": 12,"line": 538,"col": 8,"name": "self"},{"file": 12,"line": 539,"col": 8,"name": "fmt","comptime": true},{"file": 12,"line": 540,"col": 8,"name": "options"},{"file": 12,"line": 541,"col": 8,"name": "out_stream"},{"file": 58,"line": 10,"col": 18,"name": "traits","comptime": true},{"file": 58,"line": 67,"col": 16,"name": "name","comptime": true},{"file": 58,"line": 132,"col": 17,"name": "id","comptime": true},{"file": 58,"line": 153,"col": 16,"name": "T","comptime": true},{"file": 58,"line": 171,"col": 16,"name": "T","comptime": true},{"file": 58,"line": 189,"col": 21,"name": "T","comptime": true},{"file": 58,"line": 203,"col": 19,"name": "T","comptime": true},{"file": 58,"line": 233,"col": 21,"name": "T","comptime": true},{"file": 58,"line": 263,"col": 19,"name": "T","comptime": true},{"file": 58,"line": 324,"col": 15,"name": "T","comptime": true},{"file": 58,"line": 340,"col": 18,"name": "T","comptime": true},{"file": 58,"line": 379,"col": 15,"name": "T","comptime": true},{"file": 58,"line": 404,"col": 19,"name": "T","comptime": true},{"file": 58,"line": 470,"col": 16,"name": "T","comptime": true},{"file": 58,"line": 470,"col": 34,"name": "names","comptime": true},{"file": 58,"line": 496,"col": 17,"name": "T","comptime": true},{"file": 58,"line": 496,"col": 35,"name": "names","comptime": true},{"file": 58,"line": 522,"col": 20,"name": "T","comptime": true},{"file": 58,"line": 522,"col": 38,"name": "names","comptime": true},{"file": 3,"line": 135,"col": 29,"name": "self"},{"file": 3,"line": 135,"col": 51,"name": "ver"},{"file": 3,"line": 159,"col": 16,"name": "self"},{"file": 3,"line": 160,"col": 16,"name": "fmt","comptime": true},{"file": 3,"line": 161,"col": 16,"name": "_"},{"file": 3,"line": 162,"col": 16,"name": "out_stream"},{"file": 3,"line": 185,"col": 35,"name": "self"},{"file": 3,"line": 185,"col": 60,"name": "ver"},{"file": 3,"line": 191,"col": 29,"name": "self"},{"file": 3,"line": 191,"col": 54,"name": "ver"},{"file": 3,"line": 228,"col": 27,"name": "tag"},{"file": 3,"line": 228,"col": 37,"name": "arch"},{"file": 3,"line": 1252,"col": 25,"name": "model"},{"file": 3,"line": 1252,"col": 46,"name": "arch"},{"file": 3,"line": 1262,"col": 27,"name": "arch"},{"file": 3,"line": 1299,"col": 28,"name": "arch"},{"file": 59,"line": 195,"col": 11,"name": "old"},{"file": 59,"line": 199,"col": 12,"name": "old"},{"file": 59,"line": 199,"col": 22,"name": "new"},{"file": 59,"line": 215,"col": 12,"name": "old"},{"file": 59,"line": 215,"col": 22,"name": "new"},{"file": 59,"line": 215,"col": 32,"name": "flags"},{"file": 59,"line": 219,"col": 13,"name": "path"},{"file": 59,"line": 223,"col": 14,"name": "fd"},{"file": 59,"line": 227,"col": 14,"name": "path"},{"file": 59,"line": 231,"col": 14,"name": "path"},{"file": 59,"line": 231,"col": 35,"name": "argv"},{"file": 59,"line": 231,"col": 71,"name": "envp"},{"file": 59,"line": 254,"col": 16,"name": "fd"},{"file": 59,"line": 254,"col": 25,"name": "times"},{"file": 59,"line": 258,"col": 17,"name": "dirfd"},{"file": 59,"line": 258,"col": 29,"name": "path"},{"file": 59,"line": 258,"col": 51,"name": "times"},{"file": 59,"line": 258,"col": 78,"name": "flags"},{"file": 59,"line": 262,"col": 17,"name": "fd"},{"file": 59,"line": 262,"col": 26,"name": "mode"},{"file": 59,"line": 262,"col": 37,"name": "offset"},{"file": 59,"line": 262,"col": 50,"name": "length"},{"file": 59,"line": 294,"col": 14,"name": "buf"},{"file": 59,"line": 294,"col": 26,"name": "size"},{"file": 59,"line": 298,"col": 16,"name": "fd"},{"file": 59,"line": 298,"col": 25,"name": "dirp"},{"file": 59,"line": 298,"col": 38,"name": "len"},{"file": 59,"line": 307,"col": 18,"name": "fd"},{"file": 59,"line": 307,"col": 27,"name": "dirp"},{"file": 59,"line": 307,"col": 40,"name": "len"},{"file": 59,"line": 316,"col": 21,"name": "flags"},{"file": 59,"line": 320,"col": 25,"name": "fd"},{"file": 59,"line": 320,"col": 34,"name": "pathname"},{"file": 59,"line": 320,"col": 59,"name": "mask"},{"file": 59,"line": 324,"col": 24,"name": "fd"},{"file": 59,"line": 324,"col": 33,"name": "wd"},{"file": 59,"line": 328,"col": 16,"name": "path","noalias": true},{"file": 59,"line": 328,"col": 45,"name": "buf_ptr","noalias": true},{"file": 59,"line": 328,"col": 69,"name": "buf_len"},{"file": 59,"line": 336,"col": 18,"name": "dirfd"},{"file": 59,"line": 336,"col": 30,"name": "path","noalias": true},{"file": 59,"line": 336,"col": 59,"name": "buf_ptr","noalias": true},{"file": 59,"line": 336,"col": 83,"name": "buf_len"},{"file": 59,"line": 340,"col": 13,"name": "path"},{"file": 59,"line": 340,"col": 34,"name": "mode"},{"file": 59,"line": 348,"col": 15,"name": "dirfd"},{"file": 59,"line": 348,"col": 27,"name": "path"},{"file": 59,"line": 348,"col": 48,"name": "mode"},{"file": 59,"line": 352,"col": 13,"name": "path"},{"file": 59,"line": 352,"col": 34,"name": "mode"},{"file": 59,"line": 352,"col": 45,"name": "dev"},{"file": 59,"line": 360,"col": 15,"name": "dirfd"},{"file": 59,"line": 360,"col": 27,"name": "path"},{"file": 59,"line": 360,"col": 48,"name": "mode"},{"file": 59,"line": 360,"col": 59,"name": "dev"},{"file": 59,"line": 364,"col": 13,"name": "special"},{"file": 59,"line": 364,"col": 37,"name": "dir"},{"file": 59,"line": 364,"col": 57,"name": "fstype"},{"file": 59,"line": 364,"col": 80,"name": "flags"},{"file": 59,"line": 364,"col": 92,"name": "data"},{"file": 59,"line": 368,"col": 14,"name": "special"},{"file": 59,"line": 372,"col": 15,"name": "special"},{"file": 59,"line": 372,"col": 39,"name": "flags"},{"file": 59,"line": 404,"col": 16,"name": "address"},{"file": 59,"line": 404,"col": 38,"name": "length"},{"file": 59,"line": 404,"col": 53,"name": "protection"},{"file": 59,"line": 412,"col": 12,"name": "fds"},{"file": 59,"line": 412,"col": 28,"name": "n"},{"file": 59,"line": 412,"col": 39,"name": "timeout"},{"file": 59,"line": 433,"col": 13,"name": "fds"},{"file": 59,"line": 433,"col": 29,"name": "n"},{"file": 59,"line": 433,"col": 40,"name": "timeout"},{"file": 59,"line": 433,"col": 61,"name": "sigmask"},{"file": 59,"line": 441,"col": 14,"name": "fd"},{"file": 59,"line": 441,"col": 23,"name": "iov"},{"file": 59,"line": 441,"col": 44,"name": "count"},{"file": 59,"line": 441,"col": 58,"name": "offset"},{"file": 59,"line": 453,"col": 15,"name": "fd"},{"file": 59,"line": 453,"col": 24,"name": "iov"},{"file": 59,"line": 453,"col": 45,"name": "count"},{"file": 59,"line": 453,"col": 59,"name": "offset"},{"file": 59,"line": 453,"col": 72,"name": "flags"},{"file": 59,"line": 466,"col": 13,"name": "fd"},{"file": 59,"line": 466,"col": 22,"name": "iov"},{"file": 59,"line": 466,"col": 43,"name": "count"},{"file": 59,"line": 470,"col": 14,"name": "fd"},{"file": 59,"line": 470,"col": 23,"name": "iov"},{"file": 59,"line": 470,"col": 50,"name": "count"},{"file": 59,"line": 474,"col": 15,"name": "fd"},{"file": 59,"line": 474,"col": 24,"name": "iov"},{"file": 59,"line": 474,"col": 51,"name": "count"},{"file": 59,"line": 474,"col": 65,"name": "offset"},{"file": 59,"line": 486,"col": 16,"name": "fd"},{"file": 59,"line": 486,"col": 25,"name": "iov"},{"file": 59,"line": 486,"col": 52,"name": "count"},{"file": 59,"line": 486,"col": 66,"name": "offset"},{"file": 59,"line": 486,"col": 79,"name": "flags"},{"file": 59,"line": 499,"col": 13,"name": "path"},{"file": 59,"line": 507,"col": 15,"name": "existing"},{"file": 59,"line": 507,"col": 40,"name": "new"},{"file": 59,"line": 515,"col": 17,"name": "existing"},{"file": 59,"line": 515,"col": 42,"name": "newfd"},{"file": 59,"line": 515,"col": 54,"name": "newpath"},{"file": 59,"line": 519,"col": 13,"name": "fd"},{"file": 59,"line": 519,"col": 22,"name": "buf"},{"file": 59,"line": 519,"col": 34,"name": "count"},{"file": 59,"line": 519,"col": 48,"name": "offset"},{"file": 59,"line": 558,"col": 14,"name": "path"},{"file": 59,"line": 558,"col": 35,"name": "mode"},{"file": 59,"line": 566,"col": 17,"name": "dirfd"},{"file": 59,"line": 566,"col": 29,"name": "path"},{"file": 59,"line": 566,"col": 50,"name": "mode"},{"file": 59,"line": 566,"col": 61,"name": "flags"},{"file": 59,"line": 570,"col": 12,"name": "fd"},{"file": 59,"line": 580,"col": 13,"name": "fd"},{"file": 59,"line": 580,"col": 26,"name": "flags"},{"file": 59,"line": 588,"col": 17,"name": "fd"},{"file": 59,"line": 588,"col": 26,"name": "length"},{"file": 59,"line": 616,"col": 14,"name": "fd"},{"file": 59,"line": 616,"col": 23,"name": "buf"},{"file": 59,"line": 616,"col": 41,"name": "count"},{"file": 59,"line": 616,"col": 55,"name": "offset"},{"file": 59,"line": 656,"col": 14,"name": "old"},{"file": 59,"line": 656,"col": 34,"name": "new"},{"file": 59,"line": 666,"col": 16,"name": "oldfd"},{"file": 59,"line": 666,"col": 28,"name": "oldpath"},{"file": 59,"line": 666,"col": 50,"name": "newfd"},{"file": 59,"line": 666,"col": 62,"name": "newpath"},{"file": 59,"line": 687,"col": 17,"name": "oldfd"},{"file": 59,"line": 687,"col": 29,"name": "oldpath"},{"file": 59,"line": 687,"col": 53,"name": "newfd"},{"file": 59,"line": 687,"col": 65,"name": "newpath"},{"file": 59,"line": 687,"col": 89,"name": "flags"},{"file": 59,"line": 698,"col": 12,"name": "path"},{"file": 59,"line": 698,"col": 33,"name": "flags"},{"file": 59,"line": 698,"col": 45,"name": "perm"},{"file": 59,"line": 712,"col": 14,"name": "path"},{"file": 59,"line": 712,"col": 35,"name": "perm"},{"file": 59,"line": 722,"col": 14,"name": "flags"},{"file": 59,"line": 722,"col": 28,"name": "child_stack_ptr"},{"file": 59,"line": 722,"col": 52,"name": "parent_tid"},{"file": 59,"line": 722,"col": 70,"name": "child_tid"},{"file": 59,"line": 722,"col": 87,"name": "newtls"},{"file": 59,"line": 727,"col": 14,"name": "flags"},{"file": 59,"line": 727,"col": 26,"name": "child_stack_ptr"},{"file": 59,"line": 735,"col": 14,"name": "fd"},{"file": 59,"line": 735,"col": 23,"name": "mode"},{"file": 59,"line": 739,"col": 14,"name": "fd"},{"file": 59,"line": 739,"col": 23,"name": "owner"},{"file": 59,"line": 739,"col": 37,"name": "group"},{"file": 59,"line": 744,"col": 14,"name": "fd"},{"file": 59,"line": 744,"col": 23,"name": "offset"},{"file": 59,"line": 744,"col": 36,"name": "result"},{"file": 59,"line": 744,"col": 51,"name": "whence"},{"file": 59,"line": 758,"col": 13,"name": "fd"},{"file": 59,"line": 758,"col": 22,"name": "offset"},{"file": 59,"line": 758,"col": 35,"name": "whence"},{"file": 59,"line": 762,"col": 12,"name": "status"},{"file": 59,"line": 772,"col": 17,"name": "buf"},{"file": 59,"line": 772,"col": 29,"name": "count"},{"file": 59,"line": 772,"col": 43,"name": "flags"},{"file": 59,"line": 776,"col": 12,"name": "pid"},{"file": 59,"line": 776,"col": 24,"name": "sig"},{"file": 59,"line": 784,"col": 14,"name": "tgid"},{"file": 59,"line": 784,"col": 27,"name": "tid"},{"file": 59,"line": 784,"col": 39,"name": "sig"},{"file": 59,"line": 788,"col": 12,"name": "oldpath"},{"file": 59,"line": 788,"col": 36,"name": "newpath"},{"file": 59,"line": 788,"col": 60,"name": "flags"},{"file": 59,"line": 808,"col": 14,"name": "oldfd"},{"file": 59,"line": 808,"col": 27,"name": "oldpath"},{"file": 59,"line": 808,"col": 51,"name": "newfd"},{"file": 59,"line": 808,"col": 64,"name": "newpath"},{"file": 59,"line": 808,"col": 88,"name": "flags"},{"file": 59,"line": 819,"col": 14,"name": "path"},{"file": 59,"line": 827,"col": 16,"name": "dirfd"},{"file": 59,"line": 827,"col": 28,"name": "path"},{"file": 59,"line": 827,"col": 49,"name": "flags"},{"file": 59,"line": 831,"col": 15,"name": "pid"},{"file": 59,"line": 831,"col": 27,"name": "status"},{"file": 59,"line": 831,"col": 41,"name": "flags"},{"file": 59,"line": 835,"col": 14,"name": "id_type"},{"file": 59,"line": 835,"col": 26,"name": "id"},{"file": 59,"line": 835,"col": 35,"name": "infop"},{"file": 59,"line": 835,"col": 54,"name": "flags"},{"file": 59,"line": 839,"col": 13,"name": "fd"},{"file": 59,"line": 839,"col": 23,"name": "cmd"},{"file": 59,"line": 839,"col": 33,"name": "arg"},{"file": 59,"line": 852,"col": 21,"name": "clk_id"},{"file": 59,"line": 852,"col": 34,"name": "tp"},{"file": 59,"line": 880,"col": 20,"name": "clk_id"},{"file": 59,"line": 880,"col": 33,"name": "tp"},{"file": 59,"line": 884,"col": 21,"name": "clk_id"},{"file": 59,"line": 884,"col": 34,"name": "tp"},{"file": 59,"line": 888,"col": 20,"name": "tv"},{"file": 59,"line": 888,"col": 34,"name": "tz"},{"file": 59,"line": 892,"col": 20,"name": "tv"},{"file": 59,"line": 892,"col": 40,"name": "tz"},{"file": 59,"line": 896,"col": 17,"name": "req"},{"file": 59,"line": 896,"col": 39,"name": "rem"},{"file": 59,"line": 900,"col": 14,"name": "uid"},{"file": 59,"line": 908,"col": 14,"name": "gid"},{"file": 59,"line": 916,"col": 16,"name": "ruid"},{"file": 59,"line": 916,"col": 29,"name": "euid"},{"file": 59,"line": 924,"col": 16,"name": "rgid"},{"file": 59,"line": 924,"col": 29,"name": "egid"},{"file": 59,"line": 964,"col": 15,"name": "euid"},{"file": 59,"line": 975,"col": 15,"name": "egid"},{"file": 59,"line": 986,"col": 17,"name": "ruid"},{"file": 59,"line": 986,"col": 31,"name": "euid"},{"file": 59,"line": 986,"col": 45,"name": "suid"},{"file": 59,"line": 994,"col": 17,"name": "rgid"},{"file": 59,"line": 994,"col": 31,"name": "egid"},{"file": 59,"line": 994,"col": 45,"name": "sgid"},{"file": 59,"line": 1002,"col": 17,"name": "ruid"},{"file": 59,"line": 1002,"col": 30,"name": "euid"},{"file": 59,"line": 1002,"col": 43,"name": "suid"},{"file": 59,"line": 1010,"col": 17,"name": "rgid"},{"file": 59,"line": 1010,"col": 30,"name": "egid"},{"file": 59,"line": 1010,"col": 43,"name": "sgid"},{"file": 59,"line": 1018,"col": 17,"name": "size"},{"file": 59,"line": 1018,"col": 30,"name": "list"},{"file": 59,"line": 1026,"col": 17,"name": "size"},{"file": 59,"line": 1026,"col": 30,"name": "list"},{"file": 59,"line": 1087,"col": 17,"name": "set"},{"file": 59,"line": 1087,"col": 33,"name": "sig"},{"file": 59,"line": 1095,"col": 19,"name": "set"},{"file": 59,"line": 1095,"col": 41,"name": "sig"},{"file": 59,"line": 1100,"col": 19,"name": "fd"},{"file": 59,"line": 1100,"col": 28,"name": "addr","noalias": true},{"file": 59,"line": 1100,"col": 53,"name": "len","noalias": true},{"file": 59,"line": 1107,"col": 19,"name": "fd"},{"file": 59,"line": 1107,"col": 28,"name": "addr","noalias": true},{"file": 59,"line": 1107,"col": 53,"name": "len","noalias": true},{"file": 59,"line": 1114,"col": 14,"name": "domain"},{"file": 59,"line": 1114,"col": 27,"name": "socket_type"},{"file": 59,"line": 1114,"col": 45,"name": "protocol"},{"file": 59,"line": 1121,"col": 18,"name": "fd"},{"file": 59,"line": 1121,"col": 27,"name": "level"},{"file": 59,"line": 1121,"col": 39,"name": "optname"},{"file": 59,"line": 1121,"col": 53,"name": "optval"},{"file": 59,"line": 1121,"col": 74,"name": "optlen"},{"file": 59,"line": 1128,"col": 18,"name": "fd"},{"file": 59,"line": 1128,"col": 27,"name": "level"},{"file": 59,"line": 1128,"col": 39,"name": "optname"},{"file": 59,"line": 1128,"col": 53,"name": "optval","noalias": true},{"file": 59,"line": 1128,"col": 76,"name": "optlen","noalias": true},{"file": 59,"line": 1135,"col": 15,"name": "fd"},{"file": 59,"line": 1135,"col": 24,"name": "msg"},{"file": 59,"line": 1135,"col": 61,"name": "flags"},{"file": 59,"line": 1142,"col": 16,"name": "fd"},{"file": 59,"line": 1142,"col": 25,"name": "msgvec"},{"file": 59,"line": 1142,"col": 51,"name": "vlen"},{"file": 59,"line": 1142,"col": 62,"name": "flags"},{"file": 59,"line": 1182,"col": 15,"name": "fd"},{"file": 59,"line": 1182,"col": 24,"name": "addr"},{"file": 59,"line": 1182,"col": 45,"name": "len"},{"file": 59,"line": 1189,"col": 15,"name": "fd"},{"file": 59,"line": 1189,"col": 24,"name": "msg"},{"file": 59,"line": 1189,"col": 55,"name": "flags"},{"file": 59,"line": 1196,"col": 16,"name": "fd"},{"file": 59,"line": 1196,"col": 25,"name": "buf","noalias": true},{"file": 59,"line": 1196,"col": 45,"name": "len"},{"file": 59,"line": 1196,"col": 57,"name": "flags"},{"file": 59,"line": 1196,"col": 69,"name": "addr","noalias": true},{"file": 59,"line": 1196,"col": 95,"name": "alen","noalias": true},{"file": 59,"line": 1203,"col": 16,"name": "fd"},{"file": 59,"line": 1203,"col": 25,"name": "how"},{"file": 59,"line": 1210,"col": 12,"name": "fd"},{"file": 59,"line": 1210,"col": 21,"name": "addr"},{"file": 59,"line": 1210,"col": 44,"name": "len"},{"file": 59,"line": 1217,"col": 14,"name": "fd"},{"file": 59,"line": 1217,"col": 23,"name": "backlog"},{"file": 59,"line": 1224,"col": 14,"name": "fd"},{"file": 59,"line": 1224,"col": 23,"name": "buf"},{"file": 59,"line": 1224,"col": 41,"name": "len"},{"file": 59,"line": 1224,"col": 53,"name": "flags"},{"file": 59,"line": 1224,"col": 65,"name": "addr"},{"file": 59,"line": 1224,"col": 89,"name": "alen"},{"file": 59,"line": 1231,"col": 16,"name": "outfd"},{"file": 59,"line": 1231,"col": 28,"name": "infd"},{"file": 59,"line": 1231,"col": 39,"name": "offset"},{"file": 59,"line": 1231,"col": 54,"name": "count"},{"file": 59,"line": 1251,"col": 18,"name": "domain"},{"file": 59,"line": 1251,"col": 31,"name": "socket_type"},{"file": 59,"line": 1251,"col": 49,"name": "protocol"},{"file": 59,"line": 1251,"col": 64,"name": "fd"},{"file": 59,"line": 1258,"col": 14,"name": "fd"},{"file": 59,"line": 1258,"col": 23,"name": "addr","noalias": true},{"file": 59,"line": 1258,"col": 49,"name": "len","noalias": true},{"file": 59,"line": 1265,"col": 15,"name": "fd"},{"file": 59,"line": 1265,"col": 24,"name": "addr","noalias": true},{"file": 59,"line": 1265,"col": 50,"name": "len","noalias": true},{"file": 59,"line": 1265,"col": 76,"name": "flags"},{"file": 59,"line": 1280,"col": 12,"name": "pathname"},{"file": 59,"line": 1280,"col": 37,"name": "statbuf"},{"file": 59,"line": 1288,"col": 13,"name": "pathname"},{"file": 59,"line": 1288,"col": 38,"name": "statbuf"},{"file": 59,"line": 1296,"col": 15,"name": "dirfd"},{"file": 59,"line": 1296,"col": 27,"name": "path"},{"file": 59,"line": 1296,"col": 48,"name": "stat_buf"},{"file": 59,"line": 1296,"col": 65,"name": "flags"},{"file": 59,"line": 1304,"col": 13,"name": "dirfd"},{"file": 59,"line": 1304,"col": 25,"name": "path"},{"file": 59,"line": 1304,"col": 44,"name": "flags"},{"file": 59,"line": 1304,"col": 56,"name": "mask"},{"file": 59,"line": 1304,"col": 67,"name": "statx_buf"},{"file": 59,"line": 1318,"col": 17,"name": "path"},{"file": 59,"line": 1318,"col": 38,"name": "list"},{"file": 59,"line": 1318,"col": 51,"name": "size"},{"file": 59,"line": 1322,"col": 18,"name": "path"},{"file": 59,"line": 1322,"col": 39,"name": "list"},{"file": 59,"line": 1322,"col": 52,"name": "size"},{"file": 59,"line": 1326,"col": 18,"name": "fd"},{"file": 59,"line": 1326,"col": 29,"name": "list"},{"file": 59,"line": 1326,"col": 42,"name": "size"},{"file": 59,"line": 1330,"col": 16,"name": "path"},{"file": 59,"line": 1330,"col": 37,"name": "name"},{"file": 59,"line": 1330,"col": 58,"name": "value"},{"file": 59,"line": 1330,"col": 72,"name": "size"},{"file": 59,"line": 1334,"col": 17,"name": "path"},{"file": 59,"line": 1334,"col": 38,"name": "name"},{"file": 59,"line": 1334,"col": 59,"name": "value"},{"file": 59,"line": 1334,"col": 73,"name": "size"},{"file": 59,"line": 1338,"col": 17,"name": "fd"},{"file": 59,"line": 1338,"col": 28,"name": "name"},{"file": 59,"line": 1338,"col": 49,"name": "value"},{"file": 59,"line": 1338,"col": 63,"name": "size"},{"file": 59,"line": 1342,"col": 16,"name": "path"},{"file": 59,"line": 1342,"col": 37,"name": "name"},{"file": 59,"line": 1342,"col": 58,"name": "value"},{"file": 59,"line": 1342,"col": 78,"name": "size"},{"file": 59,"line": 1342,"col": 91,"name": "flags"},{"file": 59,"line": 1346,"col": 17,"name": "path"},{"file": 59,"line": 1346,"col": 38,"name": "name"},{"file": 59,"line": 1346,"col": 59,"name": "value"},{"file": 59,"line": 1346,"col": 79,"name": "size"},{"file": 59,"line": 1346,"col": 92,"name": "flags"},{"file": 59,"line": 1350,"col": 17,"name": "fd"},{"file": 59,"line": 1350,"col": 28,"name": "name"},{"file": 59,"line": 1350,"col": 49,"name": "value"},{"file": 59,"line": 1350,"col": 69,"name": "size"},{"file": 59,"line": 1350,"col": 82,"name": "flags"},{"file": 59,"line": 1354,"col": 19,"name": "path"},{"file": 59,"line": 1354,"col": 40,"name": "name"},{"file": 59,"line": 1358,"col": 20,"name": "path"},{"file": 59,"line": 1358,"col": 41,"name": "name"},{"file": 59,"line": 1362,"col": 20,"name": "fd"},{"file": 59,"line": 1362,"col": 31,"name": "name"},{"file": 59,"line": 1370,"col": 25,"name": "pid"},{"file": 59,"line": 1370,"col": 37,"name": "size"},{"file": 59,"line": 1370,"col": 50,"name": "set"},{"file": 59,"line": 1381,"col": 21,"name": "flags"},{"file": 59,"line": 1385,"col": 17,"name": "epoll_fd"},{"file": 59,"line": 1385,"col": 32,"name": "op"},{"file": 59,"line": 1385,"col": 41,"name": "fd"},{"file": 59,"line": 1385,"col": 50,"name": "ev"},{"file": 59,"line": 1389,"col": 18,"name": "epoll_fd"},{"file": 59,"line": 1389,"col": 33,"name": "events"},{"file": 59,"line": 1389,"col": 57,"name": "maxevents"},{"file": 59,"line": 1389,"col": 73,"name": "timeout"},{"file": 59,"line": 1393,"col": 19,"name": "epoll_fd"},{"file": 59,"line": 1393,"col": 34,"name": "events"},{"file": 59,"line": 1393,"col": 58,"name": "maxevents"},{"file": 59,"line": 1393,"col": 74,"name": "timeout"},{"file": 59,"line": 1393,"col": 88,"name": "sigmask"},{"file": 59,"line": 1405,"col": 15,"name": "count"},{"file": 59,"line": 1405,"col": 27,"name": "flags"},{"file": 59,"line": 1409,"col": 22,"name": "clockid"},{"file": 59,"line": 1409,"col": 36,"name": "flags"},{"file": 59,"line": 1418,"col": 23,"name": "fd"},{"file": 59,"line": 1418,"col": 32,"name": "curr_value"},{"file": 59,"line": 1422,"col": 23,"name": "fd"},{"file": 59,"line": 1422,"col": 32,"name": "flags"},{"file": 59,"line": 1422,"col": 44,"name": "new_value"},{"file": 59,"line": 1422,"col": 74,"name": "old_value"},{"file": 59,"line": 1426,"col": 15,"name": "flags"},{"file": 59,"line": 1430,"col": 14,"name": "hdrp"},{"file": 59,"line": 1430,"col": 40,"name": "datap"},{"file": 59,"line": 1434,"col": 14,"name": "hdrp"},{"file": 59,"line": 1434,"col": 40,"name": "datap"},{"file": 59,"line": 1438,"col": 19,"name": "ss"},{"file": 59,"line": 1438,"col": 34,"name": "old_ss"},{"file": 59,"line": 1442,"col": 13,"name": "uts"},{"file": 59,"line": 1446,"col": 22,"name": "entries"},{"file": 59,"line": 1446,"col": 36,"name": "p"},{"file": 59,"line": 1450,"col": 22,"name": "fd"},{"file": 59,"line": 1450,"col": 31,"name": "to_submit"},{"file": 59,"line": 1450,"col": 47,"name": "min_complete"},{"file": 59,"line": 1450,"col": 66,"name": "flags"},{"file": 59,"line": 1450,"col": 78,"name": "sig"},{"file": 59,"line": 1454,"col": 25,"name": "fd"},{"file": 59,"line": 1454,"col": 34,"name": "opcode"},{"file": 59,"line": 1454,"col": 59,"name": "arg"},{"file": 59,"line": 1454,"col": 80,"name": "nr_args"},{"file": 59,"line": 1458,"col": 20,"name": "name"},{"file": 59,"line": 1458,"col": 41,"name": "flags"},{"file": 59,"line": 1462,"col": 17,"name": "who"},{"file": 59,"line": 1462,"col": 27,"name": "usage"},{"file": 59,"line": 1466,"col": 17,"name": "fd"},{"file": 59,"line": 1466,"col": 27,"name": "termios_p"},{"file": 59,"line": 1470,"col": 17,"name": "fd"},{"file": 59,"line": 1470,"col": 27,"name": "optional_action"},{"file": 59,"line": 1470,"col": 50,"name": "termios_p"},{"file": 59,"line": 1474,"col": 13,"name": "fd"},{"file": 59,"line": 1474,"col": 23,"name": "request"},{"file": 59,"line": 1474,"col": 37,"name": "arg"},{"file": 59,"line": 1478,"col": 16,"name": "fd"},{"file": 59,"line": 1478,"col": 26,"name": "mask"},{"file": 59,"line": 1478,"col": 49,"name": "flags"},{"file": 59,"line": 1482,"col": 23,"name": "fd_in"},{"file": 59,"line": 1482,"col": 36,"name": "off_in"},{"file": 59,"line": 1482,"col": 51,"name": "fd_out"},{"file": 59,"line": 1482,"col": 65,"name": "off_out"},{"file": 59,"line": 1482,"col": 81,"name": "len"},{"file": 59,"line": 1482,"col": 93,"name": "flags"},{"file": 59,"line": 1494,"col": 11,"name": "cmd"},{"file": 59,"line": 1494,"col": 25,"name": "attr"},{"file": 59,"line": 1494,"col": 42,"name": "size"},{"file": 59,"line": 1502,"col": 14,"name": "fd"},{"file": 59,"line": 1506,"col": 13,"name": "fd"},{"file": 59,"line": 1510,"col": 17,"name": "fd"},{"file": 59,"line": 1514,"col": 13,"name": "option"},{"file": 59,"line": 1514,"col": 26,"name": "arg2"},{"file": 59,"line": 1514,"col": 39,"name": "arg3"},{"file": 59,"line": 1514,"col": 52,"name": "arg4"},{"file": 59,"line": 1514,"col": 65,"name": "arg5"},{"file": 59,"line": 1518,"col": 17,"name": "resource"},{"file": 59,"line": 1518,"col": 44,"name": "rlim"},{"file": 59,"line": 1538,"col": 15,"name": "address"},{"file": 59,"line": 1538,"col": 31,"name": "len"},{"file": 59,"line": 1538,"col": 43,"name": "advice"},{"file": 59,"line": 1542,"col": 18,"name": "pid"},{"file": 59,"line": 1542,"col": 30,"name": "flags"},{"file": 59,"line": 1546,"col": 19,"name": "pidfd"},{"file": 59,"line": 1546,"col": 32,"name": "targetfd"},{"file": 59,"line": 1546,"col": 48,"name": "flags"},{"file": 59,"line": 1555,"col": 25,"name": "pidfd"},{"file": 59,"line": 1555,"col": 38,"name": "sig"},{"file": 59,"line": 1555,"col": 48,"name": "info"},{"file": 59,"line": 1555,"col": 67,"name": "flags"},{"file": 59,"line": 1565,"col": 24,"name": "pid"},{"file": 59,"line": 1565,"col": 36,"name": "local"},{"file": 59,"line": 1565,"col": 59,"name": "local_count"},{"file": 59,"line": 1565,"col": 79,"name": "remote"},{"file": 59,"line": 1565,"col": 103,"name": "remote_count"},{"file": 59,"line": 1565,"col": 124,"name": "flags"},{"file": 59,"line": 1577,"col": 25,"name": "pid"},{"file": 59,"line": 1577,"col": 37,"name": "local"},{"file": 59,"line": 1577,"col": 60,"name": "local_count"},{"file": 59,"line": 1577,"col": 80,"name": "remote"},{"file": 59,"line": 1577,"col": 104,"name": "remote_count"},{"file": 59,"line": 1577,"col": 125,"name": "flags"},{"file": 59,"line": 1589,"col": 15,"name": "fd"},{"file": 59,"line": 1589,"col": 25,"name": "offset"},{"file": 59,"line": 1589,"col": 38,"name": "len"},{"file": 59,"line": 1589,"col": 48,"name": "advice"},{"file": 59,"line": 1649,"col": 4,"name": "attr"},{"file": 59,"line": 1650,"col": 4,"name": "pid"},{"file": 59,"line": 1651,"col": 4,"name": "cpu"},{"file": 59,"line": 1652,"col": 4,"name": "group_fd"},{"file": 59,"line": 1653,"col": 4,"name": "flags"},{"file": 59,"line": 3305,"col": 17,"name": "set"},{"file": 70,"line": 993,"col": 25,"name": "sqe"},{"file": 70,"line": 1011,"col": 27,"name": "sqe"},{"file": 70,"line": 1011,"col": 47,"name": "fd"},{"file": 70,"line": 1011,"col": 60,"name": "flags"},{"file": 70,"line": 1030,"col": 4,"name": "op"},{"file": 70,"line": 1031,"col": 4,"name": "sqe"},{"file": 70,"line": 1032,"col": 4,"name": "fd"},{"file": 70,"line": 1033,"col": 4,"name": "addr"},{"file": 70,"line": 1034,"col": 4,"name": "len"},{"file": 70,"line": 1035,"col": 4,"name": "offset"},{"file": 70,"line": 1054,"col": 26,"name": "sqe"},{"file": 70,"line": 1054,"col": 46,"name": "fd"},{"file": 70,"line": 1054,"col": 59,"name": "buffer"},{"file": 70,"line": 1054,"col": 73,"name": "offset"},{"file": 70,"line": 1058,"col": 27,"name": "sqe"},{"file": 70,"line": 1058,"col": 47,"name": "fd"},{"file": 70,"line": 1058,"col": 60,"name": "buffer"},{"file": 70,"line": 1058,"col": 80,"name": "offset"},{"file": 70,"line": 1063,"col": 4,"name": "sqe"},{"file": 70,"line": 1064,"col": 4,"name": "fd"},{"file": 70,"line": 1065,"col": 4,"name": "iovecs"},{"file": 70,"line": 1066,"col": 4,"name": "offset"},{"file": 70,"line": 1072,"col": 4,"name": "sqe"},{"file": 70,"line": 1073,"col": 4,"name": "fd"},{"file": 70,"line": 1074,"col": 4,"name": "iovecs"},{"file": 70,"line": 1075,"col": 4,"name": "offset"},{"file": 70,"line": 1080,"col": 32,"name": "sqe"},{"file": 70,"line": 1080,"col": 52,"name": "fd"},{"file": 70,"line": 1080,"col": 65,"name": "buffer"},{"file": 70,"line": 1080,"col": 84,"name": "offset"},{"file": 70,"line": 1080,"col": 97,"name": "buffer_index"},{"file": 70,"line": 1085,"col": 33,"name": "sqe"},{"file": 70,"line": 1085,"col": 53,"name": "fd"},{"file": 70,"line": 1085,"col": 66,"name": "buffer"},{"file": 70,"line": 1085,"col": 85,"name": "offset"},{"file": 70,"line": 1085,"col": 98,"name": "buffer_index"},{"file": 70,"line": 1096,"col": 40,"name": "poll_mask"},{"file": 70,"line": 1101,"col": 4,"name": "sqe"},{"file": 70,"line": 1102,"col": 4,"name": "fd"},{"file": 70,"line": 1103,"col": 4,"name": "addr"},{"file": 70,"line": 1104,"col": 4,"name": "addrlen"},{"file": 70,"line": 1105,"col": 4,"name": "flags"},{"file": 70,"line": 1114,"col": 4,"name": "sqe"},{"file": 70,"line": 1115,"col": 4,"name": "fd"},{"file": 70,"line": 1116,"col": 4,"name": "addr"},{"file": 70,"line": 1117,"col": 4,"name": "addrlen"},{"file": 70,"line": 1124,"col": 4,"name": "sqe"},{"file": 70,"line": 1125,"col": 4,"name": "epfd"},{"file": 70,"line": 1126,"col": 4,"name": "fd"},{"file": 70,"line": 1127,"col": 4,"name": "op"},{"file": 70,"line": 1128,"col": 4,"name": "ev"},{"file": 70,"line": 1133,"col": 26,"name": "sqe"},{"file": 70,"line": 1133,"col": 46,"name": "fd"},{"file": 70,"line": 1133,"col": 59,"name": "buffer"},{"file": 70,"line": 1133,"col": 73,"name": "flags"},{"file": 70,"line": 1138,"col": 26,"name": "sqe"},{"file": 70,"line": 1138,"col": 46,"name": "fd"},{"file": 70,"line": 1138,"col": 59,"name": "buffer"},{"file": 70,"line": 1138,"col": 79,"name": "flags"},{"file": 70,"line": 1144,"col": 4,"name": "sqe"},{"file": 70,"line": 1145,"col": 4,"name": "fd"},{"file": 70,"line": 1146,"col": 4,"name": "path"},{"file": 70,"line": 1147,"col": 4,"name": "flags"},{"file": 70,"line": 1148,"col": 4,"name": "mode"},{"file": 70,"line": 1154,"col": 27,"name": "sqe"},{"file": 70,"line": 1154,"col": 47,"name": "fd"},{"file": 70,"line": 1173,"col": 4,"name": "sqe"},{"file": 70,"line": 1174,"col": 4,"name": "ts"},{"file": 70,"line": 1175,"col": 4,"name": "count"},{"file": 70,"line": 1176,"col": 4,"name": "flags"},{"file": 70,"line": 1182,"col": 36,"name": "sqe"},{"file": 70,"line": 1182,"col": 56,"name": "timeout_user_data"},{"file": 70,"line": 1182,"col": 80,"name": "flags"},{"file": 70,"line": 1201,"col": 4,"name": "sqe"},{"file": 70,"line": 1202,"col": 4,"name": "ts"},{"file": 70,"line": 1203,"col": 4,"name": "flags"},{"file": 70,"line": 1210,"col": 4,"name": "sqe"},{"file": 70,"line": 1211,"col": 4,"name": "fd"},{"file": 70,"line": 1212,"col": 4,"name": "poll_mask"},{"file": 70,"line": 1219,"col": 4,"name": "sqe"},{"file": 70,"line": 1220,"col": 4,"name": "target_user_data"},{"file": 70,"line": 1226,"col": 4,"name": "sqe"},{"file": 70,"line": 1227,"col": 4,"name": "old_user_data"},{"file": 70,"line": 1228,"col": 4,"name": "new_user_data"},{"file": 70,"line": 1229,"col": 4,"name": "poll_mask"},{"file": 70,"line": 1230,"col": 4,"name": "flags"},{"file": 70,"line": 1237,"col": 4,"name": "sqe"},{"file": 70,"line": 1238,"col": 4,"name": "fd"},{"file": 70,"line": 1239,"col": 4,"name": "mode"},{"file": 70,"line": 1240,"col": 4,"name": "offset"},{"file": 70,"line": 1241,"col": 4,"name": "len"},{"file": 70,"line": 1261,"col": 4,"name": "sqe"},{"file": 70,"line": 1262,"col": 4,"name": "fd"},{"file": 70,"line": 1263,"col": 4,"name": "path"},{"file": 70,"line": 1264,"col": 4,"name": "flags"},{"file": 70,"line": 1265,"col": 4,"name": "mask"},{"file": 70,"line": 1266,"col": 4,"name": "buf"},{"file": 70,"line": 1273,"col": 4,"name": "sqe"},{"file": 70,"line": 1274,"col": 4,"name": "cancel_user_data"},{"file": 70,"line": 1275,"col": 4,"name": "flags"},{"file": 59,"line": 160,"col": 18,"name": "val"},{"file": 59,"line": 167,"col": 18,"name": "val"},{"file": 59,"line": 174,"col": 16,"name": "val"},{"file": 59,"line": 867,"col": 27,"name": "clk"},{"file": 59,"line": 867,"col": 37,"name": "ts"},{"file": 59,"line": 4405,"col": 17,"name": "x","comptime": true},{"file": 17,"line": 115,"col": 16,"name": "self"},{"file": 17,"line": 129,"col": 30,"name": "self"},{"file": 17,"line": 139,"col": 29,"name": "self"},{"file": 17,"line": 148,"col": 26,"name": "self"},{"file": 17,"line": 148,"col": 39,"name": "thread_count"},{"file": 17,"line": 197,"col": 18,"name": "self"},{"file": 17,"line": 468,"col": 22,"name": "self"},{"file": 17,"line": 468,"col": 35,"name": "fd"},{"file": 17,"line": 468,"col": 44,"name": "resume_node"},{"file": 17,"line": 468,"col": 70,"name": "flags"},{"file": 17,"line": 480,"col": 22,"name": "self"},{"file": 17,"line": 480,"col": 35,"name": "fd"},{"file": 17,"line": 480,"col": 44,"name": "op"},{"file": 17,"line": 480,"col": 53,"name": "flags"},{"file": 17,"line": 480,"col": 65,"name": "resume_node"},{"file": 17,"line": 489,"col": 25,"name": "self"},{"file": 17,"line": 489,"col": 38,"name": "fd"},{"file": 17,"line": 494,"col": 23,"name": "self"},{"file": 17,"line": 494,"col": 36,"name": "fd"},{"file": 17,"line": 494,"col": 45,"name": "flags"},{"file": 17,"line": 546,"col": 31,"name": "self"},{"file": 17,"line": 546,"col": 44,"name": "fd"},{"file": 17,"line": 558,"col": 31,"name": "self"},{"file": 17,"line": 558,"col": 44,"name": "fd"},{"file": 17,"line": 570,"col": 41,"name": "self"},{"file": 17,"line": 570,"col": 54,"name": "fd"},{"file": 17,"line": 583,"col": 22,"name": "self"},{"file": 17,"line": 583,"col": 35,"name": "ident"},{"file": 17,"line": 583,"col": 49,"name": "filter"},{"file": 17,"line": 583,"col": 62,"name": "flags"},{"file": 17,"line": 606,"col": 21,"name": "self"},{"file": 17,"line": 606,"col": 34,"name": "resume_node"},{"file": 17,"line": 606,"col": 66,"name": "ident"},{"file": 17,"line": 606,"col": 80,"name": "filter"},{"file": 17,"line": 606,"col": 93,"name": "flags"},{"file": 17,"line": 621,"col": 24,"name": "self"},{"file": 17,"line": 621,"col": 37,"name": "ident"},{"file": 17,"line": 621,"col": 51,"name": "filter"},{"file": 17,"line": 686,"col": 22,"name": "self"},{"file": 17,"line": 686,"col": 35,"name": "node"},{"file": 17,"line": 692,"col": 28,"name": "self"},{"file": 17,"line": 692,"col": 41,"name": "node"},{"file": 17,"line": 698,"col": 15,"name": "self"},{"file": 17,"line": 729,"col": 23,"name": "self"},{"file": 17,"line": 729,"col": 36,"name": "alloc"},{"file": 17,"line": 729,"col": 59,"name": "func","comptime": true},{"file": 17,"line": 729,"col": 83,"name": "args"},{"file": 17,"line": 757,"col": 17,"name": "self"},{"file": 17,"line": 779,"col": 25,"name": "self"},{"file": 17,"line": 783,"col": 26,"name": "self"},{"file": 17,"line": 826,"col": 17,"name": "self"},{"file": 17,"line": 826,"col": 30,"name": "nanoseconds"},{"file": 17,"line": 951,"col": 8,"name": "self"},{"file": 17,"line": 954,"col": 8,"docs": " This argument is a socket that has been created with `socket`, bound to a local address with `bind`, and is listening for connections after a `listen`.","name": "sockfd"},{"file": 17,"line": 959,"col": 8,"docs": " This argument is a pointer to a sockaddr structure.  This structure is filled in with  the address  of  the  peer  socket, as known to the communications layer.  The exact format of the address returned addr is determined by the socket's address  family  (see  `socket`  and  the respective  protocol  man  pages).","name": "addr"},{"file": 17,"line": 966,"col": 8,"docs": " This argument is a value-result argument: the caller must initialize it to contain  the size (in bytes) of the structure pointed to by addr; on return it will contain the actual size of the peer address. The returned address is truncated if the buffer provided is too small; in this  case,  `addr_size` will return a value greater than was supplied to the call.","name": "addr_size"},{"file": 17,"line": 970,"col": 8,"docs": " The following values can be bitwise ORed in flags to obtain different behavior: * `SOCK.CLOEXEC`  - Set the close-on-exec (`FD_CLOEXEC`) flag on the new file descriptor.   See  the   description  of the `O.CLOEXEC` flag in `open` for reasons why this may be useful.","name": "flags"},{"file": 17,"line": 983,"col": 19,"name": "self"},{"file": 17,"line": 983,"col": 32,"name": "sockfd"},{"file": 17,"line": 983,"col": 53,"name": "sock_addr"},{"file": 17,"line": 983,"col": 84,"name": "len"},{"file": 17,"line": 994,"col": 17,"name": "self"},{"file": 17,"line": 994,"col": 30,"name": "file_path"},{"file": 17,"line": 994,"col": 56,"name": "flags"},{"file": 17,"line": 994,"col": 68,"name": "mode"},{"file": 17,"line": 1015,"col": 19,"name": "self"},{"file": 17,"line": 1015,"col": 32,"name": "fd"},{"file": 17,"line": 1015,"col": 45,"name": "file_path"},{"file": 17,"line": 1015,"col": 71,"name": "flags"},{"file": 17,"line": 1015,"col": 83,"name": "mode"},{"file": 17,"line": 1037,"col": 17,"name": "self"},{"file": 17,"line": 1037,"col": 30,"name": "fd"},{"file": 17,"line": 1051,"col": 16,"name": "self"},{"file": 17,"line": 1051,"col": 29,"name": "fd"},{"file": 17,"line": 1051,"col": 42,"name": "buf"},{"file": 17,"line": 1051,"col": 53,"name": "simulate_evented"},{"file": 17,"line": 1084,"col": 17,"name": "self"},{"file": 17,"line": 1084,"col": 30,"name": "fd"},{"file": 17,"line": 1084,"col": 43,"name": "iov"},{"file": 17,"line": 1084,"col": 66,"name": "simulate_evented"},{"file": 17,"line": 1117,"col": 17,"name": "self"},{"file": 17,"line": 1117,"col": 30,"name": "fd"},{"file": 17,"line": 1117,"col": 43,"name": "buf"},{"file": 17,"line": 1117,"col": 54,"name": "offset"},{"file": 17,"line": 1117,"col": 67,"name": "simulate_evented"},{"file": 17,"line": 1151,"col": 18,"name": "self"},{"file": 17,"line": 1151,"col": 31,"name": "fd"},{"file": 17,"line": 1151,"col": 44,"name": "iov"},{"file": 17,"line": 1151,"col": 67,"name": "offset"},{"file": 17,"line": 1151,"col": 80,"name": "simulate_evented"},{"file": 17,"line": 1185,"col": 17,"name": "self"},{"file": 17,"line": 1185,"col": 30,"name": "fd"},{"file": 17,"line": 1185,"col": 43,"name": "bytes"},{"file": 17,"line": 1185,"col": 62,"name": "simulate_evented"},{"file": 17,"line": 1218,"col": 18,"name": "self"},{"file": 17,"line": 1218,"col": 31,"name": "fd"},{"file": 17,"line": 1218,"col": 44,"name": "iov"},{"file": 17,"line": 1218,"col": 73,"name": "simulate_evented"},{"file": 17,"line": 1251,"col": 18,"name": "self"},{"file": 17,"line": 1251,"col": 31,"name": "fd"},{"file": 17,"line": 1251,"col": 44,"name": "bytes"},{"file": 17,"line": 1251,"col": 63,"name": "offset"},{"file": 17,"line": 1251,"col": 76,"name": "simulate_evented"},{"file": 17,"line": 1285,"col": 19,"name": "self"},{"file": 17,"line": 1285,"col": 32,"name": "fd"},{"file": 17,"line": 1285,"col": 45,"name": "iov"},{"file": 17,"line": 1285,"col": 74,"name": "offset"},{"file": 17,"line": 1285,"col": 87,"name": "simulate_evented"},{"file": 17,"line": 1318,"col": 8,"name": "self"},{"file": 17,"line": 1320,"col": 8,"docs": " The file descriptor of the sending socket.","name": "sockfd"},{"file": 17,"line": 1322,"col": 8,"docs": " Message to send.","name": "buf"},{"file": 17,"line": 1323,"col": 8,"name": "flags"},{"file": 17,"line": 1324,"col": 8,"name": "dest_addr"},{"file": 17,"line": 1325,"col": 8,"name": "addrlen"},{"file": 17,"line": 1339,"col": 8,"name": "self"},{"file": 17,"line": 1340,"col": 8,"name": "sockfd"},{"file": 17,"line": 1341,"col": 8,"name": "buf"},{"file": 17,"line": 1342,"col": 8,"name": "flags"},{"file": 17,"line": 1343,"col": 8,"name": "src_addr"},{"file": 17,"line": 1344,"col": 8,"name": "addrlen"},{"file": 17,"line": 1360,"col": 8,"name": "self"},{"file": 17,"line": 1361,"col": 8,"name": "dirfd"},{"file": 17,"line": 1362,"col": 8,"name": "path_z"},{"file": 17,"line": 1363,"col": 8,"name": "mode"},{"file": 17,"line": 1364,"col": 8,"name": "flags"},{"file": 17,"line": 210,"col": 18,"name": "self"},{"file": 17,"line": 210,"col": 31,"name": "extra_thread_count"},{"file": 17,"line": 449,"col": 20,"name": "self"},{"file": 17,"line": 635,"col": 16,"name": "self"},{"file": 17,"line": 1386,"col": 17,"name": "self"},{"file": 17,"line": 1479,"col": 22,"name": "self"},{"file": 17,"line": 1479,"col": 35,"name": "request_node"},{"file": 17,"line": 1485,"col": 21,"name": "self"},{"file": 17,"line": 1485,"col": 34,"name": "request_node"},{"file": 17,"line": 1491,"col": 18,"name": "self"},{"file": 60,"line": 61,"col": 16,"name": "sub_path_w"},{"file": 60,"line": 61,"col": 41,"name": "options"},{"file": 60,"line": 131,"col": 18,"name": "rd"},{"file": 60,"line": 131,"col": 31,"name": "wr"},{"file": 60,"line": 131,"col": 44,"name": "sattr"},{"file": 60,"line": 139,"col": 21,"name": "attributes"},{"file": 60,"line": 139,"col": 56,"name": "name"},{"file": 60,"line": 139,"col": 74,"name": "flags"},{"file": 60,"line": 139,"col": 88,"name": "desired_access"},{"file": 60,"line": 144,"col": 22,"name": "attributes"},{"file": 60,"line": 144,"col": 57,"name": "nameW"},{"file": 60,"line": 144,"col": 80,"name": "flags"},{"file": 60,"line": 144,"col": 94,"name": "desired_access"},{"file": 60,"line": 162,"col": 4,"name": "h"},{"file": 60,"line": 163,"col": 4,"name": "ioControlCode"},{"file": 60,"line": 164,"col": 4,"name": "in"},{"file": 60,"line": 165,"col": 4,"name": "out"},{"file": 60,"line": 214,"col": 27,"name": "h"},{"file": 60,"line": 214,"col": 38,"name": "overlapped"},{"file": 60,"line": 214,"col": 63,"name": "wait"},{"file": 60,"line": 227,"col": 28,"name": "h"},{"file": 60,"line": 227,"col": 39,"name": "mask"},{"file": 60,"line": 227,"col": 52,"name": "flags"},{"file": 60,"line": 240,"col": 20,"name": "output"},{"file": 60,"line": 263,"col": 27,"name": "handle"},{"file": 60,"line": 263,"col": 43,"name": "milliseconds"},{"file": 60,"line": 267,"col": 29,"name": "handle"},{"file": 60,"line": 267,"col": 45,"name": "milliseconds"},{"file": 60,"line": 267,"col": 66,"name": "alertable"},{"file": 60,"line": 279,"col": 32,"name": "handles"},{"file": 60,"line": 279,"col": 57,"name": "waitAll"},{"file": 60,"line": 279,"col": 72,"name": "milliseconds"},{"file": 60,"line": 279,"col": 93,"name": "alertable"},{"file": 60,"line": 310,"col": 4,"name": "file_handle"},{"file": 60,"line": 311,"col": 4,"name": "existing_completion_port"},{"file": 60,"line": 312,"col": 4,"name": "completion_key"},{"file": 60,"line": 313,"col": 4,"name": "concurrent_thread_count"},{"file": 60,"line": 327,"col": 4,"name": "completion_port"},{"file": 60,"line": 328,"col": 4,"name": "bytes_transferred_count"},{"file": 60,"line": 329,"col": 4,"name": "completion_key"},{"file": 60,"line": 330,"col": 4,"name": "lpOverlapped"},{"file": 60,"line": 347,"col": 4,"name": "completion_port"},{"file": 60,"line": 348,"col": 4,"name": "bytes_transferred_count"},{"file": 60,"line": 349,"col": 4,"name": "lpCompletionKey"},{"file": 60,"line": 350,"col": 4,"name": "lpOverlapped"},{"file": 60,"line": 351,"col": 4,"name": "dwMilliseconds"},{"file": 60,"line": 383,"col": 4,"name": "completion_port"},{"file": 60,"line": 384,"col": 4,"name": "completion_port_entries"},{"file": 60,"line": 385,"col": 4,"name": "timeout_ms"},{"file": 60,"line": 386,"col": 4,"name": "alertable"},{"file": 60,"line": 412,"col": 19,"name": "hObject"},{"file": 60,"line": 416,"col": 17,"name": "hFindFile"},{"file": 60,"line": 428,"col": 16,"name": "in_hFile"},{"file": 60,"line": 428,"col": 34,"name": "buffer"},{"file": 60,"line": 428,"col": 48,"name": "offset"},{"file": 60,"line": 428,"col": 62,"name": "io_mode"},{"file": 60,"line": 512,"col": 4,"name": "handle"},{"file": 60,"line": 513,"col": 4,"name": "bytes"},{"file": 60,"line": 514,"col": 4,"name": "offset"},{"file": 60,"line": 515,"col": 4,"name": "io_mode"},{"file": 60,"line": 606,"col": 27,"name": "path_name"},{"file": 60,"line": 638,"col": 27,"name": "buffer"},{"file": 60,"line": 676,"col": 4,"name": "dir"},{"file": 60,"line": 677,"col": 4,"name": "sym_link_path"},{"file": 60,"line": 678,"col": 4,"name": "target_path"},{"file": 60,"line": 679,"col": 4,"name": "is_directory"},{"file": 60,"line": 737,"col": 16,"name": "dir"},{"file": 60,"line": 737,"col": 30,"name": "sub_path_w"},{"file": 60,"line": 737,"col": 55,"name": "out_buffer"},{"file": 60,"line": 847,"col": 18,"name": "sub_path_w"},{"file": 60,"line": 847,"col": 43,"name": "options"},{"file": 60,"line": 908,"col": 18,"name": "old_path"},{"file": 60,"line": 908,"col": 40,"name": "new_path"},{"file": 60,"line": 908,"col": 62,"name": "flags"},{"file": 60,"line": 914,"col": 19,"name": "old_path"},{"file": 60,"line": 914,"col": 45,"name": "new_path"},{"file": 60,"line": 914,"col": 71,"name": "flags"},{"file": 60,"line": 929,"col": 20,"name": "handle_id"},{"file": 60,"line": 942,"col": 30,"name": "handle"},{"file": 60,"line": 942,"col": 46,"name": "offset"},{"file": 60,"line": 957,"col": 32,"name": "handle"},{"file": 60,"line": 957,"col": 48,"name": "offset"},{"file": 60,"line": 968,"col": 28,"name": "handle"},{"file": 60,"line": 968,"col": 44,"name": "offset"},{"file": 60,"line": 979,"col": 36,"name": "handle"},{"file": 60,"line": 994,"col": 4,"name": "handle"},{"file": 60,"line": 995,"col": 4,"name": "out_buffer"},{"file": 60,"line": 1066,"col": 4,"name": "hFile"},{"file": 60,"line": 1067,"col": 4,"name": "fmt"},{"file": 60,"line": 1068,"col": 4,"name": "out_buffer"},{"file": 60,"line": 1204,"col": 4,"name": "handle"},{"file": 60,"line": 1205,"col": 4,"name": "info_class"},{"file": 60,"line": 1206,"col": 4,"name": "out_buffer"},{"file": 60,"line": 1220,"col": 21,"name": "hFile"},{"file": 60,"line": 1236,"col": 25,"name": "filename"},{"file": 60,"line": 1241,"col": 26,"name": "lpFileName"},{"file": 60,"line": 1254,"col": 18,"name": "majorVersion"},{"file": 60,"line": 1254,"col": 36,"name": "minorVersion"},{"file": 60,"line": 1306,"col": 4,"name": "af"},{"file": 60,"line": 1307,"col": 4,"name": "socket_type"},{"file": 60,"line": 1308,"col": 4,"name": "protocol"},{"file": 60,"line": 1309,"col": 4,"name": "protocolInfo"},{"file": 60,"line": 1310,"col": 4,"name": "g"},{"file": 60,"line": 1311,"col": 4,"name": "dwFlags"},{"file": 60,"line": 1349,"col": 12,"name": "s"},{"file": 60,"line": 1349,"col": 30,"name": "name"},{"file": 60,"line": 1349,"col": 60,"name": "namelen"},{"file": 60,"line": 1353,"col": 14,"name": "s"},{"file": 60,"line": 1353,"col": 32,"name": "backlog"},{"file": 60,"line": 1357,"col": 19,"name": "s"},{"file": 60,"line": 1367,"col": 14,"name": "s"},{"file": 60,"line": 1367,"col": 32,"name": "name"},{"file": 60,"line": 1367,"col": 57,"name": "namelen"},{"file": 60,"line": 1372,"col": 19,"name": "s"},{"file": 60,"line": 1372,"col": 37,"name": "name"},{"file": 60,"line": 1372,"col": 61,"name": "namelen"},{"file": 60,"line": 1376,"col": 19,"name": "s"},{"file": 60,"line": 1376,"col": 37,"name": "name"},{"file": 60,"line": 1376,"col": 61,"name": "namelen"},{"file": 60,"line": 1381,"col": 4,"name": "s"},{"file": 60,"line": 1382,"col": 4,"name": "msg"},{"file": 60,"line": 1383,"col": 4,"name": "flags"},{"file": 60,"line": 1393,"col": 14,"name": "s"},{"file": 60,"line": 1393,"col": 32,"name": "buf"},{"file": 60,"line": 1393,"col": 50,"name": "len"},{"file": 60,"line": 1393,"col": 62,"name": "flags"},{"file": 60,"line": 1393,"col": 74,"name": "to"},{"file": 60,"line": 1393,"col": 103,"name": "to_len"},{"file": 60,"line": 1403,"col": 16,"name": "s"},{"file": 60,"line": 1403,"col": 34,"name": "buf"},{"file": 60,"line": 1403,"col": 46,"name": "len"},{"file": 60,"line": 1403,"col": 58,"name": "flags"},{"file": 60,"line": 1403,"col": 70,"name": "from"},{"file": 60,"line": 1403,"col": 95,"name": "from_len"},{"file": 60,"line": 1414,"col": 12,"name": "fds"},{"file": 60,"line": 1414,"col": 35,"name": "n"},{"file": 60,"line": 1414,"col": 47,"name": "timeout"},{"file": 60,"line": 1419,"col": 4,"name": "s"},{"file": 60,"line": 1420,"col": 4,"name": "dwIoControlCode"},{"file": 60,"line": 1421,"col": 4,"name": "inBuffer"},{"file": 60,"line": 1422,"col": 4,"name": "outBuffer"},{"file": 60,"line": 1423,"col": 4,"name": "overlapped"},{"file": 60,"line": 1424,"col": 4,"name": "completionRoutine"},{"file": 60,"line": 1449,"col": 26,"name": "hModule"},{"file": 60,"line": 1449,"col": 45,"name": "buf_ptr"},{"file": 60,"line": 1449,"col": 62,"name": "buf_len"},{"file": 60,"line": 1461,"col": 24,"name": "hProcess"},{"file": 60,"line": 1461,"col": 42,"name": "uExitCode"},{"file": 60,"line": 1471,"col": 20,"name": "addr"},{"file": 60,"line": 1471,"col": 35,"name": "size"},{"file": 60,"line": 1471,"col": 48,"name": "alloc_type"},{"file": 60,"line": 1471,"col": 67,"name": "flProtect"},{"file": 60,"line": 1479,"col": 19,"name": "lpAddress"},{"file": 60,"line": 1479,"col": 39,"name": "dwSize"},{"file": 60,"line": 1479,"col": 54,"name": "dwFreeType"},{"file": 60,"line": 1485,"col": 31,"name": "hConsoleOutput"},{"file": 60,"line": 1485,"col": 55,"name": "wAttributes"},{"file": 60,"line": 1493,"col": 29,"name": "handler_routine"},{"file": 60,"line": 1493,"col": 64,"name": "add"},{"file": 60,"line": 1506,"col": 42,"name": "handle"},{"file": 60,"line": 1506,"col": 58,"name": "flags"},{"file": 60,"line": 1521,"col": 31,"name": "penv"},{"file": 60,"line": 1530,"col": 31,"name": "lpName"},{"file": 60,"line": 1530,"col": 47,"name": "lpBuffer"},{"file": 60,"line": 1530,"col": 65,"name": "nSize"},{"file": 60,"line": 1549,"col": 4,"name": "lpApplicationName"},{"file": 60,"line": 1550,"col": 4,"name": "lpCommandLine"},{"file": 60,"line": 1551,"col": 4,"name": "lpProcessAttributes"},{"file": 60,"line": 1552,"col": 4,"name": "lpThreadAttributes"},{"file": 60,"line": 1553,"col": 4,"name": "bInheritHandles"},{"file": 60,"line": 1554,"col": 4,"name": "dwCreationFlags"},{"file": 60,"line": 1555,"col": 4,"name": "lpEnvironment"},{"file": 60,"line": 1556,"col": 4,"name": "lpCurrentDirectory"},{"file": 60,"line": 1557,"col": 4,"name": "lpStartupInfo"},{"file": 60,"line": 1558,"col": 4,"name": "lpProcessInformation"},{"file": 60,"line": 1588,"col": 20,"name": "lpLibFileName"},{"file": 60,"line": 1599,"col": 19,"name": "hModule"},{"file": 60,"line": 1621,"col": 27,"name": "InitOnce"},{"file": 60,"line": 1621,"col": 49,"name": "InitFn"},{"file": 60,"line": 1621,"col": 71,"name": "Parameter"},{"file": 60,"line": 1621,"col": 92,"name": "Context"},{"file": 60,"line": 1625,"col": 16,"name": "hHeap"},{"file": 60,"line": 1625,"col": 31,"name": "dwFlags"},{"file": 60,"line": 1625,"col": 47,"name": "lpMem"},{"file": 60,"line": 1629,"col": 19,"name": "hHeap"},{"file": 60,"line": 1633,"col": 17,"name": "hMem"},{"file": 60,"line": 1640,"col": 4,"name": "hFile"},{"file": 60,"line": 1655,"col": 4,"name": "hFile"},{"file": 60,"line": 1656,"col": 4,"name": "lpCreationTime"},{"file": 60,"line": 1657,"col": 4,"name": "lpLastAccessTime"},{"file": 60,"line": 1658,"col": 4,"name": "lpLastWriteTime"},{"file": 60,"line": 1674,"col": 4,"name": "FileHandle"},{"file": 60,"line": 1675,"col": 4,"name": "Event"},{"file": 60,"line": 1676,"col": 4,"name": "ApcRoutine"},{"file": 60,"line": 1677,"col": 4,"name": "ApcContext"},{"file": 60,"line": 1678,"col": 4,"name": "IoStatusBlock"},{"file": 60,"line": 1679,"col": 4,"name": "ByteOffset"},{"file": 60,"line": 1680,"col": 4,"name": "Length"},{"file": 60,"line": 1681,"col": 4,"name": "Key"},{"file": 60,"line": 1682,"col": 4,"name": "FailImmediately"},{"file": 60,"line": 1683,"col": 4,"name": "ExclusiveLock"},{"file": 60,"line": 1711,"col": 4,"name": "FileHandle"},{"file": 60,"line": 1712,"col": 4,"name": "IoStatusBlock"},{"file": 60,"line": 1713,"col": 4,"name": "ByteOffset"},{"file": 60,"line": 1714,"col": 4,"name": "Length"},{"file": 60,"line": 1715,"col": 4,"name": "Key"},{"file": 60,"line": 1753,"col": 19,"name": "hns"},{"file": 60,"line": 1758,"col": 17,"name": "ns"},{"file": 60,"line": 1763,"col": 29,"name": "ft"},{"file": 60,"line": 1769,"col": 29,"name": "ns"},{"file": 60,"line": 1794,"col": 30,"name": "T","comptime": true},{"file": 60,"line": 1794,"col": 48,"name": "path"},{"file": 60,"line": 1847,"col": 21,"name": "T","comptime": true},{"file": 60,"line": 1847,"col": 39,"name": "path"},{"file": 60,"line": 1863,"col": 27,"name": "s"},{"file": 60,"line": 1869,"col": 28,"name": "s"},{"file": 60,"line": 1917,"col": 24,"name": "s"},{"file": 60,"line": 1949,"col": 36,"name": "T","comptime": true},{"file": 60,"line": 1949,"col": 54,"name": "sock"},{"file": 60,"line": 1949,"col": 75,"name": "guid"},{"file": 60,"line": 1982,"col": 23,"name": "err"},{"file": 60,"line": 2003,"col": 26,"name": "err"},{"file": 60,"line": 2009,"col": 24,"name": "status"},{"file": 60,"line": 2017,"col": 28,"name": "hThread"},{"file": 60,"line": 2017,"col": 45,"name": "lpThreadDescription"},{"file": 60,"line": 2024,"col": 28,"name": "hThread"},{"file": 60,"line": 2024,"col": 45,"name": "ppszThreadDescription"},{"file": 60,"line": 2208,"col": 16,"name": "deviceType"},{"file": 60,"line": 2208,"col": 33,"name": "function"},{"file": 60,"line": 2208,"col": 48,"name": "method"},{"file": 60,"line": 2208,"col": 70,"name": "access"},{"file": 60,"line": 821,"col": 21,"name": "path"},{"file": 60,"line": 821,"col": 40,"name": "is_relative"},{"file": 60,"line": 821,"col": 59,"name": "out_buffer"},{"file": 60,"line": 1906,"col": 20,"name": "path"},{"file": 60,"line": 1906,"col": 42,"name": "out"},{"file": 60,"line": 1944,"col": 21,"name": "p"},{"file": 60,"line": 1944,"col": 34,"name": "s"},{"file": 63,"line": 35,"col": 20,"name": "writer"},{"file": 63,"line": 35,"col": 37,"name": "uint_value"},{"file": 63,"line": 111,"col": 20,"name": "writer"},{"file": 63,"line": 111,"col": 37,"name": "int_value"},{"file": 63,"line": 139,"col": 26,"name": "l","comptime": true},{"file": 63,"line": 139,"col": 45,"name": "ptr"},{"file": 63,"line": 139,"col": 58,"name": "int"},{"file": 63,"line": 177,"col": 28,"name": "T","comptime": true},{"file": 63,"line": 177,"col": 46,"name": "encoded"},{"file": 63,"line": 182,"col": 28,"name": "T","comptime": true},{"file": 63,"line": 182,"col": 46,"name": "encoded"},{"file": 63,"line": 187,"col": 21,"name": "T","comptime": true},{"file": 63,"line": 187,"col": 39,"name": "encoded"},{"file": 63,"line": 193,"col": 21,"name": "T","comptime": true},{"file": 63,"line": 193,"col": 39,"name": "encoded"},{"file": 63,"line": 199,"col": 25,"name": "T","comptime": true},{"file": 63,"line": 199,"col": 43,"name": "N","comptime": true},{"file": 63,"line": 199,"col": 62,"name": "encoded"},{"file": 63,"line": 207,"col": 25,"name": "T","comptime": true},{"file": 63,"line": 207,"col": 43,"name": "N","comptime": true},{"file": 63,"line": 207,"col": 62,"name": "encoded"},{"file": 63,"line": 302,"col": 21,"name": "value"},{"file": 64,"line": 40,"col": 12,"name": "self"},{"file": 64,"line": 44,"col": 17,"name": "self"},{"file": 64,"line": 44,"col": 40,"name": "timeout"},{"file": 64,"line": 125,"col": 11,"name": "self"},{"file": 64,"line": 48,"col": 11,"name": "self"},{"file": 64,"line": 48,"col": 34,"name": "timeout"},{"file": 65,"line": 31,"col": 12,"name": "ev"},{"file": 65,"line": 37,"col": 14,"name": "ev"},{"file": 65,"line": 45,"col": 11,"name": "ev"},{"file": 65,"line": 52,"col": 13,"name": "ev"},{"file": 65,"line": 60,"col": 12,"name": "ev"},{"file": 65,"line": 73,"col": 17,"name": "ev"},{"file": 65,"line": 73,"col": 34,"name": "timeout_ns"},{"file": 33,"line": 843,"col": 13,"name": "config"},{"file": 33,"line": 843,"col": 34,"name": "f","comptime": true},{"file": 33,"line": 843,"col": 55,"name": "args"},{"file": 33,"line": 961,"col": 17,"name": "self"},{"file": 33,"line": 965,"col": 14,"name": "self"},{"file": 33,"line": 973,"col": 12,"name": "self"},{"file": 35,"line": 109,"col": 16,"name": "allocator"},{"file": 35,"line": 109,"col": 43,"name": "in_file"},{"file": 35,"line": 121,"col": 22,"name": "self"},{"file": 35,"line": 213,"col": 22,"name": "self"},{"file": 35,"line": 213,"col": 35,"name": "buffer"},{"file": 35,"line": 274,"col": 24,"name": "self"},{"file": 35,"line": 316,"col": 22,"name": "self"},{"file": 35,"line": 316,"col": 35,"name": "name","comptime": true},{"file": 35,"line": 326,"col": 26,"name": "self"},{"file": 35,"line": 326,"col": 39,"name": "name","comptime": true},{"file": 35,"line": 326,"col": 66,"name": "allocator"},{"file": 35,"line": 159,"col": 27,"name": "self"},{"file": 35,"line": 159,"col": 40,"name": "offset"},{"file": 35,"line": 159,"col": 55,"name": "buf"},{"file": 35,"line": 178,"col": 26,"name": "self"},{"file": 36,"line": 955,"col": 15,"name": "self"},{"file": 36,"line": 959,"col": 23,"name": "context"},{"file": 36,"line": 959,"col": 38,"name": "lhs"},{"file": 36,"line": 959,"col": 56,"name": "rhs"},{"file": 66,"line": 107,"col": 13,"name": "allocator"},{"file": 66,"line": 107,"col": 36,"name": "paths"},{"file": 66,"line": 199,"col": 18,"name": "path"},{"file": 66,"line": 230,"col": 25,"name": "path"},{"file": 66,"line": 234,"col": 26,"name": "path_w"},{"file": 66,"line": 238,"col": 30,"name": "path"},{"file": 66,"line": 244,"col": 26,"name": "path_c"},{"file": 66,"line": 309,"col": 24,"name": "path"},{"file": 66,"line": 388,"col": 22,"name": "path"},{"file": 66,"line": 396,"col": 29,"name": "path"},{"file": 66,"line": 453,"col": 15,"name": "allocator"},{"file": 66,"line": 453,"col": 38,"name": "paths"},{"file": 66,"line": 469,"col": 22,"name": "allocator"},{"file": 66,"line": 469,"col": 45,"name": "paths"},{"file": 66,"line": 655,"col": 20,"name": "allocator"},{"file": 66,"line": 655,"col": 43,"name": "paths"},{"file": 66,"line": 816,"col": 15,"name": "path"},{"file": 66,"line": 824,"col": 22,"name": "path"},{"file": 66,"line": 858,"col": 20,"name": "path"},{"file": 66,"line": 950,"col": 16,"name": "path"},{"file": 66,"line": 958,"col": 21,"name": "path"},{"file": 66,"line": 979,"col": 23,"name": "path"},{"file": 66,"line": 1066,"col": 16,"name": "allocator"},{"file": 66,"line": 1066,"col": 39,"name": "from"},{"file": 66,"line": 1066,"col": 57,"name": "to"},{"file": 66,"line": 1074,"col": 23,"name": "allocator"},{"file": 66,"line": 1074,"col": 46,"name": "from"},{"file": 66,"line": 1074,"col": 64,"name": "to"},{"file": 66,"line": 1147,"col": 21,"name": "allocator"},{"file": 66,"line": 1147,"col": 44,"name": "from"},{"file": 66,"line": 1147,"col": 62,"name": "to"},{"file": 66,"line": 1263,"col": 17,"name": "path"},{"file": 66,"line": 112,"col": 25,"name": "paths"},{"file": 66,"line": 112,"col": 52,"name": "expected"},{"file": 66,"line": 112,"col": 74,"name": "zero"},{"file": 66,"line": 123,"col": 23,"name": "paths"},{"file": 66,"line": 123,"col": 50,"name": "expected"},{"file": 66,"line": 123,"col": 72,"name": "zero"},{"file": 66,"line": 207,"col": 25,"name": "T","comptime": true},{"file": 66,"line": 207,"col": 43,"name": "path"},{"file": 66,"line": 289,"col": 25,"name": "path"},{"file": 66,"line": 289,"col": 43,"name": "expected_result"},{"file": 66,"line": 293,"col": 23,"name": "path"},{"file": 66,"line": 293,"col": 41,"name": "expected_result"},{"file": 66,"line": 400,"col": 26,"name": "ns1"},{"file": 66,"line": 400,"col": 43,"name": "ns2"},{"file": 66,"line": 411,"col": 26,"name": "kind"},{"file": 66,"line": 411,"col": 50,"name": "p1"},{"file": 66,"line": 411,"col": 66,"name": "p2"},{"file": 66,"line": 434,"col": 14,"name": "byte"},{"file": 66,"line": 441,"col": 22,"name": "s1"},{"file": 66,"line": 441,"col": 38,"name": "s2"},{"file": 66,"line": 798,"col": 22,"name": "paths"},{"file": 66,"line": 798,"col": 49,"name": "expected"},{"file": 66,"line": 804,"col": 20,"name": "paths"},{"file": 66,"line": 804,"col": 47,"name": "expected"},{"file": 66,"line": 934,"col": 20,"name": "input"},{"file": 66,"line": 934,"col": 39,"name": "expected_output"},{"file": 66,"line": 942,"col": 22,"name": "input"},{"file": 66,"line": 942,"col": 41,"name": "expected_output"},{"file": 66,"line": 1050,"col": 16,"name": "input"},{"file": 66,"line": 1050,"col": 35,"name": "expected_output"},{"file": 66,"line": 1054,"col": 21,"name": "input"},{"file": 66,"line": 1054,"col": 40,"name": "expected_output"},{"file": 66,"line": 1058,"col": 23,"name": "input"},{"file": 66,"line": 1058,"col": 42,"name": "expected_output"},{"file": 66,"line": 1238,"col": 21,"name": "from"},{"file": 66,"line": 1238,"col": 39,"name": "to"},{"file": 66,"line": 1238,"col": 55,"name": "expected_output"},{"file": 66,"line": 1244,"col": 23,"name": "from"},{"file": 66,"line": 1244,"col": 41,"name": "to"},{"file": 66,"line": 1244,"col": 57,"name": "expected_output"},{"file": 66,"line": 1270,"col": 17,"name": "path"},{"file": 66,"line": 1270,"col": 35,"name": "expected"},{"file": 67,"line": 22,"col": 19,"name": "hasher"},{"file": 67,"line": 22,"col": 36,"name": "key"},{"file": 67,"line": 22,"col": 50,"name": "strat","comptime": true},{"file": 67,"line": 54,"col": 17,"name": "hasher"},{"file": 67,"line": 54,"col": 34,"name": "key"},{"file": 67,"line": 54,"col": 48,"name": "strat","comptime": true},{"file": 67,"line": 204,"col": 12,"name": "key"},{"file": 67,"line": 211,"col": 19,"name": "key"},{"file": 67,"line": 218,"col": 16,"name": "key"},{"file": 67,"line": 225,"col": 25,"name": "key"},{"file": 59,"line": 2965,"col": 17,"name": "m"},{"file": 59,"line": 2969,"col": 17,"name": "m"},{"file": 59,"line": 2973,"col": 17,"name": "m"},{"file": 59,"line": 2977,"col": 17,"name": "m"},{"file": 59,"line": 2981,"col": 18,"name": "m"},{"file": 59,"line": 2985,"col": 17,"name": "m"},{"file": 59,"line": 2989,"col": 18,"name": "m"},{"file": 68,"line": 303,"col": 12,"name": "def_arg"},{"file": 68,"line": 303,"col": 34,"name": "vsym_arg"},{"file": 68,"line": 303,"col": 49,"name": "vername"},{"file": 68,"line": 303,"col": 70,"name": "strings"},{"file": 48,"line": 503,"col": 16,"name": "allocator"},{"file": 48,"line": 503,"col": 43,"name": "path"},{"file": 48,"line": 520,"col": 18,"name": "self"},{"file": 48,"line": 526,"col": 26,"name": "self"},{"file": 48,"line": 606,"col": 27,"name": "self"},{"file": 48,"line": 670,"col": 25,"name": "self"},{"file": 48,"line": 670,"col": 37,"name": "module"},{"file": 48,"line": 670,"col": 54,"name": "address"},{"file": 48,"line": 694,"col": 29,"name": "self"},{"file": 48,"line": 694,"col": 41,"name": "module"},{"file": 48,"line": 694,"col": 58,"name": "address"},{"file": 48,"line": 791,"col": 21,"name": "self"},{"file": 48,"line": 791,"col": 33,"name": "index"},{"file": 48,"line": 844,"col": 25,"name": "self"},{"file": 48,"line": 844,"col": 37,"name": "id"},{"file": 48,"line": 850,"col": 21,"name": "self"},{"file": 48,"line": 850,"col": 33,"name": "stream"},{"file": 48,"line": 861,"col": 12,"name": "allocator"},{"file": 48,"line": 861,"col": 39,"name": "file"},{"file": 48,"line": 1047,"col": 18,"name": "self"},{"file": 48,"line": 1047,"col": 36,"name": "len"},{"file": 48,"line": 1053,"col": 18,"name": "self"},{"file": 48,"line": 1053,"col": 36,"name": "len"},{"file": 48,"line": 1071,"col": 18,"name": "self"},{"file": 48,"line": 1005,"col": 12,"name": "block_size"},{"file": 48,"line": 1005,"col": 29,"name": "file"},{"file": 48,"line": 1005,"col": 41,"name": "blocks"},{"file": 48,"line": 1016,"col": 12,"name": "self"},{"file": 48,"line": 1016,"col": 30,"name": "buffer"},{"file": 48,"line": 1059,"col": 15,"name": "self"},{"file": 48,"line": 1063,"col": 18,"name": "self"},{"file": 51,"line": 205,"col": 16,"name": "self"},{"file": 51,"line": 211,"col": 17,"name": "self"},{"file": 51,"line": 216,"col": 15,"name": "self"},{"file": 51,"line": 235,"col": 29,"name": "self"},{"file": 51,"line": 235,"col": 42,"name": "duration"},{"file": 54,"line": 193,"col": 16,"name": "waiters"},{"file": 54,"line": 193,"col": 31,"name": "wake_count"},{"file": 12,"line": 488,"col": 31,"name": "self"},{"file": 12,"line": 488,"col": 44,"name": "ver"},{"file": 12,"line": 496,"col": 25,"name": "self"},{"file": 12,"line": 496,"col": 38,"name": "ver"},{"file": 3,"line": 143,"col": 39,"name": "self"},{"file": 3,"line": 143,"col": 52,"name": "ver"},{"file": 3,"line": 149,"col": 33,"name": "self"},{"file": 3,"line": 149,"col": 46,"name": "ver"},{"file": 17,"line": 853,"col": 16,"name": "self"},{"file": 17,"line": 868,"col": 15,"name": "self"},{"file": 33,"line": 702,"col": 23,"name": "self"},{"file": 17,"line": 905,"col": 22,"name": "self"},{"file": 17,"line": 905,"col": 38,"name": "entry"},{"file": 17,"line": 910,"col": 26,"name": "self"},{"file": 17,"line": 910,"col": 42,"name": "now"},{"file": 17,"line": 921,"col": 26,"name": "self"},{"file": 17,"line": 926,"col": 33,"name": "self"}],"files": ["/mnt/c/Users/vzwGrey/workspace/aoc2021/zig/src/main.zig","/home/vzwgrey/opt/zig/lib/std/std.zig","/mnt/c/Users/vzwGrey/workspace/aoc2021/zig/zig-cache/o/1f46ae5487298a08962d977f5b1466fd/builtin.zig","/home/vzwgrey/opt/zig/lib/std/target.zig","/home/vzwgrey/opt/zig/lib/std/io/writer.zig","/home/vzwgrey/opt/zig/lib/std/fs/file.zig","/home/vzwgrey/opt/zig/lib/std/hash_map.zig","/home/vzwgrey/opt/zig/lib/std/array_list.zig","/home/vzwgrey/opt/zig/lib/std/target/x86.zig","/home/vzwgrey/opt/zig/lib/std/io/fixed_buffer_stream.zig","/home/vzwgrey/opt/zig/lib/std/io/reader.zig","/home/vzwgrey/opt/zig/lib/std/io/seekable_stream.zig","/home/vzwgrey/opt/zig/lib/std/builtin.zig","/home/vzwgrey/opt/zig/lib/std/linked_list.zig","/home/vzwgrey/opt/zig/lib/std/atomic/queue.zig","/home/vzwgrey/opt/zig/lib/std/Thread/Mutex.zig","/home/vzwgrey/opt/zig/lib/std/atomic/Atomic.zig","/home/vzwgrey/opt/zig/lib/std/event/loop.zig","/home/vzwgrey/opt/zig/lib/std/atomic/stack.zig","/home/vzwgrey/opt/zig/lib/std/log.zig","/home/vzwgrey/opt/zig/lib/std/os/linux/x86_64.zig","/home/vzwgrey/opt/zig/lib/std/mem.zig","/mnt/c/Users/vzwGrey/workspace/aoc2021/zig/src/util.zig","/mnt/c/Users/vzwGrey/workspace/aoc2021/zig/src/day4.zig","/home/vzwgrey/opt/zig/lib/std/io/counting_writer.zig","/home/vzwgrey/opt/zig/lib/std/dwarf.zig","/mnt/c/Users/vzwGrey/workspace/aoc2021/zig/src/day1.zig","/mnt/c/Users/vzwGrey/workspace/aoc2021/zig/src/day2.zig","/mnt/c/Users/vzwGrey/workspace/aoc2021/zig/src/day3.zig","/mnt/c/Users/vzwGrey/workspace/aoc2021/zig/src/day5.zig","/mnt/c/Users/vzwGrey/workspace/aoc2021/zig/src/day6.zig","/mnt/c/Users/vzwGrey/workspace/aoc2021/zig/src/day7.zig","/mnt/c/Users/vzwGrey/workspace/aoc2021/zig/src/day8.zig","/home/vzwgrey/opt/zig/lib/std/Thread.zig","/home/vzwgrey/opt/zig/lib/std/atomic.zig","/home/vzwgrey/opt/zig/lib/std/coff.zig","/home/vzwgrey/opt/zig/lib/std/debug.zig","/home/vzwgrey/opt/zig/lib/std/elf.zig","/home/vzwgrey/opt/zig/lib/std/event.zig","/home/vzwgrey/opt/zig/lib/std/fmt.zig","/home/vzwgrey/opt/zig/lib/std/fs.zig","/home/vzwgrey/opt/zig/lib/std/hash.zig","/home/vzwgrey/opt/zig/lib/std/heap.zig","/home/vzwgrey/opt/zig/lib/std/io.zig","/home/vzwgrey/opt/zig/lib/std/macho.zig","/home/vzwgrey/opt/zig/lib/std/math.zig","/home/vzwgrey/opt/zig/lib/std/meta.zig","/home/vzwgrey/opt/zig/lib/std/os.zig","/home/vzwgrey/opt/zig/lib/std/pdb.zig","/home/vzwgrey/opt/zig/lib/std/process.zig","/home/vzwgrey/opt/zig/lib/std/sort.zig","/home/vzwgrey/opt/zig/lib/std/time.zig","/home/vzwgrey/opt/zig/lib/std/unicode.zig","/home/vzwgrey/opt/zig/lib/std/start.zig","/home/vzwgrey/opt/zig/lib/std/Thread/StaticResetEvent.zig","/home/vzwgrey/opt/zig/lib/std/mem/Allocator.zig","/home/vzwgrey/opt/zig/lib/std/heap/arena_allocator.zig","/home/vzwgrey/opt/zig/lib/std/hash/wyhash.zig","/home/vzwgrey/opt/zig/lib/std/meta/trait.zig","/home/vzwgrey/opt/zig/lib/std/os/linux.zig","/home/vzwgrey/opt/zig/lib/std/os/windows.zig","/home/vzwgrey/opt/zig/lib/std/dwarf/TAG.zig","/home/vzwgrey/opt/zig/lib/std/dwarf/AT.zig","/home/vzwgrey/opt/zig/lib/std/leb128.zig","/home/vzwgrey/opt/zig/lib/std/Thread/AutoResetEvent.zig","/home/vzwgrey/opt/zig/lib/std/Thread/ResetEvent.zig","/home/vzwgrey/opt/zig/lib/std/fs/path.zig","/home/vzwgrey/opt/zig/lib/std/hash/auto_hash.zig","/home/vzwgrey/opt/zig/lib/std/dynamic_library.zig","/home/vzwgrey/opt/zig/lib/std/os/linux/tls.zig","/home/vzwgrey/opt/zig/lib/std/os/linux/io_uring.zig","/home/vzwgrey/opt/zig/lib/std/math/sqrt.zig","/home/vzwgrey/opt/zig/lib/std/os/linux/errno/generic.zig"]};